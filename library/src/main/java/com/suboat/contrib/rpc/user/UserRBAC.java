/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 用户权限, 基于RBAC规范
 */
public class UserRBAC implements org.apache.thrift.TBase<UserRBAC, UserRBAC._Fields>, java.io.Serializable, Cloneable,
		Comparable<UserRBAC> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"UserRBAC");

	private static final org.apache.thrift.protocol.TField PERMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"perms", org.apache.thrift.protocol.TType.LIST, (short) 1);

	private static final org.apache.thrift.protocol.TField ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"roles", org.apache.thrift.protocol.TType.MAP, (short) 2);

	private static final org.apache.thrift.protocol.TField INHER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"inher", org.apache.thrift.protocol.TType.MAP, (short) 3);

	private static final org.apache.thrift.protocol.TField COMMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comments", org.apache.thrift.protocol.TType.MAP, (short) 4);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserRBACStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserRBACTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> perms; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.List<java.lang.String>> roles; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.List<java.lang.String>> inher; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, RbacComment> comments; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		PERMS((short) 1, "perms"), ROLES((short) 2, "roles"), INHER((short) 3, "inher"), COMMENTS((short) 4,
				"comments");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // PERMS
				return PERMS;
			case 2: // ROLES
				return ROLES;
			case 3: // INHER
				return INHER;
			case 4: // COMMENTS
				return COMMENTS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final _Fields optionals[] = { _Fields.COMMENTS };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.PERMS, new org.apache.thrift.meta_data.FieldMetaData("perms",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		tmpMap.put(_Fields.ROLES, new org.apache.thrift.meta_data.FieldMetaData("roles",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.FieldValueMetaData(
										org.apache.thrift.protocol.TType.STRING)))));
		tmpMap.put(_Fields.INHER, new org.apache.thrift.meta_data.FieldMetaData("inher",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.FieldValueMetaData(
										org.apache.thrift.protocol.TType.STRING)))));
		tmpMap.put(_Fields.COMMENTS, new org.apache.thrift.meta_data.FieldMetaData("comments",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
								RbacComment.class))));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserRBAC.class, metaDataMap);
	}

	public UserRBAC() {
	}

	public UserRBAC(java.util.List<java.lang.String> perms,
			java.util.Map<java.lang.String, java.util.List<java.lang.String>> roles,
			java.util.Map<java.lang.String, java.util.List<java.lang.String>> inher) {
		this();
		this.perms = perms;
		this.roles = roles;
		this.inher = inher;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public UserRBAC(UserRBAC other) {
		if (other.isSetPerms()) {
			java.util.List<java.lang.String> __this__perms = new java.util.ArrayList<java.lang.String>(other.perms);
			this.perms = __this__perms;
		}
		if (other.isSetRoles()) {
			java.util.Map<java.lang.String, java.util.List<java.lang.String>> __this__roles = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>(
					other.roles.size());
			for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.roles
					.entrySet()) {

				java.lang.String other_element_key = other_element.getKey();
				java.util.List<java.lang.String> other_element_value = other_element.getValue();

				java.lang.String __this__roles_copy_key = other_element_key;

				java.util.List<java.lang.String> __this__roles_copy_value = new java.util.ArrayList<java.lang.String>(
						other_element_value);

				__this__roles.put(__this__roles_copy_key, __this__roles_copy_value);
			}
			this.roles = __this__roles;
		}
		if (other.isSetInher()) {
			java.util.Map<java.lang.String, java.util.List<java.lang.String>> __this__inher = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>(
					other.inher.size());
			for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.inher
					.entrySet()) {

				java.lang.String other_element_key = other_element.getKey();
				java.util.List<java.lang.String> other_element_value = other_element.getValue();

				java.lang.String __this__inher_copy_key = other_element_key;

				java.util.List<java.lang.String> __this__inher_copy_value = new java.util.ArrayList<java.lang.String>(
						other_element_value);

				__this__inher.put(__this__inher_copy_key, __this__inher_copy_value);
			}
			this.inher = __this__inher;
		}
		if (other.isSetComments()) {
			java.util.Map<java.lang.String, RbacComment> __this__comments = new java.util.HashMap<java.lang.String, RbacComment>(
					other.comments.size());
			for (java.util.Map.Entry<java.lang.String, RbacComment> other_element : other.comments.entrySet()) {

				java.lang.String other_element_key = other_element.getKey();
				RbacComment other_element_value = other_element.getValue();

				java.lang.String __this__comments_copy_key = other_element_key;

				RbacComment __this__comments_copy_value = new RbacComment(other_element_value);

				__this__comments.put(__this__comments_copy_key, __this__comments_copy_value);
			}
			this.comments = __this__comments;
		}
	}

	public UserRBAC deepCopy() {
		return new UserRBAC(this);
	}

	@Override
	public void clear() {
		this.perms = null;
		this.roles = null;
		this.inher = null;
		this.comments = null;
	}

	public int getPermsSize() {
		return (this.perms == null) ? 0 : this.perms.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<java.lang.String> getPermsIterator() {
		return (this.perms == null) ? null : this.perms.iterator();
	}

	public void addToPerms(java.lang.String elem) {
		if (this.perms == null) {
			this.perms = new java.util.ArrayList<java.lang.String>();
		}
		this.perms.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<java.lang.String> getPerms() {
		return this.perms;
	}

	public UserRBAC setPerms(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> perms) {
		this.perms = perms;
		return this;
	}

	public void unsetPerms() {
		this.perms = null;
	}

	/**
	 * Returns true if field perms is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPerms() {
		return this.perms != null;
	}

	public void setPermsIsSet(boolean value) {
		if (!value) {
			this.perms = null;
		}
	}

	public int getRolesSize() {
		return (this.roles == null) ? 0 : this.roles.size();
	}

	public void putToRoles(java.lang.String key, java.util.List<java.lang.String> val) {
		if (this.roles == null) {
			this.roles = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>();
		}
		this.roles.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getRoles() {
		return this.roles;
	}

	public UserRBAC setRoles(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.List<java.lang.String>> roles) {
		this.roles = roles;
		return this;
	}

	public void unsetRoles() {
		this.roles = null;
	}

	/**
	 * Returns true if field roles is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRoles() {
		return this.roles != null;
	}

	public void setRolesIsSet(boolean value) {
		if (!value) {
			this.roles = null;
		}
	}

	public int getInherSize() {
		return (this.inher == null) ? 0 : this.inher.size();
	}

	public void putToInher(java.lang.String key, java.util.List<java.lang.String> val) {
		if (this.inher == null) {
			this.inher = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>();
		}
		this.inher.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getInher() {
		return this.inher;
	}

	public UserRBAC setInher(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.util.List<java.lang.String>> inher) {
		this.inher = inher;
		return this;
	}

	public void unsetInher() {
		this.inher = null;
	}

	/**
	 * Returns true if field inher is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetInher() {
		return this.inher != null;
	}

	public void setInherIsSet(boolean value) {
		if (!value) {
			this.inher = null;
		}
	}

	public int getCommentsSize() {
		return (this.comments == null) ? 0 : this.comments.size();
	}

	public void putToComments(java.lang.String key, RbacComment val) {
		if (this.comments == null) {
			this.comments = new java.util.HashMap<java.lang.String, RbacComment>();
		}
		this.comments.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, RbacComment> getComments() {
		return this.comments;
	}

	public UserRBAC setComments(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, RbacComment> comments) {
		this.comments = comments;
		return this;
	}

	public void unsetComments() {
		this.comments = null;
	}

	/**
	 * Returns true if field comments is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComments() {
		return this.comments != null;
	}

	public void setCommentsIsSet(boolean value) {
		if (!value) {
			this.comments = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case PERMS:
			if (value == null) {
				unsetPerms();
			}
			else {
				setPerms((java.util.List<java.lang.String>) value);
			}
			break;

		case ROLES:
			if (value == null) {
				unsetRoles();
			}
			else {
				setRoles((java.util.Map<java.lang.String, java.util.List<java.lang.String>>) value);
			}
			break;

		case INHER:
			if (value == null) {
				unsetInher();
			}
			else {
				setInher((java.util.Map<java.lang.String, java.util.List<java.lang.String>>) value);
			}
			break;

		case COMMENTS:
			if (value == null) {
				unsetComments();
			}
			else {
				setComments((java.util.Map<java.lang.String, RbacComment>) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case PERMS:
			return getPerms();

		case ROLES:
			return getRoles();

		case INHER:
			return getInher();

		case COMMENTS:
			return getComments();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case PERMS:
			return isSetPerms();
		case ROLES:
			return isSetRoles();
		case INHER:
			return isSetInher();
		case COMMENTS:
			return isSetComments();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof UserRBAC)
			return this.equals((UserRBAC) that);
		return false;
	}

	public boolean equals(UserRBAC that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_perms = true && this.isSetPerms();
		boolean that_present_perms = true && that.isSetPerms();
		if (this_present_perms || that_present_perms) {
			if (!(this_present_perms && that_present_perms))
				return false;
			if (!this.perms.equals(that.perms))
				return false;
		}

		boolean this_present_roles = true && this.isSetRoles();
		boolean that_present_roles = true && that.isSetRoles();
		if (this_present_roles || that_present_roles) {
			if (!(this_present_roles && that_present_roles))
				return false;
			if (!this.roles.equals(that.roles))
				return false;
		}

		boolean this_present_inher = true && this.isSetInher();
		boolean that_present_inher = true && that.isSetInher();
		if (this_present_inher || that_present_inher) {
			if (!(this_present_inher && that_present_inher))
				return false;
			if (!this.inher.equals(that.inher))
				return false;
		}

		boolean this_present_comments = true && this.isSetComments();
		boolean that_present_comments = true && that.isSetComments();
		if (this_present_comments || that_present_comments) {
			if (!(this_present_comments && that_present_comments))
				return false;
			if (!this.comments.equals(that.comments))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetPerms()) ? 131071 : 524287);
		if (isSetPerms())
			hashCode = hashCode * 8191 + perms.hashCode();

		hashCode = hashCode * 8191 + ((isSetRoles()) ? 131071 : 524287);
		if (isSetRoles())
			hashCode = hashCode * 8191 + roles.hashCode();

		hashCode = hashCode * 8191 + ((isSetInher()) ? 131071 : 524287);
		if (isSetInher())
			hashCode = hashCode * 8191 + inher.hashCode();

		hashCode = hashCode * 8191 + ((isSetComments()) ? 131071 : 524287);
		if (isSetComments())
			hashCode = hashCode * 8191 + comments.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(UserRBAC other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetPerms()).compareTo(other.isSetPerms());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPerms()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perms, other.perms);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRoles()).compareTo(other.isSetRoles());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRoles()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roles, other.roles);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetInher()).compareTo(other.isSetInher());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetInher()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inher, other.inher);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComments()).compareTo(other.isSetComments());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComments()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comments, other.comments);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("UserRBAC(");
		boolean first = true;

		sb.append("perms:");
		if (this.perms == null) {
			sb.append("null");
		}
		else {
			sb.append(this.perms);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("roles:");
		if (this.roles == null) {
			sb.append("null");
		}
		else {
			sb.append(this.roles);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("inher:");
		if (this.inher == null) {
			sb.append("null");
		}
		else {
			sb.append(this.inher);
		}
		first = false;
		if (isSetComments()) {
			if (!first)
				sb.append(", ");
			sb.append("comments:");
			if (this.comments == null) {
				sb.append("null");
			}
			else {
				sb.append(this.comments);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class UserRBACStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserRBACStandardScheme getScheme() {
			return new UserRBACStandardScheme();
		}

	}

	private static class UserRBACStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserRBAC> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, UserRBAC struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // PERMS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
							struct.perms = new java.util.ArrayList<java.lang.String>(_list24.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _elem25;
							for (int _i26 = 0; _i26 < _list24.size; ++_i26) {
								_elem25 = iprot.readString();
								struct.perms.add(_elem25);
							}
							iprot.readListEnd();
						}
						struct.setPermsIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // ROLES
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
							struct.roles = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>(
									2 * _map27.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key28;
							@org.apache.thrift.annotation.Nullable
							java.util.List<java.lang.String> _val29;
							for (int _i30 = 0; _i30 < _map27.size; ++_i30) {
								_key28 = iprot.readString();
								{
									org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
									_val29 = new java.util.ArrayList<java.lang.String>(_list31.size);
									@org.apache.thrift.annotation.Nullable
									java.lang.String _elem32;
									for (int _i33 = 0; _i33 < _list31.size; ++_i33) {
										_elem32 = iprot.readString();
										_val29.add(_elem32);
									}
									iprot.readListEnd();
								}
								struct.roles.put(_key28, _val29);
							}
							iprot.readMapEnd();
						}
						struct.setRolesIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // INHER
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
							struct.inher = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>(
									2 * _map34.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key35;
							@org.apache.thrift.annotation.Nullable
							java.util.List<java.lang.String> _val36;
							for (int _i37 = 0; _i37 < _map34.size; ++_i37) {
								_key35 = iprot.readString();
								{
									org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
									_val36 = new java.util.ArrayList<java.lang.String>(_list38.size);
									@org.apache.thrift.annotation.Nullable
									java.lang.String _elem39;
									for (int _i40 = 0; _i40 < _list38.size; ++_i40) {
										_elem39 = iprot.readString();
										_val36.add(_elem39);
									}
									iprot.readListEnd();
								}
								struct.inher.put(_key35, _val36);
							}
							iprot.readMapEnd();
						}
						struct.setInherIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // COMMENTS
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map41 = iprot.readMapBegin();
							struct.comments = new java.util.HashMap<java.lang.String, RbacComment>(2 * _map41.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key42;
							@org.apache.thrift.annotation.Nullable
							RbacComment _val43;
							for (int _i44 = 0; _i44 < _map41.size; ++_i44) {
								_key42 = iprot.readString();
								_val43 = new RbacComment();
								_val43.read(iprot);
								struct.comments.put(_key42, _val43);
							}
							iprot.readMapEnd();
						}
						struct.setCommentsIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, UserRBAC struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.perms != null) {
				oprot.writeFieldBegin(PERMS_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,
							struct.perms.size()));
					for (java.lang.String _iter45 : struct.perms) {
						oprot.writeString(_iter45);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.roles != null) {
				oprot.writeFieldBegin(ROLES_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.LIST, struct.roles.size()));
					for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter46 : struct.roles
							.entrySet()) {
						oprot.writeString(_iter46.getKey());
						{
							oprot.writeListBegin(new org.apache.thrift.protocol.TList(
									org.apache.thrift.protocol.TType.STRING, _iter46.getValue().size()));
							for (java.lang.String _iter47 : _iter46.getValue()) {
								oprot.writeString(_iter47);
							}
							oprot.writeListEnd();
						}
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.inher != null) {
				oprot.writeFieldBegin(INHER_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.LIST, struct.inher.size()));
					for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter48 : struct.inher
							.entrySet()) {
						oprot.writeString(_iter48.getKey());
						{
							oprot.writeListBegin(new org.apache.thrift.protocol.TList(
									org.apache.thrift.protocol.TType.STRING, _iter48.getValue().size()));
							for (java.lang.String _iter49 : _iter48.getValue()) {
								oprot.writeString(_iter49);
							}
							oprot.writeListEnd();
						}
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.comments != null) {
				if (struct.isSetComments()) {
					oprot.writeFieldBegin(COMMENTS_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
								org.apache.thrift.protocol.TType.STRUCT, struct.comments.size()));
						for (java.util.Map.Entry<java.lang.String, RbacComment> _iter50 : struct.comments.entrySet()) {
							oprot.writeString(_iter50.getKey());
							_iter50.getValue().write(oprot);
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class UserRBACTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserRBACTupleScheme getScheme() {
			return new UserRBACTupleScheme();
		}

	}

	private static class UserRBACTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserRBAC> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, UserRBAC struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetPerms()) {
				optionals.set(0);
			}
			if (struct.isSetRoles()) {
				optionals.set(1);
			}
			if (struct.isSetInher()) {
				optionals.set(2);
			}
			if (struct.isSetComments()) {
				optionals.set(3);
			}
			oprot.writeBitSet(optionals, 4);
			if (struct.isSetPerms()) {
				{
					oprot.writeI32(struct.perms.size());
					for (java.lang.String _iter51 : struct.perms) {
						oprot.writeString(_iter51);
					}
				}
			}
			if (struct.isSetRoles()) {
				{
					oprot.writeI32(struct.roles.size());
					for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter52 : struct.roles
							.entrySet()) {
						oprot.writeString(_iter52.getKey());
						{
							oprot.writeI32(_iter52.getValue().size());
							for (java.lang.String _iter53 : _iter52.getValue()) {
								oprot.writeString(_iter53);
							}
						}
					}
				}
			}
			if (struct.isSetInher()) {
				{
					oprot.writeI32(struct.inher.size());
					for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter54 : struct.inher
							.entrySet()) {
						oprot.writeString(_iter54.getKey());
						{
							oprot.writeI32(_iter54.getValue().size());
							for (java.lang.String _iter55 : _iter54.getValue()) {
								oprot.writeString(_iter55);
							}
						}
					}
				}
			}
			if (struct.isSetComments()) {
				{
					oprot.writeI32(struct.comments.size());
					for (java.util.Map.Entry<java.lang.String, RbacComment> _iter56 : struct.comments.entrySet()) {
						oprot.writeString(_iter56.getKey());
						_iter56.getValue().write(oprot);
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, UserRBAC struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(4);
			if (incoming.get(0)) {
				{
					org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.perms = new java.util.ArrayList<java.lang.String>(_list57.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _elem58;
					for (int _i59 = 0; _i59 < _list57.size; ++_i59) {
						_elem58 = iprot.readString();
						struct.perms.add(_elem58);
					}
				}
				struct.setPermsIsSet(true);
			}
			if (incoming.get(1)) {
				{
					org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST,
							iprot.readI32());
					struct.roles = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>(
							2 * _map60.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key61;
					@org.apache.thrift.annotation.Nullable
					java.util.List<java.lang.String> _val62;
					for (int _i63 = 0; _i63 < _map60.size; ++_i63) {
						_key61 = iprot.readString();
						{
							org.apache.thrift.protocol.TList _list64 = new org.apache.thrift.protocol.TList(
									org.apache.thrift.protocol.TType.STRING, iprot.readI32());
							_val62 = new java.util.ArrayList<java.lang.String>(_list64.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _elem65;
							for (int _i66 = 0; _i66 < _list64.size; ++_i66) {
								_elem65 = iprot.readString();
								_val62.add(_elem65);
							}
						}
						struct.roles.put(_key61, _val62);
					}
				}
				struct.setRolesIsSet(true);
			}
			if (incoming.get(2)) {
				{
					org.apache.thrift.protocol.TMap _map67 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST,
							iprot.readI32());
					struct.inher = new java.util.HashMap<java.lang.String, java.util.List<java.lang.String>>(
							2 * _map67.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key68;
					@org.apache.thrift.annotation.Nullable
					java.util.List<java.lang.String> _val69;
					for (int _i70 = 0; _i70 < _map67.size; ++_i70) {
						_key68 = iprot.readString();
						{
							org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(
									org.apache.thrift.protocol.TType.STRING, iprot.readI32());
							_val69 = new java.util.ArrayList<java.lang.String>(_list71.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _elem72;
							for (int _i73 = 0; _i73 < _list71.size; ++_i73) {
								_elem72 = iprot.readString();
								_val69.add(_elem72);
							}
						}
						struct.inher.put(_key68, _val69);
					}
				}
				struct.setInherIsSet(true);
			}
			if (incoming.get(3)) {
				{
					org.apache.thrift.protocol.TMap _map74 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT,
							iprot.readI32());
					struct.comments = new java.util.HashMap<java.lang.String, RbacComment>(2 * _map74.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key75;
					@org.apache.thrift.annotation.Nullable
					RbacComment _val76;
					for (int _i77 = 0; _i77 < _map74.size; ++_i77) {
						_key75 = iprot.readString();
						_val76 = new RbacComment();
						_val76.read(iprot);
						struct.comments.put(_key75, _val76);
					}
				}
				struct.setCommentsIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
