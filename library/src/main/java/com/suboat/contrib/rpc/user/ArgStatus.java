/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 用户状态 有效条件: 可选参数中至少填一个 注意: 若填值status 只能填 0/1/2/4/5/nil
 * statusEmail,statusPhone,statusPsw,statusQuest,statusCard,isTwoFactor 只能填 0/false/nil
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-02-18")
public class ArgStatus implements org.apache.thrift.TBase<ArgStatus, ArgStatus._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgStatus> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgStatus");

	private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isActive", org.apache.thrift.protocol.TType.BOOL, (short) 1);

	private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isDelete", org.apache.thrift.protocol.TType.BOOL, (short) 2);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 3);

	private static final org.apache.thrift.protocol.TField STATUS_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusEmail", org.apache.thrift.protocol.TType.I32, (short) 4);

	private static final org.apache.thrift.protocol.TField STATUS_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusPhone", org.apache.thrift.protocol.TType.I32, (short) 5);

	private static final org.apache.thrift.protocol.TField STATUS_PSW_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusPsw", org.apache.thrift.protocol.TType.I32, (short) 6);

	private static final org.apache.thrift.protocol.TField STATUS_QUEST_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusQuest", org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField STATUS_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusCard", org.apache.thrift.protocol.TType.I32, (short) 8);

	private static final org.apache.thrift.protocol.TField IS_TWO_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isTwoFactor", org.apache.thrift.protocol.TType.BOOL, (short) 9);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgStatusStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgStatusTupleSchemeFactory();

	public boolean isActive; // optional

	public boolean isDelete; // optional

	public int status; // optional

	public int statusEmail; // optional

	public int statusPhone; // optional

	public int statusPsw; // optional

	public int statusQuest; // optional

	public int statusCard; // optional

	public boolean isTwoFactor; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		IS_ACTIVE((short) 1, "isActive"), IS_DELETE((short) 2, "isDelete"), STATUS((short) 3, "status"), STATUS_EMAIL(
				(short) 4, "statusEmail"), STATUS_PHONE((short) 5, "statusPhone"), STATUS_PSW((short) 6,
						"statusPsw"), STATUS_QUEST((short) 7, "statusQuest"), STATUS_CARD((short) 8,
								"statusCard"), IS_TWO_FACTOR((short) 9, "isTwoFactor");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // IS_ACTIVE
				return IS_ACTIVE;
			case 2: // IS_DELETE
				return IS_DELETE;
			case 3: // STATUS
				return STATUS;
			case 4: // STATUS_EMAIL
				return STATUS_EMAIL;
			case 5: // STATUS_PHONE
				return STATUS_PHONE;
			case 6: // STATUS_PSW
				return STATUS_PSW;
			case 7: // STATUS_QUEST
				return STATUS_QUEST;
			case 8: // STATUS_CARD
				return STATUS_CARD;
			case 9: // IS_TWO_FACTOR
				return IS_TWO_FACTOR;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISACTIVE_ISSET_ID = 0;

	private static final int __ISDELETE_ISSET_ID = 1;

	private static final int __STATUS_ISSET_ID = 2;

	private static final int __STATUSEMAIL_ISSET_ID = 3;

	private static final int __STATUSPHONE_ISSET_ID = 4;

	private static final int __STATUSPSW_ISSET_ID = 5;

	private static final int __STATUSQUEST_ISSET_ID = 6;

	private static final int __STATUSCARD_ISSET_ID = 7;

	private static final int __ISTWOFACTOR_ISSET_ID = 8;

	private short __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.IS_ACTIVE, _Fields.IS_DELETE, _Fields.STATUS,
			_Fields.STATUS_EMAIL, _Fields.STATUS_PHONE, _Fields.STATUS_PSW, _Fields.STATUS_QUEST, _Fields.STATUS_CARD,
			_Fields.IS_TWO_FACTOR };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.IS_ACTIVE,
				new org.apache.thrift.meta_data.FieldMetaData("isActive",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_DELETE,
				new org.apache.thrift.meta_data.FieldMetaData("isDelete",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_EMAIL,
				new org.apache.thrift.meta_data.FieldMetaData("statusEmail",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_PHONE,
				new org.apache.thrift.meta_data.FieldMetaData("statusPhone",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_PSW,
				new org.apache.thrift.meta_data.FieldMetaData("statusPsw",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_QUEST,
				new org.apache.thrift.meta_data.FieldMetaData("statusQuest",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_CARD,
				new org.apache.thrift.meta_data.FieldMetaData("statusCard",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_TWO_FACTOR,
				new org.apache.thrift.meta_data.FieldMetaData("isTwoFactor",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgStatus.class, metaDataMap);
	}

	public ArgStatus() {
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgStatus(ArgStatus other) {
		__isset_bitfield = other.__isset_bitfield;
		this.isActive = other.isActive;
		this.isDelete = other.isDelete;
		this.status = other.status;
		this.statusEmail = other.statusEmail;
		this.statusPhone = other.statusPhone;
		this.statusPsw = other.statusPsw;
		this.statusQuest = other.statusQuest;
		this.statusCard = other.statusCard;
		this.isTwoFactor = other.isTwoFactor;
	}

	public ArgStatus deepCopy() {
		return new ArgStatus(this);
	}

	@Override
	public void clear() {
		setIsActiveIsSet(false);
		this.isActive = false;
		setIsDeleteIsSet(false);
		this.isDelete = false;
		setStatusIsSet(false);
		this.status = 0;
		setStatusEmailIsSet(false);
		this.statusEmail = 0;
		setStatusPhoneIsSet(false);
		this.statusPhone = 0;
		setStatusPswIsSet(false);
		this.statusPsw = 0;
		setStatusQuestIsSet(false);
		this.statusQuest = 0;
		setStatusCardIsSet(false);
		this.statusCard = 0;
		setIsTwoFactorIsSet(false);
		this.isTwoFactor = false;
	}

	public boolean isIsActive() {
		return this.isActive;
	}

	public ArgStatus setIsActive(boolean isActive) {
		this.isActive = isActive;
		setIsActiveIsSet(true);
		return this;
	}

	public void unsetIsActive() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	/**
	 * Returns true if field isActive is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsActive() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	public void setIsActiveIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISACTIVE_ISSET_ID, value);
	}

	public boolean isIsDelete() {
		return this.isDelete;
	}

	public ArgStatus setIsDelete(boolean isDelete) {
		this.isDelete = isDelete;
		setIsDeleteIsSet(true);
		return this;
	}

	public void unsetIsDelete() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	/**
	 * Returns true if field isDelete is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsDelete() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	public void setIsDeleteIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public ArgStatus setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public int getStatusEmail() {
		return this.statusEmail;
	}

	public ArgStatus setStatusEmail(int statusEmail) {
		this.statusEmail = statusEmail;
		setStatusEmailIsSet(true);
		return this;
	}

	public void unsetStatusEmail() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSEMAIL_ISSET_ID);
	}

	/**
	 * Returns true if field statusEmail is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusEmail() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSEMAIL_ISSET_ID);
	}

	public void setStatusEmailIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSEMAIL_ISSET_ID, value);
	}

	public int getStatusPhone() {
		return this.statusPhone;
	}

	public ArgStatus setStatusPhone(int statusPhone) {
		this.statusPhone = statusPhone;
		setStatusPhoneIsSet(true);
		return this;
	}

	public void unsetStatusPhone() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSPHONE_ISSET_ID);
	}

	/**
	 * Returns true if field statusPhone is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusPhone() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSPHONE_ISSET_ID);
	}

	public void setStatusPhoneIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSPHONE_ISSET_ID, value);
	}

	public int getStatusPsw() {
		return this.statusPsw;
	}

	public ArgStatus setStatusPsw(int statusPsw) {
		this.statusPsw = statusPsw;
		setStatusPswIsSet(true);
		return this;
	}

	public void unsetStatusPsw() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSPSW_ISSET_ID);
	}

	/**
	 * Returns true if field statusPsw is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusPsw() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSPSW_ISSET_ID);
	}

	public void setStatusPswIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSPSW_ISSET_ID, value);
	}

	public int getStatusQuest() {
		return this.statusQuest;
	}

	public ArgStatus setStatusQuest(int statusQuest) {
		this.statusQuest = statusQuest;
		setStatusQuestIsSet(true);
		return this;
	}

	public void unsetStatusQuest() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSQUEST_ISSET_ID);
	}

	/**
	 * Returns true if field statusQuest is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusQuest() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSQUEST_ISSET_ID);
	}

	public void setStatusQuestIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSQUEST_ISSET_ID, value);
	}

	public int getStatusCard() {
		return this.statusCard;
	}

	public ArgStatus setStatusCard(int statusCard) {
		this.statusCard = statusCard;
		setStatusCardIsSet(true);
		return this;
	}

	public void unsetStatusCard() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSCARD_ISSET_ID);
	}

	/**
	 * Returns true if field statusCard is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusCard() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSCARD_ISSET_ID);
	}

	public void setStatusCardIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSCARD_ISSET_ID, value);
	}

	public boolean isIsTwoFactor() {
		return this.isTwoFactor;
	}

	public ArgStatus setIsTwoFactor(boolean isTwoFactor) {
		this.isTwoFactor = isTwoFactor;
		setIsTwoFactorIsSet(true);
		return this;
	}

	public void unsetIsTwoFactor() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTWOFACTOR_ISSET_ID);
	}

	/**
	 * Returns true if field isTwoFactor is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsTwoFactor() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTWOFACTOR_ISSET_ID);
	}

	public void setIsTwoFactorIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTWOFACTOR_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case IS_ACTIVE:
			if (value == null) {
				unsetIsActive();
			}
			else {
				setIsActive((java.lang.Boolean) value);
			}
			break;

		case IS_DELETE:
			if (value == null) {
				unsetIsDelete();
			}
			else {
				setIsDelete((java.lang.Boolean) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case STATUS_EMAIL:
			if (value == null) {
				unsetStatusEmail();
			}
			else {
				setStatusEmail((java.lang.Integer) value);
			}
			break;

		case STATUS_PHONE:
			if (value == null) {
				unsetStatusPhone();
			}
			else {
				setStatusPhone((java.lang.Integer) value);
			}
			break;

		case STATUS_PSW:
			if (value == null) {
				unsetStatusPsw();
			}
			else {
				setStatusPsw((java.lang.Integer) value);
			}
			break;

		case STATUS_QUEST:
			if (value == null) {
				unsetStatusQuest();
			}
			else {
				setStatusQuest((java.lang.Integer) value);
			}
			break;

		case STATUS_CARD:
			if (value == null) {
				unsetStatusCard();
			}
			else {
				setStatusCard((java.lang.Integer) value);
			}
			break;

		case IS_TWO_FACTOR:
			if (value == null) {
				unsetIsTwoFactor();
			}
			else {
				setIsTwoFactor((java.lang.Boolean) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case IS_ACTIVE:
			return isIsActive();

		case IS_DELETE:
			return isIsDelete();

		case STATUS:
			return getStatus();

		case STATUS_EMAIL:
			return getStatusEmail();

		case STATUS_PHONE:
			return getStatusPhone();

		case STATUS_PSW:
			return getStatusPsw();

		case STATUS_QUEST:
			return getStatusQuest();

		case STATUS_CARD:
			return getStatusCard();

		case IS_TWO_FACTOR:
			return isIsTwoFactor();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case IS_ACTIVE:
			return isSetIsActive();
		case IS_DELETE:
			return isSetIsDelete();
		case STATUS:
			return isSetStatus();
		case STATUS_EMAIL:
			return isSetStatusEmail();
		case STATUS_PHONE:
			return isSetStatusPhone();
		case STATUS_PSW:
			return isSetStatusPsw();
		case STATUS_QUEST:
			return isSetStatusQuest();
		case STATUS_CARD:
			return isSetStatusCard();
		case IS_TWO_FACTOR:
			return isSetIsTwoFactor();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgStatus)
			return this.equals((ArgStatus) that);
		return false;
	}

	public boolean equals(ArgStatus that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_isActive = true && this.isSetIsActive();
		boolean that_present_isActive = true && that.isSetIsActive();
		if (this_present_isActive || that_present_isActive) {
			if (!(this_present_isActive && that_present_isActive))
				return false;
			if (this.isActive != that.isActive)
				return false;
		}

		boolean this_present_isDelete = true && this.isSetIsDelete();
		boolean that_present_isDelete = true && that.isSetIsDelete();
		if (this_present_isDelete || that_present_isDelete) {
			if (!(this_present_isDelete && that_present_isDelete))
				return false;
			if (this.isDelete != that.isDelete)
				return false;
		}

		boolean this_present_status = true && this.isSetStatus();
		boolean that_present_status = true && that.isSetStatus();
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_statusEmail = true && this.isSetStatusEmail();
		boolean that_present_statusEmail = true && that.isSetStatusEmail();
		if (this_present_statusEmail || that_present_statusEmail) {
			if (!(this_present_statusEmail && that_present_statusEmail))
				return false;
			if (this.statusEmail != that.statusEmail)
				return false;
		}

		boolean this_present_statusPhone = true && this.isSetStatusPhone();
		boolean that_present_statusPhone = true && that.isSetStatusPhone();
		if (this_present_statusPhone || that_present_statusPhone) {
			if (!(this_present_statusPhone && that_present_statusPhone))
				return false;
			if (this.statusPhone != that.statusPhone)
				return false;
		}

		boolean this_present_statusPsw = true && this.isSetStatusPsw();
		boolean that_present_statusPsw = true && that.isSetStatusPsw();
		if (this_present_statusPsw || that_present_statusPsw) {
			if (!(this_present_statusPsw && that_present_statusPsw))
				return false;
			if (this.statusPsw != that.statusPsw)
				return false;
		}

		boolean this_present_statusQuest = true && this.isSetStatusQuest();
		boolean that_present_statusQuest = true && that.isSetStatusQuest();
		if (this_present_statusQuest || that_present_statusQuest) {
			if (!(this_present_statusQuest && that_present_statusQuest))
				return false;
			if (this.statusQuest != that.statusQuest)
				return false;
		}

		boolean this_present_statusCard = true && this.isSetStatusCard();
		boolean that_present_statusCard = true && that.isSetStatusCard();
		if (this_present_statusCard || that_present_statusCard) {
			if (!(this_present_statusCard && that_present_statusCard))
				return false;
			if (this.statusCard != that.statusCard)
				return false;
		}

		boolean this_present_isTwoFactor = true && this.isSetIsTwoFactor();
		boolean that_present_isTwoFactor = true && that.isSetIsTwoFactor();
		if (this_present_isTwoFactor || that_present_isTwoFactor) {
			if (!(this_present_isTwoFactor && that_present_isTwoFactor))
				return false;
			if (this.isTwoFactor != that.isTwoFactor)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetIsActive()) ? 131071 : 524287);
		if (isSetIsActive())
			hashCode = hashCode * 8191 + ((isActive) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetIsDelete()) ? 131071 : 524287);
		if (isSetIsDelete())
			hashCode = hashCode * 8191 + ((isDelete) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
		if (isSetStatus())
			hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetStatusEmail()) ? 131071 : 524287);
		if (isSetStatusEmail())
			hashCode = hashCode * 8191 + statusEmail;

		hashCode = hashCode * 8191 + ((isSetStatusPhone()) ? 131071 : 524287);
		if (isSetStatusPhone())
			hashCode = hashCode * 8191 + statusPhone;

		hashCode = hashCode * 8191 + ((isSetStatusPsw()) ? 131071 : 524287);
		if (isSetStatusPsw())
			hashCode = hashCode * 8191 + statusPsw;

		hashCode = hashCode * 8191 + ((isSetStatusQuest()) ? 131071 : 524287);
		if (isSetStatusQuest())
			hashCode = hashCode * 8191 + statusQuest;

		hashCode = hashCode * 8191 + ((isSetStatusCard()) ? 131071 : 524287);
		if (isSetStatusCard())
			hashCode = hashCode * 8191 + statusCard;

		hashCode = hashCode * 8191 + ((isSetIsTwoFactor()) ? 131071 : 524287);
		if (isSetIsTwoFactor())
			hashCode = hashCode * 8191 + ((isTwoFactor) ? 131071 : 524287);

		return hashCode;
	}

	@Override
	public int compareTo(ArgStatus other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetIsActive()).compareTo(other.isSetIsActive());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsActive()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsDelete()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusEmail()).compareTo(other.isSetStatusEmail());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusEmail()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusEmail, other.statusEmail);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusPhone()).compareTo(other.isSetStatusPhone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusPhone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusPhone, other.statusPhone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusPsw()).compareTo(other.isSetStatusPsw());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusPsw()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusPsw, other.statusPsw);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusQuest()).compareTo(other.isSetStatusQuest());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusQuest()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusQuest, other.statusQuest);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusCard()).compareTo(other.isSetStatusCard());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusCard()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCard, other.statusCard);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsTwoFactor()).compareTo(other.isSetIsTwoFactor());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsTwoFactor()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTwoFactor, other.isTwoFactor);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgStatus(");
		boolean first = true;

		if (isSetIsActive()) {
			sb.append("isActive:");
			sb.append(this.isActive);
			first = false;
		}
		if (isSetIsDelete()) {
			if (!first)
				sb.append(", ");
			sb.append("isDelete:");
			sb.append(this.isDelete);
			first = false;
		}
		if (isSetStatus()) {
			if (!first)
				sb.append(", ");
			sb.append("status:");
			sb.append(this.status);
			first = false;
		}
		if (isSetStatusEmail()) {
			if (!first)
				sb.append(", ");
			sb.append("statusEmail:");
			sb.append(this.statusEmail);
			first = false;
		}
		if (isSetStatusPhone()) {
			if (!first)
				sb.append(", ");
			sb.append("statusPhone:");
			sb.append(this.statusPhone);
			first = false;
		}
		if (isSetStatusPsw()) {
			if (!first)
				sb.append(", ");
			sb.append("statusPsw:");
			sb.append(this.statusPsw);
			first = false;
		}
		if (isSetStatusQuest()) {
			if (!first)
				sb.append(", ");
			sb.append("statusQuest:");
			sb.append(this.statusQuest);
			first = false;
		}
		if (isSetStatusCard()) {
			if (!first)
				sb.append(", ");
			sb.append("statusCard:");
			sb.append(this.statusCard);
			first = false;
		}
		if (isSetIsTwoFactor()) {
			if (!first)
				sb.append(", ");
			sb.append("isTwoFactor:");
			sb.append(this.isTwoFactor);
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgStatusStandardScheme getScheme() {
			return new ArgStatusStandardScheme();
		}

	}

	private static class ArgStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgStatus> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgStatus struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // IS_ACTIVE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isActive = iprot.readBool();
						struct.setIsActiveIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // IS_DELETE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isDelete = iprot.readBool();
						struct.setIsDeleteIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // STATUS_EMAIL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusEmail = iprot.readI32();
						struct.setStatusEmailIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // STATUS_PHONE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusPhone = iprot.readI32();
						struct.setStatusPhoneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // STATUS_PSW
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusPsw = iprot.readI32();
						struct.setStatusPswIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // STATUS_QUEST
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusQuest = iprot.readI32();
						struct.setStatusQuestIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // STATUS_CARD
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusCard = iprot.readI32();
						struct.setStatusCardIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_TWO_FACTOR
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isTwoFactor = iprot.readBool();
						struct.setIsTwoFactorIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgStatus struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.isSetIsActive()) {
				oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
				oprot.writeBool(struct.isActive);
				oprot.writeFieldEnd();
			}
			if (struct.isSetIsDelete()) {
				oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
				oprot.writeBool(struct.isDelete);
				oprot.writeFieldEnd();
			}
			if (struct.isSetStatus()) {
				oprot.writeFieldBegin(STATUS_FIELD_DESC);
				oprot.writeI32(struct.status);
				oprot.writeFieldEnd();
			}
			if (struct.isSetStatusEmail()) {
				oprot.writeFieldBegin(STATUS_EMAIL_FIELD_DESC);
				oprot.writeI32(struct.statusEmail);
				oprot.writeFieldEnd();
			}
			if (struct.isSetStatusPhone()) {
				oprot.writeFieldBegin(STATUS_PHONE_FIELD_DESC);
				oprot.writeI32(struct.statusPhone);
				oprot.writeFieldEnd();
			}
			if (struct.isSetStatusPsw()) {
				oprot.writeFieldBegin(STATUS_PSW_FIELD_DESC);
				oprot.writeI32(struct.statusPsw);
				oprot.writeFieldEnd();
			}
			if (struct.isSetStatusQuest()) {
				oprot.writeFieldBegin(STATUS_QUEST_FIELD_DESC);
				oprot.writeI32(struct.statusQuest);
				oprot.writeFieldEnd();
			}
			if (struct.isSetStatusCard()) {
				oprot.writeFieldBegin(STATUS_CARD_FIELD_DESC);
				oprot.writeI32(struct.statusCard);
				oprot.writeFieldEnd();
			}
			if (struct.isSetIsTwoFactor()) {
				oprot.writeFieldBegin(IS_TWO_FACTOR_FIELD_DESC);
				oprot.writeBool(struct.isTwoFactor);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgStatusTupleScheme getScheme() {
			return new ArgStatusTupleScheme();
		}

	}

	private static class ArgStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgStatus> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgStatus struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetIsActive()) {
				optionals.set(0);
			}
			if (struct.isSetIsDelete()) {
				optionals.set(1);
			}
			if (struct.isSetStatus()) {
				optionals.set(2);
			}
			if (struct.isSetStatusEmail()) {
				optionals.set(3);
			}
			if (struct.isSetStatusPhone()) {
				optionals.set(4);
			}
			if (struct.isSetStatusPsw()) {
				optionals.set(5);
			}
			if (struct.isSetStatusQuest()) {
				optionals.set(6);
			}
			if (struct.isSetStatusCard()) {
				optionals.set(7);
			}
			if (struct.isSetIsTwoFactor()) {
				optionals.set(8);
			}
			oprot.writeBitSet(optionals, 9);
			if (struct.isSetIsActive()) {
				oprot.writeBool(struct.isActive);
			}
			if (struct.isSetIsDelete()) {
				oprot.writeBool(struct.isDelete);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetStatusEmail()) {
				oprot.writeI32(struct.statusEmail);
			}
			if (struct.isSetStatusPhone()) {
				oprot.writeI32(struct.statusPhone);
			}
			if (struct.isSetStatusPsw()) {
				oprot.writeI32(struct.statusPsw);
			}
			if (struct.isSetStatusQuest()) {
				oprot.writeI32(struct.statusQuest);
			}
			if (struct.isSetStatusCard()) {
				oprot.writeI32(struct.statusCard);
			}
			if (struct.isSetIsTwoFactor()) {
				oprot.writeBool(struct.isTwoFactor);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgStatus struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(9);
			if (incoming.get(0)) {
				struct.isActive = iprot.readBool();
				struct.setIsActiveIsSet(true);
			}
			if (incoming.get(1)) {
				struct.isDelete = iprot.readBool();
				struct.setIsDeleteIsSet(true);
			}
			if (incoming.get(2)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(3)) {
				struct.statusEmail = iprot.readI32();
				struct.setStatusEmailIsSet(true);
			}
			if (incoming.get(4)) {
				struct.statusPhone = iprot.readI32();
				struct.setStatusPhoneIsSet(true);
			}
			if (incoming.get(5)) {
				struct.statusPsw = iprot.readI32();
				struct.setStatusPswIsSet(true);
			}
			if (incoming.get(6)) {
				struct.statusQuest = iprot.readI32();
				struct.setStatusQuestIsSet(true);
			}
			if (incoming.get(7)) {
				struct.statusCard = iprot.readI32();
				struct.setStatusCardIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isTwoFactor = iprot.readBool();
				struct.setIsTwoFactorIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
