/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.msg;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class ArgMessage implements org.apache.thrift.TBase<ArgMessage, ArgMessage._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgMessage> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgMessage");

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"fromId", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField("tid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"msgType", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField EXT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"extType", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"mediaId", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"content", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comment", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField IS_ASSEMBLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isAssemble", org.apache.thrift.protocol.TType.BOOL, (short) 6);

	private static final org.apache.thrift.protocol.TField REL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"relId", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid",
			org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgMessageStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgMessageTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String fromId; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String tid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String msgType; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String extType; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String mediaId; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String content; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String comment; // optional

	public boolean isAssemble; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String relId; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String cid; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID((short) 1, "uid"), FROM_ID((short) 2, "fromId"), TID((short) 3, "tid"), MSG_TYPE((short) 8,
				"msgType"), EXT_TYPE((short) 9, "extType"), MEDIA_ID((short) 4, "mediaId"), CONTENT((short) 5,
						"content"), COMMENT((short) 7, "comment"), IS_ASSEMBLE((short) 6,
								"isAssemble"), REL_ID((short) 10, "relId"), CID((short) 11, "cid");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID
				return UID;
			case 2: // FROM_ID
				return FROM_ID;
			case 3: // TID
				return TID;
			case 8: // MSG_TYPE
				return MSG_TYPE;
			case 9: // EXT_TYPE
				return EXT_TYPE;
			case 4: // MEDIA_ID
				return MEDIA_ID;
			case 5: // CONTENT
				return CONTENT;
			case 7: // COMMENT
				return COMMENT;
			case 6: // IS_ASSEMBLE
				return IS_ASSEMBLE;
			case 10: // REL_ID
				return REL_ID;
			case 11: // CID
				return CID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISASSEMBLE_ISSET_ID = 0;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.UID, _Fields.MSG_TYPE, _Fields.EXT_TYPE, _Fields.MEDIA_ID,
			_Fields.COMMENT, _Fields.IS_ASSEMBLE, _Fields.REL_ID, _Fields.CID };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FROM_ID,
				new org.apache.thrift.meta_data.FieldMetaData("fromId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TID,
				new org.apache.thrift.meta_data.FieldMetaData("tid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MSG_TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("msgType",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EXT_TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("extType",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MEDIA_ID,
				new org.apache.thrift.meta_data.FieldMetaData("mediaId",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CONTENT,
				new org.apache.thrift.meta_data.FieldMetaData("content",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("comment",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_ASSEMBLE,
				new org.apache.thrift.meta_data.FieldMetaData("isAssemble",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.REL_ID,
				new org.apache.thrift.meta_data.FieldMetaData("relId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CID,
				new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgMessage.class, metaDataMap);
	}

	public ArgMessage() {
	}

	public ArgMessage(java.lang.String fromId, java.lang.String tid, java.lang.String content) {
		this();
		this.fromId = fromId;
		this.tid = tid;
		this.content = content;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgMessage(ArgMessage other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetFromId()) {
			this.fromId = other.fromId;
		}
		if (other.isSetTid()) {
			this.tid = other.tid;
		}
		if (other.isSetMsgType()) {
			this.msgType = other.msgType;
		}
		if (other.isSetExtType()) {
			this.extType = other.extType;
		}
		if (other.isSetMediaId()) {
			this.mediaId = other.mediaId;
		}
		if (other.isSetContent()) {
			this.content = other.content;
		}
		if (other.isSetComment()) {
			this.comment = other.comment;
		}
		this.isAssemble = other.isAssemble;
		if (other.isSetRelId()) {
			this.relId = other.relId;
		}
		if (other.isSetCid()) {
			this.cid = other.cid;
		}
	}

	public ArgMessage deepCopy() {
		return new ArgMessage(this);
	}

	@Override
	public void clear() {
		this.uid = null;
		this.fromId = null;
		this.tid = null;
		this.msgType = null;
		this.extType = null;
		this.mediaId = null;
		this.content = null;
		this.comment = null;
		setIsAssembleIsSet(false);
		this.isAssemble = false;
		this.relId = null;
		this.cid = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public ArgMessage setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getFromId() {
		return this.fromId;
	}

	public ArgMessage setFromId(@org.apache.thrift.annotation.Nullable java.lang.String fromId) {
		this.fromId = fromId;
		return this;
	}

	public void unsetFromId() {
		this.fromId = null;
	}

	/**
	 * Returns true if field fromId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetFromId() {
		return this.fromId != null;
	}

	public void setFromIdIsSet(boolean value) {
		if (!value) {
			this.fromId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTid() {
		return this.tid;
	}

	public ArgMessage setTid(@org.apache.thrift.annotation.Nullable java.lang.String tid) {
		this.tid = tid;
		return this;
	}

	public void unsetTid() {
		this.tid = null;
	}

	/**
	 * Returns true if field tid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTid() {
		return this.tid != null;
	}

	public void setTidIsSet(boolean value) {
		if (!value) {
			this.tid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMsgType() {
		return this.msgType;
	}

	public ArgMessage setMsgType(@org.apache.thrift.annotation.Nullable java.lang.String msgType) {
		this.msgType = msgType;
		return this;
	}

	public void unsetMsgType() {
		this.msgType = null;
	}

	/**
	 * Returns true if field msgType is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMsgType() {
		return this.msgType != null;
	}

	public void setMsgTypeIsSet(boolean value) {
		if (!value) {
			this.msgType = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExtType() {
		return this.extType;
	}

	public ArgMessage setExtType(@org.apache.thrift.annotation.Nullable java.lang.String extType) {
		this.extType = extType;
		return this;
	}

	public void unsetExtType() {
		this.extType = null;
	}

	/**
	 * Returns true if field extType is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExtType() {
		return this.extType != null;
	}

	public void setExtTypeIsSet(boolean value) {
		if (!value) {
			this.extType = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMediaId() {
		return this.mediaId;
	}

	public ArgMessage setMediaId(@org.apache.thrift.annotation.Nullable java.lang.String mediaId) {
		this.mediaId = mediaId;
		return this;
	}

	public void unsetMediaId() {
		this.mediaId = null;
	}

	/**
	 * Returns true if field mediaId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMediaId() {
		return this.mediaId != null;
	}

	public void setMediaIdIsSet(boolean value) {
		if (!value) {
			this.mediaId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getContent() {
		return this.content;
	}

	public ArgMessage setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
		this.content = content;
		return this;
	}

	public void unsetContent() {
		this.content = null;
	}

	/**
	 * Returns true if field content is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetContent() {
		return this.content != null;
	}

	public void setContentIsSet(boolean value) {
		if (!value) {
			this.content = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getComment() {
		return this.comment;
	}

	public ArgMessage setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
		this.comment = comment;
		return this;
	}

	public void unsetComment() {
		this.comment = null;
	}

	/**
	 * Returns true if field comment is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComment() {
		return this.comment != null;
	}

	public void setCommentIsSet(boolean value) {
		if (!value) {
			this.comment = null;
		}
	}

	public boolean isIsAssemble() {
		return this.isAssemble;
	}

	public ArgMessage setIsAssemble(boolean isAssemble) {
		this.isAssemble = isAssemble;
		setIsAssembleIsSet(true);
		return this;
	}

	public void unsetIsAssemble() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISASSEMBLE_ISSET_ID);
	}

	/**
	 * Returns true if field isAssemble is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsAssemble() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISASSEMBLE_ISSET_ID);
	}

	public void setIsAssembleIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISASSEMBLE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRelId() {
		return this.relId;
	}

	public ArgMessage setRelId(@org.apache.thrift.annotation.Nullable java.lang.String relId) {
		this.relId = relId;
		return this;
	}

	public void unsetRelId() {
		this.relId = null;
	}

	/**
	 * Returns true if field relId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRelId() {
		return this.relId != null;
	}

	public void setRelIdIsSet(boolean value) {
		if (!value) {
			this.relId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCid() {
		return this.cid;
	}

	public ArgMessage setCid(@org.apache.thrift.annotation.Nullable java.lang.String cid) {
		this.cid = cid;
		return this;
	}

	public void unsetCid() {
		this.cid = null;
	}

	/**
	 * Returns true if field cid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCid() {
		return this.cid != null;
	}

	public void setCidIsSet(boolean value) {
		if (!value) {
			this.cid = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case FROM_ID:
			if (value == null) {
				unsetFromId();
			}
			else {
				setFromId((java.lang.String) value);
			}
			break;

		case TID:
			if (value == null) {
				unsetTid();
			}
			else {
				setTid((java.lang.String) value);
			}
			break;

		case MSG_TYPE:
			if (value == null) {
				unsetMsgType();
			}
			else {
				setMsgType((java.lang.String) value);
			}
			break;

		case EXT_TYPE:
			if (value == null) {
				unsetExtType();
			}
			else {
				setExtType((java.lang.String) value);
			}
			break;

		case MEDIA_ID:
			if (value == null) {
				unsetMediaId();
			}
			else {
				setMediaId((java.lang.String) value);
			}
			break;

		case CONTENT:
			if (value == null) {
				unsetContent();
			}
			else {
				setContent((java.lang.String) value);
			}
			break;

		case COMMENT:
			if (value == null) {
				unsetComment();
			}
			else {
				setComment((java.lang.String) value);
			}
			break;

		case IS_ASSEMBLE:
			if (value == null) {
				unsetIsAssemble();
			}
			else {
				setIsAssemble((java.lang.Boolean) value);
			}
			break;

		case REL_ID:
			if (value == null) {
				unsetRelId();
			}
			else {
				setRelId((java.lang.String) value);
			}
			break;

		case CID:
			if (value == null) {
				unsetCid();
			}
			else {
				setCid((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID:
			return getUid();

		case FROM_ID:
			return getFromId();

		case TID:
			return getTid();

		case MSG_TYPE:
			return getMsgType();

		case EXT_TYPE:
			return getExtType();

		case MEDIA_ID:
			return getMediaId();

		case CONTENT:
			return getContent();

		case COMMENT:
			return getComment();

		case IS_ASSEMBLE:
			return isIsAssemble();

		case REL_ID:
			return getRelId();

		case CID:
			return getCid();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID:
			return isSetUid();
		case FROM_ID:
			return isSetFromId();
		case TID:
			return isSetTid();
		case MSG_TYPE:
			return isSetMsgType();
		case EXT_TYPE:
			return isSetExtType();
		case MEDIA_ID:
			return isSetMediaId();
		case CONTENT:
			return isSetContent();
		case COMMENT:
			return isSetComment();
		case IS_ASSEMBLE:
			return isSetIsAssemble();
		case REL_ID:
			return isSetRelId();
		case CID:
			return isSetCid();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgMessage)
			return this.equals((ArgMessage) that);
		return false;
	}

	public boolean equals(ArgMessage that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_fromId = true && this.isSetFromId();
		boolean that_present_fromId = true && that.isSetFromId();
		if (this_present_fromId || that_present_fromId) {
			if (!(this_present_fromId && that_present_fromId))
				return false;
			if (!this.fromId.equals(that.fromId))
				return false;
		}

		boolean this_present_tid = true && this.isSetTid();
		boolean that_present_tid = true && that.isSetTid();
		if (this_present_tid || that_present_tid) {
			if (!(this_present_tid && that_present_tid))
				return false;
			if (!this.tid.equals(that.tid))
				return false;
		}

		boolean this_present_msgType = true && this.isSetMsgType();
		boolean that_present_msgType = true && that.isSetMsgType();
		if (this_present_msgType || that_present_msgType) {
			if (!(this_present_msgType && that_present_msgType))
				return false;
			if (!this.msgType.equals(that.msgType))
				return false;
		}

		boolean this_present_extType = true && this.isSetExtType();
		boolean that_present_extType = true && that.isSetExtType();
		if (this_present_extType || that_present_extType) {
			if (!(this_present_extType && that_present_extType))
				return false;
			if (!this.extType.equals(that.extType))
				return false;
		}

		boolean this_present_mediaId = true && this.isSetMediaId();
		boolean that_present_mediaId = true && that.isSetMediaId();
		if (this_present_mediaId || that_present_mediaId) {
			if (!(this_present_mediaId && that_present_mediaId))
				return false;
			if (!this.mediaId.equals(that.mediaId))
				return false;
		}

		boolean this_present_content = true && this.isSetContent();
		boolean that_present_content = true && that.isSetContent();
		if (this_present_content || that_present_content) {
			if (!(this_present_content && that_present_content))
				return false;
			if (!this.content.equals(that.content))
				return false;
		}

		boolean this_present_comment = true && this.isSetComment();
		boolean that_present_comment = true && that.isSetComment();
		if (this_present_comment || that_present_comment) {
			if (!(this_present_comment && that_present_comment))
				return false;
			if (!this.comment.equals(that.comment))
				return false;
		}

		boolean this_present_isAssemble = true && this.isSetIsAssemble();
		boolean that_present_isAssemble = true && that.isSetIsAssemble();
		if (this_present_isAssemble || that_present_isAssemble) {
			if (!(this_present_isAssemble && that_present_isAssemble))
				return false;
			if (this.isAssemble != that.isAssemble)
				return false;
		}

		boolean this_present_relId = true && this.isSetRelId();
		boolean that_present_relId = true && that.isSetRelId();
		if (this_present_relId || that_present_relId) {
			if (!(this_present_relId && that_present_relId))
				return false;
			if (!this.relId.equals(that.relId))
				return false;
		}

		boolean this_present_cid = true && this.isSetCid();
		boolean that_present_cid = true && that.isSetCid();
		if (this_present_cid || that_present_cid) {
			if (!(this_present_cid && that_present_cid))
				return false;
			if (!this.cid.equals(that.cid))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetFromId()) ? 131071 : 524287);
		if (isSetFromId())
			hashCode = hashCode * 8191 + fromId.hashCode();

		hashCode = hashCode * 8191 + ((isSetTid()) ? 131071 : 524287);
		if (isSetTid())
			hashCode = hashCode * 8191 + tid.hashCode();

		hashCode = hashCode * 8191 + ((isSetMsgType()) ? 131071 : 524287);
		if (isSetMsgType())
			hashCode = hashCode * 8191 + msgType.hashCode();

		hashCode = hashCode * 8191 + ((isSetExtType()) ? 131071 : 524287);
		if (isSetExtType())
			hashCode = hashCode * 8191 + extType.hashCode();

		hashCode = hashCode * 8191 + ((isSetMediaId()) ? 131071 : 524287);
		if (isSetMediaId())
			hashCode = hashCode * 8191 + mediaId.hashCode();

		hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
		if (isSetContent())
			hashCode = hashCode * 8191 + content.hashCode();

		hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
		if (isSetComment())
			hashCode = hashCode * 8191 + comment.hashCode();

		hashCode = hashCode * 8191 + ((isSetIsAssemble()) ? 131071 : 524287);
		if (isSetIsAssemble())
			hashCode = hashCode * 8191 + ((isAssemble) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetRelId()) ? 131071 : 524287);
		if (isSetRelId())
			hashCode = hashCode * 8191 + relId.hashCode();

		hashCode = hashCode * 8191 + ((isSetCid()) ? 131071 : 524287);
		if (isSetCid())
			hashCode = hashCode * 8191 + cid.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgMessage other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFromId()).compareTo(other.isSetFromId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFromId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromId, other.fromId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMsgType()).compareTo(other.isSetMsgType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMsgType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExtType()).compareTo(other.isSetExtType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExtType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extType, other.extType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMediaId()).compareTo(other.isSetMediaId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMediaId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaId, other.mediaId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetContent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsAssemble()).compareTo(other.isSetIsAssemble());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsAssemble()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAssemble, other.isAssemble);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRelId()).compareTo(other.isSetRelId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRelId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relId, other.relId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgMessage(");
		boolean first = true;

		if (isSetUid()) {
			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
		}
		if (!first)
			sb.append(", ");
		sb.append("fromId:");
		if (this.fromId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.fromId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("tid:");
		if (this.tid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.tid);
		}
		first = false;
		if (isSetMsgType()) {
			if (!first)
				sb.append(", ");
			sb.append("msgType:");
			if (this.msgType == null) {
				sb.append("null");
			}
			else {
				sb.append(this.msgType);
			}
			first = false;
		}
		if (isSetExtType()) {
			if (!first)
				sb.append(", ");
			sb.append("extType:");
			if (this.extType == null) {
				sb.append("null");
			}
			else {
				sb.append(this.extType);
			}
			first = false;
		}
		if (isSetMediaId()) {
			if (!first)
				sb.append(", ");
			sb.append("mediaId:");
			if (this.mediaId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.mediaId);
			}
			first = false;
		}
		if (!first)
			sb.append(", ");
		sb.append("content:");
		if (this.content == null) {
			sb.append("null");
		}
		else {
			sb.append(this.content);
		}
		first = false;
		if (isSetComment()) {
			if (!first)
				sb.append(", ");
			sb.append("comment:");
			if (this.comment == null) {
				sb.append("null");
			}
			else {
				sb.append(this.comment);
			}
			first = false;
		}
		if (isSetIsAssemble()) {
			if (!first)
				sb.append(", ");
			sb.append("isAssemble:");
			sb.append(this.isAssemble);
			first = false;
		}
		if (isSetRelId()) {
			if (!first)
				sb.append(", ");
			sb.append("relId:");
			if (this.relId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.relId);
			}
			first = false;
		}
		if (isSetCid()) {
			if (!first)
				sb.append(", ");
			sb.append("cid:");
			if (this.cid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.cid);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgMessageStandardScheme getScheme() {
			return new ArgMessageStandardScheme();
		}

	}

	private static class ArgMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgMessage> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgMessage struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // FROM_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.fromId = iprot.readString();
						struct.setFromIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // TID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.tid = iprot.readString();
						struct.setTidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // MSG_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.msgType = iprot.readString();
						struct.setMsgTypeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // EXT_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.extType = iprot.readString();
						struct.setExtTypeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // MEDIA_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mediaId = iprot.readString();
						struct.setMediaIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CONTENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.content = iprot.readString();
						struct.setContentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.comment = iprot.readString();
						struct.setCommentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // IS_ASSEMBLE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isAssemble = iprot.readBool();
						struct.setIsAssembleIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // REL_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.relId = iprot.readString();
						struct.setRelIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // CID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.cid = iprot.readString();
						struct.setCidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgMessage struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uid != null) {
				if (struct.isSetUid()) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.fromId != null) {
				oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
				oprot.writeString(struct.fromId);
				oprot.writeFieldEnd();
			}
			if (struct.tid != null) {
				oprot.writeFieldBegin(TID_FIELD_DESC);
				oprot.writeString(struct.tid);
				oprot.writeFieldEnd();
			}
			if (struct.mediaId != null) {
				if (struct.isSetMediaId()) {
					oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
					oprot.writeString(struct.mediaId);
					oprot.writeFieldEnd();
				}
			}
			if (struct.content != null) {
				oprot.writeFieldBegin(CONTENT_FIELD_DESC);
				oprot.writeString(struct.content);
				oprot.writeFieldEnd();
			}
			if (struct.isSetIsAssemble()) {
				oprot.writeFieldBegin(IS_ASSEMBLE_FIELD_DESC);
				oprot.writeBool(struct.isAssemble);
				oprot.writeFieldEnd();
			}
			if (struct.comment != null) {
				if (struct.isSetComment()) {
					oprot.writeFieldBegin(COMMENT_FIELD_DESC);
					oprot.writeString(struct.comment);
					oprot.writeFieldEnd();
				}
			}
			if (struct.msgType != null) {
				if (struct.isSetMsgType()) {
					oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
					oprot.writeString(struct.msgType);
					oprot.writeFieldEnd();
				}
			}
			if (struct.extType != null) {
				if (struct.isSetExtType()) {
					oprot.writeFieldBegin(EXT_TYPE_FIELD_DESC);
					oprot.writeString(struct.extType);
					oprot.writeFieldEnd();
				}
			}
			if (struct.relId != null) {
				if (struct.isSetRelId()) {
					oprot.writeFieldBegin(REL_ID_FIELD_DESC);
					oprot.writeString(struct.relId);
					oprot.writeFieldEnd();
				}
			}
			if (struct.cid != null) {
				if (struct.isSetCid()) {
					oprot.writeFieldBegin(CID_FIELD_DESC);
					oprot.writeString(struct.cid);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgMessageTupleScheme getScheme() {
			return new ArgMessageTupleScheme();
		}

	}

	private static class ArgMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgMessage> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgMessage struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUid()) {
				optionals.set(0);
			}
			if (struct.isSetFromId()) {
				optionals.set(1);
			}
			if (struct.isSetTid()) {
				optionals.set(2);
			}
			if (struct.isSetMsgType()) {
				optionals.set(3);
			}
			if (struct.isSetExtType()) {
				optionals.set(4);
			}
			if (struct.isSetMediaId()) {
				optionals.set(5);
			}
			if (struct.isSetContent()) {
				optionals.set(6);
			}
			if (struct.isSetComment()) {
				optionals.set(7);
			}
			if (struct.isSetIsAssemble()) {
				optionals.set(8);
			}
			if (struct.isSetRelId()) {
				optionals.set(9);
			}
			if (struct.isSetCid()) {
				optionals.set(10);
			}
			oprot.writeBitSet(optionals, 11);
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetFromId()) {
				oprot.writeString(struct.fromId);
			}
			if (struct.isSetTid()) {
				oprot.writeString(struct.tid);
			}
			if (struct.isSetMsgType()) {
				oprot.writeString(struct.msgType);
			}
			if (struct.isSetExtType()) {
				oprot.writeString(struct.extType);
			}
			if (struct.isSetMediaId()) {
				oprot.writeString(struct.mediaId);
			}
			if (struct.isSetContent()) {
				oprot.writeString(struct.content);
			}
			if (struct.isSetComment()) {
				oprot.writeString(struct.comment);
			}
			if (struct.isSetIsAssemble()) {
				oprot.writeBool(struct.isAssemble);
			}
			if (struct.isSetRelId()) {
				oprot.writeString(struct.relId);
			}
			if (struct.isSetCid()) {
				oprot.writeString(struct.cid);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgMessage struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(11);
			if (incoming.get(0)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.fromId = iprot.readString();
				struct.setFromIdIsSet(true);
			}
			if (incoming.get(2)) {
				struct.tid = iprot.readString();
				struct.setTidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.msgType = iprot.readString();
				struct.setMsgTypeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.extType = iprot.readString();
				struct.setExtTypeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.mediaId = iprot.readString();
				struct.setMediaIdIsSet(true);
			}
			if (incoming.get(6)) {
				struct.content = iprot.readString();
				struct.setContentIsSet(true);
			}
			if (incoming.get(7)) {
				struct.comment = iprot.readString();
				struct.setCommentIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isAssemble = iprot.readBool();
				struct.setIsAssembleIsSet(true);
			}
			if (incoming.get(9)) {
				struct.relId = iprot.readString();
				struct.setRelIdIsSet(true);
			}
			if (incoming.get(10)) {
				struct.cid = iprot.readString();
				struct.setCidIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
