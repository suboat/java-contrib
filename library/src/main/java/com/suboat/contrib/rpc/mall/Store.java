/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Store
		implements org.apache.thrift.TBase<Store, Store._Fields>, java.io.Serializable, Cloneable, Comparable<Store> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Store");

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"name", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key",
			org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField IS_STAFF_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isStaff", org.apache.thrift.protocol.TType.BOOL, (short) 7);

	private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isActive", org.apache.thrift.protocol.TType.BOOL, (short) 8);

	private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isDelete", org.apache.thrift.protocol.TType.BOOL, (short) 9);

	private static final org.apache.thrift.protocol.TField IS_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isPay", org.apache.thrift.protocol.TType.BOOL, (short) 10);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 11);

	private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"icon", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"description", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"address", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField NUM_FANS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numFans", org.apache.thrift.protocol.TType.I32, (short) 15);

	private static final org.apache.thrift.protocol.TField PROFIT_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"profitRate", org.apache.thrift.protocol.TType.DOUBLE, (short) 16);

	private static final org.apache.thrift.protocol.TField PROFIT_BANK_AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"profitBankAgent", org.apache.thrift.protocol.TType.STRING, (short) 17);

	private static final org.apache.thrift.protocol.TField PROFIT_BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"profitBankName", org.apache.thrift.protocol.TType.STRING, (short) 18);

	private static final org.apache.thrift.protocol.TField PROFIT_BANK_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"profitBankNumber", org.apache.thrift.protocol.TType.STRING, (short) 19);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StoreStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StoreTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String name; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String key; // required

	public boolean isStaff; // required

	public boolean isActive; // required

	public boolean isDelete; // required

	public boolean isPay; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String icon; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String description; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String address; // required

	public int numFans; // required

	public double profitRate; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String profitBankAgent; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String profitBankName; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String profitBankNumber; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		SID((short) 1, "sid"), UID((short) 2, "uid"), CREATE_TIME((short) 3, "createTime"), UPDATE_TIME((short) 4,
				"updateTime"), NAME((short) 5, "name"), KEY((short) 6, "key"), IS_STAFF((short) 7,
						"isStaff"), IS_ACTIVE((short) 8, "isActive"), IS_DELETE((short) 9,
								"isDelete"), IS_PAY((short) 10, "isPay"), STATUS((short) 11, "status"), ICON((short) 12,
										"icon"), DESCRIPTION((short) 13, "description"), ADDRESS((short) 14,
												"address"), NUM_FANS((short) 15, "numFans"), PROFIT_RATE((short) 16,
														"profitRate"), PROFIT_BANK_AGENT((short) 17,
																"profitBankAgent"), PROFIT_BANK_NAME((short) 18,
																		"profitBankName"), PROFIT_BANK_NUMBER(
																				(short) 19, "profitBankNumber");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // SID
				return SID;
			case 2: // UID
				return UID;
			case 3: // CREATE_TIME
				return CREATE_TIME;
			case 4: // UPDATE_TIME
				return UPDATE_TIME;
			case 5: // NAME
				return NAME;
			case 6: // KEY
				return KEY;
			case 7: // IS_STAFF
				return IS_STAFF;
			case 8: // IS_ACTIVE
				return IS_ACTIVE;
			case 9: // IS_DELETE
				return IS_DELETE;
			case 10: // IS_PAY
				return IS_PAY;
			case 11: // STATUS
				return STATUS;
			case 12: // ICON
				return ICON;
			case 13: // DESCRIPTION
				return DESCRIPTION;
			case 14: // ADDRESS
				return ADDRESS;
			case 15: // NUM_FANS
				return NUM_FANS;
			case 16: // PROFIT_RATE
				return PROFIT_RATE;
			case 17: // PROFIT_BANK_AGENT
				return PROFIT_BANK_AGENT;
			case 18: // PROFIT_BANK_NAME
				return PROFIT_BANK_NAME;
			case 19: // PROFIT_BANK_NUMBER
				return PROFIT_BANK_NUMBER;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISSTAFF_ISSET_ID = 0;

	private static final int __ISACTIVE_ISSET_ID = 1;

	private static final int __ISDELETE_ISSET_ID = 2;

	private static final int __ISPAY_ISSET_ID = 3;

	private static final int __STATUS_ISSET_ID = 4;

	private static final int __NUMFANS_ISSET_ID = 5;

	private static final int __PROFITRATE_ISSET_ID = 6;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.NAME,
				new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.KEY,
				new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_STAFF,
				new org.apache.thrift.meta_data.FieldMetaData("isStaff",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_ACTIVE,
				new org.apache.thrift.meta_data.FieldMetaData("isActive",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_DELETE,
				new org.apache.thrift.meta_data.FieldMetaData("isDelete",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_PAY,
				new org.apache.thrift.meta_data.FieldMetaData("isPay", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ICON,
				new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESCRIPTION,
				new org.apache.thrift.meta_data.FieldMetaData("description",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ADDRESS,
				new org.apache.thrift.meta_data.FieldMetaData("address",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NUM_FANS,
				new org.apache.thrift.meta_data.FieldMetaData("numFans",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PROFIT_RATE,
				new org.apache.thrift.meta_data.FieldMetaData("profitRate",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PROFIT_BANK_AGENT,
				new org.apache.thrift.meta_data.FieldMetaData("profitBankAgent",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PROFIT_BANK_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("profitBankName",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PROFIT_BANK_NUMBER,
				new org.apache.thrift.meta_data.FieldMetaData("profitBankNumber",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Store.class, metaDataMap);
	}

	public Store() {
	}

	public Store(java.lang.String sid, java.lang.String uid, java.lang.String createTime, java.lang.String updateTime,
			java.lang.String name, java.lang.String key, boolean isStaff, boolean isActive, boolean isDelete,
			boolean isPay, int status, java.lang.String icon, java.lang.String description, java.lang.String address,
			int numFans, double profitRate, java.lang.String profitBankAgent, java.lang.String profitBankName,
			java.lang.String profitBankNumber) {
		this();
		this.sid = sid;
		this.uid = uid;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.name = name;
		this.key = key;
		this.isStaff = isStaff;
		setIsStaffIsSet(true);
		this.isActive = isActive;
		setIsActiveIsSet(true);
		this.isDelete = isDelete;
		setIsDeleteIsSet(true);
		this.isPay = isPay;
		setIsPayIsSet(true);
		this.status = status;
		setStatusIsSet(true);
		this.icon = icon;
		this.description = description;
		this.address = address;
		this.numFans = numFans;
		setNumFansIsSet(true);
		this.profitRate = profitRate;
		setProfitRateIsSet(true);
		this.profitBankAgent = profitBankAgent;
		this.profitBankName = profitBankName;
		this.profitBankNumber = profitBankNumber;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Store(Store other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		if (other.isSetName()) {
			this.name = other.name;
		}
		if (other.isSetKey()) {
			this.key = other.key;
		}
		this.isStaff = other.isStaff;
		this.isActive = other.isActive;
		this.isDelete = other.isDelete;
		this.isPay = other.isPay;
		this.status = other.status;
		if (other.isSetIcon()) {
			this.icon = other.icon;
		}
		if (other.isSetDescription()) {
			this.description = other.description;
		}
		if (other.isSetAddress()) {
			this.address = other.address;
		}
		this.numFans = other.numFans;
		this.profitRate = other.profitRate;
		if (other.isSetProfitBankAgent()) {
			this.profitBankAgent = other.profitBankAgent;
		}
		if (other.isSetProfitBankName()) {
			this.profitBankName = other.profitBankName;
		}
		if (other.isSetProfitBankNumber()) {
			this.profitBankNumber = other.profitBankNumber;
		}
	}

	public Store deepCopy() {
		return new Store(this);
	}

	@Override
	public void clear() {
		this.sid = null;
		this.uid = null;
		this.createTime = null;
		this.updateTime = null;
		this.name = null;
		this.key = null;
		setIsStaffIsSet(false);
		this.isStaff = false;
		setIsActiveIsSet(false);
		this.isActive = false;
		setIsDeleteIsSet(false);
		this.isDelete = false;
		setIsPayIsSet(false);
		this.isPay = false;
		setStatusIsSet(false);
		this.status = 0;
		this.icon = null;
		this.description = null;
		this.address = null;
		setNumFansIsSet(false);
		this.numFans = 0;
		setProfitRateIsSet(false);
		this.profitRate = 0.0;
		this.profitBankAgent = null;
		this.profitBankName = null;
		this.profitBankNumber = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public Store setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public Store setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Store setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Store setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getName() {
		return this.name;
	}

	public Store setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	/**
	 * Returns true if field name is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getKey() {
		return this.key;
	}

	public Store setKey(@org.apache.thrift.annotation.Nullable java.lang.String key) {
		this.key = key;
		return this;
	}

	public void unsetKey() {
		this.key = null;
	}

	/**
	 * Returns true if field key is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetKey() {
		return this.key != null;
	}

	public void setKeyIsSet(boolean value) {
		if (!value) {
			this.key = null;
		}
	}

	public boolean isIsStaff() {
		return this.isStaff;
	}

	public Store setIsStaff(boolean isStaff) {
		this.isStaff = isStaff;
		setIsStaffIsSet(true);
		return this;
	}

	public void unsetIsStaff() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTAFF_ISSET_ID);
	}

	/**
	 * Returns true if field isStaff is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsStaff() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTAFF_ISSET_ID);
	}

	public void setIsStaffIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSTAFF_ISSET_ID, value);
	}

	public boolean isIsActive() {
		return this.isActive;
	}

	public Store setIsActive(boolean isActive) {
		this.isActive = isActive;
		setIsActiveIsSet(true);
		return this;
	}

	public void unsetIsActive() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	/**
	 * Returns true if field isActive is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsActive() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	public void setIsActiveIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISACTIVE_ISSET_ID, value);
	}

	public boolean isIsDelete() {
		return this.isDelete;
	}

	public Store setIsDelete(boolean isDelete) {
		this.isDelete = isDelete;
		setIsDeleteIsSet(true);
		return this;
	}

	public void unsetIsDelete() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	/**
	 * Returns true if field isDelete is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsDelete() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	public void setIsDeleteIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
	}

	public boolean isIsPay() {
		return this.isPay;
	}

	public Store setIsPay(boolean isPay) {
		this.isPay = isPay;
		setIsPayIsSet(true);
		return this;
	}

	public void unsetIsPay() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPAY_ISSET_ID);
	}

	/**
	 * Returns true if field isPay is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsPay() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPAY_ISSET_ID);
	}

	public void setIsPayIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPAY_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public Store setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIcon() {
		return this.icon;
	}

	public Store setIcon(@org.apache.thrift.annotation.Nullable java.lang.String icon) {
		this.icon = icon;
		return this;
	}

	public void unsetIcon() {
		this.icon = null;
	}

	/**
	 * Returns true if field icon is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIcon() {
		return this.icon != null;
	}

	public void setIconIsSet(boolean value) {
		if (!value) {
			this.icon = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDescription() {
		return this.description;
	}

	public Store setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
		this.description = description;
		return this;
	}

	public void unsetDescription() {
		this.description = null;
	}

	/**
	 * Returns true if field description is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDescription() {
		return this.description != null;
	}

	public void setDescriptionIsSet(boolean value) {
		if (!value) {
			this.description = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAddress() {
		return this.address;
	}

	public Store setAddress(@org.apache.thrift.annotation.Nullable java.lang.String address) {
		this.address = address;
		return this;
	}

	public void unsetAddress() {
		this.address = null;
	}

	/**
	 * Returns true if field address is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAddress() {
		return this.address != null;
	}

	public void setAddressIsSet(boolean value) {
		if (!value) {
			this.address = null;
		}
	}

	public int getNumFans() {
		return this.numFans;
	}

	public Store setNumFans(int numFans) {
		this.numFans = numFans;
		setNumFansIsSet(true);
		return this;
	}

	public void unsetNumFans() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMFANS_ISSET_ID);
	}

	/**
	 * Returns true if field numFans is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumFans() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMFANS_ISSET_ID);
	}

	public void setNumFansIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMFANS_ISSET_ID, value);
	}

	public double getProfitRate() {
		return this.profitRate;
	}

	public Store setProfitRate(double profitRate) {
		this.profitRate = profitRate;
		setProfitRateIsSet(true);
		return this;
	}

	public void unsetProfitRate() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROFITRATE_ISSET_ID);
	}

	/**
	 * Returns true if field profitRate is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProfitRate() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROFITRATE_ISSET_ID);
	}

	public void setProfitRateIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROFITRATE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProfitBankAgent() {
		return this.profitBankAgent;
	}

	public Store setProfitBankAgent(@org.apache.thrift.annotation.Nullable java.lang.String profitBankAgent) {
		this.profitBankAgent = profitBankAgent;
		return this;
	}

	public void unsetProfitBankAgent() {
		this.profitBankAgent = null;
	}

	/**
	 * Returns true if field profitBankAgent is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProfitBankAgent() {
		return this.profitBankAgent != null;
	}

	public void setProfitBankAgentIsSet(boolean value) {
		if (!value) {
			this.profitBankAgent = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProfitBankName() {
		return this.profitBankName;
	}

	public Store setProfitBankName(@org.apache.thrift.annotation.Nullable java.lang.String profitBankName) {
		this.profitBankName = profitBankName;
		return this;
	}

	public void unsetProfitBankName() {
		this.profitBankName = null;
	}

	/**
	 * Returns true if field profitBankName is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProfitBankName() {
		return this.profitBankName != null;
	}

	public void setProfitBankNameIsSet(boolean value) {
		if (!value) {
			this.profitBankName = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProfitBankNumber() {
		return this.profitBankNumber;
	}

	public Store setProfitBankNumber(@org.apache.thrift.annotation.Nullable java.lang.String profitBankNumber) {
		this.profitBankNumber = profitBankNumber;
		return this;
	}

	public void unsetProfitBankNumber() {
		this.profitBankNumber = null;
	}

	/**
	 * Returns true if field profitBankNumber is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProfitBankNumber() {
		return this.profitBankNumber != null;
	}

	public void setProfitBankNumberIsSet(boolean value) {
		if (!value) {
			this.profitBankNumber = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case NAME:
			if (value == null) {
				unsetName();
			}
			else {
				setName((java.lang.String) value);
			}
			break;

		case KEY:
			if (value == null) {
				unsetKey();
			}
			else {
				setKey((java.lang.String) value);
			}
			break;

		case IS_STAFF:
			if (value == null) {
				unsetIsStaff();
			}
			else {
				setIsStaff((java.lang.Boolean) value);
			}
			break;

		case IS_ACTIVE:
			if (value == null) {
				unsetIsActive();
			}
			else {
				setIsActive((java.lang.Boolean) value);
			}
			break;

		case IS_DELETE:
			if (value == null) {
				unsetIsDelete();
			}
			else {
				setIsDelete((java.lang.Boolean) value);
			}
			break;

		case IS_PAY:
			if (value == null) {
				unsetIsPay();
			}
			else {
				setIsPay((java.lang.Boolean) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case ICON:
			if (value == null) {
				unsetIcon();
			}
			else {
				setIcon((java.lang.String) value);
			}
			break;

		case DESCRIPTION:
			if (value == null) {
				unsetDescription();
			}
			else {
				setDescription((java.lang.String) value);
			}
			break;

		case ADDRESS:
			if (value == null) {
				unsetAddress();
			}
			else {
				setAddress((java.lang.String) value);
			}
			break;

		case NUM_FANS:
			if (value == null) {
				unsetNumFans();
			}
			else {
				setNumFans((java.lang.Integer) value);
			}
			break;

		case PROFIT_RATE:
			if (value == null) {
				unsetProfitRate();
			}
			else {
				setProfitRate((java.lang.Double) value);
			}
			break;

		case PROFIT_BANK_AGENT:
			if (value == null) {
				unsetProfitBankAgent();
			}
			else {
				setProfitBankAgent((java.lang.String) value);
			}
			break;

		case PROFIT_BANK_NAME:
			if (value == null) {
				unsetProfitBankName();
			}
			else {
				setProfitBankName((java.lang.String) value);
			}
			break;

		case PROFIT_BANK_NUMBER:
			if (value == null) {
				unsetProfitBankNumber();
			}
			else {
				setProfitBankNumber((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case SID:
			return getSid();

		case UID:
			return getUid();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case NAME:
			return getName();

		case KEY:
			return getKey();

		case IS_STAFF:
			return isIsStaff();

		case IS_ACTIVE:
			return isIsActive();

		case IS_DELETE:
			return isIsDelete();

		case IS_PAY:
			return isIsPay();

		case STATUS:
			return getStatus();

		case ICON:
			return getIcon();

		case DESCRIPTION:
			return getDescription();

		case ADDRESS:
			return getAddress();

		case NUM_FANS:
			return getNumFans();

		case PROFIT_RATE:
			return getProfitRate();

		case PROFIT_BANK_AGENT:
			return getProfitBankAgent();

		case PROFIT_BANK_NAME:
			return getProfitBankName();

		case PROFIT_BANK_NUMBER:
			return getProfitBankNumber();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case SID:
			return isSetSid();
		case UID:
			return isSetUid();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case NAME:
			return isSetName();
		case KEY:
			return isSetKey();
		case IS_STAFF:
			return isSetIsStaff();
		case IS_ACTIVE:
			return isSetIsActive();
		case IS_DELETE:
			return isSetIsDelete();
		case IS_PAY:
			return isSetIsPay();
		case STATUS:
			return isSetStatus();
		case ICON:
			return isSetIcon();
		case DESCRIPTION:
			return isSetDescription();
		case ADDRESS:
			return isSetAddress();
		case NUM_FANS:
			return isSetNumFans();
		case PROFIT_RATE:
			return isSetProfitRate();
		case PROFIT_BANK_AGENT:
			return isSetProfitBankAgent();
		case PROFIT_BANK_NAME:
			return isSetProfitBankName();
		case PROFIT_BANK_NUMBER:
			return isSetProfitBankNumber();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Store)
			return this.equals((Store) that);
		return false;
	}

	public boolean equals(Store that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!this.name.equals(that.name))
				return false;
		}

		boolean this_present_key = true && this.isSetKey();
		boolean that_present_key = true && that.isSetKey();
		if (this_present_key || that_present_key) {
			if (!(this_present_key && that_present_key))
				return false;
			if (!this.key.equals(that.key))
				return false;
		}

		boolean this_present_isStaff = true;
		boolean that_present_isStaff = true;
		if (this_present_isStaff || that_present_isStaff) {
			if (!(this_present_isStaff && that_present_isStaff))
				return false;
			if (this.isStaff != that.isStaff)
				return false;
		}

		boolean this_present_isActive = true;
		boolean that_present_isActive = true;
		if (this_present_isActive || that_present_isActive) {
			if (!(this_present_isActive && that_present_isActive))
				return false;
			if (this.isActive != that.isActive)
				return false;
		}

		boolean this_present_isDelete = true;
		boolean that_present_isDelete = true;
		if (this_present_isDelete || that_present_isDelete) {
			if (!(this_present_isDelete && that_present_isDelete))
				return false;
			if (this.isDelete != that.isDelete)
				return false;
		}

		boolean this_present_isPay = true;
		boolean that_present_isPay = true;
		if (this_present_isPay || that_present_isPay) {
			if (!(this_present_isPay && that_present_isPay))
				return false;
			if (this.isPay != that.isPay)
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_icon = true && this.isSetIcon();
		boolean that_present_icon = true && that.isSetIcon();
		if (this_present_icon || that_present_icon) {
			if (!(this_present_icon && that_present_icon))
				return false;
			if (!this.icon.equals(that.icon))
				return false;
		}

		boolean this_present_description = true && this.isSetDescription();
		boolean that_present_description = true && that.isSetDescription();
		if (this_present_description || that_present_description) {
			if (!(this_present_description && that_present_description))
				return false;
			if (!this.description.equals(that.description))
				return false;
		}

		boolean this_present_address = true && this.isSetAddress();
		boolean that_present_address = true && that.isSetAddress();
		if (this_present_address || that_present_address) {
			if (!(this_present_address && that_present_address))
				return false;
			if (!this.address.equals(that.address))
				return false;
		}

		boolean this_present_numFans = true;
		boolean that_present_numFans = true;
		if (this_present_numFans || that_present_numFans) {
			if (!(this_present_numFans && that_present_numFans))
				return false;
			if (this.numFans != that.numFans)
				return false;
		}

		boolean this_present_profitRate = true;
		boolean that_present_profitRate = true;
		if (this_present_profitRate || that_present_profitRate) {
			if (!(this_present_profitRate && that_present_profitRate))
				return false;
			if (this.profitRate != that.profitRate)
				return false;
		}

		boolean this_present_profitBankAgent = true && this.isSetProfitBankAgent();
		boolean that_present_profitBankAgent = true && that.isSetProfitBankAgent();
		if (this_present_profitBankAgent || that_present_profitBankAgent) {
			if (!(this_present_profitBankAgent && that_present_profitBankAgent))
				return false;
			if (!this.profitBankAgent.equals(that.profitBankAgent))
				return false;
		}

		boolean this_present_profitBankName = true && this.isSetProfitBankName();
		boolean that_present_profitBankName = true && that.isSetProfitBankName();
		if (this_present_profitBankName || that_present_profitBankName) {
			if (!(this_present_profitBankName && that_present_profitBankName))
				return false;
			if (!this.profitBankName.equals(that.profitBankName))
				return false;
		}

		boolean this_present_profitBankNumber = true && this.isSetProfitBankNumber();
		boolean that_present_profitBankNumber = true && that.isSetProfitBankNumber();
		if (this_present_profitBankNumber || that_present_profitBankNumber) {
			if (!(this_present_profitBankNumber && that_present_profitBankNumber))
				return false;
			if (!this.profitBankNumber.equals(that.profitBankNumber))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
		if (isSetName())
			hashCode = hashCode * 8191 + name.hashCode();

		hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
		if (isSetKey())
			hashCode = hashCode * 8191 + key.hashCode();

		hashCode = hashCode * 8191 + ((isStaff) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isActive) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isDelete) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isPay) ? 131071 : 524287);

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetIcon()) ? 131071 : 524287);
		if (isSetIcon())
			hashCode = hashCode * 8191 + icon.hashCode();

		hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
		if (isSetDescription())
			hashCode = hashCode * 8191 + description.hashCode();

		hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
		if (isSetAddress())
			hashCode = hashCode * 8191 + address.hashCode();

		hashCode = hashCode * 8191 + numFans;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(profitRate);

		hashCode = hashCode * 8191 + ((isSetProfitBankAgent()) ? 131071 : 524287);
		if (isSetProfitBankAgent())
			hashCode = hashCode * 8191 + profitBankAgent.hashCode();

		hashCode = hashCode * 8191 + ((isSetProfitBankName()) ? 131071 : 524287);
		if (isSetProfitBankName())
			hashCode = hashCode * 8191 + profitBankName.hashCode();

		hashCode = hashCode * 8191 + ((isSetProfitBankNumber()) ? 131071 : 524287);
		if (isSetProfitBankNumber())
			hashCode = hashCode * 8191 + profitBankNumber.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(Store other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetKey()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsStaff()).compareTo(other.isSetIsStaff());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsStaff()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStaff, other.isStaff);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsActive()).compareTo(other.isSetIsActive());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsActive()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsDelete()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsPay()).compareTo(other.isSetIsPay());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsPay()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPay, other.isPay);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDescription()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAddress()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumFans()).compareTo(other.isSetNumFans());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumFans()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numFans, other.numFans);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProfitRate()).compareTo(other.isSetProfitRate());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProfitRate()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profitRate, other.profitRate);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProfitBankAgent()).compareTo(other.isSetProfitBankAgent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProfitBankAgent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profitBankAgent, other.profitBankAgent);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProfitBankName()).compareTo(other.isSetProfitBankName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProfitBankName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profitBankName, other.profitBankName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProfitBankNumber()).compareTo(other.isSetProfitBankNumber());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProfitBankNumber()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profitBankNumber, other.profitBankNumber);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Store(");
		boolean first = true;

		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		}
		else {
			sb.append(this.name);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("key:");
		if (this.key == null) {
			sb.append("null");
		}
		else {
			sb.append(this.key);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isStaff:");
		sb.append(this.isStaff);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isActive:");
		sb.append(this.isActive);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isDelete:");
		sb.append(this.isDelete);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isPay:");
		sb.append(this.isPay);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("icon:");
		if (this.icon == null) {
			sb.append("null");
		}
		else {
			sb.append(this.icon);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("description:");
		if (this.description == null) {
			sb.append("null");
		}
		else {
			sb.append(this.description);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("address:");
		if (this.address == null) {
			sb.append("null");
		}
		else {
			sb.append(this.address);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numFans:");
		sb.append(this.numFans);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("profitRate:");
		sb.append(this.profitRate);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("profitBankAgent:");
		if (this.profitBankAgent == null) {
			sb.append("null");
		}
		else {
			sb.append(this.profitBankAgent);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("profitBankName:");
		if (this.profitBankName == null) {
			sb.append("null");
		}
		else {
			sb.append(this.profitBankName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("profitBankNumber:");
		if (this.profitBankNumber == null) {
			sb.append("null");
		}
		else {
			sb.append(this.profitBankNumber);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class StoreStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public StoreStandardScheme getScheme() {
			return new StoreStandardScheme();
		}

	}

	private static class StoreStandardScheme extends org.apache.thrift.scheme.StandardScheme<Store> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Store struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.name = iprot.readString();
						struct.setNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // KEY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.key = iprot.readString();
						struct.setKeyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // IS_STAFF
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isStaff = iprot.readBool();
						struct.setIsStaffIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // IS_ACTIVE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isActive = iprot.readBool();
						struct.setIsActiveIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_DELETE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isDelete = iprot.readBool();
						struct.setIsDeleteIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // IS_PAY
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isPay = iprot.readBool();
						struct.setIsPayIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // ICON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.icon = iprot.readString();
						struct.setIconIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // DESCRIPTION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.description = iprot.readString();
						struct.setDescriptionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // ADDRESS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.address = iprot.readString();
						struct.setAddressIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // NUM_FANS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numFans = iprot.readI32();
						struct.setNumFansIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // PROFIT_RATE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.profitRate = iprot.readDouble();
						struct.setProfitRateIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // PROFIT_BANK_AGENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.profitBankAgent = iprot.readString();
						struct.setProfitBankAgentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // PROFIT_BANK_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.profitBankName = iprot.readString();
						struct.setProfitBankNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // PROFIT_BANK_NUMBER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.profitBankNumber = iprot.readString();
						struct.setProfitBankNumberIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Store struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			if (struct.name != null) {
				oprot.writeFieldBegin(NAME_FIELD_DESC);
				oprot.writeString(struct.name);
				oprot.writeFieldEnd();
			}
			if (struct.key != null) {
				oprot.writeFieldBegin(KEY_FIELD_DESC);
				oprot.writeString(struct.key);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_STAFF_FIELD_DESC);
			oprot.writeBool(struct.isStaff);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
			oprot.writeBool(struct.isActive);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
			oprot.writeBool(struct.isDelete);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_PAY_FIELD_DESC);
			oprot.writeBool(struct.isPay);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.icon != null) {
				oprot.writeFieldBegin(ICON_FIELD_DESC);
				oprot.writeString(struct.icon);
				oprot.writeFieldEnd();
			}
			if (struct.description != null) {
				oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
				oprot.writeString(struct.description);
				oprot.writeFieldEnd();
			}
			if (struct.address != null) {
				oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
				oprot.writeString(struct.address);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(NUM_FANS_FIELD_DESC);
			oprot.writeI32(struct.numFans);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PROFIT_RATE_FIELD_DESC);
			oprot.writeDouble(struct.profitRate);
			oprot.writeFieldEnd();
			if (struct.profitBankAgent != null) {
				oprot.writeFieldBegin(PROFIT_BANK_AGENT_FIELD_DESC);
				oprot.writeString(struct.profitBankAgent);
				oprot.writeFieldEnd();
			}
			if (struct.profitBankName != null) {
				oprot.writeFieldBegin(PROFIT_BANK_NAME_FIELD_DESC);
				oprot.writeString(struct.profitBankName);
				oprot.writeFieldEnd();
			}
			if (struct.profitBankNumber != null) {
				oprot.writeFieldBegin(PROFIT_BANK_NUMBER_FIELD_DESC);
				oprot.writeString(struct.profitBankNumber);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class StoreTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public StoreTupleScheme getScheme() {
			return new StoreTupleScheme();
		}

	}

	private static class StoreTupleScheme extends org.apache.thrift.scheme.TupleScheme<Store> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Store struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetSid()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(2);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(3);
			}
			if (struct.isSetName()) {
				optionals.set(4);
			}
			if (struct.isSetKey()) {
				optionals.set(5);
			}
			if (struct.isSetIsStaff()) {
				optionals.set(6);
			}
			if (struct.isSetIsActive()) {
				optionals.set(7);
			}
			if (struct.isSetIsDelete()) {
				optionals.set(8);
			}
			if (struct.isSetIsPay()) {
				optionals.set(9);
			}
			if (struct.isSetStatus()) {
				optionals.set(10);
			}
			if (struct.isSetIcon()) {
				optionals.set(11);
			}
			if (struct.isSetDescription()) {
				optionals.set(12);
			}
			if (struct.isSetAddress()) {
				optionals.set(13);
			}
			if (struct.isSetNumFans()) {
				optionals.set(14);
			}
			if (struct.isSetProfitRate()) {
				optionals.set(15);
			}
			if (struct.isSetProfitBankAgent()) {
				optionals.set(16);
			}
			if (struct.isSetProfitBankName()) {
				optionals.set(17);
			}
			if (struct.isSetProfitBankNumber()) {
				optionals.set(18);
			}
			oprot.writeBitSet(optionals, 19);
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetName()) {
				oprot.writeString(struct.name);
			}
			if (struct.isSetKey()) {
				oprot.writeString(struct.key);
			}
			if (struct.isSetIsStaff()) {
				oprot.writeBool(struct.isStaff);
			}
			if (struct.isSetIsActive()) {
				oprot.writeBool(struct.isActive);
			}
			if (struct.isSetIsDelete()) {
				oprot.writeBool(struct.isDelete);
			}
			if (struct.isSetIsPay()) {
				oprot.writeBool(struct.isPay);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetIcon()) {
				oprot.writeString(struct.icon);
			}
			if (struct.isSetDescription()) {
				oprot.writeString(struct.description);
			}
			if (struct.isSetAddress()) {
				oprot.writeString(struct.address);
			}
			if (struct.isSetNumFans()) {
				oprot.writeI32(struct.numFans);
			}
			if (struct.isSetProfitRate()) {
				oprot.writeDouble(struct.profitRate);
			}
			if (struct.isSetProfitBankAgent()) {
				oprot.writeString(struct.profitBankAgent);
			}
			if (struct.isSetProfitBankName()) {
				oprot.writeString(struct.profitBankName);
			}
			if (struct.isSetProfitBankNumber()) {
				oprot.writeString(struct.profitBankNumber);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Store struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(19);
			if (incoming.get(0)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.name = iprot.readString();
				struct.setNameIsSet(true);
			}
			if (incoming.get(5)) {
				struct.key = iprot.readString();
				struct.setKeyIsSet(true);
			}
			if (incoming.get(6)) {
				struct.isStaff = iprot.readBool();
				struct.setIsStaffIsSet(true);
			}
			if (incoming.get(7)) {
				struct.isActive = iprot.readBool();
				struct.setIsActiveIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isDelete = iprot.readBool();
				struct.setIsDeleteIsSet(true);
			}
			if (incoming.get(9)) {
				struct.isPay = iprot.readBool();
				struct.setIsPayIsSet(true);
			}
			if (incoming.get(10)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(11)) {
				struct.icon = iprot.readString();
				struct.setIconIsSet(true);
			}
			if (incoming.get(12)) {
				struct.description = iprot.readString();
				struct.setDescriptionIsSet(true);
			}
			if (incoming.get(13)) {
				struct.address = iprot.readString();
				struct.setAddressIsSet(true);
			}
			if (incoming.get(14)) {
				struct.numFans = iprot.readI32();
				struct.setNumFansIsSet(true);
			}
			if (incoming.get(15)) {
				struct.profitRate = iprot.readDouble();
				struct.setProfitRateIsSet(true);
			}
			if (incoming.get(16)) {
				struct.profitBankAgent = iprot.readString();
				struct.setProfitBankAgentIsSet(true);
			}
			if (incoming.get(17)) {
				struct.profitBankName = iprot.readString();
				struct.setProfitBankNameIsSet(true);
			}
			if (incoming.get(18)) {
				struct.profitBankNumber = iprot.readString();
				struct.setProfitBankNumberIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
