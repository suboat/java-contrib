/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class WalletService {

	public interface Iface extends com.suboat.contrib.rpc.base.BaseService.Iface {

		/**
		 *
		 * getUserEnsure 取一个模块内用户信息,不存在则创建
		 *
		 * 取当前项目所有的钱包类型 getWalletCategory 返回当前项目所有的钱包类型
		 *
		 * 取一个用户的一个钱包信息，如不存在用户，则报错；如该用户无该钱包，则报错。 getWalletOne 传入用户uid、钱包名称：取钱包信息
		 *
		 * 取一个用户的一个钱包信息，如不存在用户/钱包，则自动创建 getWalletOneEnsure 传入用户uid、钱包名称：取钱包信息
		 *
		 * 取一个用户所有钱包信息，返回一个列表 getWalletAll 传入用户uid：取钱包信息列表
		 *
		 * 取一个用户所有系统默认钱包 getWalletAllDefault 传入用户uid：取钱包信息列表
		 *
		 * 取一个用户的流水列表 getWalletFlowOne 传入accession, 取一条流水 getWalletFlow 传入用户uid：取流水信息列表
		 * getWalletFlowList 传入query：取流水信息列表
		 *
		 * 设置一笔资金变动 execWalletFlow 传入流水参数, 产生一笔流水，触发资金变动
		 *
		 * 解冻一系列冻结流水。 成功: 同时解冻成功,并返回与参数相同顺序的流水; 失败: 返回错误, 不对流水做任何更改 execWalletFlowUnfreeze
		 * 传入流水参数, 产生一笔流水，触发资金变动
		 *
		 * 实现一次内部转账 execTransferInternal 传入转账参数,返回两笔流水,第1条是扣款流水,第2条是到账流水
		 *
		 * 创建一条未来流水 createWalletFlowFuture 传入未来流水参数,返回创建好的未来流水
		 *
		 * 取消一系列未来流水 - 全部取消成功或全部取消失败 - 重复调用时,若不影响结果的也返回正常数据 createWalletFlowFuture
		 * 传入未来流水参数,返回对应顺序的未来流水数据
		 *
		 * 拉取未来流水列表 getWalletFlowFuture 传入query参数，直接从数据库拉取数据. 默认时间倒序
		 *
		 */
		public java.util.List<WalletCategory> getWalletCategory()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<Wallet> getWalletByUid(java.lang.String uid, java.util.List<java.lang.String> category)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public User getUser(ArgUser form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public User getUserEnsure(ArgUser form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUser getUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Wallet getWallet(java.lang.String uid, java.lang.String category)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Wallet getWalletEnsure(java.lang.String uid, java.lang.String category)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public WalletFlow getWalletFlow(java.lang.String acc)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public WalletExpire getWalletExpire(ArgWalletExpire form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultWallet getWalletList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultWalletflow getWalletFlowList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultWalletflow getWalletFlowByUid(java.lang.String uid, com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultWalletflowFuture getWalletFlowFuture(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultWalletExpire getWalletExpireList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public WalletFlow execWalletFlow(ArgWalletFlow form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<WalletFlow> execWalletFlowUnfreeze(java.util.List<ArgUnfreeze> formList)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<WalletFlow> execTransferInternal(ArgTransfer form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public WalletFlowFuture createWalletFlowFuture(ArgWalletFlowFuture form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<WalletFlowFuture> cancelWalletFlowFuture(java.util.List<java.lang.String> accList)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<WalletExpire> getWalletExpireArray(ArgWalletExpire form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

	}

	public interface AsyncIface extends com.suboat.contrib.rpc.base.BaseService.AsyncIface {

		public void getWalletCategory(
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletCategory>> resultHandler)
				throws org.apache.thrift.TException;

		public void getWalletByUid(java.lang.String uid, java.util.List<java.lang.String> category,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<Wallet>> resultHandler)
				throws org.apache.thrift.TException;

		public void getUser(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserEnsure(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
				throws org.apache.thrift.TException;

		public void getWallet(java.lang.String uid, java.lang.String category,
				org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler) throws org.apache.thrift.TException;

		public void getWalletEnsure(java.lang.String uid, java.lang.String category,
				org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler) throws org.apache.thrift.TException;

		public void getWalletFlow(java.lang.String acc,
				org.apache.thrift.async.AsyncMethodCallback<WalletFlow> resultHandler)
				throws org.apache.thrift.TException;

		public void getWalletExpire(ArgWalletExpire form,
				org.apache.thrift.async.AsyncMethodCallback<WalletExpire> resultHandler)
				throws org.apache.thrift.TException;

		public void getWalletList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWallet> resultHandler)
				throws org.apache.thrift.TException;

		public void getWalletFlowList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> resultHandler)
				throws org.apache.thrift.TException;

		public void getWalletFlowByUid(java.lang.String uid, com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> resultHandler)
				throws org.apache.thrift.TException;

		public void getWalletFlowFuture(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWalletflowFuture> resultHandler)
				throws org.apache.thrift.TException;

		public void getWalletExpireList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWalletExpire> resultHandler)
				throws org.apache.thrift.TException;

		public void execWalletFlow(ArgWalletFlow form,
				org.apache.thrift.async.AsyncMethodCallback<WalletFlow> resultHandler)
				throws org.apache.thrift.TException;

		public void execWalletFlowUnfreeze(java.util.List<ArgUnfreeze> formList,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> resultHandler)
				throws org.apache.thrift.TException;

		public void execTransferInternal(ArgTransfer form,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> resultHandler)
				throws org.apache.thrift.TException;

		public void createWalletFlowFuture(ArgWalletFlowFuture form,
				org.apache.thrift.async.AsyncMethodCallback<WalletFlowFuture> resultHandler)
				throws org.apache.thrift.TException;

		public void cancelWalletFlowFuture(java.util.List<java.lang.String> accList,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlowFuture>> resultHandler)
				throws org.apache.thrift.TException;

		public void getWalletExpireArray(ArgWalletExpire form,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletExpire>> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends com.suboat.contrib.rpc.base.BaseService.Client implements Iface {

		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}

		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public java.util.List<WalletCategory> getWalletCategory()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletCategory();
			return recv_getWalletCategory();
		}

		public void send_getWalletCategory() throws org.apache.thrift.TException {
			getWalletCategory_args args = new getWalletCategory_args();
			sendBase("getWalletCategory", args);
		}

		public java.util.List<WalletCategory> recv_getWalletCategory()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletCategory_result result = new getWalletCategory_result();
			receiveBase(result, "getWalletCategory");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletCategory failed: unknown result");
		}

		public java.util.List<Wallet> getWalletByUid(java.lang.String uid, java.util.List<java.lang.String> category)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletByUid(uid, category);
			return recv_getWalletByUid();
		}

		public void send_getWalletByUid(java.lang.String uid, java.util.List<java.lang.String> category)
				throws org.apache.thrift.TException {
			getWalletByUid_args args = new getWalletByUid_args();
			args.setUid(uid);
			args.setCategory(category);
			sendBase("getWalletByUid", args);
		}

		public java.util.List<Wallet> recv_getWalletByUid()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletByUid_result result = new getWalletByUid_result();
			receiveBase(result, "getWalletByUid");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletByUid failed: unknown result");
		}

		public User getUser(ArgUser form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUser(form);
			return recv_getUser();
		}

		public void send_getUser(ArgUser form) throws org.apache.thrift.TException {
			getUser_args args = new getUser_args();
			args.setForm(form);
			sendBase("getUser", args);
		}

		public User recv_getUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUser_result result = new getUser_result();
			receiveBase(result, "getUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUser failed: unknown result");
		}

		public User getUserEnsure(ArgUser form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserEnsure(form);
			return recv_getUserEnsure();
		}

		public void send_getUserEnsure(ArgUser form) throws org.apache.thrift.TException {
			getUserEnsure_args args = new getUserEnsure_args();
			args.setForm(form);
			sendBase("getUserEnsure", args);
		}

		public User recv_getUserEnsure() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserEnsure_result result = new getUserEnsure_result();
			receiveBase(result, "getUserEnsure");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserEnsure failed: unknown result");
		}

		public ResultUser getUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserList(query);
			return recv_getUserList();
		}

		public void send_getUserList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getUserList_args args = new getUserList_args();
			args.setQuery(query);
			sendBase("getUserList", args);
		}

		public ResultUser recv_getUserList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserList_result result = new getUserList_result();
			receiveBase(result, "getUserList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserList failed: unknown result");
		}

		public Wallet getWallet(java.lang.String uid, java.lang.String category)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWallet(uid, category);
			return recv_getWallet();
		}

		public void send_getWallet(java.lang.String uid, java.lang.String category)
				throws org.apache.thrift.TException {
			getWallet_args args = new getWallet_args();
			args.setUid(uid);
			args.setCategory(category);
			sendBase("getWallet", args);
		}

		public Wallet recv_getWallet() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWallet_result result = new getWallet_result();
			receiveBase(result, "getWallet");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWallet failed: unknown result");
		}

		public Wallet getWalletEnsure(java.lang.String uid, java.lang.String category)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletEnsure(uid, category);
			return recv_getWalletEnsure();
		}

		public void send_getWalletEnsure(java.lang.String uid, java.lang.String category)
				throws org.apache.thrift.TException {
			getWalletEnsure_args args = new getWalletEnsure_args();
			args.setUid(uid);
			args.setCategory(category);
			sendBase("getWalletEnsure", args);
		}

		public Wallet recv_getWalletEnsure() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletEnsure_result result = new getWalletEnsure_result();
			receiveBase(result, "getWalletEnsure");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletEnsure failed: unknown result");
		}

		public WalletFlow getWalletFlow(java.lang.String acc)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletFlow(acc);
			return recv_getWalletFlow();
		}

		public void send_getWalletFlow(java.lang.String acc) throws org.apache.thrift.TException {
			getWalletFlow_args args = new getWalletFlow_args();
			args.setAcc(acc);
			sendBase("getWalletFlow", args);
		}

		public WalletFlow recv_getWalletFlow() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletFlow_result result = new getWalletFlow_result();
			receiveBase(result, "getWalletFlow");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletFlow failed: unknown result");
		}

		public WalletExpire getWalletExpire(ArgWalletExpire form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletExpire(form);
			return recv_getWalletExpire();
		}

		public void send_getWalletExpire(ArgWalletExpire form) throws org.apache.thrift.TException {
			getWalletExpire_args args = new getWalletExpire_args();
			args.setForm(form);
			sendBase("getWalletExpire", args);
		}

		public WalletExpire recv_getWalletExpire()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletExpire_result result = new getWalletExpire_result();
			receiveBase(result, "getWalletExpire");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletExpire failed: unknown result");
		}

		public ResultWallet getWalletList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletList(query);
			return recv_getWalletList();
		}

		public void send_getWalletList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getWalletList_args args = new getWalletList_args();
			args.setQuery(query);
			sendBase("getWalletList", args);
		}

		public ResultWallet recv_getWalletList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletList_result result = new getWalletList_result();
			receiveBase(result, "getWalletList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletList failed: unknown result");
		}

		public ResultWalletflow getWalletFlowList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletFlowList(query);
			return recv_getWalletFlowList();
		}

		public void send_getWalletFlowList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getWalletFlowList_args args = new getWalletFlowList_args();
			args.setQuery(query);
			sendBase("getWalletFlowList", args);
		}

		public ResultWalletflow recv_getWalletFlowList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletFlowList_result result = new getWalletFlowList_result();
			receiveBase(result, "getWalletFlowList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletFlowList failed: unknown result");
		}

		public ResultWalletflow getWalletFlowByUid(java.lang.String uid, com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletFlowByUid(uid, query);
			return recv_getWalletFlowByUid();
		}

		public void send_getWalletFlowByUid(java.lang.String uid, com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getWalletFlowByUid_args args = new getWalletFlowByUid_args();
			args.setUid(uid);
			args.setQuery(query);
			sendBase("getWalletFlowByUid", args);
		}

		public ResultWalletflow recv_getWalletFlowByUid()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletFlowByUid_result result = new getWalletFlowByUid_result();
			receiveBase(result, "getWalletFlowByUid");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletFlowByUid failed: unknown result");
		}

		public ResultWalletflowFuture getWalletFlowFuture(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletFlowFuture(query);
			return recv_getWalletFlowFuture();
		}

		public void send_getWalletFlowFuture(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getWalletFlowFuture_args args = new getWalletFlowFuture_args();
			args.setQuery(query);
			sendBase("getWalletFlowFuture", args);
		}

		public ResultWalletflowFuture recv_getWalletFlowFuture()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletFlowFuture_result result = new getWalletFlowFuture_result();
			receiveBase(result, "getWalletFlowFuture");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletFlowFuture failed: unknown result");
		}

		public ResultWalletExpire getWalletExpireList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletExpireList(query);
			return recv_getWalletExpireList();
		}

		public void send_getWalletExpireList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getWalletExpireList_args args = new getWalletExpireList_args();
			args.setQuery(query);
			sendBase("getWalletExpireList", args);
		}

		public ResultWalletExpire recv_getWalletExpireList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletExpireList_result result = new getWalletExpireList_result();
			receiveBase(result, "getWalletExpireList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletExpireList failed: unknown result");
		}

		public WalletFlow execWalletFlow(ArgWalletFlow form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_execWalletFlow(form);
			return recv_execWalletFlow();
		}

		public void send_execWalletFlow(ArgWalletFlow form) throws org.apache.thrift.TException {
			execWalletFlow_args args = new execWalletFlow_args();
			args.setForm(form);
			sendBase("execWalletFlow", args);
		}

		public WalletFlow recv_execWalletFlow() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			execWalletFlow_result result = new execWalletFlow_result();
			receiveBase(result, "execWalletFlow");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"execWalletFlow failed: unknown result");
		}

		public java.util.List<WalletFlow> execWalletFlowUnfreeze(java.util.List<ArgUnfreeze> formList)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_execWalletFlowUnfreeze(formList);
			return recv_execWalletFlowUnfreeze();
		}

		public void send_execWalletFlowUnfreeze(java.util.List<ArgUnfreeze> formList)
				throws org.apache.thrift.TException {
			execWalletFlowUnfreeze_args args = new execWalletFlowUnfreeze_args();
			args.setFormList(formList);
			sendBase("execWalletFlowUnfreeze", args);
		}

		public java.util.List<WalletFlow> recv_execWalletFlowUnfreeze()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			execWalletFlowUnfreeze_result result = new execWalletFlowUnfreeze_result();
			receiveBase(result, "execWalletFlowUnfreeze");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"execWalletFlowUnfreeze failed: unknown result");
		}

		public java.util.List<WalletFlow> execTransferInternal(ArgTransfer form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_execTransferInternal(form);
			return recv_execTransferInternal();
		}

		public void send_execTransferInternal(ArgTransfer form) throws org.apache.thrift.TException {
			execTransferInternal_args args = new execTransferInternal_args();
			args.setForm(form);
			sendBase("execTransferInternal", args);
		}

		public java.util.List<WalletFlow> recv_execTransferInternal()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			execTransferInternal_result result = new execTransferInternal_result();
			receiveBase(result, "execTransferInternal");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"execTransferInternal failed: unknown result");
		}

		public WalletFlowFuture createWalletFlowFuture(ArgWalletFlowFuture form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_createWalletFlowFuture(form);
			return recv_createWalletFlowFuture();
		}

		public void send_createWalletFlowFuture(ArgWalletFlowFuture form) throws org.apache.thrift.TException {
			createWalletFlowFuture_args args = new createWalletFlowFuture_args();
			args.setForm(form);
			sendBase("createWalletFlowFuture", args);
		}

		public WalletFlowFuture recv_createWalletFlowFuture()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			createWalletFlowFuture_result result = new createWalletFlowFuture_result();
			receiveBase(result, "createWalletFlowFuture");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"createWalletFlowFuture failed: unknown result");
		}

		public java.util.List<WalletFlowFuture> cancelWalletFlowFuture(java.util.List<java.lang.String> accList)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_cancelWalletFlowFuture(accList);
			return recv_cancelWalletFlowFuture();
		}

		public void send_cancelWalletFlowFuture(java.util.List<java.lang.String> accList)
				throws org.apache.thrift.TException {
			cancelWalletFlowFuture_args args = new cancelWalletFlowFuture_args();
			args.setAccList(accList);
			sendBase("cancelWalletFlowFuture", args);
		}

		public java.util.List<WalletFlowFuture> recv_cancelWalletFlowFuture()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			cancelWalletFlowFuture_result result = new cancelWalletFlowFuture_result();
			receiveBase(result, "cancelWalletFlowFuture");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"cancelWalletFlowFuture failed: unknown result");
		}

		public java.util.List<WalletExpire> getWalletExpireArray(ArgWalletExpire form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getWalletExpireArray(form);
			return recv_getWalletExpireArray();
		}

		public void send_getWalletExpireArray(ArgWalletExpire form) throws org.apache.thrift.TException {
			getWalletExpireArray_args args = new getWalletExpireArray_args();
			args.setForm(form);
			sendBase("getWalletExpireArray", args);
		}

		public java.util.List<WalletExpire> recv_getWalletExpireArray()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getWalletExpireArray_result result = new getWalletExpireArray_result();
			receiveBase(result, "getWalletExpireArray");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getWalletExpireArray failed: unknown result");
		}

	}

	public static class AsyncClient extends com.suboat.contrib.rpc.base.BaseService.AsyncClient implements AsyncIface {

		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

			private org.apache.thrift.async.TAsyncClientManager clientManager;

			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}

		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getWalletCategory(
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletCategory>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletCategory_call method_call = new getWalletCategory_call(resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletCategory_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<WalletCategory>> {

			public getWalletCategory_call(
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletCategory>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletCategory",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletCategory_args args = new getWalletCategory_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<WalletCategory> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletCategory();
			}

		}

		public void getWalletByUid(java.lang.String uid, java.util.List<java.lang.String> category,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<Wallet>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletByUid_call method_call = new getWalletByUid_call(uid, category, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletByUid_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Wallet>> {

			private java.lang.String uid;

			private java.util.List<java.lang.String> category;

			public getWalletByUid_call(java.lang.String uid, java.util.List<java.lang.String> category,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<Wallet>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.category = category;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletByUid",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletByUid_args args = new getWalletByUid_args();
				args.setUid(uid);
				args.setCategory(category);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<Wallet> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletByUid();
			}

		}

		public void getUser(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUser_call method_call = new getUser_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUser_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private ArgUser form;

			public getUser_call(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUser_args args = new getUser_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUser();
			}

		}

		public void getUserEnsure(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserEnsure_call method_call = new getUserEnsure_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserEnsure_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private ArgUser form;

			public getUserEnsure_call(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserEnsure",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserEnsure_args args = new getUserEnsure_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserEnsure();
			}

		}

		public void getUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserList_call method_call = new getUserList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultUser> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserList_args args = new getUserList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUser getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserList();
			}

		}

		public void getWallet(java.lang.String uid, java.lang.String category,
				org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			getWallet_call method_call = new getWallet_call(uid, category, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWallet_call extends org.apache.thrift.async.TAsyncMethodCall<Wallet> {

			private java.lang.String uid;

			private java.lang.String category;

			public getWallet_call(java.lang.String uid, java.lang.String category,
					org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.category = category;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWallet",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWallet_args args = new getWallet_args();
				args.setUid(uid);
				args.setCategory(category);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Wallet getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWallet();
			}

		}

		public void getWalletEnsure(java.lang.String uid, java.lang.String category,
				org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			getWalletEnsure_call method_call = new getWalletEnsure_call(uid, category, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletEnsure_call extends org.apache.thrift.async.TAsyncMethodCall<Wallet> {

			private java.lang.String uid;

			private java.lang.String category;

			public getWalletEnsure_call(java.lang.String uid, java.lang.String category,
					org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.category = category;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletEnsure",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletEnsure_args args = new getWalletEnsure_args();
				args.setUid(uid);
				args.setCategory(category);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Wallet getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletEnsure();
			}

		}

		public void getWalletFlow(java.lang.String acc,
				org.apache.thrift.async.AsyncMethodCallback<WalletFlow> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletFlow_call method_call = new getWalletFlow_call(acc, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletFlow_call extends org.apache.thrift.async.TAsyncMethodCall<WalletFlow> {

			private java.lang.String acc;

			public getWalletFlow_call(java.lang.String acc,
					org.apache.thrift.async.AsyncMethodCallback<WalletFlow> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.acc = acc;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletFlow",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletFlow_args args = new getWalletFlow_args();
				args.setAcc(acc);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public WalletFlow getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletFlow();
			}

		}

		public void getWalletExpire(ArgWalletExpire form,
				org.apache.thrift.async.AsyncMethodCallback<WalletExpire> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletExpire_call method_call = new getWalletExpire_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletExpire_call extends org.apache.thrift.async.TAsyncMethodCall<WalletExpire> {

			private ArgWalletExpire form;

			public getWalletExpire_call(ArgWalletExpire form,
					org.apache.thrift.async.AsyncMethodCallback<WalletExpire> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletExpire",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletExpire_args args = new getWalletExpire_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public WalletExpire getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletExpire();
			}

		}

		public void getWalletList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWallet> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletList_call method_call = new getWalletList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultWallet> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getWalletList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultWallet> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletList_args args = new getWalletList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultWallet getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletList();
			}

		}

		public void getWalletFlowList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletFlowList_call method_call = new getWalletFlowList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletFlowList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultWalletflow> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getWalletFlowList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletFlowList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletFlowList_args args = new getWalletFlowList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultWalletflow getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletFlowList();
			}

		}

		public void getWalletFlowByUid(java.lang.String uid, com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletFlowByUid_call method_call = new getWalletFlowByUid_call(uid, query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletFlowByUid_call extends org.apache.thrift.async.TAsyncMethodCall<ResultWalletflow> {

			private java.lang.String uid;

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getWalletFlowByUid_call(java.lang.String uid, com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletFlowByUid",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletFlowByUid_args args = new getWalletFlowByUid_args();
				args.setUid(uid);
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultWalletflow getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletFlowByUid();
			}

		}

		public void getWalletFlowFuture(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWalletflowFuture> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletFlowFuture_call method_call = new getWalletFlowFuture_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletFlowFuture_call
				extends org.apache.thrift.async.TAsyncMethodCall<ResultWalletflowFuture> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getWalletFlowFuture_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultWalletflowFuture> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletFlowFuture",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletFlowFuture_args args = new getWalletFlowFuture_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultWalletflowFuture getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletFlowFuture();
			}

		}

		public void getWalletExpireList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultWalletExpire> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletExpireList_call method_call = new getWalletExpireList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletExpireList_call
				extends org.apache.thrift.async.TAsyncMethodCall<ResultWalletExpire> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getWalletExpireList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultWalletExpire> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletExpireList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletExpireList_args args = new getWalletExpireList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultWalletExpire getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletExpireList();
			}

		}

		public void execWalletFlow(ArgWalletFlow form,
				org.apache.thrift.async.AsyncMethodCallback<WalletFlow> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			execWalletFlow_call method_call = new execWalletFlow_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class execWalletFlow_call extends org.apache.thrift.async.TAsyncMethodCall<WalletFlow> {

			private ArgWalletFlow form;

			public execWalletFlow_call(ArgWalletFlow form,
					org.apache.thrift.async.AsyncMethodCallback<WalletFlow> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execWalletFlow",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				execWalletFlow_args args = new execWalletFlow_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public WalletFlow getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_execWalletFlow();
			}

		}

		public void execWalletFlowUnfreeze(java.util.List<ArgUnfreeze> formList,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			execWalletFlowUnfreeze_call method_call = new execWalletFlowUnfreeze_call(formList, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class execWalletFlowUnfreeze_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<WalletFlow>> {

			private java.util.List<ArgUnfreeze> formList;

			public execWalletFlowUnfreeze_call(java.util.List<ArgUnfreeze> formList,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.formList = formList;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execWalletFlowUnfreeze",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				execWalletFlowUnfreeze_args args = new execWalletFlowUnfreeze_args();
				args.setFormList(formList);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<WalletFlow> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_execWalletFlowUnfreeze();
			}

		}

		public void execTransferInternal(ArgTransfer form,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			execTransferInternal_call method_call = new execTransferInternal_call(form, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class execTransferInternal_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<WalletFlow>> {

			private ArgTransfer form;

			public execTransferInternal_call(ArgTransfer form,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execTransferInternal",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				execTransferInternal_args args = new execTransferInternal_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<WalletFlow> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_execTransferInternal();
			}

		}

		public void createWalletFlowFuture(ArgWalletFlowFuture form,
				org.apache.thrift.async.AsyncMethodCallback<WalletFlowFuture> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			createWalletFlowFuture_call method_call = new createWalletFlowFuture_call(form, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class createWalletFlowFuture_call
				extends org.apache.thrift.async.TAsyncMethodCall<WalletFlowFuture> {

			private ArgWalletFlowFuture form;

			public createWalletFlowFuture_call(ArgWalletFlowFuture form,
					org.apache.thrift.async.AsyncMethodCallback<WalletFlowFuture> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createWalletFlowFuture",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				createWalletFlowFuture_args args = new createWalletFlowFuture_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public WalletFlowFuture getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_createWalletFlowFuture();
			}

		}

		public void cancelWalletFlowFuture(java.util.List<java.lang.String> accList,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlowFuture>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			cancelWalletFlowFuture_call method_call = new cancelWalletFlowFuture_call(accList, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class cancelWalletFlowFuture_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<WalletFlowFuture>> {

			private java.util.List<java.lang.String> accList;

			public cancelWalletFlowFuture_call(java.util.List<java.lang.String> accList,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlowFuture>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.accList = accList;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelWalletFlowFuture",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				cancelWalletFlowFuture_args args = new cancelWalletFlowFuture_args();
				args.setAccList(accList);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<WalletFlowFuture> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_cancelWalletFlowFuture();
			}

		}

		public void getWalletExpireArray(ArgWalletExpire form,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletExpire>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getWalletExpireArray_call method_call = new getWalletExpireArray_call(form, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getWalletExpireArray_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<WalletExpire>> {

			private ArgWalletExpire form;

			public getWalletExpireArray_call(ArgWalletExpire form,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletExpire>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWalletExpireArray",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getWalletExpireArray_args args = new getWalletExpireArray_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<WalletExpire> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getWalletExpireArray();
			}

		}

	}

	public static class Processor<I extends Iface> extends com.suboat.contrib.rpc.base.BaseService.Processor<I>
			implements org.apache.thrift.TProcessor {

		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getWalletCategory", new getWalletCategory());
			processMap.put("getWalletByUid", new getWalletByUid());
			processMap.put("getUser", new getUser());
			processMap.put("getUserEnsure", new getUserEnsure());
			processMap.put("getUserList", new getUserList());
			processMap.put("getWallet", new getWallet());
			processMap.put("getWalletEnsure", new getWalletEnsure());
			processMap.put("getWalletFlow", new getWalletFlow());
			processMap.put("getWalletExpire", new getWalletExpire());
			processMap.put("getWalletList", new getWalletList());
			processMap.put("getWalletFlowList", new getWalletFlowList());
			processMap.put("getWalletFlowByUid", new getWalletFlowByUid());
			processMap.put("getWalletFlowFuture", new getWalletFlowFuture());
			processMap.put("getWalletExpireList", new getWalletExpireList());
			processMap.put("execWalletFlow", new execWalletFlow());
			processMap.put("execWalletFlowUnfreeze", new execWalletFlowUnfreeze());
			processMap.put("execTransferInternal", new execTransferInternal());
			processMap.put("createWalletFlowFuture", new createWalletFlowFuture());
			processMap.put("cancelWalletFlowFuture", new cancelWalletFlowFuture());
			processMap.put("getWalletExpireArray", new getWalletExpireArray());
			return processMap;
		}

		public static class getWalletCategory<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletCategory_args> {

			public getWalletCategory() {
				super("getWalletCategory");
			}

			public getWalletCategory_args getEmptyArgsInstance() {
				return new getWalletCategory_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletCategory_result getResult(I iface, getWalletCategory_args args)
					throws org.apache.thrift.TException {
				getWalletCategory_result result = new getWalletCategory_result();
				try {
					result.success = iface.getWalletCategory();
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletByUid<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletByUid_args> {

			public getWalletByUid() {
				super("getWalletByUid");
			}

			public getWalletByUid_args getEmptyArgsInstance() {
				return new getWalletByUid_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletByUid_result getResult(I iface, getWalletByUid_args args)
					throws org.apache.thrift.TException {
				getWalletByUid_result result = new getWalletByUid_result();
				try {
					result.success = iface.getWalletByUid(args.uid, args.category);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUser_args> {

			public getUser() {
				super("getUser");
			}

			public getUser_args getEmptyArgsInstance() {
				return new getUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUser_result getResult(I iface, getUser_args args) throws org.apache.thrift.TException {
				getUser_result result = new getUser_result();
				try {
					result.success = iface.getUser(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserEnsure<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserEnsure_args> {

			public getUserEnsure() {
				super("getUserEnsure");
			}

			public getUserEnsure_args getEmptyArgsInstance() {
				return new getUserEnsure_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserEnsure_result getResult(I iface, getUserEnsure_args args)
					throws org.apache.thrift.TException {
				getUserEnsure_result result = new getUserEnsure_result();
				try {
					result.success = iface.getUserEnsure(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserList_args> {

			public getUserList() {
				super("getUserList");
			}

			public getUserList_args getEmptyArgsInstance() {
				return new getUserList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserList_result getResult(I iface, getUserList_args args) throws org.apache.thrift.TException {
				getUserList_result result = new getUserList_result();
				try {
					result.success = iface.getUserList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWallet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWallet_args> {

			public getWallet() {
				super("getWallet");
			}

			public getWallet_args getEmptyArgsInstance() {
				return new getWallet_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWallet_result getResult(I iface, getWallet_args args) throws org.apache.thrift.TException {
				getWallet_result result = new getWallet_result();
				try {
					result.success = iface.getWallet(args.uid, args.category);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletEnsure<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletEnsure_args> {

			public getWalletEnsure() {
				super("getWalletEnsure");
			}

			public getWalletEnsure_args getEmptyArgsInstance() {
				return new getWalletEnsure_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletEnsure_result getResult(I iface, getWalletEnsure_args args)
					throws org.apache.thrift.TException {
				getWalletEnsure_result result = new getWalletEnsure_result();
				try {
					result.success = iface.getWalletEnsure(args.uid, args.category);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletFlow<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletFlow_args> {

			public getWalletFlow() {
				super("getWalletFlow");
			}

			public getWalletFlow_args getEmptyArgsInstance() {
				return new getWalletFlow_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletFlow_result getResult(I iface, getWalletFlow_args args)
					throws org.apache.thrift.TException {
				getWalletFlow_result result = new getWalletFlow_result();
				try {
					result.success = iface.getWalletFlow(args.acc);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletExpire<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletExpire_args> {

			public getWalletExpire() {
				super("getWalletExpire");
			}

			public getWalletExpire_args getEmptyArgsInstance() {
				return new getWalletExpire_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletExpire_result getResult(I iface, getWalletExpire_args args)
					throws org.apache.thrift.TException {
				getWalletExpire_result result = new getWalletExpire_result();
				try {
					result.success = iface.getWalletExpire(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletList_args> {

			public getWalletList() {
				super("getWalletList");
			}

			public getWalletList_args getEmptyArgsInstance() {
				return new getWalletList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletList_result getResult(I iface, getWalletList_args args)
					throws org.apache.thrift.TException {
				getWalletList_result result = new getWalletList_result();
				try {
					result.success = iface.getWalletList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletFlowList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletFlowList_args> {

			public getWalletFlowList() {
				super("getWalletFlowList");
			}

			public getWalletFlowList_args getEmptyArgsInstance() {
				return new getWalletFlowList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletFlowList_result getResult(I iface, getWalletFlowList_args args)
					throws org.apache.thrift.TException {
				getWalletFlowList_result result = new getWalletFlowList_result();
				try {
					result.success = iface.getWalletFlowList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletFlowByUid<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletFlowByUid_args> {

			public getWalletFlowByUid() {
				super("getWalletFlowByUid");
			}

			public getWalletFlowByUid_args getEmptyArgsInstance() {
				return new getWalletFlowByUid_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletFlowByUid_result getResult(I iface, getWalletFlowByUid_args args)
					throws org.apache.thrift.TException {
				getWalletFlowByUid_result result = new getWalletFlowByUid_result();
				try {
					result.success = iface.getWalletFlowByUid(args.uid, args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletFlowFuture<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletFlowFuture_args> {

			public getWalletFlowFuture() {
				super("getWalletFlowFuture");
			}

			public getWalletFlowFuture_args getEmptyArgsInstance() {
				return new getWalletFlowFuture_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletFlowFuture_result getResult(I iface, getWalletFlowFuture_args args)
					throws org.apache.thrift.TException {
				getWalletFlowFuture_result result = new getWalletFlowFuture_result();
				try {
					result.success = iface.getWalletFlowFuture(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletExpireList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletExpireList_args> {

			public getWalletExpireList() {
				super("getWalletExpireList");
			}

			public getWalletExpireList_args getEmptyArgsInstance() {
				return new getWalletExpireList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletExpireList_result getResult(I iface, getWalletExpireList_args args)
					throws org.apache.thrift.TException {
				getWalletExpireList_result result = new getWalletExpireList_result();
				try {
					result.success = iface.getWalletExpireList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class execWalletFlow<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, execWalletFlow_args> {

			public execWalletFlow() {
				super("execWalletFlow");
			}

			public execWalletFlow_args getEmptyArgsInstance() {
				return new execWalletFlow_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public execWalletFlow_result getResult(I iface, execWalletFlow_args args)
					throws org.apache.thrift.TException {
				execWalletFlow_result result = new execWalletFlow_result();
				try {
					result.success = iface.execWalletFlow(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class execWalletFlowUnfreeze<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, execWalletFlowUnfreeze_args> {

			public execWalletFlowUnfreeze() {
				super("execWalletFlowUnfreeze");
			}

			public execWalletFlowUnfreeze_args getEmptyArgsInstance() {
				return new execWalletFlowUnfreeze_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public execWalletFlowUnfreeze_result getResult(I iface, execWalletFlowUnfreeze_args args)
					throws org.apache.thrift.TException {
				execWalletFlowUnfreeze_result result = new execWalletFlowUnfreeze_result();
				try {
					result.success = iface.execWalletFlowUnfreeze(args.formList);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class execTransferInternal<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, execTransferInternal_args> {

			public execTransferInternal() {
				super("execTransferInternal");
			}

			public execTransferInternal_args getEmptyArgsInstance() {
				return new execTransferInternal_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public execTransferInternal_result getResult(I iface, execTransferInternal_args args)
					throws org.apache.thrift.TException {
				execTransferInternal_result result = new execTransferInternal_result();
				try {
					result.success = iface.execTransferInternal(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class createWalletFlowFuture<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, createWalletFlowFuture_args> {

			public createWalletFlowFuture() {
				super("createWalletFlowFuture");
			}

			public createWalletFlowFuture_args getEmptyArgsInstance() {
				return new createWalletFlowFuture_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public createWalletFlowFuture_result getResult(I iface, createWalletFlowFuture_args args)
					throws org.apache.thrift.TException {
				createWalletFlowFuture_result result = new createWalletFlowFuture_result();
				try {
					result.success = iface.createWalletFlowFuture(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class cancelWalletFlowFuture<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, cancelWalletFlowFuture_args> {

			public cancelWalletFlowFuture() {
				super("cancelWalletFlowFuture");
			}

			public cancelWalletFlowFuture_args getEmptyArgsInstance() {
				return new cancelWalletFlowFuture_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public cancelWalletFlowFuture_result getResult(I iface, cancelWalletFlowFuture_args args)
					throws org.apache.thrift.TException {
				cancelWalletFlowFuture_result result = new cancelWalletFlowFuture_result();
				try {
					result.success = iface.cancelWalletFlowFuture(args.accList);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getWalletExpireArray<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getWalletExpireArray_args> {

			public getWalletExpireArray() {
				super("getWalletExpireArray");
			}

			public getWalletExpireArray_args getEmptyArgsInstance() {
				return new getWalletExpireArray_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getWalletExpireArray_result getResult(I iface, getWalletExpireArray_args args)
					throws org.apache.thrift.TException {
				getWalletExpireArray_result result = new getWalletExpireArray_result();
				try {
					result.success = iface.getWalletExpireArray(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

	}

	public static class AsyncProcessor<I extends AsyncIface>
			extends com.suboat.contrib.rpc.base.BaseService.AsyncProcessor<I> {

		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getWalletCategory", new getWalletCategory());
			processMap.put("getWalletByUid", new getWalletByUid());
			processMap.put("getUser", new getUser());
			processMap.put("getUserEnsure", new getUserEnsure());
			processMap.put("getUserList", new getUserList());
			processMap.put("getWallet", new getWallet());
			processMap.put("getWalletEnsure", new getWalletEnsure());
			processMap.put("getWalletFlow", new getWalletFlow());
			processMap.put("getWalletExpire", new getWalletExpire());
			processMap.put("getWalletList", new getWalletList());
			processMap.put("getWalletFlowList", new getWalletFlowList());
			processMap.put("getWalletFlowByUid", new getWalletFlowByUid());
			processMap.put("getWalletFlowFuture", new getWalletFlowFuture());
			processMap.put("getWalletExpireList", new getWalletExpireList());
			processMap.put("execWalletFlow", new execWalletFlow());
			processMap.put("execWalletFlowUnfreeze", new execWalletFlowUnfreeze());
			processMap.put("execTransferInternal", new execTransferInternal());
			processMap.put("createWalletFlowFuture", new createWalletFlowFuture());
			processMap.put("cancelWalletFlowFuture", new cancelWalletFlowFuture());
			processMap.put("getWalletExpireArray", new getWalletExpireArray());
			return processMap;
		}

		public static class getWalletCategory<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, getWalletCategory_args, java.util.List<WalletCategory>> {

			public getWalletCategory() {
				super("getWalletCategory");
			}

			public getWalletCategory_args getEmptyArgsInstance() {
				return new getWalletCategory_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletCategory>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletCategory>>() {
					public void onComplete(java.util.List<WalletCategory> o) {
						getWalletCategory_result result = new getWalletCategory_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletCategory_result result = new getWalletCategory_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletCategory_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletCategory>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletCategory(resultHandler);
			}

		}

		public static class getWalletByUid<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWalletByUid_args, java.util.List<Wallet>> {

			public getWalletByUid() {
				super("getWalletByUid");
			}

			public getWalletByUid_args getEmptyArgsInstance() {
				return new getWalletByUid_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Wallet>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Wallet>>() {
					public void onComplete(java.util.List<Wallet> o) {
						getWalletByUid_result result = new getWalletByUid_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletByUid_result result = new getWalletByUid_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletByUid_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<Wallet>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletByUid(args.uid, args.category, resultHandler);
			}

		}

		public static class getUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUser_args, User> {

			public getUser() {
				super("getUser");
			}

			public getUser_args getEmptyArgsInstance() {
				return new getUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						getUser_result result = new getUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUser_result result = new getUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUser(args.form, resultHandler);
			}

		}

		public static class getUserEnsure<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserEnsure_args, User> {

			public getUserEnsure() {
				super("getUserEnsure");
			}

			public getUserEnsure_args getEmptyArgsInstance() {
				return new getUserEnsure_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						getUserEnsure_result result = new getUserEnsure_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserEnsure_result result = new getUserEnsure_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserEnsure_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserEnsure(args.form, resultHandler);
			}

		}

		public static class getUserList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserList_args, ResultUser> {

			public getUserList() {
				super("getUserList");
			}

			public getUserList_args getEmptyArgsInstance() {
				return new getUserList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUser> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUser>() {
					public void onComplete(ResultUser o) {
						getUserList_result result = new getUserList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserList_result result = new getUserList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserList(args.query, resultHandler);
			}

		}

		public static class getWallet<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWallet_args, Wallet> {

			public getWallet() {
				super("getWallet");
			}

			public getWallet_args getEmptyArgsInstance() {
				return new getWallet_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Wallet> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Wallet>() {
					public void onComplete(Wallet o) {
						getWallet_result result = new getWallet_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWallet_result result = new getWallet_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWallet_args args,
					org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWallet(args.uid, args.category, resultHandler);
			}

		}

		public static class getWalletEnsure<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWalletEnsure_args, Wallet> {

			public getWalletEnsure() {
				super("getWalletEnsure");
			}

			public getWalletEnsure_args getEmptyArgsInstance() {
				return new getWalletEnsure_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Wallet> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Wallet>() {
					public void onComplete(Wallet o) {
						getWalletEnsure_result result = new getWalletEnsure_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletEnsure_result result = new getWalletEnsure_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletEnsure_args args,
					org.apache.thrift.async.AsyncMethodCallback<Wallet> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletEnsure(args.uid, args.category, resultHandler);
			}

		}

		public static class getWalletFlow<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWalletFlow_args, WalletFlow> {

			public getWalletFlow() {
				super("getWalletFlow");
			}

			public getWalletFlow_args getEmptyArgsInstance() {
				return new getWalletFlow_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<WalletFlow> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<WalletFlow>() {
					public void onComplete(WalletFlow o) {
						getWalletFlow_result result = new getWalletFlow_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletFlow_result result = new getWalletFlow_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletFlow_args args,
					org.apache.thrift.async.AsyncMethodCallback<WalletFlow> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletFlow(args.acc, resultHandler);
			}

		}

		public static class getWalletExpire<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWalletExpire_args, WalletExpire> {

			public getWalletExpire() {
				super("getWalletExpire");
			}

			public getWalletExpire_args getEmptyArgsInstance() {
				return new getWalletExpire_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<WalletExpire> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<WalletExpire>() {
					public void onComplete(WalletExpire o) {
						getWalletExpire_result result = new getWalletExpire_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletExpire_result result = new getWalletExpire_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletExpire_args args,
					org.apache.thrift.async.AsyncMethodCallback<WalletExpire> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletExpire(args.form, resultHandler);
			}

		}

		public static class getWalletList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWalletList_args, ResultWallet> {

			public getWalletList() {
				super("getWalletList");
			}

			public getWalletList_args getEmptyArgsInstance() {
				return new getWalletList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultWallet> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultWallet>() {
					public void onComplete(ResultWallet o) {
						getWalletList_result result = new getWalletList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletList_result result = new getWalletList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultWallet> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletList(args.query, resultHandler);
			}

		}

		public static class getWalletFlowList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWalletFlowList_args, ResultWalletflow> {

			public getWalletFlowList() {
				super("getWalletFlowList");
			}

			public getWalletFlowList_args getEmptyArgsInstance() {
				return new getWalletFlowList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow>() {
					public void onComplete(ResultWalletflow o) {
						getWalletFlowList_result result = new getWalletFlowList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletFlowList_result result = new getWalletFlowList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletFlowList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletFlowList(args.query, resultHandler);
			}

		}

		public static class getWalletFlowByUid<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWalletFlowByUid_args, ResultWalletflow> {

			public getWalletFlowByUid() {
				super("getWalletFlowByUid");
			}

			public getWalletFlowByUid_args getEmptyArgsInstance() {
				return new getWalletFlowByUid_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow>() {
					public void onComplete(ResultWalletflow o) {
						getWalletFlowByUid_result result = new getWalletFlowByUid_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletFlowByUid_result result = new getWalletFlowByUid_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletFlowByUid_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultWalletflow> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletFlowByUid(args.uid, args.query, resultHandler);
			}

		}

		public static class getWalletFlowFuture<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWalletFlowFuture_args, ResultWalletflowFuture> {

			public getWalletFlowFuture() {
				super("getWalletFlowFuture");
			}

			public getWalletFlowFuture_args getEmptyArgsInstance() {
				return new getWalletFlowFuture_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultWalletflowFuture> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultWalletflowFuture>() {
					public void onComplete(ResultWalletflowFuture o) {
						getWalletFlowFuture_result result = new getWalletFlowFuture_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletFlowFuture_result result = new getWalletFlowFuture_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletFlowFuture_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultWalletflowFuture> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletFlowFuture(args.query, resultHandler);
			}

		}

		public static class getWalletExpireList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getWalletExpireList_args, ResultWalletExpire> {

			public getWalletExpireList() {
				super("getWalletExpireList");
			}

			public getWalletExpireList_args getEmptyArgsInstance() {
				return new getWalletExpireList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultWalletExpire> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultWalletExpire>() {
					public void onComplete(ResultWalletExpire o) {
						getWalletExpireList_result result = new getWalletExpireList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletExpireList_result result = new getWalletExpireList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletExpireList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultWalletExpire> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletExpireList(args.query, resultHandler);
			}

		}

		public static class execWalletFlow<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, execWalletFlow_args, WalletFlow> {

			public execWalletFlow() {
				super("execWalletFlow");
			}

			public execWalletFlow_args getEmptyArgsInstance() {
				return new execWalletFlow_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<WalletFlow> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<WalletFlow>() {
					public void onComplete(WalletFlow o) {
						execWalletFlow_result result = new execWalletFlow_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						execWalletFlow_result result = new execWalletFlow_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, execWalletFlow_args args,
					org.apache.thrift.async.AsyncMethodCallback<WalletFlow> resultHandler)
					throws org.apache.thrift.TException {
				iface.execWalletFlow(args.form, resultHandler);
			}

		}

		public static class execWalletFlowUnfreeze<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, execWalletFlowUnfreeze_args, java.util.List<WalletFlow>> {

			public execWalletFlowUnfreeze() {
				super("execWalletFlowUnfreeze");
			}

			public execWalletFlowUnfreeze_args getEmptyArgsInstance() {
				return new execWalletFlowUnfreeze_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>>() {
					public void onComplete(java.util.List<WalletFlow> o) {
						execWalletFlowUnfreeze_result result = new execWalletFlowUnfreeze_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						execWalletFlowUnfreeze_result result = new execWalletFlowUnfreeze_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, execWalletFlowUnfreeze_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> resultHandler)
					throws org.apache.thrift.TException {
				iface.execWalletFlowUnfreeze(args.formList, resultHandler);
			}

		}

		public static class execTransferInternal<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, execTransferInternal_args, java.util.List<WalletFlow>> {

			public execTransferInternal() {
				super("execTransferInternal");
			}

			public execTransferInternal_args getEmptyArgsInstance() {
				return new execTransferInternal_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>>() {
					public void onComplete(java.util.List<WalletFlow> o) {
						execTransferInternal_result result = new execTransferInternal_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						execTransferInternal_result result = new execTransferInternal_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, execTransferInternal_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlow>> resultHandler)
					throws org.apache.thrift.TException {
				iface.execTransferInternal(args.form, resultHandler);
			}

		}

		public static class createWalletFlowFuture<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, createWalletFlowFuture_args, WalletFlowFuture> {

			public createWalletFlowFuture() {
				super("createWalletFlowFuture");
			}

			public createWalletFlowFuture_args getEmptyArgsInstance() {
				return new createWalletFlowFuture_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<WalletFlowFuture> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<WalletFlowFuture>() {
					public void onComplete(WalletFlowFuture o) {
						createWalletFlowFuture_result result = new createWalletFlowFuture_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						createWalletFlowFuture_result result = new createWalletFlowFuture_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, createWalletFlowFuture_args args,
					org.apache.thrift.async.AsyncMethodCallback<WalletFlowFuture> resultHandler)
					throws org.apache.thrift.TException {
				iface.createWalletFlowFuture(args.form, resultHandler);
			}

		}

		public static class cancelWalletFlowFuture<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, cancelWalletFlowFuture_args, java.util.List<WalletFlowFuture>> {

			public cancelWalletFlowFuture() {
				super("cancelWalletFlowFuture");
			}

			public cancelWalletFlowFuture_args getEmptyArgsInstance() {
				return new cancelWalletFlowFuture_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlowFuture>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlowFuture>>() {
					public void onComplete(java.util.List<WalletFlowFuture> o) {
						cancelWalletFlowFuture_result result = new cancelWalletFlowFuture_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						cancelWalletFlowFuture_result result = new cancelWalletFlowFuture_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, cancelWalletFlowFuture_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletFlowFuture>> resultHandler)
					throws org.apache.thrift.TException {
				iface.cancelWalletFlowFuture(args.accList, resultHandler);
			}

		}

		public static class getWalletExpireArray<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, getWalletExpireArray_args, java.util.List<WalletExpire>> {

			public getWalletExpireArray() {
				super("getWalletExpireArray");
			}

			public getWalletExpireArray_args getEmptyArgsInstance() {
				return new getWalletExpireArray_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletExpire>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletExpire>>() {
					public void onComplete(java.util.List<WalletExpire> o) {
						getWalletExpireArray_result result = new getWalletExpireArray_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getWalletExpireArray_result result = new getWalletExpireArray_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getWalletExpireArray_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<WalletExpire>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getWalletExpireArray(args.form, resultHandler);
			}

		}

	}

	public static class getWalletCategory_args
			implements org.apache.thrift.TBase<getWalletCategory_args, getWalletCategory_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletCategory_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletCategory_args");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletCategory_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletCategory_argsTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletCategory_args.class, metaDataMap);
		}

		public getWalletCategory_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletCategory_args(getWalletCategory_args other) {
		}

		public getWalletCategory_args deepCopy() {
			return new getWalletCategory_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletCategory_args)
				return this.equals((getWalletCategory_args) that);
			return false;
		}

		public boolean equals(getWalletCategory_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(getWalletCategory_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletCategory_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletCategory_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletCategory_argsStandardScheme getScheme() {
				return new getWalletCategory_argsStandardScheme();
			}

		}

		private static class getWalletCategory_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletCategory_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletCategory_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletCategory_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletCategory_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletCategory_argsTupleScheme getScheme() {
				return new getWalletCategory_argsTupleScheme();
			}

		}

		private static class getWalletCategory_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletCategory_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletCategory_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletCategory_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletCategory_result
			implements org.apache.thrift.TBase<getWalletCategory_result, getWalletCategory_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletCategory_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletCategory_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletCategory_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletCategory_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<WalletCategory> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									WalletCategory.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletCategory_result.class, metaDataMap);
		}

		public getWalletCategory_result() {
		}

		public getWalletCategory_result(java.util.List<WalletCategory> success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletCategory_result(getWalletCategory_result other) {
			if (other.isSetSuccess()) {
				java.util.List<WalletCategory> __this__success = new java.util.ArrayList<WalletCategory>(
						other.success.size());
				for (WalletCategory other_element : other.success) {
					__this__success.add(new WalletCategory(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletCategory_result deepCopy() {
			return new getWalletCategory_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<WalletCategory> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(WalletCategory elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<WalletCategory>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<WalletCategory> getSuccess() {
			return this.success;
		}

		public getWalletCategory_result setSuccess(
				@org.apache.thrift.annotation.Nullable java.util.List<WalletCategory> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletCategory_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<WalletCategory>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletCategory_result)
				return this.equals((getWalletCategory_result) that);
			return false;
		}

		public boolean equals(getWalletCategory_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletCategory_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletCategory_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletCategory_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletCategory_resultStandardScheme getScheme() {
				return new getWalletCategory_resultStandardScheme();
			}

		}

		private static class getWalletCategory_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletCategory_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletCategory_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<WalletCategory>(_list40.size);
								@org.apache.thrift.annotation.Nullable
								WalletCategory _elem41;
								for (int _i42 = 0; _i42 < _list40.size; ++_i42) {
									_elem41 = new WalletCategory();
									_elem41.read(iprot);
									struct.success.add(_elem41);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletCategory_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (WalletCategory _iter43 : struct.success) {
							_iter43.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletCategory_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletCategory_resultTupleScheme getScheme() {
				return new getWalletCategory_resultTupleScheme();
			}

		}

		private static class getWalletCategory_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletCategory_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletCategory_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (WalletCategory _iter44 : struct.success) {
							_iter44.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletCategory_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<WalletCategory>(_list45.size);
						@org.apache.thrift.annotation.Nullable
						WalletCategory _elem46;
						for (int _i47 = 0; _i47 < _list45.size; ++_i47) {
							_elem46 = new WalletCategory();
							_elem46.read(iprot);
							struct.success.add(_elem46);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletByUid_args
			implements org.apache.thrift.TBase<getWalletByUid_args, getWalletByUid_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getWalletByUid_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletByUid_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"category", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletByUid_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletByUid_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> category; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CATEGORY((short) 2, "category");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CATEGORY
					return CATEGORY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CATEGORY,
					new org.apache.thrift.meta_data.FieldMetaData("category",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletByUid_args.class, metaDataMap);
		}

		public getWalletByUid_args() {
		}

		public getWalletByUid_args(java.lang.String uid, java.util.List<java.lang.String> category) {
			this();
			this.uid = uid;
			this.category = category;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletByUid_args(getWalletByUid_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetCategory()) {
				java.util.List<java.lang.String> __this__category = new java.util.ArrayList<java.lang.String>(
						other.category);
				this.category = __this__category;
			}
		}

		public getWalletByUid_args deepCopy() {
			return new getWalletByUid_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.category = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getWalletByUid_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public int getCategorySize() {
			return (this.category == null) ? 0 : this.category.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getCategoryIterator() {
			return (this.category == null) ? null : this.category.iterator();
		}

		public void addToCategory(java.lang.String elem) {
			if (this.category == null) {
				this.category = new java.util.ArrayList<java.lang.String>();
			}
			this.category.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getCategory() {
			return this.category;
		}

		public getWalletByUid_args setCategory(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> category) {
			this.category = category;
			return this;
		}

		public void unsetCategory() {
			this.category = null;
		}

		/**
		 * Returns true if field category is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetCategory() {
			return this.category != null;
		}

		public void setCategoryIsSet(boolean value) {
			if (!value) {
				this.category = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CATEGORY:
				if (value == null) {
					unsetCategory();
				}
				else {
					setCategory((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CATEGORY:
				return getCategory();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CATEGORY:
				return isSetCategory();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletByUid_args)
				return this.equals((getWalletByUid_args) that);
			return false;
		}

		public boolean equals(getWalletByUid_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_category = true && this.isSetCategory();
			boolean that_present_category = true && that.isSetCategory();
			if (this_present_category || that_present_category) {
				if (!(this_present_category && that_present_category))
					return false;
				if (!this.category.equals(that.category))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
			if (isSetCategory())
				hashCode = hashCode * 8191 + category.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletByUid_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCategory()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletByUid_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("category:");
			if (this.category == null) {
				sb.append("null");
			}
			else {
				sb.append(this.category);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletByUid_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletByUid_argsStandardScheme getScheme() {
				return new getWalletByUid_argsStandardScheme();
			}

		}

		private static class getWalletByUid_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletByUid_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletByUid_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CATEGORY
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
								struct.category = new java.util.ArrayList<java.lang.String>(_list48.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem49;
								for (int _i50 = 0; _i50 < _list48.size; ++_i50) {
									_elem49 = iprot.readString();
									struct.category.add(_elem49);
								}
								iprot.readListEnd();
							}
							struct.setCategoryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletByUid_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.category != null) {
					oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.category.size()));
						for (java.lang.String _iter51 : struct.category) {
							oprot.writeString(_iter51);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletByUid_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletByUid_argsTupleScheme getScheme() {
				return new getWalletByUid_argsTupleScheme();
			}

		}

		private static class getWalletByUid_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletByUid_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletByUid_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetCategory()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetCategory()) {
					{
						oprot.writeI32(struct.category.size());
						for (java.lang.String _iter52 : struct.category) {
							oprot.writeString(_iter52);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletByUid_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.category = new java.util.ArrayList<java.lang.String>(_list53.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem54;
						for (int _i55 = 0; _i55 < _list53.size; ++_i55) {
							_elem54 = iprot.readString();
							struct.category.add(_elem54);
						}
					}
					struct.setCategoryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletByUid_result
			implements org.apache.thrift.TBase<getWalletByUid_result, getWalletByUid_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletByUid_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletByUid_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletByUid_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletByUid_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<Wallet> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Wallet.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletByUid_result.class, metaDataMap);
		}

		public getWalletByUid_result() {
		}

		public getWalletByUid_result(java.util.List<Wallet> success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletByUid_result(getWalletByUid_result other) {
			if (other.isSetSuccess()) {
				java.util.List<Wallet> __this__success = new java.util.ArrayList<Wallet>(other.success.size());
				for (Wallet other_element : other.success) {
					__this__success.add(new Wallet(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletByUid_result deepCopy() {
			return new getWalletByUid_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<Wallet> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(Wallet elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<Wallet>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<Wallet> getSuccess() {
			return this.success;
		}

		public getWalletByUid_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Wallet> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletByUid_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<Wallet>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletByUid_result)
				return this.equals((getWalletByUid_result) that);
			return false;
		}

		public boolean equals(getWalletByUid_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletByUid_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletByUid_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletByUid_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletByUid_resultStandardScheme getScheme() {
				return new getWalletByUid_resultStandardScheme();
			}

		}

		private static class getWalletByUid_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletByUid_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletByUid_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<Wallet>(_list56.size);
								@org.apache.thrift.annotation.Nullable
								Wallet _elem57;
								for (int _i58 = 0; _i58 < _list56.size; ++_i58) {
									_elem57 = new Wallet();
									_elem57.read(iprot);
									struct.success.add(_elem57);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletByUid_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (Wallet _iter59 : struct.success) {
							_iter59.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletByUid_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletByUid_resultTupleScheme getScheme() {
				return new getWalletByUid_resultTupleScheme();
			}

		}

		private static class getWalletByUid_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletByUid_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletByUid_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (Wallet _iter60 : struct.success) {
							_iter60.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletByUid_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<Wallet>(_list61.size);
						@org.apache.thrift.annotation.Nullable
						Wallet _elem62;
						for (int _i63 = 0; _i63 < _list61.size; ++_i63) {
							_elem62 = new Wallet();
							_elem62.read(iprot);
							struct.success.add(_elem62);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUser_args implements org.apache.thrift.TBase<getUser_args, getUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUser_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUser form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ArgUser.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_args.class, metaDataMap);
		}

		public getUser_args() {
		}

		public getUser_args(ArgUser form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUser_args(getUser_args other) {
			if (other.isSetForm()) {
				this.form = new ArgUser(other.form);
			}
		}

		public getUser_args deepCopy() {
			return new getUser_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getForm() {
			return this.form;
		}

		public getUser_args setForm(@org.apache.thrift.annotation.Nullable ArgUser form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUser_args)
				return this.equals((getUser_args) that);
			return false;
		}

		public boolean equals(getUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUser_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (form != null) {
				form.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_argsStandardScheme getScheme() {
				return new getUser_argsStandardScheme();
			}

		}

		private static class getUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgUser();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_argsTupleScheme getScheme() {
				return new getUser_argsTupleScheme();
			}

		}

		private static class getUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgUser();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUser_result implements org.apache.thrift.TBase<getUser_result, getUser_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_result.class, metaDataMap);
		}

		public getUser_result() {
		}

		public getUser_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUser_result(getUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUser_result deepCopy() {
			return new getUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public getUser_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUser_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUser_result)
				return this.equals((getUser_result) that);
			return false;
		}

		public boolean equals(getUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_resultStandardScheme getScheme() {
				return new getUser_resultStandardScheme();
			}

		}

		private static class getUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_resultTupleScheme getScheme() {
				return new getUser_resultTupleScheme();
			}

		}

		private static class getUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserEnsure_args
			implements org.apache.thrift.TBase<getUserEnsure_args, getUserEnsure_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserEnsure_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserEnsure_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserEnsure_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserEnsure_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUser form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ArgUser.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserEnsure_args.class, metaDataMap);
		}

		public getUserEnsure_args() {
		}

		public getUserEnsure_args(ArgUser form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserEnsure_args(getUserEnsure_args other) {
			if (other.isSetForm()) {
				this.form = new ArgUser(other.form);
			}
		}

		public getUserEnsure_args deepCopy() {
			return new getUserEnsure_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getForm() {
			return this.form;
		}

		public getUserEnsure_args setForm(@org.apache.thrift.annotation.Nullable ArgUser form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserEnsure_args)
				return this.equals((getUserEnsure_args) that);
			return false;
		}

		public boolean equals(getUserEnsure_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserEnsure_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserEnsure_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (form != null) {
				form.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserEnsure_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserEnsure_argsStandardScheme getScheme() {
				return new getUserEnsure_argsStandardScheme();
			}

		}

		private static class getUserEnsure_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserEnsure_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserEnsure_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgUser();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserEnsure_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserEnsure_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserEnsure_argsTupleScheme getScheme() {
				return new getUserEnsure_argsTupleScheme();
			}

		}

		private static class getUserEnsure_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserEnsure_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserEnsure_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserEnsure_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgUser();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserEnsure_result
			implements org.apache.thrift.TBase<getUserEnsure_result, getUserEnsure_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserEnsure_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserEnsure_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserEnsure_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserEnsure_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserEnsure_result.class, metaDataMap);
		}

		public getUserEnsure_result() {
		}

		public getUserEnsure_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserEnsure_result(getUserEnsure_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserEnsure_result deepCopy() {
			return new getUserEnsure_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public getUserEnsure_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserEnsure_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserEnsure_result)
				return this.equals((getUserEnsure_result) that);
			return false;
		}

		public boolean equals(getUserEnsure_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserEnsure_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserEnsure_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserEnsure_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserEnsure_resultStandardScheme getScheme() {
				return new getUserEnsure_resultStandardScheme();
			}

		}

		private static class getUserEnsure_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserEnsure_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserEnsure_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserEnsure_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserEnsure_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserEnsure_resultTupleScheme getScheme() {
				return new getUserEnsure_resultTupleScheme();
			}

		}

		private static class getUserEnsure_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserEnsure_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserEnsure_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserEnsure_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserList_args implements org.apache.thrift.TBase<getUserList_args, getUserList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_args.class, metaDataMap);
		}

		public getUserList_args() {
		}

		public getUserList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserList_args(getUserList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserList_args deepCopy() {
			return new getUserList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserList_args)
				return this.equals((getUserList_args) that);
			return false;
		}

		public boolean equals(getUserList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_argsStandardScheme getScheme() {
				return new getUserList_argsStandardScheme();
			}

		}

		private static class getUserList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_argsTupleScheme getScheme() {
				return new getUserList_argsTupleScheme();
			}

		}

		private static class getUserList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserList_result
			implements org.apache.thrift.TBase<getUserList_result, getUserList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUser success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResultUser.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_result.class, metaDataMap);
		}

		public getUserList_result() {
		}

		public getUserList_result(ResultUser success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserList_result(getUserList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUser(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserList_result deepCopy() {
			return new getUserList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUser getSuccess() {
			return this.success;
		}

		public getUserList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUser success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserList_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUser) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserList_result)
				return this.equals((getUserList_result) that);
			return false;
		}

		public boolean equals(getUserList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_resultStandardScheme getScheme() {
				return new getUserList_resultStandardScheme();
			}

		}

		private static class getUserList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUser();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_resultTupleScheme getScheme() {
				return new getUserList_resultTupleScheme();
			}

		}

		private static class getUserList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUser();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWallet_args implements org.apache.thrift.TBase<getWallet_args, getWallet_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWallet_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWallet_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"category", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWallet_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWallet_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CATEGORY((short) 2, "category");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CATEGORY
					return CATEGORY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWallet_args.class, metaDataMap);
		}

		public getWallet_args() {
		}

		public getWallet_args(java.lang.String uid, java.lang.String category) {
			this();
			this.uid = uid;
			this.category = category;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWallet_args(getWallet_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetCategory()) {
				this.category = other.category;
			}
		}

		public getWallet_args deepCopy() {
			return new getWallet_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.category = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getWallet_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getCategory() {
			return this.category;
		}

		public getWallet_args setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
			this.category = category;
			return this;
		}

		public void unsetCategory() {
			this.category = null;
		}

		/**
		 * Returns true if field category is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetCategory() {
			return this.category != null;
		}

		public void setCategoryIsSet(boolean value) {
			if (!value) {
				this.category = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CATEGORY:
				if (value == null) {
					unsetCategory();
				}
				else {
					setCategory((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CATEGORY:
				return getCategory();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CATEGORY:
				return isSetCategory();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWallet_args)
				return this.equals((getWallet_args) that);
			return false;
		}

		public boolean equals(getWallet_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_category = true && this.isSetCategory();
			boolean that_present_category = true && that.isSetCategory();
			if (this_present_category || that_present_category) {
				if (!(this_present_category && that_present_category))
					return false;
				if (!this.category.equals(that.category))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
			if (isSetCategory())
				hashCode = hashCode * 8191 + category.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWallet_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCategory()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWallet_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("category:");
			if (this.category == null) {
				sb.append("null");
			}
			else {
				sb.append(this.category);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWallet_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWallet_argsStandardScheme getScheme() {
				return new getWallet_argsStandardScheme();
			}

		}

		private static class getWallet_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWallet_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWallet_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CATEGORY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.category = iprot.readString();
							struct.setCategoryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWallet_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.category != null) {
					oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
					oprot.writeString(struct.category);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWallet_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWallet_argsTupleScheme getScheme() {
				return new getWallet_argsTupleScheme();
			}

		}

		private static class getWallet_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getWallet_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWallet_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetCategory()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetCategory()) {
					oprot.writeString(struct.category);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWallet_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.category = iprot.readString();
					struct.setCategoryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWallet_result implements org.apache.thrift.TBase<getWallet_result, getWallet_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWallet_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWallet_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWallet_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWallet_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Wallet success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Wallet.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWallet_result.class, metaDataMap);
		}

		public getWallet_result() {
		}

		public getWallet_result(Wallet success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWallet_result(getWallet_result other) {
			if (other.isSetSuccess()) {
				this.success = new Wallet(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWallet_result deepCopy() {
			return new getWallet_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Wallet getSuccess() {
			return this.success;
		}

		public getWallet_result setSuccess(@org.apache.thrift.annotation.Nullable Wallet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWallet_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Wallet) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWallet_result)
				return this.equals((getWallet_result) that);
			return false;
		}

		public boolean equals(getWallet_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWallet_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWallet_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWallet_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWallet_resultStandardScheme getScheme() {
				return new getWallet_resultStandardScheme();
			}

		}

		private static class getWallet_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWallet_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWallet_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Wallet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWallet_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWallet_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWallet_resultTupleScheme getScheme() {
				return new getWallet_resultTupleScheme();
			}

		}

		private static class getWallet_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWallet_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWallet_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWallet_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Wallet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletEnsure_args
			implements org.apache.thrift.TBase<getWalletEnsure_args, getWalletEnsure_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletEnsure_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletEnsure_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"category", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletEnsure_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletEnsure_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CATEGORY((short) 2, "category");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CATEGORY
					return CATEGORY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletEnsure_args.class, metaDataMap);
		}

		public getWalletEnsure_args() {
		}

		public getWalletEnsure_args(java.lang.String uid, java.lang.String category) {
			this();
			this.uid = uid;
			this.category = category;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletEnsure_args(getWalletEnsure_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetCategory()) {
				this.category = other.category;
			}
		}

		public getWalletEnsure_args deepCopy() {
			return new getWalletEnsure_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.category = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getWalletEnsure_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getCategory() {
			return this.category;
		}

		public getWalletEnsure_args setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
			this.category = category;
			return this;
		}

		public void unsetCategory() {
			this.category = null;
		}

		/**
		 * Returns true if field category is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetCategory() {
			return this.category != null;
		}

		public void setCategoryIsSet(boolean value) {
			if (!value) {
				this.category = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CATEGORY:
				if (value == null) {
					unsetCategory();
				}
				else {
					setCategory((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CATEGORY:
				return getCategory();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CATEGORY:
				return isSetCategory();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletEnsure_args)
				return this.equals((getWalletEnsure_args) that);
			return false;
		}

		public boolean equals(getWalletEnsure_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_category = true && this.isSetCategory();
			boolean that_present_category = true && that.isSetCategory();
			if (this_present_category || that_present_category) {
				if (!(this_present_category && that_present_category))
					return false;
				if (!this.category.equals(that.category))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
			if (isSetCategory())
				hashCode = hashCode * 8191 + category.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletEnsure_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCategory()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletEnsure_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("category:");
			if (this.category == null) {
				sb.append("null");
			}
			else {
				sb.append(this.category);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletEnsure_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletEnsure_argsStandardScheme getScheme() {
				return new getWalletEnsure_argsStandardScheme();
			}

		}

		private static class getWalletEnsure_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletEnsure_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletEnsure_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CATEGORY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.category = iprot.readString();
							struct.setCategoryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletEnsure_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.category != null) {
					oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
					oprot.writeString(struct.category);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletEnsure_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletEnsure_argsTupleScheme getScheme() {
				return new getWalletEnsure_argsTupleScheme();
			}

		}

		private static class getWalletEnsure_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletEnsure_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletEnsure_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetCategory()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetCategory()) {
					oprot.writeString(struct.category);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletEnsure_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.category = iprot.readString();
					struct.setCategoryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletEnsure_result
			implements org.apache.thrift.TBase<getWalletEnsure_result, getWalletEnsure_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletEnsure_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletEnsure_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletEnsure_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletEnsure_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Wallet success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Wallet.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletEnsure_result.class, metaDataMap);
		}

		public getWalletEnsure_result() {
		}

		public getWalletEnsure_result(Wallet success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletEnsure_result(getWalletEnsure_result other) {
			if (other.isSetSuccess()) {
				this.success = new Wallet(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletEnsure_result deepCopy() {
			return new getWalletEnsure_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Wallet getSuccess() {
			return this.success;
		}

		public getWalletEnsure_result setSuccess(@org.apache.thrift.annotation.Nullable Wallet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletEnsure_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Wallet) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletEnsure_result)
				return this.equals((getWalletEnsure_result) that);
			return false;
		}

		public boolean equals(getWalletEnsure_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletEnsure_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletEnsure_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletEnsure_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletEnsure_resultStandardScheme getScheme() {
				return new getWalletEnsure_resultStandardScheme();
			}

		}

		private static class getWalletEnsure_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletEnsure_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletEnsure_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Wallet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletEnsure_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletEnsure_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletEnsure_resultTupleScheme getScheme() {
				return new getWalletEnsure_resultTupleScheme();
			}

		}

		private static class getWalletEnsure_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletEnsure_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletEnsure_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletEnsure_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Wallet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletFlow_args
			implements org.apache.thrift.TBase<getWalletFlow_args, getWalletFlow_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getWalletFlow_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletFlow_args");

		private static final org.apache.thrift.protocol.TField ACC_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"acc", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletFlow_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletFlow_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String acc; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			ACC((short) 1, "acc");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ACC
					return ACC;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ACC, new org.apache.thrift.meta_data.FieldMetaData("acc",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletFlow_args.class, metaDataMap);
		}

		public getWalletFlow_args() {
		}

		public getWalletFlow_args(java.lang.String acc) {
			this();
			this.acc = acc;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletFlow_args(getWalletFlow_args other) {
			if (other.isSetAcc()) {
				this.acc = other.acc;
			}
		}

		public getWalletFlow_args deepCopy() {
			return new getWalletFlow_args(this);
		}

		@Override
		public void clear() {
			this.acc = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getAcc() {
			return this.acc;
		}

		public getWalletFlow_args setAcc(@org.apache.thrift.annotation.Nullable java.lang.String acc) {
			this.acc = acc;
			return this;
		}

		public void unsetAcc() {
			this.acc = null;
		}

		/**
		 * Returns true if field acc is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetAcc() {
			return this.acc != null;
		}

		public void setAccIsSet(boolean value) {
			if (!value) {
				this.acc = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case ACC:
				if (value == null) {
					unsetAcc();
				}
				else {
					setAcc((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ACC:
				return getAcc();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ACC:
				return isSetAcc();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletFlow_args)
				return this.equals((getWalletFlow_args) that);
			return false;
		}

		public boolean equals(getWalletFlow_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_acc = true && this.isSetAcc();
			boolean that_present_acc = true && that.isSetAcc();
			if (this_present_acc || that_present_acc) {
				if (!(this_present_acc && that_present_acc))
					return false;
				if (!this.acc.equals(that.acc))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetAcc()) ? 131071 : 524287);
			if (isSetAcc())
				hashCode = hashCode * 8191 + acc.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletFlow_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetAcc()).compareTo(other.isSetAcc());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAcc()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acc, other.acc);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletFlow_args(");
			boolean first = true;

			sb.append("acc:");
			if (this.acc == null) {
				sb.append("null");
			}
			else {
				sb.append(this.acc);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletFlow_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlow_argsStandardScheme getScheme() {
				return new getWalletFlow_argsStandardScheme();
			}

		}

		private static class getWalletFlow_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletFlow_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletFlow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ACC
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.acc = iprot.readString();
							struct.setAccIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletFlow_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.acc != null) {
					oprot.writeFieldBegin(ACC_FIELD_DESC);
					oprot.writeString(struct.acc);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletFlow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlow_argsTupleScheme getScheme() {
				return new getWalletFlow_argsTupleScheme();
			}

		}

		private static class getWalletFlow_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletFlow_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletFlow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetAcc()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetAcc()) {
					oprot.writeString(struct.acc);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletFlow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.acc = iprot.readString();
					struct.setAccIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletFlow_result
			implements org.apache.thrift.TBase<getWalletFlow_result, getWalletFlow_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletFlow_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletFlow_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletFlow_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletFlow_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable WalletFlow success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									WalletFlow.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletFlow_result.class, metaDataMap);
		}

		public getWalletFlow_result() {
		}

		public getWalletFlow_result(WalletFlow success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletFlow_result(getWalletFlow_result other) {
			if (other.isSetSuccess()) {
				this.success = new WalletFlow(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletFlow_result deepCopy() {
			return new getWalletFlow_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public WalletFlow getSuccess() {
			return this.success;
		}

		public getWalletFlow_result setSuccess(@org.apache.thrift.annotation.Nullable WalletFlow success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletFlow_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((WalletFlow) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletFlow_result)
				return this.equals((getWalletFlow_result) that);
			return false;
		}

		public boolean equals(getWalletFlow_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletFlow_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletFlow_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletFlow_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlow_resultStandardScheme getScheme() {
				return new getWalletFlow_resultStandardScheme();
			}

		}

		private static class getWalletFlow_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletFlow_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletFlow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new WalletFlow();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletFlow_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletFlow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlow_resultTupleScheme getScheme() {
				return new getWalletFlow_resultTupleScheme();
			}

		}

		private static class getWalletFlow_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletFlow_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletFlow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletFlow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new WalletFlow();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletExpire_args
			implements org.apache.thrift.TBase<getWalletExpire_args, getWalletExpire_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletExpire_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletExpire_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletExpire_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletExpire_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgWalletExpire form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ArgWalletExpire.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletExpire_args.class, metaDataMap);
		}

		public getWalletExpire_args() {
		}

		public getWalletExpire_args(ArgWalletExpire form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletExpire_args(getWalletExpire_args other) {
			if (other.isSetForm()) {
				this.form = new ArgWalletExpire(other.form);
			}
		}

		public getWalletExpire_args deepCopy() {
			return new getWalletExpire_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgWalletExpire getForm() {
			return this.form;
		}

		public getWalletExpire_args setForm(@org.apache.thrift.annotation.Nullable ArgWalletExpire form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgWalletExpire) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletExpire_args)
				return this.equals((getWalletExpire_args) that);
			return false;
		}

		public boolean equals(getWalletExpire_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletExpire_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletExpire_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (form != null) {
				form.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletExpire_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpire_argsStandardScheme getScheme() {
				return new getWalletExpire_argsStandardScheme();
			}

		}

		private static class getWalletExpire_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletExpire_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletExpire_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgWalletExpire();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletExpire_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletExpire_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpire_argsTupleScheme getScheme() {
				return new getWalletExpire_argsTupleScheme();
			}

		}

		private static class getWalletExpire_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletExpire_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletExpire_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletExpire_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgWalletExpire();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletExpire_result
			implements org.apache.thrift.TBase<getWalletExpire_result, getWalletExpire_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletExpire_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletExpire_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletExpire_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletExpire_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable WalletExpire success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									WalletExpire.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletExpire_result.class, metaDataMap);
		}

		public getWalletExpire_result() {
		}

		public getWalletExpire_result(WalletExpire success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletExpire_result(getWalletExpire_result other) {
			if (other.isSetSuccess()) {
				this.success = new WalletExpire(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletExpire_result deepCopy() {
			return new getWalletExpire_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public WalletExpire getSuccess() {
			return this.success;
		}

		public getWalletExpire_result setSuccess(@org.apache.thrift.annotation.Nullable WalletExpire success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletExpire_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((WalletExpire) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletExpire_result)
				return this.equals((getWalletExpire_result) that);
			return false;
		}

		public boolean equals(getWalletExpire_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletExpire_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletExpire_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletExpire_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpire_resultStandardScheme getScheme() {
				return new getWalletExpire_resultStandardScheme();
			}

		}

		private static class getWalletExpire_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletExpire_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletExpire_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new WalletExpire();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletExpire_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletExpire_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpire_resultTupleScheme getScheme() {
				return new getWalletExpire_resultTupleScheme();
			}

		}

		private static class getWalletExpire_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletExpire_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletExpire_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletExpire_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new WalletExpire();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletList_args
			implements org.apache.thrift.TBase<getWalletList_args, getWalletList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getWalletList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletList_args.class, metaDataMap);
		}

		public getWalletList_args() {
		}

		public getWalletList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletList_args(getWalletList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getWalletList_args deepCopy() {
			return new getWalletList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getWalletList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletList_args)
				return this.equals((getWalletList_args) that);
			return false;
		}

		public boolean equals(getWalletList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletList_argsStandardScheme getScheme() {
				return new getWalletList_argsStandardScheme();
			}

		}

		private static class getWalletList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletList_argsTupleScheme getScheme() {
				return new getWalletList_argsTupleScheme();
			}

		}

		private static class getWalletList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletList_result
			implements org.apache.thrift.TBase<getWalletList_result, getWalletList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultWallet success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResultWallet.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletList_result.class, metaDataMap);
		}

		public getWalletList_result() {
		}

		public getWalletList_result(ResultWallet success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletList_result(getWalletList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultWallet(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletList_result deepCopy() {
			return new getWalletList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultWallet getSuccess() {
			return this.success;
		}

		public getWalletList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultWallet success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultWallet) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletList_result)
				return this.equals((getWalletList_result) that);
			return false;
		}

		public boolean equals(getWalletList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletList_resultStandardScheme getScheme() {
				return new getWalletList_resultStandardScheme();
			}

		}

		private static class getWalletList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultWallet();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletList_resultTupleScheme getScheme() {
				return new getWalletList_resultTupleScheme();
			}

		}

		private static class getWalletList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultWallet();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletFlowList_args
			implements org.apache.thrift.TBase<getWalletFlowList_args, getWalletFlowList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletFlowList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletFlowList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletFlowList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletFlowList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletFlowList_args.class, metaDataMap);
		}

		public getWalletFlowList_args() {
		}

		public getWalletFlowList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletFlowList_args(getWalletFlowList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getWalletFlowList_args deepCopy() {
			return new getWalletFlowList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getWalletFlowList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletFlowList_args)
				return this.equals((getWalletFlowList_args) that);
			return false;
		}

		public boolean equals(getWalletFlowList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletFlowList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletFlowList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletFlowList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowList_argsStandardScheme getScheme() {
				return new getWalletFlowList_argsStandardScheme();
			}

		}

		private static class getWalletFlowList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletFlowList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletFlowList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletFlowList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletFlowList_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowList_argsTupleScheme getScheme() {
				return new getWalletFlowList_argsTupleScheme();
			}

		}

		private static class getWalletFlowList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletFlowList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletFlowList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletFlowList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletFlowList_result
			implements org.apache.thrift.TBase<getWalletFlowList_result, getWalletFlowList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletFlowList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletFlowList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletFlowList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletFlowList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultWalletflow success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResultWalletflow.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletFlowList_result.class, metaDataMap);
		}

		public getWalletFlowList_result() {
		}

		public getWalletFlowList_result(ResultWalletflow success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletFlowList_result(getWalletFlowList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultWalletflow(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletFlowList_result deepCopy() {
			return new getWalletFlowList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultWalletflow getSuccess() {
			return this.success;
		}

		public getWalletFlowList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultWalletflow success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletFlowList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultWalletflow) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletFlowList_result)
				return this.equals((getWalletFlowList_result) that);
			return false;
		}

		public boolean equals(getWalletFlowList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletFlowList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletFlowList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletFlowList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowList_resultStandardScheme getScheme() {
				return new getWalletFlowList_resultStandardScheme();
			}

		}

		private static class getWalletFlowList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletFlowList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletFlowList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultWalletflow();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletFlowList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletFlowList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowList_resultTupleScheme getScheme() {
				return new getWalletFlowList_resultTupleScheme();
			}

		}

		private static class getWalletFlowList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletFlowList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletFlowList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletFlowList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultWalletflow();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletFlowByUid_args
			implements org.apache.thrift.TBase<getWalletFlowByUid_args, getWalletFlowByUid_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletFlowByUid_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletFlowByUid_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletFlowByUid_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletFlowByUid_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), QUERY((short) 2, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletFlowByUid_args.class, metaDataMap);
		}

		public getWalletFlowByUid_args() {
		}

		public getWalletFlowByUid_args(java.lang.String uid, com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.uid = uid;
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletFlowByUid_args(getWalletFlowByUid_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getWalletFlowByUid_args deepCopy() {
			return new getWalletFlowByUid_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getWalletFlowByUid_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getWalletFlowByUid_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletFlowByUid_args)
				return this.equals((getWalletFlowByUid_args) that);
			return false;
		}

		public boolean equals(getWalletFlowByUid_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletFlowByUid_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletFlowByUid_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletFlowByUid_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowByUid_argsStandardScheme getScheme() {
				return new getWalletFlowByUid_argsStandardScheme();
			}

		}

		private static class getWalletFlowByUid_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletFlowByUid_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletFlowByUid_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletFlowByUid_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletFlowByUid_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowByUid_argsTupleScheme getScheme() {
				return new getWalletFlowByUid_argsTupleScheme();
			}

		}

		private static class getWalletFlowByUid_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletFlowByUid_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletFlowByUid_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetQuery()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletFlowByUid_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletFlowByUid_result
			implements org.apache.thrift.TBase<getWalletFlowByUid_result, getWalletFlowByUid_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletFlowByUid_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletFlowByUid_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletFlowByUid_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletFlowByUid_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultWalletflow success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResultWalletflow.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletFlowByUid_result.class,
					metaDataMap);
		}

		public getWalletFlowByUid_result() {
		}

		public getWalletFlowByUid_result(ResultWalletflow success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletFlowByUid_result(getWalletFlowByUid_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultWalletflow(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletFlowByUid_result deepCopy() {
			return new getWalletFlowByUid_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultWalletflow getSuccess() {
			return this.success;
		}

		public getWalletFlowByUid_result setSuccess(@org.apache.thrift.annotation.Nullable ResultWalletflow success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletFlowByUid_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultWalletflow) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletFlowByUid_result)
				return this.equals((getWalletFlowByUid_result) that);
			return false;
		}

		public boolean equals(getWalletFlowByUid_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletFlowByUid_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletFlowByUid_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletFlowByUid_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowByUid_resultStandardScheme getScheme() {
				return new getWalletFlowByUid_resultStandardScheme();
			}

		}

		private static class getWalletFlowByUid_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletFlowByUid_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletFlowByUid_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultWalletflow();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletFlowByUid_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletFlowByUid_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowByUid_resultTupleScheme getScheme() {
				return new getWalletFlowByUid_resultTupleScheme();
			}

		}

		private static class getWalletFlowByUid_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletFlowByUid_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletFlowByUid_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletFlowByUid_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultWalletflow();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletFlowFuture_args
			implements org.apache.thrift.TBase<getWalletFlowFuture_args, getWalletFlowFuture_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletFlowFuture_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletFlowFuture_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletFlowFuture_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletFlowFuture_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletFlowFuture_args.class, metaDataMap);
		}

		public getWalletFlowFuture_args() {
		}

		public getWalletFlowFuture_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletFlowFuture_args(getWalletFlowFuture_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getWalletFlowFuture_args deepCopy() {
			return new getWalletFlowFuture_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getWalletFlowFuture_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletFlowFuture_args)
				return this.equals((getWalletFlowFuture_args) that);
			return false;
		}

		public boolean equals(getWalletFlowFuture_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletFlowFuture_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletFlowFuture_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletFlowFuture_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowFuture_argsStandardScheme getScheme() {
				return new getWalletFlowFuture_argsStandardScheme();
			}

		}

		private static class getWalletFlowFuture_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletFlowFuture_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletFlowFuture_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowFuture_argsTupleScheme getScheme() {
				return new getWalletFlowFuture_argsTupleScheme();
			}

		}

		private static class getWalletFlowFuture_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletFlowFuture_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletFlowFuture_result
			implements org.apache.thrift.TBase<getWalletFlowFuture_result, getWalletFlowFuture_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletFlowFuture_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletFlowFuture_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletFlowFuture_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletFlowFuture_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultWalletflowFuture success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResultWalletflowFuture.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletFlowFuture_result.class,
					metaDataMap);
		}

		public getWalletFlowFuture_result() {
		}

		public getWalletFlowFuture_result(ResultWalletflowFuture success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletFlowFuture_result(getWalletFlowFuture_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultWalletflowFuture(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletFlowFuture_result deepCopy() {
			return new getWalletFlowFuture_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultWalletflowFuture getSuccess() {
			return this.success;
		}

		public getWalletFlowFuture_result setSuccess(
				@org.apache.thrift.annotation.Nullable ResultWalletflowFuture success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletFlowFuture_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultWalletflowFuture) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletFlowFuture_result)
				return this.equals((getWalletFlowFuture_result) that);
			return false;
		}

		public boolean equals(getWalletFlowFuture_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletFlowFuture_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletFlowFuture_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletFlowFuture_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowFuture_resultStandardScheme getScheme() {
				return new getWalletFlowFuture_resultStandardScheme();
			}

		}

		private static class getWalletFlowFuture_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletFlowFuture_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultWalletflowFuture();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletFlowFuture_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletFlowFuture_resultTupleScheme getScheme() {
				return new getWalletFlowFuture_resultTupleScheme();
			}

		}

		private static class getWalletFlowFuture_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletFlowFuture_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultWalletflowFuture();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletExpireList_args
			implements org.apache.thrift.TBase<getWalletExpireList_args, getWalletExpireList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletExpireList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletExpireList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletExpireList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletExpireList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletExpireList_args.class, metaDataMap);
		}

		public getWalletExpireList_args() {
		}

		public getWalletExpireList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletExpireList_args(getWalletExpireList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getWalletExpireList_args deepCopy() {
			return new getWalletExpireList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getWalletExpireList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletExpireList_args)
				return this.equals((getWalletExpireList_args) that);
			return false;
		}

		public boolean equals(getWalletExpireList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletExpireList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletExpireList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletExpireList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpireList_argsStandardScheme getScheme() {
				return new getWalletExpireList_argsStandardScheme();
			}

		}

		private static class getWalletExpireList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletExpireList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletExpireList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletExpireList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletExpireList_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpireList_argsTupleScheme getScheme() {
				return new getWalletExpireList_argsTupleScheme();
			}

		}

		private static class getWalletExpireList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletExpireList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletExpireList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletExpireList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletExpireList_result
			implements org.apache.thrift.TBase<getWalletExpireList_result, getWalletExpireList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletExpireList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletExpireList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletExpireList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletExpireList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultWalletExpire success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ResultWalletExpire.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletExpireList_result.class,
					metaDataMap);
		}

		public getWalletExpireList_result() {
		}

		public getWalletExpireList_result(ResultWalletExpire success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletExpireList_result(getWalletExpireList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultWalletExpire(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletExpireList_result deepCopy() {
			return new getWalletExpireList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultWalletExpire getSuccess() {
			return this.success;
		}

		public getWalletExpireList_result setSuccess(
				@org.apache.thrift.annotation.Nullable ResultWalletExpire success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletExpireList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultWalletExpire) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletExpireList_result)
				return this.equals((getWalletExpireList_result) that);
			return false;
		}

		public boolean equals(getWalletExpireList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletExpireList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletExpireList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletExpireList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpireList_resultStandardScheme getScheme() {
				return new getWalletExpireList_resultStandardScheme();
			}

		}

		private static class getWalletExpireList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletExpireList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletExpireList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultWalletExpire();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletExpireList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletExpireList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpireList_resultTupleScheme getScheme() {
				return new getWalletExpireList_resultTupleScheme();
			}

		}

		private static class getWalletExpireList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletExpireList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletExpireList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletExpireList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultWalletExpire();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class execWalletFlow_args
			implements org.apache.thrift.TBase<execWalletFlow_args, execWalletFlow_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<execWalletFlow_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"execWalletFlow_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execWalletFlow_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execWalletFlow_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgWalletFlow form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ArgWalletFlow.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execWalletFlow_args.class, metaDataMap);
		}

		public execWalletFlow_args() {
		}

		public execWalletFlow_args(ArgWalletFlow form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public execWalletFlow_args(execWalletFlow_args other) {
			if (other.isSetForm()) {
				this.form = new ArgWalletFlow(other.form);
			}
		}

		public execWalletFlow_args deepCopy() {
			return new execWalletFlow_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgWalletFlow getForm() {
			return this.form;
		}

		public execWalletFlow_args setForm(@org.apache.thrift.annotation.Nullable ArgWalletFlow form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgWalletFlow) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof execWalletFlow_args)
				return this.equals((execWalletFlow_args) that);
			return false;
		}

		public boolean equals(execWalletFlow_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(execWalletFlow_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("execWalletFlow_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (form != null) {
				form.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class execWalletFlow_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execWalletFlow_argsStandardScheme getScheme() {
				return new execWalletFlow_argsStandardScheme();
			}

		}

		private static class execWalletFlow_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<execWalletFlow_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, execWalletFlow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgWalletFlow();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, execWalletFlow_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class execWalletFlow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public execWalletFlow_argsTupleScheme getScheme() {
				return new execWalletFlow_argsTupleScheme();
			}

		}

		private static class execWalletFlow_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<execWalletFlow_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, execWalletFlow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, execWalletFlow_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgWalletFlow();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class execWalletFlow_result
			implements org.apache.thrift.TBase<execWalletFlow_result, execWalletFlow_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<execWalletFlow_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"execWalletFlow_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execWalletFlow_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execWalletFlow_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable WalletFlow success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									WalletFlow.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execWalletFlow_result.class, metaDataMap);
		}

		public execWalletFlow_result() {
		}

		public execWalletFlow_result(WalletFlow success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public execWalletFlow_result(execWalletFlow_result other) {
			if (other.isSetSuccess()) {
				this.success = new WalletFlow(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public execWalletFlow_result deepCopy() {
			return new execWalletFlow_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public WalletFlow getSuccess() {
			return this.success;
		}

		public execWalletFlow_result setSuccess(@org.apache.thrift.annotation.Nullable WalletFlow success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public execWalletFlow_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((WalletFlow) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof execWalletFlow_result)
				return this.equals((execWalletFlow_result) that);
			return false;
		}

		public boolean equals(execWalletFlow_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(execWalletFlow_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("execWalletFlow_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class execWalletFlow_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execWalletFlow_resultStandardScheme getScheme() {
				return new execWalletFlow_resultStandardScheme();
			}

		}

		private static class execWalletFlow_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<execWalletFlow_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, execWalletFlow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new WalletFlow();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, execWalletFlow_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class execWalletFlow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public execWalletFlow_resultTupleScheme getScheme() {
				return new execWalletFlow_resultTupleScheme();
			}

		}

		private static class execWalletFlow_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<execWalletFlow_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, execWalletFlow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, execWalletFlow_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new WalletFlow();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class execWalletFlowUnfreeze_args
			implements org.apache.thrift.TBase<execWalletFlowUnfreeze_args, execWalletFlowUnfreeze_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<execWalletFlowUnfreeze_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"execWalletFlowUnfreeze_args");

		private static final org.apache.thrift.protocol.TField FORM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"formList", org.apache.thrift.protocol.TType.LIST, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execWalletFlowUnfreeze_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execWalletFlowUnfreeze_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<ArgUnfreeze> formList; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM_LIST((short) 1, "formList");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM_LIST
					return FORM_LIST;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM_LIST, new org.apache.thrift.meta_data.FieldMetaData("formList",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ArgUnfreeze.class))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execWalletFlowUnfreeze_args.class,
					metaDataMap);
		}

		public execWalletFlowUnfreeze_args() {
		}

		public execWalletFlowUnfreeze_args(java.util.List<ArgUnfreeze> formList) {
			this();
			this.formList = formList;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public execWalletFlowUnfreeze_args(execWalletFlowUnfreeze_args other) {
			if (other.isSetFormList()) {
				java.util.List<ArgUnfreeze> __this__formList = new java.util.ArrayList<ArgUnfreeze>(
						other.formList.size());
				for (ArgUnfreeze other_element : other.formList) {
					__this__formList.add(new ArgUnfreeze(other_element));
				}
				this.formList = __this__formList;
			}
		}

		public execWalletFlowUnfreeze_args deepCopy() {
			return new execWalletFlowUnfreeze_args(this);
		}

		@Override
		public void clear() {
			this.formList = null;
		}

		public int getFormListSize() {
			return (this.formList == null) ? 0 : this.formList.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<ArgUnfreeze> getFormListIterator() {
			return (this.formList == null) ? null : this.formList.iterator();
		}

		public void addToFormList(ArgUnfreeze elem) {
			if (this.formList == null) {
				this.formList = new java.util.ArrayList<ArgUnfreeze>();
			}
			this.formList.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<ArgUnfreeze> getFormList() {
			return this.formList;
		}

		public execWalletFlowUnfreeze_args setFormList(
				@org.apache.thrift.annotation.Nullable java.util.List<ArgUnfreeze> formList) {
			this.formList = formList;
			return this;
		}

		public void unsetFormList() {
			this.formList = null;
		}

		/**
		 * Returns true if field formList is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetFormList() {
			return this.formList != null;
		}

		public void setFormListIsSet(boolean value) {
			if (!value) {
				this.formList = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM_LIST:
				if (value == null) {
					unsetFormList();
				}
				else {
					setFormList((java.util.List<ArgUnfreeze>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM_LIST:
				return getFormList();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM_LIST:
				return isSetFormList();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof execWalletFlowUnfreeze_args)
				return this.equals((execWalletFlowUnfreeze_args) that);
			return false;
		}

		public boolean equals(execWalletFlowUnfreeze_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_formList = true && this.isSetFormList();
			boolean that_present_formList = true && that.isSetFormList();
			if (this_present_formList || that_present_formList) {
				if (!(this_present_formList && that_present_formList))
					return false;
				if (!this.formList.equals(that.formList))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetFormList()) ? 131071 : 524287);
			if (isSetFormList())
				hashCode = hashCode * 8191 + formList.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(execWalletFlowUnfreeze_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetFormList()).compareTo(other.isSetFormList());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetFormList()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formList, other.formList);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("execWalletFlowUnfreeze_args(");
			boolean first = true;

			sb.append("formList:");
			if (this.formList == null) {
				sb.append("null");
			}
			else {
				sb.append(this.formList);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class execWalletFlowUnfreeze_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execWalletFlowUnfreeze_argsStandardScheme getScheme() {
				return new execWalletFlowUnfreeze_argsStandardScheme();
			}

		}

		private static class execWalletFlowUnfreeze_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<execWalletFlowUnfreeze_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, execWalletFlowUnfreeze_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM_LIST
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
								struct.formList = new java.util.ArrayList<ArgUnfreeze>(_list64.size);
								@org.apache.thrift.annotation.Nullable
								ArgUnfreeze _elem65;
								for (int _i66 = 0; _i66 < _list64.size; ++_i66) {
									_elem65 = new ArgUnfreeze();
									_elem65.read(iprot);
									struct.formList.add(_elem65);
								}
								iprot.readListEnd();
							}
							struct.setFormListIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, execWalletFlowUnfreeze_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.formList != null) {
					oprot.writeFieldBegin(FORM_LIST_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.formList.size()));
						for (ArgUnfreeze _iter67 : struct.formList) {
							_iter67.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class execWalletFlowUnfreeze_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execWalletFlowUnfreeze_argsTupleScheme getScheme() {
				return new execWalletFlowUnfreeze_argsTupleScheme();
			}

		}

		private static class execWalletFlowUnfreeze_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<execWalletFlowUnfreeze_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, execWalletFlowUnfreeze_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetFormList()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetFormList()) {
					{
						oprot.writeI32(struct.formList.size());
						for (ArgUnfreeze _iter68 : struct.formList) {
							_iter68.write(oprot);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, execWalletFlowUnfreeze_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.formList = new java.util.ArrayList<ArgUnfreeze>(_list69.size);
						@org.apache.thrift.annotation.Nullable
						ArgUnfreeze _elem70;
						for (int _i71 = 0; _i71 < _list69.size; ++_i71) {
							_elem70 = new ArgUnfreeze();
							_elem70.read(iprot);
							struct.formList.add(_elem70);
						}
					}
					struct.setFormListIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class execWalletFlowUnfreeze_result
			implements org.apache.thrift.TBase<execWalletFlowUnfreeze_result, execWalletFlowUnfreeze_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<execWalletFlowUnfreeze_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"execWalletFlowUnfreeze_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execWalletFlowUnfreeze_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execWalletFlowUnfreeze_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<WalletFlow> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									WalletFlow.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execWalletFlowUnfreeze_result.class,
					metaDataMap);
		}

		public execWalletFlowUnfreeze_result() {
		}

		public execWalletFlowUnfreeze_result(java.util.List<WalletFlow> success,
				com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public execWalletFlowUnfreeze_result(execWalletFlowUnfreeze_result other) {
			if (other.isSetSuccess()) {
				java.util.List<WalletFlow> __this__success = new java.util.ArrayList<WalletFlow>(other.success.size());
				for (WalletFlow other_element : other.success) {
					__this__success.add(new WalletFlow(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public execWalletFlowUnfreeze_result deepCopy() {
			return new execWalletFlowUnfreeze_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<WalletFlow> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(WalletFlow elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<WalletFlow>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<WalletFlow> getSuccess() {
			return this.success;
		}

		public execWalletFlowUnfreeze_result setSuccess(
				@org.apache.thrift.annotation.Nullable java.util.List<WalletFlow> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public execWalletFlowUnfreeze_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<WalletFlow>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof execWalletFlowUnfreeze_result)
				return this.equals((execWalletFlowUnfreeze_result) that);
			return false;
		}

		public boolean equals(execWalletFlowUnfreeze_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(execWalletFlowUnfreeze_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("execWalletFlowUnfreeze_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class execWalletFlowUnfreeze_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execWalletFlowUnfreeze_resultStandardScheme getScheme() {
				return new execWalletFlowUnfreeze_resultStandardScheme();
			}

		}

		private static class execWalletFlowUnfreeze_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<execWalletFlowUnfreeze_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, execWalletFlowUnfreeze_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<WalletFlow>(_list72.size);
								@org.apache.thrift.annotation.Nullable
								WalletFlow _elem73;
								for (int _i74 = 0; _i74 < _list72.size; ++_i74) {
									_elem73 = new WalletFlow();
									_elem73.read(iprot);
									struct.success.add(_elem73);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, execWalletFlowUnfreeze_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (WalletFlow _iter75 : struct.success) {
							_iter75.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class execWalletFlowUnfreeze_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execWalletFlowUnfreeze_resultTupleScheme getScheme() {
				return new execWalletFlowUnfreeze_resultTupleScheme();
			}

		}

		private static class execWalletFlowUnfreeze_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<execWalletFlowUnfreeze_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, execWalletFlowUnfreeze_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (WalletFlow _iter76 : struct.success) {
							_iter76.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, execWalletFlowUnfreeze_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<WalletFlow>(_list77.size);
						@org.apache.thrift.annotation.Nullable
						WalletFlow _elem78;
						for (int _i79 = 0; _i79 < _list77.size; ++_i79) {
							_elem78 = new WalletFlow();
							_elem78.read(iprot);
							struct.success.add(_elem78);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class execTransferInternal_args
			implements org.apache.thrift.TBase<execTransferInternal_args, execTransferInternal_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<execTransferInternal_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"execTransferInternal_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execTransferInternal_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execTransferInternal_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgTransfer form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ArgTransfer.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execTransferInternal_args.class,
					metaDataMap);
		}

		public execTransferInternal_args() {
		}

		public execTransferInternal_args(ArgTransfer form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public execTransferInternal_args(execTransferInternal_args other) {
			if (other.isSetForm()) {
				this.form = new ArgTransfer(other.form);
			}
		}

		public execTransferInternal_args deepCopy() {
			return new execTransferInternal_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgTransfer getForm() {
			return this.form;
		}

		public execTransferInternal_args setForm(@org.apache.thrift.annotation.Nullable ArgTransfer form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgTransfer) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof execTransferInternal_args)
				return this.equals((execTransferInternal_args) that);
			return false;
		}

		public boolean equals(execTransferInternal_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(execTransferInternal_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("execTransferInternal_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (form != null) {
				form.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class execTransferInternal_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execTransferInternal_argsStandardScheme getScheme() {
				return new execTransferInternal_argsStandardScheme();
			}

		}

		private static class execTransferInternal_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<execTransferInternal_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, execTransferInternal_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgTransfer();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, execTransferInternal_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class execTransferInternal_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execTransferInternal_argsTupleScheme getScheme() {
				return new execTransferInternal_argsTupleScheme();
			}

		}

		private static class execTransferInternal_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<execTransferInternal_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, execTransferInternal_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, execTransferInternal_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgTransfer();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class execTransferInternal_result
			implements org.apache.thrift.TBase<execTransferInternal_result, execTransferInternal_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<execTransferInternal_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"execTransferInternal_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new execTransferInternal_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new execTransferInternal_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<WalletFlow> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									WalletFlow.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(execTransferInternal_result.class,
					metaDataMap);
		}

		public execTransferInternal_result() {
		}

		public execTransferInternal_result(java.util.List<WalletFlow> success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public execTransferInternal_result(execTransferInternal_result other) {
			if (other.isSetSuccess()) {
				java.util.List<WalletFlow> __this__success = new java.util.ArrayList<WalletFlow>(other.success.size());
				for (WalletFlow other_element : other.success) {
					__this__success.add(new WalletFlow(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public execTransferInternal_result deepCopy() {
			return new execTransferInternal_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<WalletFlow> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(WalletFlow elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<WalletFlow>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<WalletFlow> getSuccess() {
			return this.success;
		}

		public execTransferInternal_result setSuccess(
				@org.apache.thrift.annotation.Nullable java.util.List<WalletFlow> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public execTransferInternal_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<WalletFlow>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof execTransferInternal_result)
				return this.equals((execTransferInternal_result) that);
			return false;
		}

		public boolean equals(execTransferInternal_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(execTransferInternal_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("execTransferInternal_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class execTransferInternal_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execTransferInternal_resultStandardScheme getScheme() {
				return new execTransferInternal_resultStandardScheme();
			}

		}

		private static class execTransferInternal_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<execTransferInternal_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, execTransferInternal_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<WalletFlow>(_list80.size);
								@org.apache.thrift.annotation.Nullable
								WalletFlow _elem81;
								for (int _i82 = 0; _i82 < _list80.size; ++_i82) {
									_elem81 = new WalletFlow();
									_elem81.read(iprot);
									struct.success.add(_elem81);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, execTransferInternal_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (WalletFlow _iter83 : struct.success) {
							_iter83.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class execTransferInternal_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public execTransferInternal_resultTupleScheme getScheme() {
				return new execTransferInternal_resultTupleScheme();
			}

		}

		private static class execTransferInternal_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<execTransferInternal_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, execTransferInternal_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (WalletFlow _iter84 : struct.success) {
							_iter84.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, execTransferInternal_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<WalletFlow>(_list85.size);
						@org.apache.thrift.annotation.Nullable
						WalletFlow _elem86;
						for (int _i87 = 0; _i87 < _list85.size; ++_i87) {
							_elem86 = new WalletFlow();
							_elem86.read(iprot);
							struct.success.add(_elem86);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createWalletFlowFuture_args
			implements org.apache.thrift.TBase<createWalletFlowFuture_args, createWalletFlowFuture_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<createWalletFlowFuture_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createWalletFlowFuture_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createWalletFlowFuture_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createWalletFlowFuture_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgWalletFlowFuture form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ArgWalletFlowFuture.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createWalletFlowFuture_args.class,
					metaDataMap);
		}

		public createWalletFlowFuture_args() {
		}

		public createWalletFlowFuture_args(ArgWalletFlowFuture form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createWalletFlowFuture_args(createWalletFlowFuture_args other) {
			if (other.isSetForm()) {
				this.form = new ArgWalletFlowFuture(other.form);
			}
		}

		public createWalletFlowFuture_args deepCopy() {
			return new createWalletFlowFuture_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgWalletFlowFuture getForm() {
			return this.form;
		}

		public createWalletFlowFuture_args setForm(@org.apache.thrift.annotation.Nullable ArgWalletFlowFuture form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgWalletFlowFuture) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createWalletFlowFuture_args)
				return this.equals((createWalletFlowFuture_args) that);
			return false;
		}

		public boolean equals(createWalletFlowFuture_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createWalletFlowFuture_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createWalletFlowFuture_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (form != null) {
				form.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createWalletFlowFuture_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public createWalletFlowFuture_argsStandardScheme getScheme() {
				return new createWalletFlowFuture_argsStandardScheme();
			}

		}

		private static class createWalletFlowFuture_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createWalletFlowFuture_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgWalletFlowFuture();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createWalletFlowFuture_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public createWalletFlowFuture_argsTupleScheme getScheme() {
				return new createWalletFlowFuture_argsTupleScheme();
			}

		}

		private static class createWalletFlowFuture_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<createWalletFlowFuture_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgWalletFlowFuture();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createWalletFlowFuture_result
			implements org.apache.thrift.TBase<createWalletFlowFuture_result, createWalletFlowFuture_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<createWalletFlowFuture_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createWalletFlowFuture_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createWalletFlowFuture_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createWalletFlowFuture_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable WalletFlowFuture success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									WalletFlowFuture.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createWalletFlowFuture_result.class,
					metaDataMap);
		}

		public createWalletFlowFuture_result() {
		}

		public createWalletFlowFuture_result(WalletFlowFuture success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createWalletFlowFuture_result(createWalletFlowFuture_result other) {
			if (other.isSetSuccess()) {
				this.success = new WalletFlowFuture(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public createWalletFlowFuture_result deepCopy() {
			return new createWalletFlowFuture_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public WalletFlowFuture getSuccess() {
			return this.success;
		}

		public createWalletFlowFuture_result setSuccess(
				@org.apache.thrift.annotation.Nullable WalletFlowFuture success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public createWalletFlowFuture_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((WalletFlowFuture) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createWalletFlowFuture_result)
				return this.equals((createWalletFlowFuture_result) that);
			return false;
		}

		public boolean equals(createWalletFlowFuture_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createWalletFlowFuture_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createWalletFlowFuture_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createWalletFlowFuture_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public createWalletFlowFuture_resultStandardScheme getScheme() {
				return new createWalletFlowFuture_resultStandardScheme();
			}

		}

		private static class createWalletFlowFuture_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createWalletFlowFuture_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new WalletFlowFuture();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createWalletFlowFuture_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public createWalletFlowFuture_resultTupleScheme getScheme() {
				return new createWalletFlowFuture_resultTupleScheme();
			}

		}

		private static class createWalletFlowFuture_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<createWalletFlowFuture_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new WalletFlowFuture();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class cancelWalletFlowFuture_args
			implements org.apache.thrift.TBase<cancelWalletFlowFuture_args, cancelWalletFlowFuture_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<cancelWalletFlowFuture_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelWalletFlowFuture_args");

		private static final org.apache.thrift.protocol.TField ACC_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"accList", org.apache.thrift.protocol.TType.LIST, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelWalletFlowFuture_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelWalletFlowFuture_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> accList; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			ACC_LIST((short) 1, "accList");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ACC_LIST
					return ACC_LIST;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ACC_LIST,
					new org.apache.thrift.meta_data.FieldMetaData("accList",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelWalletFlowFuture_args.class,
					metaDataMap);
		}

		public cancelWalletFlowFuture_args() {
		}

		public cancelWalletFlowFuture_args(java.util.List<java.lang.String> accList) {
			this();
			this.accList = accList;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelWalletFlowFuture_args(cancelWalletFlowFuture_args other) {
			if (other.isSetAccList()) {
				java.util.List<java.lang.String> __this__accList = new java.util.ArrayList<java.lang.String>(
						other.accList);
				this.accList = __this__accList;
			}
		}

		public cancelWalletFlowFuture_args deepCopy() {
			return new cancelWalletFlowFuture_args(this);
		}

		@Override
		public void clear() {
			this.accList = null;
		}

		public int getAccListSize() {
			return (this.accList == null) ? 0 : this.accList.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getAccListIterator() {
			return (this.accList == null) ? null : this.accList.iterator();
		}

		public void addToAccList(java.lang.String elem) {
			if (this.accList == null) {
				this.accList = new java.util.ArrayList<java.lang.String>();
			}
			this.accList.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getAccList() {
			return this.accList;
		}

		public cancelWalletFlowFuture_args setAccList(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> accList) {
			this.accList = accList;
			return this;
		}

		public void unsetAccList() {
			this.accList = null;
		}

		/**
		 * Returns true if field accList is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetAccList() {
			return this.accList != null;
		}

		public void setAccListIsSet(boolean value) {
			if (!value) {
				this.accList = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case ACC_LIST:
				if (value == null) {
					unsetAccList();
				}
				else {
					setAccList((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ACC_LIST:
				return getAccList();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ACC_LIST:
				return isSetAccList();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelWalletFlowFuture_args)
				return this.equals((cancelWalletFlowFuture_args) that);
			return false;
		}

		public boolean equals(cancelWalletFlowFuture_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_accList = true && this.isSetAccList();
			boolean that_present_accList = true && that.isSetAccList();
			if (this_present_accList || that_present_accList) {
				if (!(this_present_accList && that_present_accList))
					return false;
				if (!this.accList.equals(that.accList))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetAccList()) ? 131071 : 524287);
			if (isSetAccList())
				hashCode = hashCode * 8191 + accList.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(cancelWalletFlowFuture_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetAccList()).compareTo(other.isSetAccList());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAccList()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accList, other.accList);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelWalletFlowFuture_args(");
			boolean first = true;

			sb.append("accList:");
			if (this.accList == null) {
				sb.append("null");
			}
			else {
				sb.append(this.accList);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelWalletFlowFuture_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public cancelWalletFlowFuture_argsStandardScheme getScheme() {
				return new cancelWalletFlowFuture_argsStandardScheme();
			}

		}

		private static class cancelWalletFlowFuture_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<cancelWalletFlowFuture_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ACC_LIST
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
								struct.accList = new java.util.ArrayList<java.lang.String>(_list88.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem89;
								for (int _i90 = 0; _i90 < _list88.size; ++_i90) {
									_elem89 = iprot.readString();
									struct.accList.add(_elem89);
								}
								iprot.readListEnd();
							}
							struct.setAccListIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.accList != null) {
					oprot.writeFieldBegin(ACC_LIST_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.accList.size()));
						for (java.lang.String _iter91 : struct.accList) {
							oprot.writeString(_iter91);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelWalletFlowFuture_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public cancelWalletFlowFuture_argsTupleScheme getScheme() {
				return new cancelWalletFlowFuture_argsTupleScheme();
			}

		}

		private static class cancelWalletFlowFuture_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<cancelWalletFlowFuture_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetAccList()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetAccList()) {
					{
						oprot.writeI32(struct.accList.size());
						for (java.lang.String _iter92 : struct.accList) {
							oprot.writeString(_iter92);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelWalletFlowFuture_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.accList = new java.util.ArrayList<java.lang.String>(_list93.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem94;
						for (int _i95 = 0; _i95 < _list93.size; ++_i95) {
							_elem94 = iprot.readString();
							struct.accList.add(_elem94);
						}
					}
					struct.setAccListIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class cancelWalletFlowFuture_result
			implements org.apache.thrift.TBase<cancelWalletFlowFuture_result, cancelWalletFlowFuture_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<cancelWalletFlowFuture_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"cancelWalletFlowFuture_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelWalletFlowFuture_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelWalletFlowFuture_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<WalletFlowFuture> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									WalletFlowFuture.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelWalletFlowFuture_result.class,
					metaDataMap);
		}

		public cancelWalletFlowFuture_result() {
		}

		public cancelWalletFlowFuture_result(java.util.List<WalletFlowFuture> success,
				com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public cancelWalletFlowFuture_result(cancelWalletFlowFuture_result other) {
			if (other.isSetSuccess()) {
				java.util.List<WalletFlowFuture> __this__success = new java.util.ArrayList<WalletFlowFuture>(
						other.success.size());
				for (WalletFlowFuture other_element : other.success) {
					__this__success.add(new WalletFlowFuture(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public cancelWalletFlowFuture_result deepCopy() {
			return new cancelWalletFlowFuture_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<WalletFlowFuture> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(WalletFlowFuture elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<WalletFlowFuture>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<WalletFlowFuture> getSuccess() {
			return this.success;
		}

		public cancelWalletFlowFuture_result setSuccess(
				@org.apache.thrift.annotation.Nullable java.util.List<WalletFlowFuture> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public cancelWalletFlowFuture_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<WalletFlowFuture>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof cancelWalletFlowFuture_result)
				return this.equals((cancelWalletFlowFuture_result) that);
			return false;
		}

		public boolean equals(cancelWalletFlowFuture_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(cancelWalletFlowFuture_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelWalletFlowFuture_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class cancelWalletFlowFuture_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public cancelWalletFlowFuture_resultStandardScheme getScheme() {
				return new cancelWalletFlowFuture_resultStandardScheme();
			}

		}

		private static class cancelWalletFlowFuture_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<cancelWalletFlowFuture_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, cancelWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<WalletFlowFuture>(_list96.size);
								@org.apache.thrift.annotation.Nullable
								WalletFlowFuture _elem97;
								for (int _i98 = 0; _i98 < _list96.size; ++_i98) {
									_elem97 = new WalletFlowFuture();
									_elem97.read(iprot);
									struct.success.add(_elem97);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, cancelWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (WalletFlowFuture _iter99 : struct.success) {
							_iter99.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class cancelWalletFlowFuture_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public cancelWalletFlowFuture_resultTupleScheme getScheme() {
				return new cancelWalletFlowFuture_resultTupleScheme();
			}

		}

		private static class cancelWalletFlowFuture_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<cancelWalletFlowFuture_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, cancelWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (WalletFlowFuture _iter100 : struct.success) {
							_iter100.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, cancelWalletFlowFuture_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<WalletFlowFuture>(_list101.size);
						@org.apache.thrift.annotation.Nullable
						WalletFlowFuture _elem102;
						for (int _i103 = 0; _i103 < _list101.size; ++_i103) {
							_elem102 = new WalletFlowFuture();
							_elem102.read(iprot);
							struct.success.add(_elem102);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletExpireArray_args
			implements org.apache.thrift.TBase<getWalletExpireArray_args, getWalletExpireArray_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletExpireArray_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletExpireArray_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletExpireArray_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletExpireArray_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgWalletExpire form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ArgWalletExpire.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletExpireArray_args.class,
					metaDataMap);
		}

		public getWalletExpireArray_args() {
		}

		public getWalletExpireArray_args(ArgWalletExpire form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletExpireArray_args(getWalletExpireArray_args other) {
			if (other.isSetForm()) {
				this.form = new ArgWalletExpire(other.form);
			}
		}

		public getWalletExpireArray_args deepCopy() {
			return new getWalletExpireArray_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgWalletExpire getForm() {
			return this.form;
		}

		public getWalletExpireArray_args setForm(@org.apache.thrift.annotation.Nullable ArgWalletExpire form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgWalletExpire) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletExpireArray_args)
				return this.equals((getWalletExpireArray_args) that);
			return false;
		}

		public boolean equals(getWalletExpireArray_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletExpireArray_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletExpireArray_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (form != null) {
				form.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletExpireArray_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpireArray_argsStandardScheme getScheme() {
				return new getWalletExpireArray_argsStandardScheme();
			}

		}

		private static class getWalletExpireArray_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletExpireArray_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletExpireArray_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgWalletExpire();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletExpireArray_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletExpireArray_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpireArray_argsTupleScheme getScheme() {
				return new getWalletExpireArray_argsTupleScheme();
			}

		}

		private static class getWalletExpireArray_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletExpireArray_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletExpireArray_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletExpireArray_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgWalletExpire();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getWalletExpireArray_result
			implements org.apache.thrift.TBase<getWalletExpireArray_result, getWalletExpireArray_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getWalletExpireArray_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getWalletExpireArray_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getWalletExpireArray_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getWalletExpireArray_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<WalletExpire> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									WalletExpire.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWalletExpireArray_result.class,
					metaDataMap);
		}

		public getWalletExpireArray_result() {
		}

		public getWalletExpireArray_result(java.util.List<WalletExpire> success,
				com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getWalletExpireArray_result(getWalletExpireArray_result other) {
			if (other.isSetSuccess()) {
				java.util.List<WalletExpire> __this__success = new java.util.ArrayList<WalletExpire>(
						other.success.size());
				for (WalletExpire other_element : other.success) {
					__this__success.add(new WalletExpire(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getWalletExpireArray_result deepCopy() {
			return new getWalletExpireArray_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<WalletExpire> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(WalletExpire elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<WalletExpire>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<WalletExpire> getSuccess() {
			return this.success;
		}

		public getWalletExpireArray_result setSuccess(
				@org.apache.thrift.annotation.Nullable java.util.List<WalletExpire> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getWalletExpireArray_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<WalletExpire>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getWalletExpireArray_result)
				return this.equals((getWalletExpireArray_result) that);
			return false;
		}

		public boolean equals(getWalletExpireArray_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getWalletExpireArray_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getWalletExpireArray_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getWalletExpireArray_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpireArray_resultStandardScheme getScheme() {
				return new getWalletExpireArray_resultStandardScheme();
			}

		}

		private static class getWalletExpireArray_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getWalletExpireArray_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getWalletExpireArray_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<WalletExpire>(_list104.size);
								@org.apache.thrift.annotation.Nullable
								WalletExpire _elem105;
								for (int _i106 = 0; _i106 < _list104.size; ++_i106) {
									_elem105 = new WalletExpire();
									_elem105.read(iprot);
									struct.success.add(_elem105);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getWalletExpireArray_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (WalletExpire _iter107 : struct.success) {
							_iter107.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getWalletExpireArray_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getWalletExpireArray_resultTupleScheme getScheme() {
				return new getWalletExpireArray_resultTupleScheme();
			}

		}

		private static class getWalletExpireArray_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getWalletExpireArray_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getWalletExpireArray_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (WalletExpire _iter108 : struct.success) {
							_iter108.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getWalletExpireArray_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<WalletExpire>(_list109.size);
						@org.apache.thrift.annotation.Nullable
						WalletExpire _elem110;
						for (int _i111 = 0; _i111 < _list109.size; ++_i111) {
							_elem110 = new WalletExpire();
							_elem110.read(iprot);
							struct.success.add(_elem110);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

}
