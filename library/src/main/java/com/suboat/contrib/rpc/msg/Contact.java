/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.msg;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Contact implements org.apache.thrift.TBase<Contact, Contact._Fields>, java.io.Serializable, Cloneable,
		Comparable<Contact> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Contact");

	private static final org.apache.thrift.protocol.TField IS_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isGroup", org.apache.thrift.protocol.TType.BOOL, (short) 1);

	private static final org.apache.thrift.protocol.TField IS_ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isRoom", org.apache.thrift.protocol.TType.BOOL, (short) 2);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"contact", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField UNREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"unreadNum", org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField ALIAS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"aliasName", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"className", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ContactStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ContactTupleSchemeFactory();

	public boolean isGroup; // required

	public boolean isRoom; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String contact; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public int unreadNum; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String aliasName; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String className; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		IS_GROUP((short) 1, "isGroup"), IS_ROOM((short) 2, "isRoom"), UID((short) 3, "uid"), CONTACT((short) 4,
				"contact"), CREATE_TIME((short) 5, "createTime"), UPDATE_TIME((short) 6, "updateTime"), UNREAD_NUM(
						(short) 7, "unreadNum"), ALIAS_NAME((short) 8, "aliasName"), CLASS_NAME((short) 9, "className");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // IS_GROUP
				return IS_GROUP;
			case 2: // IS_ROOM
				return IS_ROOM;
			case 3: // UID
				return UID;
			case 4: // CONTACT
				return CONTACT;
			case 5: // CREATE_TIME
				return CREATE_TIME;
			case 6: // UPDATE_TIME
				return UPDATE_TIME;
			case 7: // UNREAD_NUM
				return UNREAD_NUM;
			case 8: // ALIAS_NAME
				return ALIAS_NAME;
			case 9: // CLASS_NAME
				return CLASS_NAME;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISGROUP_ISSET_ID = 0;

	private static final int __ISROOM_ISSET_ID = 1;

	private static final int __UNREADNUM_ISSET_ID = 2;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.IS_GROUP,
				new org.apache.thrift.meta_data.FieldMetaData("isGroup",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_ROOM,
				new org.apache.thrift.meta_data.FieldMetaData("isRoom", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CONTACT,
				new org.apache.thrift.meta_data.FieldMetaData("contact",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UNREAD_NUM,
				new org.apache.thrift.meta_data.FieldMetaData("unreadNum",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ALIAS_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("aliasName",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CLASS_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("className",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Contact.class, metaDataMap);
	}

	public Contact() {
	}

	public Contact(boolean isGroup, boolean isRoom, java.lang.String uid, java.lang.String contact,
			java.lang.String createTime, java.lang.String updateTime, int unreadNum, java.lang.String aliasName,
			java.lang.String className) {
		this();
		this.isGroup = isGroup;
		setIsGroupIsSet(true);
		this.isRoom = isRoom;
		setIsRoomIsSet(true);
		this.uid = uid;
		this.contact = contact;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.unreadNum = unreadNum;
		setUnreadNumIsSet(true);
		this.aliasName = aliasName;
		this.className = className;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Contact(Contact other) {
		__isset_bitfield = other.__isset_bitfield;
		this.isGroup = other.isGroup;
		this.isRoom = other.isRoom;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetContact()) {
			this.contact = other.contact;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.unreadNum = other.unreadNum;
		if (other.isSetAliasName()) {
			this.aliasName = other.aliasName;
		}
		if (other.isSetClassName()) {
			this.className = other.className;
		}
	}

	public Contact deepCopy() {
		return new Contact(this);
	}

	@Override
	public void clear() {
		setIsGroupIsSet(false);
		this.isGroup = false;
		setIsRoomIsSet(false);
		this.isRoom = false;
		this.uid = null;
		this.contact = null;
		this.createTime = null;
		this.updateTime = null;
		setUnreadNumIsSet(false);
		this.unreadNum = 0;
		this.aliasName = null;
		this.className = null;
	}

	public boolean isIsGroup() {
		return this.isGroup;
	}

	public Contact setIsGroup(boolean isGroup) {
		this.isGroup = isGroup;
		setIsGroupIsSet(true);
		return this;
	}

	public void unsetIsGroup() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISGROUP_ISSET_ID);
	}

	/**
	 * Returns true if field isGroup is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsGroup() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISGROUP_ISSET_ID);
	}

	public void setIsGroupIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISGROUP_ISSET_ID, value);
	}

	public boolean isIsRoom() {
		return this.isRoom;
	}

	public Contact setIsRoom(boolean isRoom) {
		this.isRoom = isRoom;
		setIsRoomIsSet(true);
		return this;
	}

	public void unsetIsRoom() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISROOM_ISSET_ID);
	}

	/**
	 * Returns true if field isRoom is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsRoom() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISROOM_ISSET_ID);
	}

	public void setIsRoomIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISROOM_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public Contact setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getContact() {
		return this.contact;
	}

	public Contact setContact(@org.apache.thrift.annotation.Nullable java.lang.String contact) {
		this.contact = contact;
		return this;
	}

	public void unsetContact() {
		this.contact = null;
	}

	/**
	 * Returns true if field contact is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetContact() {
		return this.contact != null;
	}

	public void setContactIsSet(boolean value) {
		if (!value) {
			this.contact = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Contact setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Contact setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public int getUnreadNum() {
		return this.unreadNum;
	}

	public Contact setUnreadNum(int unreadNum) {
		this.unreadNum = unreadNum;
		setUnreadNumIsSet(true);
		return this;
	}

	public void unsetUnreadNum() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNREADNUM_ISSET_ID);
	}

	/**
	 * Returns true if field unreadNum is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUnreadNum() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNREADNUM_ISSET_ID);
	}

	public void setUnreadNumIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNREADNUM_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAliasName() {
		return this.aliasName;
	}

	public Contact setAliasName(@org.apache.thrift.annotation.Nullable java.lang.String aliasName) {
		this.aliasName = aliasName;
		return this;
	}

	public void unsetAliasName() {
		this.aliasName = null;
	}

	/**
	 * Returns true if field aliasName is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAliasName() {
		return this.aliasName != null;
	}

	public void setAliasNameIsSet(boolean value) {
		if (!value) {
			this.aliasName = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getClassName() {
		return this.className;
	}

	public Contact setClassName(@org.apache.thrift.annotation.Nullable java.lang.String className) {
		this.className = className;
		return this;
	}

	public void unsetClassName() {
		this.className = null;
	}

	/**
	 * Returns true if field className is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetClassName() {
		return this.className != null;
	}

	public void setClassNameIsSet(boolean value) {
		if (!value) {
			this.className = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case IS_GROUP:
			if (value == null) {
				unsetIsGroup();
			}
			else {
				setIsGroup((java.lang.Boolean) value);
			}
			break;

		case IS_ROOM:
			if (value == null) {
				unsetIsRoom();
			}
			else {
				setIsRoom((java.lang.Boolean) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case CONTACT:
			if (value == null) {
				unsetContact();
			}
			else {
				setContact((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case UNREAD_NUM:
			if (value == null) {
				unsetUnreadNum();
			}
			else {
				setUnreadNum((java.lang.Integer) value);
			}
			break;

		case ALIAS_NAME:
			if (value == null) {
				unsetAliasName();
			}
			else {
				setAliasName((java.lang.String) value);
			}
			break;

		case CLASS_NAME:
			if (value == null) {
				unsetClassName();
			}
			else {
				setClassName((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case IS_GROUP:
			return isIsGroup();

		case IS_ROOM:
			return isIsRoom();

		case UID:
			return getUid();

		case CONTACT:
			return getContact();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case UNREAD_NUM:
			return getUnreadNum();

		case ALIAS_NAME:
			return getAliasName();

		case CLASS_NAME:
			return getClassName();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case IS_GROUP:
			return isSetIsGroup();
		case IS_ROOM:
			return isSetIsRoom();
		case UID:
			return isSetUid();
		case CONTACT:
			return isSetContact();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case UNREAD_NUM:
			return isSetUnreadNum();
		case ALIAS_NAME:
			return isSetAliasName();
		case CLASS_NAME:
			return isSetClassName();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Contact)
			return this.equals((Contact) that);
		return false;
	}

	public boolean equals(Contact that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_isGroup = true;
		boolean that_present_isGroup = true;
		if (this_present_isGroup || that_present_isGroup) {
			if (!(this_present_isGroup && that_present_isGroup))
				return false;
			if (this.isGroup != that.isGroup)
				return false;
		}

		boolean this_present_isRoom = true;
		boolean that_present_isRoom = true;
		if (this_present_isRoom || that_present_isRoom) {
			if (!(this_present_isRoom && that_present_isRoom))
				return false;
			if (this.isRoom != that.isRoom)
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_contact = true && this.isSetContact();
		boolean that_present_contact = true && that.isSetContact();
		if (this_present_contact || that_present_contact) {
			if (!(this_present_contact && that_present_contact))
				return false;
			if (!this.contact.equals(that.contact))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_unreadNum = true;
		boolean that_present_unreadNum = true;
		if (this_present_unreadNum || that_present_unreadNum) {
			if (!(this_present_unreadNum && that_present_unreadNum))
				return false;
			if (this.unreadNum != that.unreadNum)
				return false;
		}

		boolean this_present_aliasName = true && this.isSetAliasName();
		boolean that_present_aliasName = true && that.isSetAliasName();
		if (this_present_aliasName || that_present_aliasName) {
			if (!(this_present_aliasName && that_present_aliasName))
				return false;
			if (!this.aliasName.equals(that.aliasName))
				return false;
		}

		boolean this_present_className = true && this.isSetClassName();
		boolean that_present_className = true && that.isSetClassName();
		if (this_present_className || that_present_className) {
			if (!(this_present_className && that_present_className))
				return false;
			if (!this.className.equals(that.className))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isGroup) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isRoom) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetContact()) ? 131071 : 524287);
		if (isSetContact())
			hashCode = hashCode * 8191 + contact.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + unreadNum;

		hashCode = hashCode * 8191 + ((isSetAliasName()) ? 131071 : 524287);
		if (isSetAliasName())
			hashCode = hashCode * 8191 + aliasName.hashCode();

		hashCode = hashCode * 8191 + ((isSetClassName()) ? 131071 : 524287);
		if (isSetClassName())
			hashCode = hashCode * 8191 + className.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(Contact other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetIsGroup()).compareTo(other.isSetIsGroup());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsGroup()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGroup, other.isGroup);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsRoom()).compareTo(other.isSetIsRoom());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsRoom()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRoom, other.isRoom);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetContact()).compareTo(other.isSetContact());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetContact()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contact, other.contact);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUnreadNum()).compareTo(other.isSetUnreadNum());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUnreadNum()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unreadNum, other.unreadNum);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAliasName()).compareTo(other.isSetAliasName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAliasName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliasName, other.aliasName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetClassName()).compareTo(other.isSetClassName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetClassName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.className, other.className);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Contact(");
		boolean first = true;

		sb.append("isGroup:");
		sb.append(this.isGroup);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isRoom:");
		sb.append(this.isRoom);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("contact:");
		if (this.contact == null) {
			sb.append("null");
		}
		else {
			sb.append(this.contact);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("unreadNum:");
		sb.append(this.unreadNum);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("aliasName:");
		if (this.aliasName == null) {
			sb.append("null");
		}
		else {
			sb.append(this.aliasName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("className:");
		if (this.className == null) {
			sb.append("null");
		}
		else {
			sb.append(this.className);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ContactStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ContactStandardScheme getScheme() {
			return new ContactStandardScheme();
		}

	}

	private static class ContactStandardScheme extends org.apache.thrift.scheme.StandardScheme<Contact> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Contact struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // IS_GROUP
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isGroup = iprot.readBool();
						struct.setIsGroupIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // IS_ROOM
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isRoom = iprot.readBool();
						struct.setIsRoomIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // CONTACT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.contact = iprot.readString();
						struct.setContactIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // UNREAD_NUM
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.unreadNum = iprot.readI32();
						struct.setUnreadNumIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // ALIAS_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.aliasName = iprot.readString();
						struct.setAliasNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // CLASS_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.className = iprot.readString();
						struct.setClassNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Contact struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(IS_GROUP_FIELD_DESC);
			oprot.writeBool(struct.isGroup);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_ROOM_FIELD_DESC);
			oprot.writeBool(struct.isRoom);
			oprot.writeFieldEnd();
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.contact != null) {
				oprot.writeFieldBegin(CONTACT_FIELD_DESC);
				oprot.writeString(struct.contact);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(UNREAD_NUM_FIELD_DESC);
			oprot.writeI32(struct.unreadNum);
			oprot.writeFieldEnd();
			if (struct.aliasName != null) {
				oprot.writeFieldBegin(ALIAS_NAME_FIELD_DESC);
				oprot.writeString(struct.aliasName);
				oprot.writeFieldEnd();
			}
			if (struct.className != null) {
				oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
				oprot.writeString(struct.className);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ContactTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ContactTupleScheme getScheme() {
			return new ContactTupleScheme();
		}

	}

	private static class ContactTupleScheme extends org.apache.thrift.scheme.TupleScheme<Contact> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Contact struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetIsGroup()) {
				optionals.set(0);
			}
			if (struct.isSetIsRoom()) {
				optionals.set(1);
			}
			if (struct.isSetUid()) {
				optionals.set(2);
			}
			if (struct.isSetContact()) {
				optionals.set(3);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(4);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(5);
			}
			if (struct.isSetUnreadNum()) {
				optionals.set(6);
			}
			if (struct.isSetAliasName()) {
				optionals.set(7);
			}
			if (struct.isSetClassName()) {
				optionals.set(8);
			}
			oprot.writeBitSet(optionals, 9);
			if (struct.isSetIsGroup()) {
				oprot.writeBool(struct.isGroup);
			}
			if (struct.isSetIsRoom()) {
				oprot.writeBool(struct.isRoom);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetContact()) {
				oprot.writeString(struct.contact);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetUnreadNum()) {
				oprot.writeI32(struct.unreadNum);
			}
			if (struct.isSetAliasName()) {
				oprot.writeString(struct.aliasName);
			}
			if (struct.isSetClassName()) {
				oprot.writeString(struct.className);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Contact struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(9);
			if (incoming.get(0)) {
				struct.isGroup = iprot.readBool();
				struct.setIsGroupIsSet(true);
			}
			if (incoming.get(1)) {
				struct.isRoom = iprot.readBool();
				struct.setIsRoomIsSet(true);
			}
			if (incoming.get(2)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.contact = iprot.readString();
				struct.setContactIsSet(true);
			}
			if (incoming.get(4)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(6)) {
				struct.unreadNum = iprot.readI32();
				struct.setUnreadNumIsSet(true);
			}
			if (incoming.get(7)) {
				struct.aliasName = iprot.readString();
				struct.setAliasNameIsSet(true);
			}
			if (incoming.get(8)) {
				struct.className = iprot.readString();
				struct.setClassNameIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
