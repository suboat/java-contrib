/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class CouponStore implements org.apache.thrift.TBase<CouponStore, CouponStore._Fields>, java.io.Serializable,
		Cloneable, Comparable<CouponStore> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"CouponStore");

	private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"name", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField CATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"cate", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField SCENE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"scene", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"property", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 8);

	private static final org.apache.thrift.protocol.TField MIN_COST_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"minCost", org.apache.thrift.protocol.TType.DOUBLE, (short) 9);

	private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amount", org.apache.thrift.protocol.TType.DOUBLE, (short) 10);

	private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"rate", org.apache.thrift.protocol.TType.DOUBLE, (short) 11);

	private static final org.apache.thrift.protocol.TField NUM_RELEASE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numRelease", org.apache.thrift.protocol.TType.I32, (short) 12);

	private static final org.apache.thrift.protocol.TField VALID_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"validDay", org.apache.thrift.protocol.TType.I32, (short) 13);

	private static final org.apache.thrift.protocol.TField IS_REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isRefund", org.apache.thrift.protocol.TType.BOOL, (short) 14);

	private static final org.apache.thrift.protocol.TField NUM_CAN_USE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numCanUse", org.apache.thrift.protocol.TType.I32, (short) 15);

	private static final org.apache.thrift.protocol.TField NUM_RECEIVED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numReceived", org.apache.thrift.protocol.TType.I32, (short) 16);

	private static final org.apache.thrift.protocol.TField NUM_USED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numUsed", org.apache.thrift.protocol.TType.I32, (short) 17);

	private static final org.apache.thrift.protocol.TField NUM_USED_UP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numUsedUp", org.apache.thrift.protocol.TType.I32, (short) 18);

	private static final org.apache.thrift.protocol.TField NUM_USED_ON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numUsedOn", org.apache.thrift.protocol.TType.I32, (short) 19);

	private static final org.apache.thrift.protocol.TField AMOUNT_USED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amountUsed", org.apache.thrift.protocol.TType.DOUBLE, (short) 20);

	private static final org.apache.thrift.protocol.TField APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"applyTime", org.apache.thrift.protocol.TType.STRING, (short) 21);

	private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTime", org.apache.thrift.protocol.TType.STRING, (short) 22);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 23);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 24);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CouponStoreStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CouponStoreTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String cid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String name; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String cate; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String scene; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String property; // required

	public int status; // required

	public double minCost; // required

	public double amount; // required

	public double rate; // required

	public int numRelease; // required

	public int validDay; // required

	public boolean isRefund; // required

	public int numCanUse; // required

	public int numReceived; // required

	public int numUsed; // required

	public int numUsedUp; // required

	public int numUsedOn; // required

	public double amountUsed; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String applyTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		CID((short) 1, "cid"), SID((short) 2, "sid"), UID((short) 3, "uid"), NAME((short) 4, "name"), CATE((short) 5,
				"cate"), SCENE((short) 6, "scene"), PROPERTY((short) 7, "property"), STATUS((short) 8,
						"status"), MIN_COST((short) 9, "minCost"), AMOUNT((short) 10, "amount"), RATE((short) 11,
								"rate"), NUM_RELEASE((short) 12, "numRelease"), VALID_DAY((short) 13,
										"validDay"), IS_REFUND((short) 14, "isRefund"), NUM_CAN_USE((short) 15,
												"numCanUse"), NUM_RECEIVED((short) 16, "numReceived"), NUM_USED(
														(short) 17,
														"numUsed"), NUM_USED_UP((short) 18, "numUsedUp"), NUM_USED_ON(
																(short) 19, "numUsedOn"), AMOUNT_USED((short) 20,
																		"amountUsed"), APPLY_TIME((short) 21,
																				"applyTime"), EXPIRE_TIME((short) 22,
																						"expireTime"), CREATE_TIME(
																								(short) 23,
																								"createTime"), UPDATE_TIME(
																										(short) 24,
																										"updateTime");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // CID
				return CID;
			case 2: // SID
				return SID;
			case 3: // UID
				return UID;
			case 4: // NAME
				return NAME;
			case 5: // CATE
				return CATE;
			case 6: // SCENE
				return SCENE;
			case 7: // PROPERTY
				return PROPERTY;
			case 8: // STATUS
				return STATUS;
			case 9: // MIN_COST
				return MIN_COST;
			case 10: // AMOUNT
				return AMOUNT;
			case 11: // RATE
				return RATE;
			case 12: // NUM_RELEASE
				return NUM_RELEASE;
			case 13: // VALID_DAY
				return VALID_DAY;
			case 14: // IS_REFUND
				return IS_REFUND;
			case 15: // NUM_CAN_USE
				return NUM_CAN_USE;
			case 16: // NUM_RECEIVED
				return NUM_RECEIVED;
			case 17: // NUM_USED
				return NUM_USED;
			case 18: // NUM_USED_UP
				return NUM_USED_UP;
			case 19: // NUM_USED_ON
				return NUM_USED_ON;
			case 20: // AMOUNT_USED
				return AMOUNT_USED;
			case 21: // APPLY_TIME
				return APPLY_TIME;
			case 22: // EXPIRE_TIME
				return EXPIRE_TIME;
			case 23: // CREATE_TIME
				return CREATE_TIME;
			case 24: // UPDATE_TIME
				return UPDATE_TIME;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;

	private static final int __MINCOST_ISSET_ID = 1;

	private static final int __AMOUNT_ISSET_ID = 2;

	private static final int __RATE_ISSET_ID = 3;

	private static final int __NUMRELEASE_ISSET_ID = 4;

	private static final int __VALIDDAY_ISSET_ID = 5;

	private static final int __ISREFUND_ISSET_ID = 6;

	private static final int __NUMCANUSE_ISSET_ID = 7;

	private static final int __NUMRECEIVED_ISSET_ID = 8;

	private static final int __NUMUSED_ISSET_ID = 9;

	private static final int __NUMUSEDUP_ISSET_ID = 10;

	private static final int __NUMUSEDON_ISSET_ID = 11;

	private static final int __AMOUNTUSED_ISSET_ID = 12;

	private short __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.CID,
				new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NAME,
				new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CATE,
				new org.apache.thrift.meta_data.FieldMetaData("cate", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SCENE,
				new org.apache.thrift.meta_data.FieldMetaData("scene", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PROPERTY,
				new org.apache.thrift.meta_data.FieldMetaData("property",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.MIN_COST,
				new org.apache.thrift.meta_data.FieldMetaData("minCost",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.AMOUNT,
				new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.RATE,
				new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.NUM_RELEASE,
				new org.apache.thrift.meta_data.FieldMetaData("numRelease",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.VALID_DAY,
				new org.apache.thrift.meta_data.FieldMetaData("validDay",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_REFUND,
				new org.apache.thrift.meta_data.FieldMetaData("isRefund",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.NUM_CAN_USE,
				new org.apache.thrift.meta_data.FieldMetaData("numCanUse",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NUM_RECEIVED,
				new org.apache.thrift.meta_data.FieldMetaData("numReceived",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NUM_USED,
				new org.apache.thrift.meta_data.FieldMetaData("numUsed",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NUM_USED_UP,
				new org.apache.thrift.meta_data.FieldMetaData("numUsedUp",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NUM_USED_ON,
				new org.apache.thrift.meta_data.FieldMetaData("numUsedOn",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.AMOUNT_USED,
				new org.apache.thrift.meta_data.FieldMetaData("amountUsed",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("applyTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CouponStore.class, metaDataMap);
	}

	public CouponStore() {
	}

	public CouponStore(java.lang.String cid, java.lang.String sid, java.lang.String uid, java.lang.String name,
			java.lang.String cate, java.lang.String scene, java.lang.String property, int status, double minCost,
			double amount, double rate, int numRelease, int validDay, boolean isRefund, int numCanUse, int numReceived,
			int numUsed, int numUsedUp, int numUsedOn, double amountUsed, java.lang.String applyTime,
			java.lang.String expireTime, java.lang.String createTime, java.lang.String updateTime) {
		this();
		this.cid = cid;
		this.sid = sid;
		this.uid = uid;
		this.name = name;
		this.cate = cate;
		this.scene = scene;
		this.property = property;
		this.status = status;
		setStatusIsSet(true);
		this.minCost = minCost;
		setMinCostIsSet(true);
		this.amount = amount;
		setAmountIsSet(true);
		this.rate = rate;
		setRateIsSet(true);
		this.numRelease = numRelease;
		setNumReleaseIsSet(true);
		this.validDay = validDay;
		setValidDayIsSet(true);
		this.isRefund = isRefund;
		setIsRefundIsSet(true);
		this.numCanUse = numCanUse;
		setNumCanUseIsSet(true);
		this.numReceived = numReceived;
		setNumReceivedIsSet(true);
		this.numUsed = numUsed;
		setNumUsedIsSet(true);
		this.numUsedUp = numUsedUp;
		setNumUsedUpIsSet(true);
		this.numUsedOn = numUsedOn;
		setNumUsedOnIsSet(true);
		this.amountUsed = amountUsed;
		setAmountUsedIsSet(true);
		this.applyTime = applyTime;
		this.expireTime = expireTime;
		this.createTime = createTime;
		this.updateTime = updateTime;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public CouponStore(CouponStore other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetCid()) {
			this.cid = other.cid;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetName()) {
			this.name = other.name;
		}
		if (other.isSetCate()) {
			this.cate = other.cate;
		}
		if (other.isSetScene()) {
			this.scene = other.scene;
		}
		if (other.isSetProperty()) {
			this.property = other.property;
		}
		this.status = other.status;
		this.minCost = other.minCost;
		this.amount = other.amount;
		this.rate = other.rate;
		this.numRelease = other.numRelease;
		this.validDay = other.validDay;
		this.isRefund = other.isRefund;
		this.numCanUse = other.numCanUse;
		this.numReceived = other.numReceived;
		this.numUsed = other.numUsed;
		this.numUsedUp = other.numUsedUp;
		this.numUsedOn = other.numUsedOn;
		this.amountUsed = other.amountUsed;
		if (other.isSetApplyTime()) {
			this.applyTime = other.applyTime;
		}
		if (other.isSetExpireTime()) {
			this.expireTime = other.expireTime;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
	}

	public CouponStore deepCopy() {
		return new CouponStore(this);
	}

	@Override
	public void clear() {
		this.cid = null;
		this.sid = null;
		this.uid = null;
		this.name = null;
		this.cate = null;
		this.scene = null;
		this.property = null;
		setStatusIsSet(false);
		this.status = 0;
		setMinCostIsSet(false);
		this.minCost = 0.0;
		setAmountIsSet(false);
		this.amount = 0.0;
		setRateIsSet(false);
		this.rate = 0.0;
		setNumReleaseIsSet(false);
		this.numRelease = 0;
		setValidDayIsSet(false);
		this.validDay = 0;
		setIsRefundIsSet(false);
		this.isRefund = false;
		setNumCanUseIsSet(false);
		this.numCanUse = 0;
		setNumReceivedIsSet(false);
		this.numReceived = 0;
		setNumUsedIsSet(false);
		this.numUsed = 0;
		setNumUsedUpIsSet(false);
		this.numUsedUp = 0;
		setNumUsedOnIsSet(false);
		this.numUsedOn = 0;
		setAmountUsedIsSet(false);
		this.amountUsed = 0.0;
		this.applyTime = null;
		this.expireTime = null;
		this.createTime = null;
		this.updateTime = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCid() {
		return this.cid;
	}

	public CouponStore setCid(@org.apache.thrift.annotation.Nullable java.lang.String cid) {
		this.cid = cid;
		return this;
	}

	public void unsetCid() {
		this.cid = null;
	}

	/**
	 * Returns true if field cid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCid() {
		return this.cid != null;
	}

	public void setCidIsSet(boolean value) {
		if (!value) {
			this.cid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public CouponStore setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public CouponStore setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getName() {
		return this.name;
	}

	public CouponStore setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	/**
	 * Returns true if field name is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCate() {
		return this.cate;
	}

	public CouponStore setCate(@org.apache.thrift.annotation.Nullable java.lang.String cate) {
		this.cate = cate;
		return this;
	}

	public void unsetCate() {
		this.cate = null;
	}

	/**
	 * Returns true if field cate is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCate() {
		return this.cate != null;
	}

	public void setCateIsSet(boolean value) {
		if (!value) {
			this.cate = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getScene() {
		return this.scene;
	}

	public CouponStore setScene(@org.apache.thrift.annotation.Nullable java.lang.String scene) {
		this.scene = scene;
		return this;
	}

	public void unsetScene() {
		this.scene = null;
	}

	/**
	 * Returns true if field scene is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetScene() {
		return this.scene != null;
	}

	public void setSceneIsSet(boolean value) {
		if (!value) {
			this.scene = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProperty() {
		return this.property;
	}

	public CouponStore setProperty(@org.apache.thrift.annotation.Nullable java.lang.String property) {
		this.property = property;
		return this;
	}

	public void unsetProperty() {
		this.property = null;
	}

	/**
	 * Returns true if field property is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProperty() {
		return this.property != null;
	}

	public void setPropertyIsSet(boolean value) {
		if (!value) {
			this.property = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public CouponStore setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public double getMinCost() {
		return this.minCost;
	}

	public CouponStore setMinCost(double minCost) {
		this.minCost = minCost;
		setMinCostIsSet(true);
		return this;
	}

	public void unsetMinCost() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINCOST_ISSET_ID);
	}

	/**
	 * Returns true if field minCost is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMinCost() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINCOST_ISSET_ID);
	}

	public void setMinCostIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINCOST_ISSET_ID, value);
	}

	public double getAmount() {
		return this.amount;
	}

	public CouponStore setAmount(double amount) {
		this.amount = amount;
		setAmountIsSet(true);
		return this;
	}

	public void unsetAmount() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field amount is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAmount() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	public void setAmountIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
	}

	public double getRate() {
		return this.rate;
	}

	public CouponStore setRate(double rate) {
		this.rate = rate;
		setRateIsSet(true);
		return this;
	}

	public void unsetRate() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
	}

	/**
	 * Returns true if field rate is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRate() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
	}

	public void setRateIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
	}

	public int getNumRelease() {
		return this.numRelease;
	}

	public CouponStore setNumRelease(int numRelease) {
		this.numRelease = numRelease;
		setNumReleaseIsSet(true);
		return this;
	}

	public void unsetNumRelease() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMRELEASE_ISSET_ID);
	}

	/**
	 * Returns true if field numRelease is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumRelease() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMRELEASE_ISSET_ID);
	}

	public void setNumReleaseIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMRELEASE_ISSET_ID, value);
	}

	public int getValidDay() {
		return this.validDay;
	}

	public CouponStore setValidDay(int validDay) {
		this.validDay = validDay;
		setValidDayIsSet(true);
		return this;
	}

	public void unsetValidDay() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALIDDAY_ISSET_ID);
	}

	/**
	 * Returns true if field validDay is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetValidDay() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALIDDAY_ISSET_ID);
	}

	public void setValidDayIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALIDDAY_ISSET_ID, value);
	}

	public boolean isIsRefund() {
		return this.isRefund;
	}

	public CouponStore setIsRefund(boolean isRefund) {
		this.isRefund = isRefund;
		setIsRefundIsSet(true);
		return this;
	}

	public void unsetIsRefund() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREFUND_ISSET_ID);
	}

	/**
	 * Returns true if field isRefund is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsRefund() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREFUND_ISSET_ID);
	}

	public void setIsRefundIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREFUND_ISSET_ID, value);
	}

	public int getNumCanUse() {
		return this.numCanUse;
	}

	public CouponStore setNumCanUse(int numCanUse) {
		this.numCanUse = numCanUse;
		setNumCanUseIsSet(true);
		return this;
	}

	public void unsetNumCanUse() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMCANUSE_ISSET_ID);
	}

	/**
	 * Returns true if field numCanUse is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumCanUse() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMCANUSE_ISSET_ID);
	}

	public void setNumCanUseIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMCANUSE_ISSET_ID, value);
	}

	public int getNumReceived() {
		return this.numReceived;
	}

	public CouponStore setNumReceived(int numReceived) {
		this.numReceived = numReceived;
		setNumReceivedIsSet(true);
		return this;
	}

	public void unsetNumReceived() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMRECEIVED_ISSET_ID);
	}

	/**
	 * Returns true if field numReceived is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumReceived() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMRECEIVED_ISSET_ID);
	}

	public void setNumReceivedIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMRECEIVED_ISSET_ID, value);
	}

	public int getNumUsed() {
		return this.numUsed;
	}

	public CouponStore setNumUsed(int numUsed) {
		this.numUsed = numUsed;
		setNumUsedIsSet(true);
		return this;
	}

	public void unsetNumUsed() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMUSED_ISSET_ID);
	}

	/**
	 * Returns true if field numUsed is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumUsed() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMUSED_ISSET_ID);
	}

	public void setNumUsedIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMUSED_ISSET_ID, value);
	}

	public int getNumUsedUp() {
		return this.numUsedUp;
	}

	public CouponStore setNumUsedUp(int numUsedUp) {
		this.numUsedUp = numUsedUp;
		setNumUsedUpIsSet(true);
		return this;
	}

	public void unsetNumUsedUp() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMUSEDUP_ISSET_ID);
	}

	/**
	 * Returns true if field numUsedUp is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumUsedUp() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMUSEDUP_ISSET_ID);
	}

	public void setNumUsedUpIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMUSEDUP_ISSET_ID, value);
	}

	public int getNumUsedOn() {
		return this.numUsedOn;
	}

	public CouponStore setNumUsedOn(int numUsedOn) {
		this.numUsedOn = numUsedOn;
		setNumUsedOnIsSet(true);
		return this;
	}

	public void unsetNumUsedOn() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMUSEDON_ISSET_ID);
	}

	/**
	 * Returns true if field numUsedOn is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumUsedOn() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMUSEDON_ISSET_ID);
	}

	public void setNumUsedOnIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMUSEDON_ISSET_ID, value);
	}

	public double getAmountUsed() {
		return this.amountUsed;
	}

	public CouponStore setAmountUsed(double amountUsed) {
		this.amountUsed = amountUsed;
		setAmountUsedIsSet(true);
		return this;
	}

	public void unsetAmountUsed() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNTUSED_ISSET_ID);
	}

	/**
	 * Returns true if field amountUsed is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAmountUsed() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNTUSED_ISSET_ID);
	}

	public void setAmountUsedIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNTUSED_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getApplyTime() {
		return this.applyTime;
	}

	public CouponStore setApplyTime(@org.apache.thrift.annotation.Nullable java.lang.String applyTime) {
		this.applyTime = applyTime;
		return this;
	}

	public void unsetApplyTime() {
		this.applyTime = null;
	}

	/**
	 * Returns true if field applyTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetApplyTime() {
		return this.applyTime != null;
	}

	public void setApplyTimeIsSet(boolean value) {
		if (!value) {
			this.applyTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTime() {
		return this.expireTime;
	}

	public CouponStore setExpireTime(@org.apache.thrift.annotation.Nullable java.lang.String expireTime) {
		this.expireTime = expireTime;
		return this;
	}

	public void unsetExpireTime() {
		this.expireTime = null;
	}

	/**
	 * Returns true if field expireTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTime() {
		return this.expireTime != null;
	}

	public void setExpireTimeIsSet(boolean value) {
		if (!value) {
			this.expireTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public CouponStore setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public CouponStore setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case CID:
			if (value == null) {
				unsetCid();
			}
			else {
				setCid((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case NAME:
			if (value == null) {
				unsetName();
			}
			else {
				setName((java.lang.String) value);
			}
			break;

		case CATE:
			if (value == null) {
				unsetCate();
			}
			else {
				setCate((java.lang.String) value);
			}
			break;

		case SCENE:
			if (value == null) {
				unsetScene();
			}
			else {
				setScene((java.lang.String) value);
			}
			break;

		case PROPERTY:
			if (value == null) {
				unsetProperty();
			}
			else {
				setProperty((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case MIN_COST:
			if (value == null) {
				unsetMinCost();
			}
			else {
				setMinCost((java.lang.Double) value);
			}
			break;

		case AMOUNT:
			if (value == null) {
				unsetAmount();
			}
			else {
				setAmount((java.lang.Double) value);
			}
			break;

		case RATE:
			if (value == null) {
				unsetRate();
			}
			else {
				setRate((java.lang.Double) value);
			}
			break;

		case NUM_RELEASE:
			if (value == null) {
				unsetNumRelease();
			}
			else {
				setNumRelease((java.lang.Integer) value);
			}
			break;

		case VALID_DAY:
			if (value == null) {
				unsetValidDay();
			}
			else {
				setValidDay((java.lang.Integer) value);
			}
			break;

		case IS_REFUND:
			if (value == null) {
				unsetIsRefund();
			}
			else {
				setIsRefund((java.lang.Boolean) value);
			}
			break;

		case NUM_CAN_USE:
			if (value == null) {
				unsetNumCanUse();
			}
			else {
				setNumCanUse((java.lang.Integer) value);
			}
			break;

		case NUM_RECEIVED:
			if (value == null) {
				unsetNumReceived();
			}
			else {
				setNumReceived((java.lang.Integer) value);
			}
			break;

		case NUM_USED:
			if (value == null) {
				unsetNumUsed();
			}
			else {
				setNumUsed((java.lang.Integer) value);
			}
			break;

		case NUM_USED_UP:
			if (value == null) {
				unsetNumUsedUp();
			}
			else {
				setNumUsedUp((java.lang.Integer) value);
			}
			break;

		case NUM_USED_ON:
			if (value == null) {
				unsetNumUsedOn();
			}
			else {
				setNumUsedOn((java.lang.Integer) value);
			}
			break;

		case AMOUNT_USED:
			if (value == null) {
				unsetAmountUsed();
			}
			else {
				setAmountUsed((java.lang.Double) value);
			}
			break;

		case APPLY_TIME:
			if (value == null) {
				unsetApplyTime();
			}
			else {
				setApplyTime((java.lang.String) value);
			}
			break;

		case EXPIRE_TIME:
			if (value == null) {
				unsetExpireTime();
			}
			else {
				setExpireTime((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case CID:
			return getCid();

		case SID:
			return getSid();

		case UID:
			return getUid();

		case NAME:
			return getName();

		case CATE:
			return getCate();

		case SCENE:
			return getScene();

		case PROPERTY:
			return getProperty();

		case STATUS:
			return getStatus();

		case MIN_COST:
			return getMinCost();

		case AMOUNT:
			return getAmount();

		case RATE:
			return getRate();

		case NUM_RELEASE:
			return getNumRelease();

		case VALID_DAY:
			return getValidDay();

		case IS_REFUND:
			return isIsRefund();

		case NUM_CAN_USE:
			return getNumCanUse();

		case NUM_RECEIVED:
			return getNumReceived();

		case NUM_USED:
			return getNumUsed();

		case NUM_USED_UP:
			return getNumUsedUp();

		case NUM_USED_ON:
			return getNumUsedOn();

		case AMOUNT_USED:
			return getAmountUsed();

		case APPLY_TIME:
			return getApplyTime();

		case EXPIRE_TIME:
			return getExpireTime();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case CID:
			return isSetCid();
		case SID:
			return isSetSid();
		case UID:
			return isSetUid();
		case NAME:
			return isSetName();
		case CATE:
			return isSetCate();
		case SCENE:
			return isSetScene();
		case PROPERTY:
			return isSetProperty();
		case STATUS:
			return isSetStatus();
		case MIN_COST:
			return isSetMinCost();
		case AMOUNT:
			return isSetAmount();
		case RATE:
			return isSetRate();
		case NUM_RELEASE:
			return isSetNumRelease();
		case VALID_DAY:
			return isSetValidDay();
		case IS_REFUND:
			return isSetIsRefund();
		case NUM_CAN_USE:
			return isSetNumCanUse();
		case NUM_RECEIVED:
			return isSetNumReceived();
		case NUM_USED:
			return isSetNumUsed();
		case NUM_USED_UP:
			return isSetNumUsedUp();
		case NUM_USED_ON:
			return isSetNumUsedOn();
		case AMOUNT_USED:
			return isSetAmountUsed();
		case APPLY_TIME:
			return isSetApplyTime();
		case EXPIRE_TIME:
			return isSetExpireTime();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof CouponStore)
			return this.equals((CouponStore) that);
		return false;
	}

	public boolean equals(CouponStore that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_cid = true && this.isSetCid();
		boolean that_present_cid = true && that.isSetCid();
		if (this_present_cid || that_present_cid) {
			if (!(this_present_cid && that_present_cid))
				return false;
			if (!this.cid.equals(that.cid))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!this.name.equals(that.name))
				return false;
		}

		boolean this_present_cate = true && this.isSetCate();
		boolean that_present_cate = true && that.isSetCate();
		if (this_present_cate || that_present_cate) {
			if (!(this_present_cate && that_present_cate))
				return false;
			if (!this.cate.equals(that.cate))
				return false;
		}

		boolean this_present_scene = true && this.isSetScene();
		boolean that_present_scene = true && that.isSetScene();
		if (this_present_scene || that_present_scene) {
			if (!(this_present_scene && that_present_scene))
				return false;
			if (!this.scene.equals(that.scene))
				return false;
		}

		boolean this_present_property = true && this.isSetProperty();
		boolean that_present_property = true && that.isSetProperty();
		if (this_present_property || that_present_property) {
			if (!(this_present_property && that_present_property))
				return false;
			if (!this.property.equals(that.property))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_minCost = true;
		boolean that_present_minCost = true;
		if (this_present_minCost || that_present_minCost) {
			if (!(this_present_minCost && that_present_minCost))
				return false;
			if (this.minCost != that.minCost)
				return false;
		}

		boolean this_present_amount = true;
		boolean that_present_amount = true;
		if (this_present_amount || that_present_amount) {
			if (!(this_present_amount && that_present_amount))
				return false;
			if (this.amount != that.amount)
				return false;
		}

		boolean this_present_rate = true;
		boolean that_present_rate = true;
		if (this_present_rate || that_present_rate) {
			if (!(this_present_rate && that_present_rate))
				return false;
			if (this.rate != that.rate)
				return false;
		}

		boolean this_present_numRelease = true;
		boolean that_present_numRelease = true;
		if (this_present_numRelease || that_present_numRelease) {
			if (!(this_present_numRelease && that_present_numRelease))
				return false;
			if (this.numRelease != that.numRelease)
				return false;
		}

		boolean this_present_validDay = true;
		boolean that_present_validDay = true;
		if (this_present_validDay || that_present_validDay) {
			if (!(this_present_validDay && that_present_validDay))
				return false;
			if (this.validDay != that.validDay)
				return false;
		}

		boolean this_present_isRefund = true;
		boolean that_present_isRefund = true;
		if (this_present_isRefund || that_present_isRefund) {
			if (!(this_present_isRefund && that_present_isRefund))
				return false;
			if (this.isRefund != that.isRefund)
				return false;
		}

		boolean this_present_numCanUse = true;
		boolean that_present_numCanUse = true;
		if (this_present_numCanUse || that_present_numCanUse) {
			if (!(this_present_numCanUse && that_present_numCanUse))
				return false;
			if (this.numCanUse != that.numCanUse)
				return false;
		}

		boolean this_present_numReceived = true;
		boolean that_present_numReceived = true;
		if (this_present_numReceived || that_present_numReceived) {
			if (!(this_present_numReceived && that_present_numReceived))
				return false;
			if (this.numReceived != that.numReceived)
				return false;
		}

		boolean this_present_numUsed = true;
		boolean that_present_numUsed = true;
		if (this_present_numUsed || that_present_numUsed) {
			if (!(this_present_numUsed && that_present_numUsed))
				return false;
			if (this.numUsed != that.numUsed)
				return false;
		}

		boolean this_present_numUsedUp = true;
		boolean that_present_numUsedUp = true;
		if (this_present_numUsedUp || that_present_numUsedUp) {
			if (!(this_present_numUsedUp && that_present_numUsedUp))
				return false;
			if (this.numUsedUp != that.numUsedUp)
				return false;
		}

		boolean this_present_numUsedOn = true;
		boolean that_present_numUsedOn = true;
		if (this_present_numUsedOn || that_present_numUsedOn) {
			if (!(this_present_numUsedOn && that_present_numUsedOn))
				return false;
			if (this.numUsedOn != that.numUsedOn)
				return false;
		}

		boolean this_present_amountUsed = true;
		boolean that_present_amountUsed = true;
		if (this_present_amountUsed || that_present_amountUsed) {
			if (!(this_present_amountUsed && that_present_amountUsed))
				return false;
			if (this.amountUsed != that.amountUsed)
				return false;
		}

		boolean this_present_applyTime = true && this.isSetApplyTime();
		boolean that_present_applyTime = true && that.isSetApplyTime();
		if (this_present_applyTime || that_present_applyTime) {
			if (!(this_present_applyTime && that_present_applyTime))
				return false;
			if (!this.applyTime.equals(that.applyTime))
				return false;
		}

		boolean this_present_expireTime = true && this.isSetExpireTime();
		boolean that_present_expireTime = true && that.isSetExpireTime();
		if (this_present_expireTime || that_present_expireTime) {
			if (!(this_present_expireTime && that_present_expireTime))
				return false;
			if (!this.expireTime.equals(that.expireTime))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetCid()) ? 131071 : 524287);
		if (isSetCid())
			hashCode = hashCode * 8191 + cid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
		if (isSetName())
			hashCode = hashCode * 8191 + name.hashCode();

		hashCode = hashCode * 8191 + ((isSetCate()) ? 131071 : 524287);
		if (isSetCate())
			hashCode = hashCode * 8191 + cate.hashCode();

		hashCode = hashCode * 8191 + ((isSetScene()) ? 131071 : 524287);
		if (isSetScene())
			hashCode = hashCode * 8191 + scene.hashCode();

		hashCode = hashCode * 8191 + ((isSetProperty()) ? 131071 : 524287);
		if (isSetProperty())
			hashCode = hashCode * 8191 + property.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minCost);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rate);

		hashCode = hashCode * 8191 + numRelease;

		hashCode = hashCode * 8191 + validDay;

		hashCode = hashCode * 8191 + ((isRefund) ? 131071 : 524287);

		hashCode = hashCode * 8191 + numCanUse;

		hashCode = hashCode * 8191 + numReceived;

		hashCode = hashCode * 8191 + numUsed;

		hashCode = hashCode * 8191 + numUsedUp;

		hashCode = hashCode * 8191 + numUsedOn;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amountUsed);

		hashCode = hashCode * 8191 + ((isSetApplyTime()) ? 131071 : 524287);
		if (isSetApplyTime())
			hashCode = hashCode * 8191 + applyTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTime()) ? 131071 : 524287);
		if (isSetExpireTime())
			hashCode = hashCode * 8191 + expireTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(CouponStore other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCate()).compareTo(other.isSetCate());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCate()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cate, other.cate);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetScene()).compareTo(other.isSetScene());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetScene()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scene, other.scene);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProperty()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMinCost()).compareTo(other.isSetMinCost());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMinCost()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minCost, other.minCost);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRate()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumRelease()).compareTo(other.isSetNumRelease());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumRelease()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numRelease, other.numRelease);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetValidDay()).compareTo(other.isSetValidDay());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetValidDay()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validDay, other.validDay);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsRefund()).compareTo(other.isSetIsRefund());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsRefund()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRefund, other.isRefund);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumCanUse()).compareTo(other.isSetNumCanUse());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumCanUse()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numCanUse, other.numCanUse);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumReceived()).compareTo(other.isSetNumReceived());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumReceived()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numReceived, other.numReceived);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumUsed()).compareTo(other.isSetNumUsed());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumUsed()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numUsed, other.numUsed);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumUsedUp()).compareTo(other.isSetNumUsedUp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumUsedUp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numUsedUp, other.numUsedUp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumUsedOn()).compareTo(other.isSetNumUsedOn());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumUsedOn()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numUsedOn, other.numUsedOn);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmountUsed()).compareTo(other.isSetAmountUsed());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmountUsed()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountUsed, other.amountUsed);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetApplyTime()).compareTo(other.isSetApplyTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApplyTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTime, other.applyTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("CouponStore(");
		boolean first = true;

		sb.append("cid:");
		if (this.cid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.cid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		}
		else {
			sb.append(this.name);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("cate:");
		if (this.cate == null) {
			sb.append("null");
		}
		else {
			sb.append(this.cate);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("scene:");
		if (this.scene == null) {
			sb.append("null");
		}
		else {
			sb.append(this.scene);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("property:");
		if (this.property == null) {
			sb.append("null");
		}
		else {
			sb.append(this.property);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("minCost:");
		sb.append(this.minCost);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amount:");
		sb.append(this.amount);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("rate:");
		sb.append(this.rate);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numRelease:");
		sb.append(this.numRelease);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("validDay:");
		sb.append(this.validDay);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isRefund:");
		sb.append(this.isRefund);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numCanUse:");
		sb.append(this.numCanUse);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numReceived:");
		sb.append(this.numReceived);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numUsed:");
		sb.append(this.numUsed);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numUsedUp:");
		sb.append(this.numUsedUp);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numUsedOn:");
		sb.append(this.numUsedOn);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amountUsed:");
		sb.append(this.amountUsed);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("applyTime:");
		if (this.applyTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.applyTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("expireTime:");
		if (this.expireTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.expireTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class CouponStoreStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public CouponStoreStandardScheme getScheme() {
			return new CouponStoreStandardScheme();
		}

	}

	private static class CouponStoreStandardScheme extends org.apache.thrift.scheme.StandardScheme<CouponStore> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, CouponStore struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // CID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.cid = iprot.readString();
						struct.setCidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.name = iprot.readString();
						struct.setNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CATE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.cate = iprot.readString();
						struct.setCateIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // SCENE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.scene = iprot.readString();
						struct.setSceneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // PROPERTY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.property = iprot.readString();
						struct.setPropertyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // MIN_COST
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.minCost = iprot.readDouble();
						struct.setMinCostIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // AMOUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amount = iprot.readDouble();
						struct.setAmountIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // RATE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.rate = iprot.readDouble();
						struct.setRateIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // NUM_RELEASE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numRelease = iprot.readI32();
						struct.setNumReleaseIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // VALID_DAY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.validDay = iprot.readI32();
						struct.setValidDayIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // IS_REFUND
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isRefund = iprot.readBool();
						struct.setIsRefundIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // NUM_CAN_USE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numCanUse = iprot.readI32();
						struct.setNumCanUseIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // NUM_RECEIVED
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numReceived = iprot.readI32();
						struct.setNumReceivedIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // NUM_USED
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numUsed = iprot.readI32();
						struct.setNumUsedIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // NUM_USED_UP
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numUsedUp = iprot.readI32();
						struct.setNumUsedUpIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // NUM_USED_ON
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numUsedOn = iprot.readI32();
						struct.setNumUsedOnIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // AMOUNT_USED
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amountUsed = iprot.readDouble();
						struct.setAmountUsedIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // APPLY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.applyTime = iprot.readString();
						struct.setApplyTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // EXPIRE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTime = iprot.readString();
						struct.setExpireTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 24: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, CouponStore struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.cid != null) {
				oprot.writeFieldBegin(CID_FIELD_DESC);
				oprot.writeString(struct.cid);
				oprot.writeFieldEnd();
			}
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.name != null) {
				oprot.writeFieldBegin(NAME_FIELD_DESC);
				oprot.writeString(struct.name);
				oprot.writeFieldEnd();
			}
			if (struct.cate != null) {
				oprot.writeFieldBegin(CATE_FIELD_DESC);
				oprot.writeString(struct.cate);
				oprot.writeFieldEnd();
			}
			if (struct.scene != null) {
				oprot.writeFieldBegin(SCENE_FIELD_DESC);
				oprot.writeString(struct.scene);
				oprot.writeFieldEnd();
			}
			if (struct.property != null) {
				oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
				oprot.writeString(struct.property);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MIN_COST_FIELD_DESC);
			oprot.writeDouble(struct.minCost);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
			oprot.writeDouble(struct.amount);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(RATE_FIELD_DESC);
			oprot.writeDouble(struct.rate);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_RELEASE_FIELD_DESC);
			oprot.writeI32(struct.numRelease);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(VALID_DAY_FIELD_DESC);
			oprot.writeI32(struct.validDay);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_REFUND_FIELD_DESC);
			oprot.writeBool(struct.isRefund);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_CAN_USE_FIELD_DESC);
			oprot.writeI32(struct.numCanUse);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_RECEIVED_FIELD_DESC);
			oprot.writeI32(struct.numReceived);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_USED_FIELD_DESC);
			oprot.writeI32(struct.numUsed);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_USED_UP_FIELD_DESC);
			oprot.writeI32(struct.numUsedUp);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_USED_ON_FIELD_DESC);
			oprot.writeI32(struct.numUsedOn);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(AMOUNT_USED_FIELD_DESC);
			oprot.writeDouble(struct.amountUsed);
			oprot.writeFieldEnd();
			if (struct.applyTime != null) {
				oprot.writeFieldBegin(APPLY_TIME_FIELD_DESC);
				oprot.writeString(struct.applyTime);
				oprot.writeFieldEnd();
			}
			if (struct.expireTime != null) {
				oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
				oprot.writeString(struct.expireTime);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class CouponStoreTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public CouponStoreTupleScheme getScheme() {
			return new CouponStoreTupleScheme();
		}

	}

	private static class CouponStoreTupleScheme extends org.apache.thrift.scheme.TupleScheme<CouponStore> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, CouponStore struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetCid()) {
				optionals.set(0);
			}
			if (struct.isSetSid()) {
				optionals.set(1);
			}
			if (struct.isSetUid()) {
				optionals.set(2);
			}
			if (struct.isSetName()) {
				optionals.set(3);
			}
			if (struct.isSetCate()) {
				optionals.set(4);
			}
			if (struct.isSetScene()) {
				optionals.set(5);
			}
			if (struct.isSetProperty()) {
				optionals.set(6);
			}
			if (struct.isSetStatus()) {
				optionals.set(7);
			}
			if (struct.isSetMinCost()) {
				optionals.set(8);
			}
			if (struct.isSetAmount()) {
				optionals.set(9);
			}
			if (struct.isSetRate()) {
				optionals.set(10);
			}
			if (struct.isSetNumRelease()) {
				optionals.set(11);
			}
			if (struct.isSetValidDay()) {
				optionals.set(12);
			}
			if (struct.isSetIsRefund()) {
				optionals.set(13);
			}
			if (struct.isSetNumCanUse()) {
				optionals.set(14);
			}
			if (struct.isSetNumReceived()) {
				optionals.set(15);
			}
			if (struct.isSetNumUsed()) {
				optionals.set(16);
			}
			if (struct.isSetNumUsedUp()) {
				optionals.set(17);
			}
			if (struct.isSetNumUsedOn()) {
				optionals.set(18);
			}
			if (struct.isSetAmountUsed()) {
				optionals.set(19);
			}
			if (struct.isSetApplyTime()) {
				optionals.set(20);
			}
			if (struct.isSetExpireTime()) {
				optionals.set(21);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(22);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(23);
			}
			oprot.writeBitSet(optionals, 24);
			if (struct.isSetCid()) {
				oprot.writeString(struct.cid);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetName()) {
				oprot.writeString(struct.name);
			}
			if (struct.isSetCate()) {
				oprot.writeString(struct.cate);
			}
			if (struct.isSetScene()) {
				oprot.writeString(struct.scene);
			}
			if (struct.isSetProperty()) {
				oprot.writeString(struct.property);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetMinCost()) {
				oprot.writeDouble(struct.minCost);
			}
			if (struct.isSetAmount()) {
				oprot.writeDouble(struct.amount);
			}
			if (struct.isSetRate()) {
				oprot.writeDouble(struct.rate);
			}
			if (struct.isSetNumRelease()) {
				oprot.writeI32(struct.numRelease);
			}
			if (struct.isSetValidDay()) {
				oprot.writeI32(struct.validDay);
			}
			if (struct.isSetIsRefund()) {
				oprot.writeBool(struct.isRefund);
			}
			if (struct.isSetNumCanUse()) {
				oprot.writeI32(struct.numCanUse);
			}
			if (struct.isSetNumReceived()) {
				oprot.writeI32(struct.numReceived);
			}
			if (struct.isSetNumUsed()) {
				oprot.writeI32(struct.numUsed);
			}
			if (struct.isSetNumUsedUp()) {
				oprot.writeI32(struct.numUsedUp);
			}
			if (struct.isSetNumUsedOn()) {
				oprot.writeI32(struct.numUsedOn);
			}
			if (struct.isSetAmountUsed()) {
				oprot.writeDouble(struct.amountUsed);
			}
			if (struct.isSetApplyTime()) {
				oprot.writeString(struct.applyTime);
			}
			if (struct.isSetExpireTime()) {
				oprot.writeString(struct.expireTime);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, CouponStore struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(24);
			if (incoming.get(0)) {
				struct.cid = iprot.readString();
				struct.setCidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.name = iprot.readString();
				struct.setNameIsSet(true);
			}
			if (incoming.get(4)) {
				struct.cate = iprot.readString();
				struct.setCateIsSet(true);
			}
			if (incoming.get(5)) {
				struct.scene = iprot.readString();
				struct.setSceneIsSet(true);
			}
			if (incoming.get(6)) {
				struct.property = iprot.readString();
				struct.setPropertyIsSet(true);
			}
			if (incoming.get(7)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(8)) {
				struct.minCost = iprot.readDouble();
				struct.setMinCostIsSet(true);
			}
			if (incoming.get(9)) {
				struct.amount = iprot.readDouble();
				struct.setAmountIsSet(true);
			}
			if (incoming.get(10)) {
				struct.rate = iprot.readDouble();
				struct.setRateIsSet(true);
			}
			if (incoming.get(11)) {
				struct.numRelease = iprot.readI32();
				struct.setNumReleaseIsSet(true);
			}
			if (incoming.get(12)) {
				struct.validDay = iprot.readI32();
				struct.setValidDayIsSet(true);
			}
			if (incoming.get(13)) {
				struct.isRefund = iprot.readBool();
				struct.setIsRefundIsSet(true);
			}
			if (incoming.get(14)) {
				struct.numCanUse = iprot.readI32();
				struct.setNumCanUseIsSet(true);
			}
			if (incoming.get(15)) {
				struct.numReceived = iprot.readI32();
				struct.setNumReceivedIsSet(true);
			}
			if (incoming.get(16)) {
				struct.numUsed = iprot.readI32();
				struct.setNumUsedIsSet(true);
			}
			if (incoming.get(17)) {
				struct.numUsedUp = iprot.readI32();
				struct.setNumUsedUpIsSet(true);
			}
			if (incoming.get(18)) {
				struct.numUsedOn = iprot.readI32();
				struct.setNumUsedOnIsSet(true);
			}
			if (incoming.get(19)) {
				struct.amountUsed = iprot.readDouble();
				struct.setAmountUsedIsSet(true);
			}
			if (incoming.get(20)) {
				struct.applyTime = iprot.readString();
				struct.setApplyTimeIsSet(true);
			}
			if (incoming.get(21)) {
				struct.expireTime = iprot.readString();
				struct.setExpireTimeIsSet(true);
			}
			if (incoming.get(22)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(23)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
