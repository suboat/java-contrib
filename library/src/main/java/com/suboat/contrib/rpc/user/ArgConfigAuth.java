/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 授权配置获取 有效条件: 参数选填
 */
public class ArgConfigAuth implements org.apache.thrift.TBase<ArgConfigAuth, ArgConfigAuth._Fields>,
		java.io.Serializable, Cloneable, Comparable<ArgConfigAuth> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgConfigAuth");

	private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"platform", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"appId", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgConfigAuthStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgConfigAuthTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String platform; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String appId; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		PLATFORM((short) 1, "platform"), APP_ID((short) 2, "appId");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // PLATFORM
				return PLATFORM;
			case 2: // APP_ID
				return APP_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final _Fields optionals[] = { _Fields.PLATFORM, _Fields.APP_ID };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.PLATFORM,
				new org.apache.thrift.meta_data.FieldMetaData("platform",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.APP_ID,
				new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgConfigAuth.class, metaDataMap);
	}

	public ArgConfigAuth() {
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgConfigAuth(ArgConfigAuth other) {
		if (other.isSetPlatform()) {
			this.platform = other.platform;
		}
		if (other.isSetAppId()) {
			this.appId = other.appId;
		}
	}

	public ArgConfigAuth deepCopy() {
		return new ArgConfigAuth(this);
	}

	@Override
	public void clear() {
		this.platform = null;
		this.appId = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPlatform() {
		return this.platform;
	}

	public ArgConfigAuth setPlatform(@org.apache.thrift.annotation.Nullable java.lang.String platform) {
		this.platform = platform;
		return this;
	}

	public void unsetPlatform() {
		this.platform = null;
	}

	/**
	 * Returns true if field platform is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPlatform() {
		return this.platform != null;
	}

	public void setPlatformIsSet(boolean value) {
		if (!value) {
			this.platform = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAppId() {
		return this.appId;
	}

	public ArgConfigAuth setAppId(@org.apache.thrift.annotation.Nullable java.lang.String appId) {
		this.appId = appId;
		return this;
	}

	public void unsetAppId() {
		this.appId = null;
	}

	/**
	 * Returns true if field appId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAppId() {
		return this.appId != null;
	}

	public void setAppIdIsSet(boolean value) {
		if (!value) {
			this.appId = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case PLATFORM:
			if (value == null) {
				unsetPlatform();
			}
			else {
				setPlatform((java.lang.String) value);
			}
			break;

		case APP_ID:
			if (value == null) {
				unsetAppId();
			}
			else {
				setAppId((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case PLATFORM:
			return getPlatform();

		case APP_ID:
			return getAppId();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case PLATFORM:
			return isSetPlatform();
		case APP_ID:
			return isSetAppId();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgConfigAuth)
			return this.equals((ArgConfigAuth) that);
		return false;
	}

	public boolean equals(ArgConfigAuth that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_platform = true && this.isSetPlatform();
		boolean that_present_platform = true && that.isSetPlatform();
		if (this_present_platform || that_present_platform) {
			if (!(this_present_platform && that_present_platform))
				return false;
			if (!this.platform.equals(that.platform))
				return false;
		}

		boolean this_present_appId = true && this.isSetAppId();
		boolean that_present_appId = true && that.isSetAppId();
		if (this_present_appId || that_present_appId) {
			if (!(this_present_appId && that_present_appId))
				return false;
			if (!this.appId.equals(that.appId))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetPlatform()) ? 131071 : 524287);
		if (isSetPlatform())
			hashCode = hashCode * 8191 + platform.hashCode();

		hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
		if (isSetAppId())
			hashCode = hashCode * 8191 + appId.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgConfigAuth other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPlatform()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAppId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgConfigAuth(");
		boolean first = true;

		if (isSetPlatform()) {
			sb.append("platform:");
			if (this.platform == null) {
				sb.append("null");
			}
			else {
				sb.append(this.platform);
			}
			first = false;
		}
		if (isSetAppId()) {
			if (!first)
				sb.append(", ");
			sb.append("appId:");
			if (this.appId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.appId);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgConfigAuthStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgConfigAuthStandardScheme getScheme() {
			return new ArgConfigAuthStandardScheme();
		}

	}

	private static class ArgConfigAuthStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgConfigAuth> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgConfigAuth struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // PLATFORM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.platform = iprot.readString();
						struct.setPlatformIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // APP_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.appId = iprot.readString();
						struct.setAppIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgConfigAuth struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.platform != null) {
				if (struct.isSetPlatform()) {
					oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
					oprot.writeString(struct.platform);
					oprot.writeFieldEnd();
				}
			}
			if (struct.appId != null) {
				if (struct.isSetAppId()) {
					oprot.writeFieldBegin(APP_ID_FIELD_DESC);
					oprot.writeString(struct.appId);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgConfigAuthTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgConfigAuthTupleScheme getScheme() {
			return new ArgConfigAuthTupleScheme();
		}

	}

	private static class ArgConfigAuthTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgConfigAuth> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgConfigAuth struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetPlatform()) {
				optionals.set(0);
			}
			if (struct.isSetAppId()) {
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetPlatform()) {
				oprot.writeString(struct.platform);
			}
			if (struct.isSetAppId()) {
				oprot.writeString(struct.appId);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgConfigAuth struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
				struct.platform = iprot.readString();
				struct.setPlatformIsSet(true);
			}
			if (incoming.get(1)) {
				struct.appId = iprot.readString();
				struct.setAppIdIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
