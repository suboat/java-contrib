/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 检索一条钱包过期统计 有效条件: a. [检索一条记录] expireTag和expireTime选填一项 b. [检索一个数组] limitSec选填
 */
public class ArgWalletExpire implements org.apache.thrift.TBase<ArgWalletExpire, ArgWalletExpire._Fields>,
		java.io.Serializable, Cloneable, Comparable<ArgWalletExpire> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgWalletExpire");

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField EXPIRE_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTag", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField LIMIT_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"limitSec", org.apache.thrift.protocol.TType.I32, (short) 5);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgWalletExpireStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgWalletExpireTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTag; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTime; // optional

	public int limitSec; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID((short) 1, "uid"), CATEGORY((short) 2, "category"), EXPIRE_TAG((short) 3,
				"expireTag"), EXPIRE_TIME((short) 4, "expireTime"), LIMIT_SEC((short) 5, "limitSec");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID
				return UID;
			case 2: // CATEGORY
				return CATEGORY;
			case 3: // EXPIRE_TAG
				return EXPIRE_TAG;
			case 4: // EXPIRE_TIME
				return EXPIRE_TIME;
			case 5: // LIMIT_SEC
				return LIMIT_SEC;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __LIMITSEC_ISSET_ID = 0;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.EXPIRE_TAG, _Fields.EXPIRE_TIME, _Fields.LIMIT_SEC };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EXPIRE_TAG,
				new org.apache.thrift.meta_data.FieldMetaData("expireTag",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.LIMIT_SEC,
				new org.apache.thrift.meta_data.FieldMetaData("limitSec",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgWalletExpire.class, metaDataMap);
	}

	public ArgWalletExpire() {
	}

	public ArgWalletExpire(java.lang.String uid, java.lang.String category) {
		this();
		this.uid = uid;
		this.category = category;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgWalletExpire(ArgWalletExpire other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		if (other.isSetExpireTag()) {
			this.expireTag = other.expireTag;
		}
		if (other.isSetExpireTime()) {
			this.expireTime = other.expireTime;
		}
		this.limitSec = other.limitSec;
	}

	public ArgWalletExpire deepCopy() {
		return new ArgWalletExpire(this);
	}

	@Override
	public void clear() {
		this.uid = null;
		this.category = null;
		this.expireTag = null;
		this.expireTime = null;
		setLimitSecIsSet(false);
		this.limitSec = 0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public ArgWalletExpire setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public ArgWalletExpire setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTag() {
		return this.expireTag;
	}

	public ArgWalletExpire setExpireTag(@org.apache.thrift.annotation.Nullable java.lang.String expireTag) {
		this.expireTag = expireTag;
		return this;
	}

	public void unsetExpireTag() {
		this.expireTag = null;
	}

	/**
	 * Returns true if field expireTag is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTag() {
		return this.expireTag != null;
	}

	public void setExpireTagIsSet(boolean value) {
		if (!value) {
			this.expireTag = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTime() {
		return this.expireTime;
	}

	public ArgWalletExpire setExpireTime(@org.apache.thrift.annotation.Nullable java.lang.String expireTime) {
		this.expireTime = expireTime;
		return this;
	}

	public void unsetExpireTime() {
		this.expireTime = null;
	}

	/**
	 * Returns true if field expireTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTime() {
		return this.expireTime != null;
	}

	public void setExpireTimeIsSet(boolean value) {
		if (!value) {
			this.expireTime = null;
		}
	}

	public int getLimitSec() {
		return this.limitSec;
	}

	public ArgWalletExpire setLimitSec(int limitSec) {
		this.limitSec = limitSec;
		setLimitSecIsSet(true);
		return this;
	}

	public void unsetLimitSec() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMITSEC_ISSET_ID);
	}

	/**
	 * Returns true if field limitSec is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLimitSec() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMITSEC_ISSET_ID);
	}

	public void setLimitSecIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMITSEC_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case EXPIRE_TAG:
			if (value == null) {
				unsetExpireTag();
			}
			else {
				setExpireTag((java.lang.String) value);
			}
			break;

		case EXPIRE_TIME:
			if (value == null) {
				unsetExpireTime();
			}
			else {
				setExpireTime((java.lang.String) value);
			}
			break;

		case LIMIT_SEC:
			if (value == null) {
				unsetLimitSec();
			}
			else {
				setLimitSec((java.lang.Integer) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID:
			return getUid();

		case CATEGORY:
			return getCategory();

		case EXPIRE_TAG:
			return getExpireTag();

		case EXPIRE_TIME:
			return getExpireTime();

		case LIMIT_SEC:
			return getLimitSec();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID:
			return isSetUid();
		case CATEGORY:
			return isSetCategory();
		case EXPIRE_TAG:
			return isSetExpireTag();
		case EXPIRE_TIME:
			return isSetExpireTime();
		case LIMIT_SEC:
			return isSetLimitSec();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgWalletExpire)
			return this.equals((ArgWalletExpire) that);
		return false;
	}

	public boolean equals(ArgWalletExpire that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_expireTag = true && this.isSetExpireTag();
		boolean that_present_expireTag = true && that.isSetExpireTag();
		if (this_present_expireTag || that_present_expireTag) {
			if (!(this_present_expireTag && that_present_expireTag))
				return false;
			if (!this.expireTag.equals(that.expireTag))
				return false;
		}

		boolean this_present_expireTime = true && this.isSetExpireTime();
		boolean that_present_expireTime = true && that.isSetExpireTime();
		if (this_present_expireTime || that_present_expireTime) {
			if (!(this_present_expireTime && that_present_expireTime))
				return false;
			if (!this.expireTime.equals(that.expireTime))
				return false;
		}

		boolean this_present_limitSec = true && this.isSetLimitSec();
		boolean that_present_limitSec = true && that.isSetLimitSec();
		if (this_present_limitSec || that_present_limitSec) {
			if (!(this_present_limitSec && that_present_limitSec))
				return false;
			if (this.limitSec != that.limitSec)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTag()) ? 131071 : 524287);
		if (isSetExpireTag())
			hashCode = hashCode * 8191 + expireTag.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTime()) ? 131071 : 524287);
		if (isSetExpireTime())
			hashCode = hashCode * 8191 + expireTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetLimitSec()) ? 131071 : 524287);
		if (isSetLimitSec())
			hashCode = hashCode * 8191 + limitSec;

		return hashCode;
	}

	@Override
	public int compareTo(ArgWalletExpire other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTag()).compareTo(other.isSetExpireTag());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTag()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTag, other.expireTag);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLimitSec()).compareTo(other.isSetLimitSec());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLimitSec()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitSec, other.limitSec);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgWalletExpire(");
		boolean first = true;

		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (isSetExpireTag()) {
			if (!first)
				sb.append(", ");
			sb.append("expireTag:");
			if (this.expireTag == null) {
				sb.append("null");
			}
			else {
				sb.append(this.expireTag);
			}
			first = false;
		}
		if (isSetExpireTime()) {
			if (!first)
				sb.append(", ");
			sb.append("expireTime:");
			if (this.expireTime == null) {
				sb.append("null");
			}
			else {
				sb.append(this.expireTime);
			}
			first = false;
		}
		if (isSetLimitSec()) {
			if (!first)
				sb.append(", ");
			sb.append("limitSec:");
			sb.append(this.limitSec);
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgWalletExpireStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgWalletExpireStandardScheme getScheme() {
			return new ArgWalletExpireStandardScheme();
		}

	}

	private static class ArgWalletExpireStandardScheme
			extends org.apache.thrift.scheme.StandardScheme<ArgWalletExpire> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgWalletExpire struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // EXPIRE_TAG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTag = iprot.readString();
						struct.setExpireTagIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // EXPIRE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTime = iprot.readString();
						struct.setExpireTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // LIMIT_SEC
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.limitSec = iprot.readI32();
						struct.setLimitSecIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgWalletExpire struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			if (struct.expireTag != null) {
				if (struct.isSetExpireTag()) {
					oprot.writeFieldBegin(EXPIRE_TAG_FIELD_DESC);
					oprot.writeString(struct.expireTag);
					oprot.writeFieldEnd();
				}
			}
			if (struct.expireTime != null) {
				if (struct.isSetExpireTime()) {
					oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
					oprot.writeString(struct.expireTime);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetLimitSec()) {
				oprot.writeFieldBegin(LIMIT_SEC_FIELD_DESC);
				oprot.writeI32(struct.limitSec);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgWalletExpireTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgWalletExpireTupleScheme getScheme() {
			return new ArgWalletExpireTupleScheme();
		}

	}

	private static class ArgWalletExpireTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgWalletExpire> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgWalletExpire struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUid()) {
				optionals.set(0);
			}
			if (struct.isSetCategory()) {
				optionals.set(1);
			}
			if (struct.isSetExpireTag()) {
				optionals.set(2);
			}
			if (struct.isSetExpireTime()) {
				optionals.set(3);
			}
			if (struct.isSetLimitSec()) {
				optionals.set(4);
			}
			oprot.writeBitSet(optionals, 5);
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetExpireTag()) {
				oprot.writeString(struct.expireTag);
			}
			if (struct.isSetExpireTime()) {
				oprot.writeString(struct.expireTime);
			}
			if (struct.isSetLimitSec()) {
				oprot.writeI32(struct.limitSec);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgWalletExpire struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(5);
			if (incoming.get(0)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(2)) {
				struct.expireTag = iprot.readString();
				struct.setExpireTagIsSet(true);
			}
			if (incoming.get(3)) {
				struct.expireTime = iprot.readString();
				struct.setExpireTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.limitSec = iprot.readI32();
				struct.setLimitSecIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
