/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.msg;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class OrganizeRel implements org.apache.thrift.TBase<OrganizeRel, OrganizeRel._Fields>, java.io.Serializable,
		Cloneable, Comparable<OrganizeRel> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"OrganizeRel");

	private static final org.apache.thrift.protocol.TField OID_FIELD_DESC = new org.apache.thrift.protocol.TField("oid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField IS_MASTER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isMaster", org.apache.thrift.protocol.TType.BOOL, (short) 5);

	private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"number", org.apache.thrift.protocol.TType.I32, (short) 6);

	private static final org.apache.thrift.protocol.TField MAX_CONCURRENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"maxConcurrent", org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OrganizeRelStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OrganizeRelTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String oid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public boolean isMaster; // required

	public int number; // required

	public int maxConcurrent; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		OID((short) 1, "oid"), UID((short) 2, "uid"), CREATE_TIME((short) 3, "createTime"), UPDATE_TIME((short) 4,
				"updateTime"), IS_MASTER((short) 5,
						"isMaster"), NUMBER((short) 6, "number"), MAX_CONCURRENT((short) 7, "maxConcurrent");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // OID
				return OID;
			case 2: // UID
				return UID;
			case 3: // CREATE_TIME
				return CREATE_TIME;
			case 4: // UPDATE_TIME
				return UPDATE_TIME;
			case 5: // IS_MASTER
				return IS_MASTER;
			case 6: // NUMBER
				return NUMBER;
			case 7: // MAX_CONCURRENT
				return MAX_CONCURRENT;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISMASTER_ISSET_ID = 0;

	private static final int __NUMBER_ISSET_ID = 1;

	private static final int __MAXCONCURRENT_ISSET_ID = 2;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.OID,
				new org.apache.thrift.meta_data.FieldMetaData("oid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_MASTER,
				new org.apache.thrift.meta_data.FieldMetaData("isMaster",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.NUMBER,
				new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.MAX_CONCURRENT,
				new org.apache.thrift.meta_data.FieldMetaData("maxConcurrent",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrganizeRel.class, metaDataMap);
	}

	public OrganizeRel() {
	}

	public OrganizeRel(java.lang.String oid, java.lang.String uid, java.lang.String createTime,
			java.lang.String updateTime, boolean isMaster, int number, int maxConcurrent) {
		this();
		this.oid = oid;
		this.uid = uid;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.isMaster = isMaster;
		setIsMasterIsSet(true);
		this.number = number;
		setNumberIsSet(true);
		this.maxConcurrent = maxConcurrent;
		setMaxConcurrentIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public OrganizeRel(OrganizeRel other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetOid()) {
			this.oid = other.oid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.isMaster = other.isMaster;
		this.number = other.number;
		this.maxConcurrent = other.maxConcurrent;
	}

	public OrganizeRel deepCopy() {
		return new OrganizeRel(this);
	}

	@Override
	public void clear() {
		this.oid = null;
		this.uid = null;
		this.createTime = null;
		this.updateTime = null;
		setIsMasterIsSet(false);
		this.isMaster = false;
		setNumberIsSet(false);
		this.number = 0;
		setMaxConcurrentIsSet(false);
		this.maxConcurrent = 0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getOid() {
		return this.oid;
	}

	public OrganizeRel setOid(@org.apache.thrift.annotation.Nullable java.lang.String oid) {
		this.oid = oid;
		return this;
	}

	public void unsetOid() {
		this.oid = null;
	}

	/**
	 * Returns true if field oid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetOid() {
		return this.oid != null;
	}

	public void setOidIsSet(boolean value) {
		if (!value) {
			this.oid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public OrganizeRel setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public OrganizeRel setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public OrganizeRel setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public boolean isIsMaster() {
		return this.isMaster;
	}

	public OrganizeRel setIsMaster(boolean isMaster) {
		this.isMaster = isMaster;
		setIsMasterIsSet(true);
		return this;
	}

	public void unsetIsMaster() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMASTER_ISSET_ID);
	}

	/**
	 * Returns true if field isMaster is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsMaster() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMASTER_ISSET_ID);
	}

	public void setIsMasterIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMASTER_ISSET_ID, value);
	}

	public int getNumber() {
		return this.number;
	}

	public OrganizeRel setNumber(int number) {
		this.number = number;
		setNumberIsSet(true);
		return this;
	}

	public void unsetNumber() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER_ISSET_ID);
	}

	/**
	 * Returns true if field number is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetNumber() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER_ISSET_ID);
	}

	public void setNumberIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER_ISSET_ID, value);
	}

	public int getMaxConcurrent() {
		return this.maxConcurrent;
	}

	public OrganizeRel setMaxConcurrent(int maxConcurrent) {
		this.maxConcurrent = maxConcurrent;
		setMaxConcurrentIsSet(true);
		return this;
	}

	public void unsetMaxConcurrent() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXCONCURRENT_ISSET_ID);
	}

	/**
	 * Returns true if field maxConcurrent is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMaxConcurrent() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXCONCURRENT_ISSET_ID);
	}

	public void setMaxConcurrentIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXCONCURRENT_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case OID:
			if (value == null) {
				unsetOid();
			}
			else {
				setOid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case IS_MASTER:
			if (value == null) {
				unsetIsMaster();
			}
			else {
				setIsMaster((java.lang.Boolean) value);
			}
			break;

		case NUMBER:
			if (value == null) {
				unsetNumber();
			}
			else {
				setNumber((java.lang.Integer) value);
			}
			break;

		case MAX_CONCURRENT:
			if (value == null) {
				unsetMaxConcurrent();
			}
			else {
				setMaxConcurrent((java.lang.Integer) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case OID:
			return getOid();

		case UID:
			return getUid();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case IS_MASTER:
			return isIsMaster();

		case NUMBER:
			return getNumber();

		case MAX_CONCURRENT:
			return getMaxConcurrent();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case OID:
			return isSetOid();
		case UID:
			return isSetUid();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case IS_MASTER:
			return isSetIsMaster();
		case NUMBER:
			return isSetNumber();
		case MAX_CONCURRENT:
			return isSetMaxConcurrent();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof OrganizeRel)
			return this.equals((OrganizeRel) that);
		return false;
	}

	public boolean equals(OrganizeRel that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_oid = true && this.isSetOid();
		boolean that_present_oid = true && that.isSetOid();
		if (this_present_oid || that_present_oid) {
			if (!(this_present_oid && that_present_oid))
				return false;
			if (!this.oid.equals(that.oid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_isMaster = true;
		boolean that_present_isMaster = true;
		if (this_present_isMaster || that_present_isMaster) {
			if (!(this_present_isMaster && that_present_isMaster))
				return false;
			if (this.isMaster != that.isMaster)
				return false;
		}

		boolean this_present_number = true;
		boolean that_present_number = true;
		if (this_present_number || that_present_number) {
			if (!(this_present_number && that_present_number))
				return false;
			if (this.number != that.number)
				return false;
		}

		boolean this_present_maxConcurrent = true;
		boolean that_present_maxConcurrent = true;
		if (this_present_maxConcurrent || that_present_maxConcurrent) {
			if (!(this_present_maxConcurrent && that_present_maxConcurrent))
				return false;
			if (this.maxConcurrent != that.maxConcurrent)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetOid()) ? 131071 : 524287);
		if (isSetOid())
			hashCode = hashCode * 8191 + oid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isMaster) ? 131071 : 524287);

		hashCode = hashCode * 8191 + number;

		hashCode = hashCode * 8191 + maxConcurrent;

		return hashCode;
	}

	@Override
	public int compareTo(OrganizeRel other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetOid()).compareTo(other.isSetOid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oid, other.oid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsMaster()).compareTo(other.isSetIsMaster());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsMaster()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMaster, other.isMaster);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumber()).compareTo(other.isSetNumber());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumber()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, other.number);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMaxConcurrent()).compareTo(other.isSetMaxConcurrent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMaxConcurrent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxConcurrent, other.maxConcurrent);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("OrganizeRel(");
		boolean first = true;

		sb.append("oid:");
		if (this.oid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.oid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isMaster:");
		sb.append(this.isMaster);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("number:");
		sb.append(this.number);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("maxConcurrent:");
		sb.append(this.maxConcurrent);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class OrganizeRelStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrganizeRelStandardScheme getScheme() {
			return new OrganizeRelStandardScheme();
		}

	}

	private static class OrganizeRelStandardScheme extends org.apache.thrift.scheme.StandardScheme<OrganizeRel> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, OrganizeRel struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // OID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.oid = iprot.readString();
						struct.setOidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // IS_MASTER
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isMaster = iprot.readBool();
						struct.setIsMasterIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // NUMBER
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.number = iprot.readI32();
						struct.setNumberIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // MAX_CONCURRENT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.maxConcurrent = iprot.readI32();
						struct.setMaxConcurrentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, OrganizeRel struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.oid != null) {
				oprot.writeFieldBegin(OID_FIELD_DESC);
				oprot.writeString(struct.oid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_MASTER_FIELD_DESC);
			oprot.writeBool(struct.isMaster);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUMBER_FIELD_DESC);
			oprot.writeI32(struct.number);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MAX_CONCURRENT_FIELD_DESC);
			oprot.writeI32(struct.maxConcurrent);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class OrganizeRelTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrganizeRelTupleScheme getScheme() {
			return new OrganizeRelTupleScheme();
		}

	}

	private static class OrganizeRelTupleScheme extends org.apache.thrift.scheme.TupleScheme<OrganizeRel> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, OrganizeRel struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetOid()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(2);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(3);
			}
			if (struct.isSetIsMaster()) {
				optionals.set(4);
			}
			if (struct.isSetNumber()) {
				optionals.set(5);
			}
			if (struct.isSetMaxConcurrent()) {
				optionals.set(6);
			}
			oprot.writeBitSet(optionals, 7);
			if (struct.isSetOid()) {
				oprot.writeString(struct.oid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetIsMaster()) {
				oprot.writeBool(struct.isMaster);
			}
			if (struct.isSetNumber()) {
				oprot.writeI32(struct.number);
			}
			if (struct.isSetMaxConcurrent()) {
				oprot.writeI32(struct.maxConcurrent);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, OrganizeRel struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(7);
			if (incoming.get(0)) {
				struct.oid = iprot.readString();
				struct.setOidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.isMaster = iprot.readBool();
				struct.setIsMasterIsSet(true);
			}
			if (incoming.get(5)) {
				struct.number = iprot.readI32();
				struct.setNumberIsSet(true);
			}
			if (incoming.get(6)) {
				struct.maxConcurrent = iprot.readI32();
				struct.setMaxConcurrentIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
