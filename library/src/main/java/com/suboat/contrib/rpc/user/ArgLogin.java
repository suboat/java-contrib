/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: rpc实现用户登录 有效条件：uid必填
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-09")
public class ArgLogin implements org.apache.thrift.TBase<ArgLogin, ArgLogin._Fields>, java.io.Serializable, Cloneable,
		Comparable<ArgLogin> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgLogin");

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"agent", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"device", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"level", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip",
			org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id",
			org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("exp",
			org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField CRE_FIELD_DESC = new org.apache.thrift.protocol.TField("cre",
			org.apache.thrift.protocol.TType.I32, (short) 8);

	private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"token", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"username", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"phone", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"email", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField LOC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"locNum", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"password", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField PASSWORD_SECURE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"passwordSecure", org.apache.thrift.protocol.TType.STRING, (short) 15);

	private static final org.apache.thrift.protocol.TField CAPTCHA_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"captchaTag", org.apache.thrift.protocol.TType.STRING, (short) 16);

	private static final org.apache.thrift.protocol.TField CAPTCHA_TXT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"captchaTxt", org.apache.thrift.protocol.TType.STRING, (short) 17);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgLoginStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgLoginTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String agent; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String device; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String level; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String ip; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String id; // optional

	public int exp; // optional

	public int cre; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String token; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String username; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String phone; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String email; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String locNum; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String password; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String passwordSecure; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String captchaTag; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String captchaTxt; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID((short) 1, "uid"), AGENT((short) 2, "agent"), DEVICE((short) 3, "device"), LEVEL((short) 4, "level"), IP(
				(short) 5, "ip"), ID((short) 6, "id"), EXP((short) 7, "exp"), CRE((short) 8, "cre"), TOKEN((short) 9,
						"token"), USERNAME((short) 10, "username"), PHONE((short) 11, "phone"), EMAIL((short) 12,
								"email"), LOC_NUM((short) 13, "locNum"), PASSWORD((short) 14,
										"password"), PASSWORD_SECURE((short) 15, "passwordSecure"), CAPTCHA_TAG(
												(short) 16, "captchaTag"), CAPTCHA_TXT((short) 17, "captchaTxt");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID
				return UID;
			case 2: // AGENT
				return AGENT;
			case 3: // DEVICE
				return DEVICE;
			case 4: // LEVEL
				return LEVEL;
			case 5: // IP
				return IP;
			case 6: // ID
				return ID;
			case 7: // EXP
				return EXP;
			case 8: // CRE
				return CRE;
			case 9: // TOKEN
				return TOKEN;
			case 10: // USERNAME
				return USERNAME;
			case 11: // PHONE
				return PHONE;
			case 12: // EMAIL
				return EMAIL;
			case 13: // LOC_NUM
				return LOC_NUM;
			case 14: // PASSWORD
				return PASSWORD;
			case 15: // PASSWORD_SECURE
				return PASSWORD_SECURE;
			case 16: // CAPTCHA_TAG
				return CAPTCHA_TAG;
			case 17: // CAPTCHA_TXT
				return CAPTCHA_TXT;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __EXP_ISSET_ID = 0;

	private static final int __CRE_ISSET_ID = 1;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.AGENT, _Fields.DEVICE, _Fields.LEVEL, _Fields.IP, _Fields.ID,
			_Fields.EXP, _Fields.CRE, _Fields.TOKEN, _Fields.USERNAME, _Fields.PHONE, _Fields.EMAIL, _Fields.LOC_NUM,
			_Fields.PASSWORD, _Fields.PASSWORD_SECURE, _Fields.CAPTCHA_TAG, _Fields.CAPTCHA_TXT };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AGENT,
				new org.apache.thrift.meta_data.FieldMetaData("agent", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DEVICE,
				new org.apache.thrift.meta_data.FieldMetaData("device",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LEVEL,
				new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IP,
				new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ID,
				new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EXP,
				new org.apache.thrift.meta_data.FieldMetaData("exp", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CRE,
				new org.apache.thrift.meta_data.FieldMetaData("cre", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.TOKEN,
				new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.USERNAME,
				new org.apache.thrift.meta_data.FieldMetaData("username",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PHONE,
				new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EMAIL,
				new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LOC_NUM,
				new org.apache.thrift.meta_data.FieldMetaData("locNum",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PASSWORD,
				new org.apache.thrift.meta_data.FieldMetaData("password",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PASSWORD_SECURE,
				new org.apache.thrift.meta_data.FieldMetaData("passwordSecure",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CAPTCHA_TAG,
				new org.apache.thrift.meta_data.FieldMetaData("captchaTag",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CAPTCHA_TXT,
				new org.apache.thrift.meta_data.FieldMetaData("captchaTxt",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgLogin.class, metaDataMap);
	}

	public ArgLogin() {
	}

	public ArgLogin(java.lang.String uid) {
		this();
		this.uid = uid;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgLogin(ArgLogin other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetAgent()) {
			this.agent = other.agent;
		}
		if (other.isSetDevice()) {
			this.device = other.device;
		}
		if (other.isSetLevel()) {
			this.level = other.level;
		}
		if (other.isSetIp()) {
			this.ip = other.ip;
		}
		if (other.isSetId()) {
			this.id = other.id;
		}
		this.exp = other.exp;
		this.cre = other.cre;
		if (other.isSetToken()) {
			this.token = other.token;
		}
		if (other.isSetUsername()) {
			this.username = other.username;
		}
		if (other.isSetPhone()) {
			this.phone = other.phone;
		}
		if (other.isSetEmail()) {
			this.email = other.email;
		}
		if (other.isSetLocNum()) {
			this.locNum = other.locNum;
		}
		if (other.isSetPassword()) {
			this.password = other.password;
		}
		if (other.isSetPasswordSecure()) {
			this.passwordSecure = other.passwordSecure;
		}
		if (other.isSetCaptchaTag()) {
			this.captchaTag = other.captchaTag;
		}
		if (other.isSetCaptchaTxt()) {
			this.captchaTxt = other.captchaTxt;
		}
	}

	public ArgLogin deepCopy() {
		return new ArgLogin(this);
	}

	@Override
	public void clear() {
		this.uid = null;
		this.agent = null;
		this.device = null;
		this.level = null;
		this.ip = null;
		this.id = null;
		setExpIsSet(false);
		this.exp = 0;
		setCreIsSet(false);
		this.cre = 0;
		this.token = null;
		this.username = null;
		this.phone = null;
		this.email = null;
		this.locNum = null;
		this.password = null;
		this.passwordSecure = null;
		this.captchaTag = null;
		this.captchaTxt = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public ArgLogin setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAgent() {
		return this.agent;
	}

	public ArgLogin setAgent(@org.apache.thrift.annotation.Nullable java.lang.String agent) {
		this.agent = agent;
		return this;
	}

	public void unsetAgent() {
		this.agent = null;
	}

	/**
	 * Returns true if field agent is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAgent() {
		return this.agent != null;
	}

	public void setAgentIsSet(boolean value) {
		if (!value) {
			this.agent = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDevice() {
		return this.device;
	}

	public ArgLogin setDevice(@org.apache.thrift.annotation.Nullable java.lang.String device) {
		this.device = device;
		return this;
	}

	public void unsetDevice() {
		this.device = null;
	}

	/**
	 * Returns true if field device is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetDevice() {
		return this.device != null;
	}

	public void setDeviceIsSet(boolean value) {
		if (!value) {
			this.device = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLevel() {
		return this.level;
	}

	public ArgLogin setLevel(@org.apache.thrift.annotation.Nullable java.lang.String level) {
		this.level = level;
		return this;
	}

	public void unsetLevel() {
		this.level = null;
	}

	/**
	 * Returns true if field level is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLevel() {
		return this.level != null;
	}

	public void setLevelIsSet(boolean value) {
		if (!value) {
			this.level = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIp() {
		return this.ip;
	}

	public ArgLogin setIp(@org.apache.thrift.annotation.Nullable java.lang.String ip) {
		this.ip = ip;
		return this;
	}

	public void unsetIp() {
		this.ip = null;
	}

	/** Returns true if field ip is set (has been assigned a value) and false otherwise */
	public boolean isSetIp() {
		return this.ip != null;
	}

	public void setIpIsSet(boolean value) {
		if (!value) {
			this.ip = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getId() {
		return this.id;
	}

	public ArgLogin setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
		this.id = id;
		return this;
	}

	public void unsetId() {
		this.id = null;
	}

	/** Returns true if field id is set (has been assigned a value) and false otherwise */
	public boolean isSetId() {
		return this.id != null;
	}

	public void setIdIsSet(boolean value) {
		if (!value) {
			this.id = null;
		}
	}

	public int getExp() {
		return this.exp;
	}

	public ArgLogin setExp(int exp) {
		this.exp = exp;
		setExpIsSet(true);
		return this;
	}

	public void unsetExp() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXP_ISSET_ID);
	}

	/**
	 * Returns true if field exp is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetExp() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXP_ISSET_ID);
	}

	public void setExpIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXP_ISSET_ID, value);
	}

	public int getCre() {
		return this.cre;
	}

	public ArgLogin setCre(int cre) {
		this.cre = cre;
		setCreIsSet(true);
		return this;
	}

	public void unsetCre() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CRE_ISSET_ID);
	}

	/**
	 * Returns true if field cre is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCre() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CRE_ISSET_ID);
	}

	public void setCreIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CRE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getToken() {
		return this.token;
	}

	public ArgLogin setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
		this.token = token;
		return this;
	}

	public void unsetToken() {
		this.token = null;
	}

	/**
	 * Returns true if field token is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetToken() {
		return this.token != null;
	}

	public void setTokenIsSet(boolean value) {
		if (!value) {
			this.token = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUsername() {
		return this.username;
	}

	public ArgLogin setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
		this.username = username;
		return this;
	}

	public void unsetUsername() {
		this.username = null;
	}

	/**
	 * Returns true if field username is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUsername() {
		return this.username != null;
	}

	public void setUsernameIsSet(boolean value) {
		if (!value) {
			this.username = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPhone() {
		return this.phone;
	}

	public ArgLogin setPhone(@org.apache.thrift.annotation.Nullable java.lang.String phone) {
		this.phone = phone;
		return this;
	}

	public void unsetPhone() {
		this.phone = null;
	}

	/**
	 * Returns true if field phone is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPhone() {
		return this.phone != null;
	}

	public void setPhoneIsSet(boolean value) {
		if (!value) {
			this.phone = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getEmail() {
		return this.email;
	}

	public ArgLogin setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
		this.email = email;
		return this;
	}

	public void unsetEmail() {
		this.email = null;
	}

	/**
	 * Returns true if field email is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetEmail() {
		return this.email != null;
	}

	public void setEmailIsSet(boolean value) {
		if (!value) {
			this.email = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLocNum() {
		return this.locNum;
	}

	public ArgLogin setLocNum(@org.apache.thrift.annotation.Nullable java.lang.String locNum) {
		this.locNum = locNum;
		return this;
	}

	public void unsetLocNum() {
		this.locNum = null;
	}

	/**
	 * Returns true if field locNum is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLocNum() {
		return this.locNum != null;
	}

	public void setLocNumIsSet(boolean value) {
		if (!value) {
			this.locNum = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPassword() {
		return this.password;
	}

	public ArgLogin setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
		this.password = password;
		return this;
	}

	public void unsetPassword() {
		this.password = null;
	}

	/**
	 * Returns true if field password is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPassword() {
		return this.password != null;
	}

	public void setPasswordIsSet(boolean value) {
		if (!value) {
			this.password = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPasswordSecure() {
		return this.passwordSecure;
	}

	public ArgLogin setPasswordSecure(@org.apache.thrift.annotation.Nullable java.lang.String passwordSecure) {
		this.passwordSecure = passwordSecure;
		return this;
	}

	public void unsetPasswordSecure() {
		this.passwordSecure = null;
	}

	/**
	 * Returns true if field passwordSecure is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPasswordSecure() {
		return this.passwordSecure != null;
	}

	public void setPasswordSecureIsSet(boolean value) {
		if (!value) {
			this.passwordSecure = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCaptchaTag() {
		return this.captchaTag;
	}

	public ArgLogin setCaptchaTag(@org.apache.thrift.annotation.Nullable java.lang.String captchaTag) {
		this.captchaTag = captchaTag;
		return this;
	}

	public void unsetCaptchaTag() {
		this.captchaTag = null;
	}

	/**
	 * Returns true if field captchaTag is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCaptchaTag() {
		return this.captchaTag != null;
	}

	public void setCaptchaTagIsSet(boolean value) {
		if (!value) {
			this.captchaTag = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCaptchaTxt() {
		return this.captchaTxt;
	}

	public ArgLogin setCaptchaTxt(@org.apache.thrift.annotation.Nullable java.lang.String captchaTxt) {
		this.captchaTxt = captchaTxt;
		return this;
	}

	public void unsetCaptchaTxt() {
		this.captchaTxt = null;
	}

	/**
	 * Returns true if field captchaTxt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCaptchaTxt() {
		return this.captchaTxt != null;
	}

	public void setCaptchaTxtIsSet(boolean value) {
		if (!value) {
			this.captchaTxt = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case AGENT:
			if (value == null) {
				unsetAgent();
			}
			else {
				setAgent((java.lang.String) value);
			}
			break;

		case DEVICE:
			if (value == null) {
				unsetDevice();
			}
			else {
				setDevice((java.lang.String) value);
			}
			break;

		case LEVEL:
			if (value == null) {
				unsetLevel();
			}
			else {
				setLevel((java.lang.String) value);
			}
			break;

		case IP:
			if (value == null) {
				unsetIp();
			}
			else {
				setIp((java.lang.String) value);
			}
			break;

		case ID:
			if (value == null) {
				unsetId();
			}
			else {
				setId((java.lang.String) value);
			}
			break;

		case EXP:
			if (value == null) {
				unsetExp();
			}
			else {
				setExp((java.lang.Integer) value);
			}
			break;

		case CRE:
			if (value == null) {
				unsetCre();
			}
			else {
				setCre((java.lang.Integer) value);
			}
			break;

		case TOKEN:
			if (value == null) {
				unsetToken();
			}
			else {
				setToken((java.lang.String) value);
			}
			break;

		case USERNAME:
			if (value == null) {
				unsetUsername();
			}
			else {
				setUsername((java.lang.String) value);
			}
			break;

		case PHONE:
			if (value == null) {
				unsetPhone();
			}
			else {
				setPhone((java.lang.String) value);
			}
			break;

		case EMAIL:
			if (value == null) {
				unsetEmail();
			}
			else {
				setEmail((java.lang.String) value);
			}
			break;

		case LOC_NUM:
			if (value == null) {
				unsetLocNum();
			}
			else {
				setLocNum((java.lang.String) value);
			}
			break;

		case PASSWORD:
			if (value == null) {
				unsetPassword();
			}
			else {
				setPassword((java.lang.String) value);
			}
			break;

		case PASSWORD_SECURE:
			if (value == null) {
				unsetPasswordSecure();
			}
			else {
				setPasswordSecure((java.lang.String) value);
			}
			break;

		case CAPTCHA_TAG:
			if (value == null) {
				unsetCaptchaTag();
			}
			else {
				setCaptchaTag((java.lang.String) value);
			}
			break;

		case CAPTCHA_TXT:
			if (value == null) {
				unsetCaptchaTxt();
			}
			else {
				setCaptchaTxt((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID:
			return getUid();

		case AGENT:
			return getAgent();

		case DEVICE:
			return getDevice();

		case LEVEL:
			return getLevel();

		case IP:
			return getIp();

		case ID:
			return getId();

		case EXP:
			return getExp();

		case CRE:
			return getCre();

		case TOKEN:
			return getToken();

		case USERNAME:
			return getUsername();

		case PHONE:
			return getPhone();

		case EMAIL:
			return getEmail();

		case LOC_NUM:
			return getLocNum();

		case PASSWORD:
			return getPassword();

		case PASSWORD_SECURE:
			return getPasswordSecure();

		case CAPTCHA_TAG:
			return getCaptchaTag();

		case CAPTCHA_TXT:
			return getCaptchaTxt();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID:
			return isSetUid();
		case AGENT:
			return isSetAgent();
		case DEVICE:
			return isSetDevice();
		case LEVEL:
			return isSetLevel();
		case IP:
			return isSetIp();
		case ID:
			return isSetId();
		case EXP:
			return isSetExp();
		case CRE:
			return isSetCre();
		case TOKEN:
			return isSetToken();
		case USERNAME:
			return isSetUsername();
		case PHONE:
			return isSetPhone();
		case EMAIL:
			return isSetEmail();
		case LOC_NUM:
			return isSetLocNum();
		case PASSWORD:
			return isSetPassword();
		case PASSWORD_SECURE:
			return isSetPasswordSecure();
		case CAPTCHA_TAG:
			return isSetCaptchaTag();
		case CAPTCHA_TXT:
			return isSetCaptchaTxt();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgLogin)
			return this.equals((ArgLogin) that);
		return false;
	}

	public boolean equals(ArgLogin that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_agent = true && this.isSetAgent();
		boolean that_present_agent = true && that.isSetAgent();
		if (this_present_agent || that_present_agent) {
			if (!(this_present_agent && that_present_agent))
				return false;
			if (!this.agent.equals(that.agent))
				return false;
		}

		boolean this_present_device = true && this.isSetDevice();
		boolean that_present_device = true && that.isSetDevice();
		if (this_present_device || that_present_device) {
			if (!(this_present_device && that_present_device))
				return false;
			if (!this.device.equals(that.device))
				return false;
		}

		boolean this_present_level = true && this.isSetLevel();
		boolean that_present_level = true && that.isSetLevel();
		if (this_present_level || that_present_level) {
			if (!(this_present_level && that_present_level))
				return false;
			if (!this.level.equals(that.level))
				return false;
		}

		boolean this_present_ip = true && this.isSetIp();
		boolean that_present_ip = true && that.isSetIp();
		if (this_present_ip || that_present_ip) {
			if (!(this_present_ip && that_present_ip))
				return false;
			if (!this.ip.equals(that.ip))
				return false;
		}

		boolean this_present_id = true && this.isSetId();
		boolean that_present_id = true && that.isSetId();
		if (this_present_id || that_present_id) {
			if (!(this_present_id && that_present_id))
				return false;
			if (!this.id.equals(that.id))
				return false;
		}

		boolean this_present_exp = true && this.isSetExp();
		boolean that_present_exp = true && that.isSetExp();
		if (this_present_exp || that_present_exp) {
			if (!(this_present_exp && that_present_exp))
				return false;
			if (this.exp != that.exp)
				return false;
		}

		boolean this_present_cre = true && this.isSetCre();
		boolean that_present_cre = true && that.isSetCre();
		if (this_present_cre || that_present_cre) {
			if (!(this_present_cre && that_present_cre))
				return false;
			if (this.cre != that.cre)
				return false;
		}

		boolean this_present_token = true && this.isSetToken();
		boolean that_present_token = true && that.isSetToken();
		if (this_present_token || that_present_token) {
			if (!(this_present_token && that_present_token))
				return false;
			if (!this.token.equals(that.token))
				return false;
		}

		boolean this_present_username = true && this.isSetUsername();
		boolean that_present_username = true && that.isSetUsername();
		if (this_present_username || that_present_username) {
			if (!(this_present_username && that_present_username))
				return false;
			if (!this.username.equals(that.username))
				return false;
		}

		boolean this_present_phone = true && this.isSetPhone();
		boolean that_present_phone = true && that.isSetPhone();
		if (this_present_phone || that_present_phone) {
			if (!(this_present_phone && that_present_phone))
				return false;
			if (!this.phone.equals(that.phone))
				return false;
		}

		boolean this_present_email = true && this.isSetEmail();
		boolean that_present_email = true && that.isSetEmail();
		if (this_present_email || that_present_email) {
			if (!(this_present_email && that_present_email))
				return false;
			if (!this.email.equals(that.email))
				return false;
		}

		boolean this_present_locNum = true && this.isSetLocNum();
		boolean that_present_locNum = true && that.isSetLocNum();
		if (this_present_locNum || that_present_locNum) {
			if (!(this_present_locNum && that_present_locNum))
				return false;
			if (!this.locNum.equals(that.locNum))
				return false;
		}

		boolean this_present_password = true && this.isSetPassword();
		boolean that_present_password = true && that.isSetPassword();
		if (this_present_password || that_present_password) {
			if (!(this_present_password && that_present_password))
				return false;
			if (!this.password.equals(that.password))
				return false;
		}

		boolean this_present_passwordSecure = true && this.isSetPasswordSecure();
		boolean that_present_passwordSecure = true && that.isSetPasswordSecure();
		if (this_present_passwordSecure || that_present_passwordSecure) {
			if (!(this_present_passwordSecure && that_present_passwordSecure))
				return false;
			if (!this.passwordSecure.equals(that.passwordSecure))
				return false;
		}

		boolean this_present_captchaTag = true && this.isSetCaptchaTag();
		boolean that_present_captchaTag = true && that.isSetCaptchaTag();
		if (this_present_captchaTag || that_present_captchaTag) {
			if (!(this_present_captchaTag && that_present_captchaTag))
				return false;
			if (!this.captchaTag.equals(that.captchaTag))
				return false;
		}

		boolean this_present_captchaTxt = true && this.isSetCaptchaTxt();
		boolean that_present_captchaTxt = true && that.isSetCaptchaTxt();
		if (this_present_captchaTxt || that_present_captchaTxt) {
			if (!(this_present_captchaTxt && that_present_captchaTxt))
				return false;
			if (!this.captchaTxt.equals(that.captchaTxt))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetAgent()) ? 131071 : 524287);
		if (isSetAgent())
			hashCode = hashCode * 8191 + agent.hashCode();

		hashCode = hashCode * 8191 + ((isSetDevice()) ? 131071 : 524287);
		if (isSetDevice())
			hashCode = hashCode * 8191 + device.hashCode();

		hashCode = hashCode * 8191 + ((isSetLevel()) ? 131071 : 524287);
		if (isSetLevel())
			hashCode = hashCode * 8191 + level.hashCode();

		hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
		if (isSetIp())
			hashCode = hashCode * 8191 + ip.hashCode();

		hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
		if (isSetId())
			hashCode = hashCode * 8191 + id.hashCode();

		hashCode = hashCode * 8191 + ((isSetExp()) ? 131071 : 524287);
		if (isSetExp())
			hashCode = hashCode * 8191 + exp;

		hashCode = hashCode * 8191 + ((isSetCre()) ? 131071 : 524287);
		if (isSetCre())
			hashCode = hashCode * 8191 + cre;

		hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
		if (isSetToken())
			hashCode = hashCode * 8191 + token.hashCode();

		hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
		if (isSetUsername())
			hashCode = hashCode * 8191 + username.hashCode();

		hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
		if (isSetPhone())
			hashCode = hashCode * 8191 + phone.hashCode();

		hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
		if (isSetEmail())
			hashCode = hashCode * 8191 + email.hashCode();

		hashCode = hashCode * 8191 + ((isSetLocNum()) ? 131071 : 524287);
		if (isSetLocNum())
			hashCode = hashCode * 8191 + locNum.hashCode();

		hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
		if (isSetPassword())
			hashCode = hashCode * 8191 + password.hashCode();

		hashCode = hashCode * 8191 + ((isSetPasswordSecure()) ? 131071 : 524287);
		if (isSetPasswordSecure())
			hashCode = hashCode * 8191 + passwordSecure.hashCode();

		hashCode = hashCode * 8191 + ((isSetCaptchaTag()) ? 131071 : 524287);
		if (isSetCaptchaTag())
			hashCode = hashCode * 8191 + captchaTag.hashCode();

		hashCode = hashCode * 8191 + ((isSetCaptchaTxt()) ? 131071 : 524287);
		if (isSetCaptchaTxt())
			hashCode = hashCode * 8191 + captchaTxt.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgLogin other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAgent()).compareTo(other.isSetAgent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAgent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agent, other.agent);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDevice()).compareTo(other.isSetDevice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDevice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, other.device);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLevel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExp()).compareTo(other.isSetExp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exp, other.exp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCre()).compareTo(other.isSetCre());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCre()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cre, other.cre);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetToken()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUsername()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPhone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEmail()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLocNum()).compareTo(other.isSetLocNum());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLocNum()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locNum, other.locNum);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPassword()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPasswordSecure()).compareTo(other.isSetPasswordSecure());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPasswordSecure()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passwordSecure, other.passwordSecure);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCaptchaTag()).compareTo(other.isSetCaptchaTag());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCaptchaTag()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.captchaTag, other.captchaTag);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCaptchaTxt()).compareTo(other.isSetCaptchaTxt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCaptchaTxt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.captchaTxt, other.captchaTxt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgLogin(");
		boolean first = true;

		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (isSetAgent()) {
			if (!first)
				sb.append(", ");
			sb.append("agent:");
			if (this.agent == null) {
				sb.append("null");
			}
			else {
				sb.append(this.agent);
			}
			first = false;
		}
		if (isSetDevice()) {
			if (!first)
				sb.append(", ");
			sb.append("device:");
			if (this.device == null) {
				sb.append("null");
			}
			else {
				sb.append(this.device);
			}
			first = false;
		}
		if (isSetLevel()) {
			if (!first)
				sb.append(", ");
			sb.append("level:");
			if (this.level == null) {
				sb.append("null");
			}
			else {
				sb.append(this.level);
			}
			first = false;
		}
		if (isSetIp()) {
			if (!first)
				sb.append(", ");
			sb.append("ip:");
			if (this.ip == null) {
				sb.append("null");
			}
			else {
				sb.append(this.ip);
			}
			first = false;
		}
		if (isSetId()) {
			if (!first)
				sb.append(", ");
			sb.append("id:");
			if (this.id == null) {
				sb.append("null");
			}
			else {
				sb.append(this.id);
			}
			first = false;
		}
		if (isSetExp()) {
			if (!first)
				sb.append(", ");
			sb.append("exp:");
			sb.append(this.exp);
			first = false;
		}
		if (isSetCre()) {
			if (!first)
				sb.append(", ");
			sb.append("cre:");
			sb.append(this.cre);
			first = false;
		}
		if (isSetToken()) {
			if (!first)
				sb.append(", ");
			sb.append("token:");
			if (this.token == null) {
				sb.append("null");
			}
			else {
				sb.append(this.token);
			}
			first = false;
		}
		if (isSetUsername()) {
			if (!first)
				sb.append(", ");
			sb.append("username:");
			if (this.username == null) {
				sb.append("null");
			}
			else {
				sb.append(this.username);
			}
			first = false;
		}
		if (isSetPhone()) {
			if (!first)
				sb.append(", ");
			sb.append("phone:");
			if (this.phone == null) {
				sb.append("null");
			}
			else {
				sb.append(this.phone);
			}
			first = false;
		}
		if (isSetEmail()) {
			if (!first)
				sb.append(", ");
			sb.append("email:");
			if (this.email == null) {
				sb.append("null");
			}
			else {
				sb.append(this.email);
			}
			first = false;
		}
		if (isSetLocNum()) {
			if (!first)
				sb.append(", ");
			sb.append("locNum:");
			if (this.locNum == null) {
				sb.append("null");
			}
			else {
				sb.append(this.locNum);
			}
			first = false;
		}
		if (isSetPassword()) {
			if (!first)
				sb.append(", ");
			sb.append("password:");
			if (this.password == null) {
				sb.append("null");
			}
			else {
				sb.append(this.password);
			}
			first = false;
		}
		if (isSetPasswordSecure()) {
			if (!first)
				sb.append(", ");
			sb.append("passwordSecure:");
			if (this.passwordSecure == null) {
				sb.append("null");
			}
			else {
				sb.append(this.passwordSecure);
			}
			first = false;
		}
		if (isSetCaptchaTag()) {
			if (!first)
				sb.append(", ");
			sb.append("captchaTag:");
			if (this.captchaTag == null) {
				sb.append("null");
			}
			else {
				sb.append(this.captchaTag);
			}
			first = false;
		}
		if (isSetCaptchaTxt()) {
			if (!first)
				sb.append(", ");
			sb.append("captchaTxt:");
			if (this.captchaTxt == null) {
				sb.append("null");
			}
			else {
				sb.append(this.captchaTxt);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgLoginStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgLoginStandardScheme getScheme() {
			return new ArgLoginStandardScheme();
		}

	}

	private static class ArgLoginStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgLogin> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgLogin struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // AGENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.agent = iprot.readString();
						struct.setAgentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // DEVICE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.device = iprot.readString();
						struct.setDeviceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // LEVEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.level = iprot.readString();
						struct.setLevelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // IP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ip = iprot.readString();
						struct.setIpIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.id = iprot.readString();
						struct.setIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // EXP
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.exp = iprot.readI32();
						struct.setExpIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // CRE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.cre = iprot.readI32();
						struct.setCreIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // TOKEN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.token = iprot.readString();
						struct.setTokenIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // USERNAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.username = iprot.readString();
						struct.setUsernameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // PHONE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.phone = iprot.readString();
						struct.setPhoneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // EMAIL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.email = iprot.readString();
						struct.setEmailIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // LOC_NUM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.locNum = iprot.readString();
						struct.setLocNumIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // PASSWORD
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.password = iprot.readString();
						struct.setPasswordIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // PASSWORD_SECURE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.passwordSecure = iprot.readString();
						struct.setPasswordSecureIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // CAPTCHA_TAG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.captchaTag = iprot.readString();
						struct.setCaptchaTagIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // CAPTCHA_TXT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.captchaTxt = iprot.readString();
						struct.setCaptchaTxtIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgLogin struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.agent != null) {
				if (struct.isSetAgent()) {
					oprot.writeFieldBegin(AGENT_FIELD_DESC);
					oprot.writeString(struct.agent);
					oprot.writeFieldEnd();
				}
			}
			if (struct.device != null) {
				if (struct.isSetDevice()) {
					oprot.writeFieldBegin(DEVICE_FIELD_DESC);
					oprot.writeString(struct.device);
					oprot.writeFieldEnd();
				}
			}
			if (struct.level != null) {
				if (struct.isSetLevel()) {
					oprot.writeFieldBegin(LEVEL_FIELD_DESC);
					oprot.writeString(struct.level);
					oprot.writeFieldEnd();
				}
			}
			if (struct.ip != null) {
				if (struct.isSetIp()) {
					oprot.writeFieldBegin(IP_FIELD_DESC);
					oprot.writeString(struct.ip);
					oprot.writeFieldEnd();
				}
			}
			if (struct.id != null) {
				if (struct.isSetId()) {
					oprot.writeFieldBegin(ID_FIELD_DESC);
					oprot.writeString(struct.id);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetExp()) {
				oprot.writeFieldBegin(EXP_FIELD_DESC);
				oprot.writeI32(struct.exp);
				oprot.writeFieldEnd();
			}
			if (struct.isSetCre()) {
				oprot.writeFieldBegin(CRE_FIELD_DESC);
				oprot.writeI32(struct.cre);
				oprot.writeFieldEnd();
			}
			if (struct.token != null) {
				if (struct.isSetToken()) {
					oprot.writeFieldBegin(TOKEN_FIELD_DESC);
					oprot.writeString(struct.token);
					oprot.writeFieldEnd();
				}
			}
			if (struct.username != null) {
				if (struct.isSetUsername()) {
					oprot.writeFieldBegin(USERNAME_FIELD_DESC);
					oprot.writeString(struct.username);
					oprot.writeFieldEnd();
				}
			}
			if (struct.phone != null) {
				if (struct.isSetPhone()) {
					oprot.writeFieldBegin(PHONE_FIELD_DESC);
					oprot.writeString(struct.phone);
					oprot.writeFieldEnd();
				}
			}
			if (struct.email != null) {
				if (struct.isSetEmail()) {
					oprot.writeFieldBegin(EMAIL_FIELD_DESC);
					oprot.writeString(struct.email);
					oprot.writeFieldEnd();
				}
			}
			if (struct.locNum != null) {
				if (struct.isSetLocNum()) {
					oprot.writeFieldBegin(LOC_NUM_FIELD_DESC);
					oprot.writeString(struct.locNum);
					oprot.writeFieldEnd();
				}
			}
			if (struct.password != null) {
				if (struct.isSetPassword()) {
					oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
					oprot.writeString(struct.password);
					oprot.writeFieldEnd();
				}
			}
			if (struct.passwordSecure != null) {
				if (struct.isSetPasswordSecure()) {
					oprot.writeFieldBegin(PASSWORD_SECURE_FIELD_DESC);
					oprot.writeString(struct.passwordSecure);
					oprot.writeFieldEnd();
				}
			}
			if (struct.captchaTag != null) {
				if (struct.isSetCaptchaTag()) {
					oprot.writeFieldBegin(CAPTCHA_TAG_FIELD_DESC);
					oprot.writeString(struct.captchaTag);
					oprot.writeFieldEnd();
				}
			}
			if (struct.captchaTxt != null) {
				if (struct.isSetCaptchaTxt()) {
					oprot.writeFieldBegin(CAPTCHA_TXT_FIELD_DESC);
					oprot.writeString(struct.captchaTxt);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgLoginTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgLoginTupleScheme getScheme() {
			return new ArgLoginTupleScheme();
		}

	}

	private static class ArgLoginTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgLogin> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgLogin struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUid()) {
				optionals.set(0);
			}
			if (struct.isSetAgent()) {
				optionals.set(1);
			}
			if (struct.isSetDevice()) {
				optionals.set(2);
			}
			if (struct.isSetLevel()) {
				optionals.set(3);
			}
			if (struct.isSetIp()) {
				optionals.set(4);
			}
			if (struct.isSetId()) {
				optionals.set(5);
			}
			if (struct.isSetExp()) {
				optionals.set(6);
			}
			if (struct.isSetCre()) {
				optionals.set(7);
			}
			if (struct.isSetToken()) {
				optionals.set(8);
			}
			if (struct.isSetUsername()) {
				optionals.set(9);
			}
			if (struct.isSetPhone()) {
				optionals.set(10);
			}
			if (struct.isSetEmail()) {
				optionals.set(11);
			}
			if (struct.isSetLocNum()) {
				optionals.set(12);
			}
			if (struct.isSetPassword()) {
				optionals.set(13);
			}
			if (struct.isSetPasswordSecure()) {
				optionals.set(14);
			}
			if (struct.isSetCaptchaTag()) {
				optionals.set(15);
			}
			if (struct.isSetCaptchaTxt()) {
				optionals.set(16);
			}
			oprot.writeBitSet(optionals, 17);
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetAgent()) {
				oprot.writeString(struct.agent);
			}
			if (struct.isSetDevice()) {
				oprot.writeString(struct.device);
			}
			if (struct.isSetLevel()) {
				oprot.writeString(struct.level);
			}
			if (struct.isSetIp()) {
				oprot.writeString(struct.ip);
			}
			if (struct.isSetId()) {
				oprot.writeString(struct.id);
			}
			if (struct.isSetExp()) {
				oprot.writeI32(struct.exp);
			}
			if (struct.isSetCre()) {
				oprot.writeI32(struct.cre);
			}
			if (struct.isSetToken()) {
				oprot.writeString(struct.token);
			}
			if (struct.isSetUsername()) {
				oprot.writeString(struct.username);
			}
			if (struct.isSetPhone()) {
				oprot.writeString(struct.phone);
			}
			if (struct.isSetEmail()) {
				oprot.writeString(struct.email);
			}
			if (struct.isSetLocNum()) {
				oprot.writeString(struct.locNum);
			}
			if (struct.isSetPassword()) {
				oprot.writeString(struct.password);
			}
			if (struct.isSetPasswordSecure()) {
				oprot.writeString(struct.passwordSecure);
			}
			if (struct.isSetCaptchaTag()) {
				oprot.writeString(struct.captchaTag);
			}
			if (struct.isSetCaptchaTxt()) {
				oprot.writeString(struct.captchaTxt);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgLogin struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(17);
			if (incoming.get(0)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.agent = iprot.readString();
				struct.setAgentIsSet(true);
			}
			if (incoming.get(2)) {
				struct.device = iprot.readString();
				struct.setDeviceIsSet(true);
			}
			if (incoming.get(3)) {
				struct.level = iprot.readString();
				struct.setLevelIsSet(true);
			}
			if (incoming.get(4)) {
				struct.ip = iprot.readString();
				struct.setIpIsSet(true);
			}
			if (incoming.get(5)) {
				struct.id = iprot.readString();
				struct.setIdIsSet(true);
			}
			if (incoming.get(6)) {
				struct.exp = iprot.readI32();
				struct.setExpIsSet(true);
			}
			if (incoming.get(7)) {
				struct.cre = iprot.readI32();
				struct.setCreIsSet(true);
			}
			if (incoming.get(8)) {
				struct.token = iprot.readString();
				struct.setTokenIsSet(true);
			}
			if (incoming.get(9)) {
				struct.username = iprot.readString();
				struct.setUsernameIsSet(true);
			}
			if (incoming.get(10)) {
				struct.phone = iprot.readString();
				struct.setPhoneIsSet(true);
			}
			if (incoming.get(11)) {
				struct.email = iprot.readString();
				struct.setEmailIsSet(true);
			}
			if (incoming.get(12)) {
				struct.locNum = iprot.readString();
				struct.setLocNumIsSet(true);
			}
			if (incoming.get(13)) {
				struct.password = iprot.readString();
				struct.setPasswordIsSet(true);
			}
			if (incoming.get(14)) {
				struct.passwordSecure = iprot.readString();
				struct.setPasswordSecureIsSet(true);
			}
			if (incoming.get(15)) {
				struct.captchaTag = iprot.readString();
				struct.setCaptchaTagIsSet(true);
			}
			if (incoming.get(16)) {
				struct.captchaTxt = iprot.readString();
				struct.setCaptchaTxtIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
