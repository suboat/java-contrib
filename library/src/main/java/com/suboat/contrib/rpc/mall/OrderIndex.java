/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-05-11")
public class OrderIndex implements org.apache.thrift.TBase<OrderIndex, OrderIndex._Fields>, java.io.Serializable,
		Cloneable, Comparable<OrderIndex> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"OrderIndex");

	private static final org.apache.thrift.protocol.TField XID_FIELD_DESC = new org.apache.thrift.protocol.TField("xid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField UID_REL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidRel", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"parent", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isDelete", org.apache.thrift.protocol.TType.BOOL, (short) 9);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 10);

	private static final org.apache.thrift.protocol.TField SERIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"serialId", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OrderIndexStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OrderIndexTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String xid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uidRel; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String parent; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public boolean isDelete; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String serialId; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		XID((short) 1, "xid"), UID((short) 2, "uid"), UID_REL((short) 3, "uidRel"), SID((short) 4, "sid"), PARENT(
				(short) 5, "parent"), CATEGORY((short) 6, "category"), CREATE_TIME((short) 7,
						"createTime"), UPDATE_TIME((short) 8, "updateTime"), IS_DELETE((short) 9,
								"isDelete"), STATUS((short) 10, "status"), SERIAL_ID((short) 11, "serialId");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // XID
				return XID;
			case 2: // UID
				return UID;
			case 3: // UID_REL
				return UID_REL;
			case 4: // SID
				return SID;
			case 5: // PARENT
				return PARENT;
			case 6: // CATEGORY
				return CATEGORY;
			case 7: // CREATE_TIME
				return CREATE_TIME;
			case 8: // UPDATE_TIME
				return UPDATE_TIME;
			case 9: // IS_DELETE
				return IS_DELETE;
			case 10: // STATUS
				return STATUS;
			case 11: // SERIAL_ID
				return SERIAL_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISDELETE_ISSET_ID = 0;

	private static final int __STATUS_ISSET_ID = 1;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.XID,
				new org.apache.thrift.meta_data.FieldMetaData("xid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID_REL,
				new org.apache.thrift.meta_data.FieldMetaData("uidRel", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PARENT,
				new org.apache.thrift.meta_data.FieldMetaData("parent", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_DELETE,
				new org.apache.thrift.meta_data.FieldMetaData("isDelete",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SERIAL_ID,
				new org.apache.thrift.meta_data.FieldMetaData("serialId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderIndex.class, metaDataMap);
	}

	public OrderIndex() {
	}

	public OrderIndex(java.lang.String xid, java.lang.String uid, java.lang.String uidRel, java.lang.String sid,
			java.lang.String parent, java.lang.String category, java.lang.String createTime,
			java.lang.String updateTime, boolean isDelete, int status, java.lang.String serialId) {
		this();
		this.xid = xid;
		this.uid = uid;
		this.uidRel = uidRel;
		this.sid = sid;
		this.parent = parent;
		this.category = category;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.isDelete = isDelete;
		setIsDeleteIsSet(true);
		this.status = status;
		setStatusIsSet(true);
		this.serialId = serialId;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public OrderIndex(OrderIndex other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetXid()) {
			this.xid = other.xid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetUidRel()) {
			this.uidRel = other.uidRel;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetParent()) {
			this.parent = other.parent;
		}
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.isDelete = other.isDelete;
		this.status = other.status;
		if (other.isSetSerialId()) {
			this.serialId = other.serialId;
		}
	}

	public OrderIndex deepCopy() {
		return new OrderIndex(this);
	}

	@Override
	public void clear() {
		this.xid = null;
		this.uid = null;
		this.uidRel = null;
		this.sid = null;
		this.parent = null;
		this.category = null;
		this.createTime = null;
		this.updateTime = null;
		setIsDeleteIsSet(false);
		this.isDelete = false;
		setStatusIsSet(false);
		this.status = 0;
		this.serialId = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getXid() {
		return this.xid;
	}

	public OrderIndex setXid(@org.apache.thrift.annotation.Nullable java.lang.String xid) {
		this.xid = xid;
		return this;
	}

	public void unsetXid() {
		this.xid = null;
	}

	/**
	 * Returns true if field xid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetXid() {
		return this.xid != null;
	}

	public void setXidIsSet(boolean value) {
		if (!value) {
			this.xid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public OrderIndex setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidRel() {
		return this.uidRel;
	}

	public OrderIndex setUidRel(@org.apache.thrift.annotation.Nullable java.lang.String uidRel) {
		this.uidRel = uidRel;
		return this;
	}

	public void unsetUidRel() {
		this.uidRel = null;
	}

	/**
	 * Returns true if field uidRel is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUidRel() {
		return this.uidRel != null;
	}

	public void setUidRelIsSet(boolean value) {
		if (!value) {
			this.uidRel = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public OrderIndex setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getParent() {
		return this.parent;
	}

	public OrderIndex setParent(@org.apache.thrift.annotation.Nullable java.lang.String parent) {
		this.parent = parent;
		return this;
	}

	public void unsetParent() {
		this.parent = null;
	}

	/**
	 * Returns true if field parent is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetParent() {
		return this.parent != null;
	}

	public void setParentIsSet(boolean value) {
		if (!value) {
			this.parent = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public OrderIndex setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public OrderIndex setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public OrderIndex setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public boolean isIsDelete() {
		return this.isDelete;
	}

	public OrderIndex setIsDelete(boolean isDelete) {
		this.isDelete = isDelete;
		setIsDeleteIsSet(true);
		return this;
	}

	public void unsetIsDelete() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	/**
	 * Returns true if field isDelete is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsDelete() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	public void setIsDeleteIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public OrderIndex setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSerialId() {
		return this.serialId;
	}

	public OrderIndex setSerialId(@org.apache.thrift.annotation.Nullable java.lang.String serialId) {
		this.serialId = serialId;
		return this;
	}

	public void unsetSerialId() {
		this.serialId = null;
	}

	/**
	 * Returns true if field serialId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSerialId() {
		return this.serialId != null;
	}

	public void setSerialIdIsSet(boolean value) {
		if (!value) {
			this.serialId = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case XID:
			if (value == null) {
				unsetXid();
			}
			else {
				setXid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case UID_REL:
			if (value == null) {
				unsetUidRel();
			}
			else {
				setUidRel((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case PARENT:
			if (value == null) {
				unsetParent();
			}
			else {
				setParent((java.lang.String) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case IS_DELETE:
			if (value == null) {
				unsetIsDelete();
			}
			else {
				setIsDelete((java.lang.Boolean) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case SERIAL_ID:
			if (value == null) {
				unsetSerialId();
			}
			else {
				setSerialId((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case XID:
			return getXid();

		case UID:
			return getUid();

		case UID_REL:
			return getUidRel();

		case SID:
			return getSid();

		case PARENT:
			return getParent();

		case CATEGORY:
			return getCategory();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case IS_DELETE:
			return isIsDelete();

		case STATUS:
			return getStatus();

		case SERIAL_ID:
			return getSerialId();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case XID:
			return isSetXid();
		case UID:
			return isSetUid();
		case UID_REL:
			return isSetUidRel();
		case SID:
			return isSetSid();
		case PARENT:
			return isSetParent();
		case CATEGORY:
			return isSetCategory();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case IS_DELETE:
			return isSetIsDelete();
		case STATUS:
			return isSetStatus();
		case SERIAL_ID:
			return isSetSerialId();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof OrderIndex)
			return this.equals((OrderIndex) that);
		return false;
	}

	public boolean equals(OrderIndex that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_xid = true && this.isSetXid();
		boolean that_present_xid = true && that.isSetXid();
		if (this_present_xid || that_present_xid) {
			if (!(this_present_xid && that_present_xid))
				return false;
			if (!this.xid.equals(that.xid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_uidRel = true && this.isSetUidRel();
		boolean that_present_uidRel = true && that.isSetUidRel();
		if (this_present_uidRel || that_present_uidRel) {
			if (!(this_present_uidRel && that_present_uidRel))
				return false;
			if (!this.uidRel.equals(that.uidRel))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_parent = true && this.isSetParent();
		boolean that_present_parent = true && that.isSetParent();
		if (this_present_parent || that_present_parent) {
			if (!(this_present_parent && that_present_parent))
				return false;
			if (!this.parent.equals(that.parent))
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_isDelete = true;
		boolean that_present_isDelete = true;
		if (this_present_isDelete || that_present_isDelete) {
			if (!(this_present_isDelete && that_present_isDelete))
				return false;
			if (this.isDelete != that.isDelete)
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_serialId = true && this.isSetSerialId();
		boolean that_present_serialId = true && that.isSetSerialId();
		if (this_present_serialId || that_present_serialId) {
			if (!(this_present_serialId && that_present_serialId))
				return false;
			if (!this.serialId.equals(that.serialId))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetXid()) ? 131071 : 524287);
		if (isSetXid())
			hashCode = hashCode * 8191 + xid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUidRel()) ? 131071 : 524287);
		if (isSetUidRel())
			hashCode = hashCode * 8191 + uidRel.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetParent()) ? 131071 : 524287);
		if (isSetParent())
			hashCode = hashCode * 8191 + parent.hashCode();

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isDelete) ? 131071 : 524287);

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetSerialId()) ? 131071 : 524287);
		if (isSetSerialId())
			hashCode = hashCode * 8191 + serialId.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(OrderIndex other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetXid()).compareTo(other.isSetXid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetXid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xid, other.xid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidRel()).compareTo(other.isSetUidRel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidRel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidRel, other.uidRel);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetParent()).compareTo(other.isSetParent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetParent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent, other.parent);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsDelete()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSerialId()).compareTo(other.isSetSerialId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSerialId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialId, other.serialId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("OrderIndex(");
		boolean first = true;

		sb.append("xid:");
		if (this.xid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.xid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uidRel:");
		if (this.uidRel == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uidRel);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("parent:");
		if (this.parent == null) {
			sb.append("null");
		}
		else {
			sb.append(this.parent);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isDelete:");
		sb.append(this.isDelete);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("serialId:");
		if (this.serialId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.serialId);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class OrderIndexStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrderIndexStandardScheme getScheme() {
			return new OrderIndexStandardScheme();
		}

	}

	private static class OrderIndexStandardScheme extends org.apache.thrift.scheme.StandardScheme<OrderIndex> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, OrderIndex struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // XID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.xid = iprot.readString();
						struct.setXidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // UID_REL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidRel = iprot.readString();
						struct.setUidRelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // PARENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.parent = iprot.readString();
						struct.setParentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_DELETE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isDelete = iprot.readBool();
						struct.setIsDeleteIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // SERIAL_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.serialId = iprot.readString();
						struct.setSerialIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, OrderIndex struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.xid != null) {
				oprot.writeFieldBegin(XID_FIELD_DESC);
				oprot.writeString(struct.xid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.uidRel != null) {
				oprot.writeFieldBegin(UID_REL_FIELD_DESC);
				oprot.writeString(struct.uidRel);
				oprot.writeFieldEnd();
			}
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.parent != null) {
				oprot.writeFieldBegin(PARENT_FIELD_DESC);
				oprot.writeString(struct.parent);
				oprot.writeFieldEnd();
			}
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
			oprot.writeBool(struct.isDelete);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.serialId != null) {
				oprot.writeFieldBegin(SERIAL_ID_FIELD_DESC);
				oprot.writeString(struct.serialId);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class OrderIndexTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrderIndexTupleScheme getScheme() {
			return new OrderIndexTupleScheme();
		}

	}

	private static class OrderIndexTupleScheme extends org.apache.thrift.scheme.TupleScheme<OrderIndex> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, OrderIndex struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetXid()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetUidRel()) {
				optionals.set(2);
			}
			if (struct.isSetSid()) {
				optionals.set(3);
			}
			if (struct.isSetParent()) {
				optionals.set(4);
			}
			if (struct.isSetCategory()) {
				optionals.set(5);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(6);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(7);
			}
			if (struct.isSetIsDelete()) {
				optionals.set(8);
			}
			if (struct.isSetStatus()) {
				optionals.set(9);
			}
			if (struct.isSetSerialId()) {
				optionals.set(10);
			}
			oprot.writeBitSet(optionals, 11);
			if (struct.isSetXid()) {
				oprot.writeString(struct.xid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetUidRel()) {
				oprot.writeString(struct.uidRel);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetParent()) {
				oprot.writeString(struct.parent);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetIsDelete()) {
				oprot.writeBool(struct.isDelete);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetSerialId()) {
				oprot.writeString(struct.serialId);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, OrderIndex struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(11);
			if (incoming.get(0)) {
				struct.xid = iprot.readString();
				struct.setXidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.uidRel = iprot.readString();
				struct.setUidRelIsSet(true);
			}
			if (incoming.get(3)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(4)) {
				struct.parent = iprot.readString();
				struct.setParentIsSet(true);
			}
			if (incoming.get(5)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(6)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isDelete = iprot.readBool();
				struct.setIsDeleteIsSet(true);
			}
			if (incoming.get(9)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(10)) {
				struct.serialId = iprot.readString();
				struct.setSerialIdIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
