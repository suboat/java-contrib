/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class ArgUptOrder implements org.apache.thrift.TBase<ArgUptOrder, ArgUptOrder._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgUptOrder> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgUptOrder");

	private static final org.apache.thrift.protocol.TField OID_FIELD_DESC = new org.apache.thrift.protocol.TField("oid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField PAY_MAP_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMapThis", org.apache.thrift.protocol.TType.MAP, (short) 2);

	private static final org.apache.thrift.protocol.TField PAY_MAP_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMapAll", org.apache.thrift.protocol.TType.MAP, (short) 3);

	private static final org.apache.thrift.protocol.TField TRANS_FEE_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"transFeeThis", org.apache.thrift.protocol.TType.DOUBLE, (short) 4);

	private static final org.apache.thrift.protocol.TField TRANS_FEE_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"transFeeAll", org.apache.thrift.protocol.TType.DOUBLE, (short) 5);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 6);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgUptOrderStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgUptOrderTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String oid; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapThis; // optional

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapAll; // optional

	public double transFeeThis; // optional

	public double transFeeAll; // optional

	public int status; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		OID((short) 1, "oid"), PAY_MAP_THIS((short) 2, "payMapThis"), PAY_MAP_ALL((short) 3,
				"payMapAll"), TRANS_FEE_THIS((short) 4,
						"transFeeThis"), TRANS_FEE_ALL((short) 5, "transFeeAll"), STATUS((short) 6, "status");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // OID
				return OID;
			case 2: // PAY_MAP_THIS
				return PAY_MAP_THIS;
			case 3: // PAY_MAP_ALL
				return PAY_MAP_ALL;
			case 4: // TRANS_FEE_THIS
				return TRANS_FEE_THIS;
			case 5: // TRANS_FEE_ALL
				return TRANS_FEE_ALL;
			case 6: // STATUS
				return STATUS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __TRANSFEETHIS_ISSET_ID = 0;

	private static final int __TRANSFEEALL_ISSET_ID = 1;

	private static final int __STATUS_ISSET_ID = 2;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.PAY_MAP_THIS, _Fields.PAY_MAP_ALL, _Fields.TRANS_FEE_THIS,
			_Fields.TRANS_FEE_ALL, _Fields.STATUS };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.OID,
				new org.apache.thrift.meta_data.FieldMetaData("oid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PAY_MAP_THIS, new org.apache.thrift.meta_data.FieldMetaData("payMapThis",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.PAY_MAP_ALL, new org.apache.thrift.meta_data.FieldMetaData("payMapAll",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.TRANS_FEE_THIS,
				new org.apache.thrift.meta_data.FieldMetaData("transFeeThis",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.TRANS_FEE_ALL,
				new org.apache.thrift.meta_data.FieldMetaData("transFeeAll",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgUptOrder.class, metaDataMap);
	}

	public ArgUptOrder() {
	}

	public ArgUptOrder(java.lang.String oid) {
		this();
		this.oid = oid;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgUptOrder(ArgUptOrder other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetOid()) {
			this.oid = other.oid;
		}
		if (other.isSetPayMapThis()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__payMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.payMapThis);
			this.payMapThis = __this__payMapThis;
		}
		if (other.isSetPayMapAll()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__payMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.payMapAll);
			this.payMapAll = __this__payMapAll;
		}
		this.transFeeThis = other.transFeeThis;
		this.transFeeAll = other.transFeeAll;
		this.status = other.status;
	}

	public ArgUptOrder deepCopy() {
		return new ArgUptOrder(this);
	}

	@Override
	public void clear() {
		this.oid = null;
		this.payMapThis = null;
		this.payMapAll = null;
		setTransFeeThisIsSet(false);
		this.transFeeThis = 0.0;
		setTransFeeAllIsSet(false);
		this.transFeeAll = 0.0;
		setStatusIsSet(false);
		this.status = 0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getOid() {
		return this.oid;
	}

	public ArgUptOrder setOid(@org.apache.thrift.annotation.Nullable java.lang.String oid) {
		this.oid = oid;
		return this;
	}

	public void unsetOid() {
		this.oid = null;
	}

	/**
	 * Returns true if field oid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetOid() {
		return this.oid != null;
	}

	public void setOidIsSet(boolean value) {
		if (!value) {
			this.oid = null;
		}
	}

	public int getPayMapThisSize() {
		return (this.payMapThis == null) ? 0 : this.payMapThis.size();
	}

	public void putToPayMapThis(java.lang.String key, double val) {
		if (this.payMapThis == null) {
			this.payMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.payMapThis.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getPayMapThis() {
		return this.payMapThis;
	}

	public ArgUptOrder setPayMapThis(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapThis) {
		this.payMapThis = payMapThis;
		return this;
	}

	public void unsetPayMapThis() {
		this.payMapThis = null;
	}

	/**
	 * Returns true if field payMapThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayMapThis() {
		return this.payMapThis != null;
	}

	public void setPayMapThisIsSet(boolean value) {
		if (!value) {
			this.payMapThis = null;
		}
	}

	public int getPayMapAllSize() {
		return (this.payMapAll == null) ? 0 : this.payMapAll.size();
	}

	public void putToPayMapAll(java.lang.String key, double val) {
		if (this.payMapAll == null) {
			this.payMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.payMapAll.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getPayMapAll() {
		return this.payMapAll;
	}

	public ArgUptOrder setPayMapAll(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapAll) {
		this.payMapAll = payMapAll;
		return this;
	}

	public void unsetPayMapAll() {
		this.payMapAll = null;
	}

	/**
	 * Returns true if field payMapAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayMapAll() {
		return this.payMapAll != null;
	}

	public void setPayMapAllIsSet(boolean value) {
		if (!value) {
			this.payMapAll = null;
		}
	}

	public double getTransFeeThis() {
		return this.transFeeThis;
	}

	public ArgUptOrder setTransFeeThis(double transFeeThis) {
		this.transFeeThis = transFeeThis;
		setTransFeeThisIsSet(true);
		return this;
	}

	public void unsetTransFeeThis() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSFEETHIS_ISSET_ID);
	}

	/**
	 * Returns true if field transFeeThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTransFeeThis() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSFEETHIS_ISSET_ID);
	}

	public void setTransFeeThisIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSFEETHIS_ISSET_ID, value);
	}

	public double getTransFeeAll() {
		return this.transFeeAll;
	}

	public ArgUptOrder setTransFeeAll(double transFeeAll) {
		this.transFeeAll = transFeeAll;
		setTransFeeAllIsSet(true);
		return this;
	}

	public void unsetTransFeeAll() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSFEEALL_ISSET_ID);
	}

	/**
	 * Returns true if field transFeeAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTransFeeAll() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSFEEALL_ISSET_ID);
	}

	public void setTransFeeAllIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSFEEALL_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public ArgUptOrder setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case OID:
			if (value == null) {
				unsetOid();
			}
			else {
				setOid((java.lang.String) value);
			}
			break;

		case PAY_MAP_THIS:
			if (value == null) {
				unsetPayMapThis();
			}
			else {
				setPayMapThis((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case PAY_MAP_ALL:
			if (value == null) {
				unsetPayMapAll();
			}
			else {
				setPayMapAll((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case TRANS_FEE_THIS:
			if (value == null) {
				unsetTransFeeThis();
			}
			else {
				setTransFeeThis((java.lang.Double) value);
			}
			break;

		case TRANS_FEE_ALL:
			if (value == null) {
				unsetTransFeeAll();
			}
			else {
				setTransFeeAll((java.lang.Double) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case OID:
			return getOid();

		case PAY_MAP_THIS:
			return getPayMapThis();

		case PAY_MAP_ALL:
			return getPayMapAll();

		case TRANS_FEE_THIS:
			return getTransFeeThis();

		case TRANS_FEE_ALL:
			return getTransFeeAll();

		case STATUS:
			return getStatus();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case OID:
			return isSetOid();
		case PAY_MAP_THIS:
			return isSetPayMapThis();
		case PAY_MAP_ALL:
			return isSetPayMapAll();
		case TRANS_FEE_THIS:
			return isSetTransFeeThis();
		case TRANS_FEE_ALL:
			return isSetTransFeeAll();
		case STATUS:
			return isSetStatus();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgUptOrder)
			return this.equals((ArgUptOrder) that);
		return false;
	}

	public boolean equals(ArgUptOrder that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_oid = true && this.isSetOid();
		boolean that_present_oid = true && that.isSetOid();
		if (this_present_oid || that_present_oid) {
			if (!(this_present_oid && that_present_oid))
				return false;
			if (!this.oid.equals(that.oid))
				return false;
		}

		boolean this_present_payMapThis = true && this.isSetPayMapThis();
		boolean that_present_payMapThis = true && that.isSetPayMapThis();
		if (this_present_payMapThis || that_present_payMapThis) {
			if (!(this_present_payMapThis && that_present_payMapThis))
				return false;
			if (!this.payMapThis.equals(that.payMapThis))
				return false;
		}

		boolean this_present_payMapAll = true && this.isSetPayMapAll();
		boolean that_present_payMapAll = true && that.isSetPayMapAll();
		if (this_present_payMapAll || that_present_payMapAll) {
			if (!(this_present_payMapAll && that_present_payMapAll))
				return false;
			if (!this.payMapAll.equals(that.payMapAll))
				return false;
		}

		boolean this_present_transFeeThis = true && this.isSetTransFeeThis();
		boolean that_present_transFeeThis = true && that.isSetTransFeeThis();
		if (this_present_transFeeThis || that_present_transFeeThis) {
			if (!(this_present_transFeeThis && that_present_transFeeThis))
				return false;
			if (this.transFeeThis != that.transFeeThis)
				return false;
		}

		boolean this_present_transFeeAll = true && this.isSetTransFeeAll();
		boolean that_present_transFeeAll = true && that.isSetTransFeeAll();
		if (this_present_transFeeAll || that_present_transFeeAll) {
			if (!(this_present_transFeeAll && that_present_transFeeAll))
				return false;
			if (this.transFeeAll != that.transFeeAll)
				return false;
		}

		boolean this_present_status = true && this.isSetStatus();
		boolean that_present_status = true && that.isSetStatus();
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetOid()) ? 131071 : 524287);
		if (isSetOid())
			hashCode = hashCode * 8191 + oid.hashCode();

		hashCode = hashCode * 8191 + ((isSetPayMapThis()) ? 131071 : 524287);
		if (isSetPayMapThis())
			hashCode = hashCode * 8191 + payMapThis.hashCode();

		hashCode = hashCode * 8191 + ((isSetPayMapAll()) ? 131071 : 524287);
		if (isSetPayMapAll())
			hashCode = hashCode * 8191 + payMapAll.hashCode();

		hashCode = hashCode * 8191 + ((isSetTransFeeThis()) ? 131071 : 524287);
		if (isSetTransFeeThis())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transFeeThis);

		hashCode = hashCode * 8191 + ((isSetTransFeeAll()) ? 131071 : 524287);
		if (isSetTransFeeAll())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transFeeAll);

		hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
		if (isSetStatus())
			hashCode = hashCode * 8191 + status;

		return hashCode;
	}

	@Override
	public int compareTo(ArgUptOrder other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetOid()).compareTo(other.isSetOid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oid, other.oid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayMapThis()).compareTo(other.isSetPayMapThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMapThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMapThis, other.payMapThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayMapAll()).compareTo(other.isSetPayMapAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMapAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMapAll, other.payMapAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTransFeeThis()).compareTo(other.isSetTransFeeThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransFeeThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transFeeThis, other.transFeeThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTransFeeAll()).compareTo(other.isSetTransFeeAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransFeeAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transFeeAll, other.transFeeAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgUptOrder(");
		boolean first = true;

		sb.append("oid:");
		if (this.oid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.oid);
		}
		first = false;
		if (isSetPayMapThis()) {
			if (!first)
				sb.append(", ");
			sb.append("payMapThis:");
			if (this.payMapThis == null) {
				sb.append("null");
			}
			else {
				sb.append(this.payMapThis);
			}
			first = false;
		}
		if (isSetPayMapAll()) {
			if (!first)
				sb.append(", ");
			sb.append("payMapAll:");
			if (this.payMapAll == null) {
				sb.append("null");
			}
			else {
				sb.append(this.payMapAll);
			}
			first = false;
		}
		if (isSetTransFeeThis()) {
			if (!first)
				sb.append(", ");
			sb.append("transFeeThis:");
			sb.append(this.transFeeThis);
			first = false;
		}
		if (isSetTransFeeAll()) {
			if (!first)
				sb.append(", ");
			sb.append("transFeeAll:");
			sb.append(this.transFeeAll);
			first = false;
		}
		if (isSetStatus()) {
			if (!first)
				sb.append(", ");
			sb.append("status:");
			sb.append(this.status);
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgUptOrderStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgUptOrderStandardScheme getScheme() {
			return new ArgUptOrderStandardScheme();
		}

	}

	private static class ArgUptOrderStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgUptOrder> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgUptOrder struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // OID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.oid = iprot.readString();
						struct.setOidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // PAY_MAP_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map180 = iprot.readMapBegin();
							struct.payMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map180.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key181;
							double _val182;
							for (int _i183 = 0; _i183 < _map180.size; ++_i183) {
								_key181 = iprot.readString();
								_val182 = iprot.readDouble();
								struct.payMapThis.put(_key181, _val182);
							}
							iprot.readMapEnd();
						}
						struct.setPayMapThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // PAY_MAP_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map184 = iprot.readMapBegin();
							struct.payMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map184.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key185;
							double _val186;
							for (int _i187 = 0; _i187 < _map184.size; ++_i187) {
								_key185 = iprot.readString();
								_val186 = iprot.readDouble();
								struct.payMapAll.put(_key185, _val186);
							}
							iprot.readMapEnd();
						}
						struct.setPayMapAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // TRANS_FEE_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.transFeeThis = iprot.readDouble();
						struct.setTransFeeThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // TRANS_FEE_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.transFeeAll = iprot.readDouble();
						struct.setTransFeeAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgUptOrder struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.oid != null) {
				oprot.writeFieldBegin(OID_FIELD_DESC);
				oprot.writeString(struct.oid);
				oprot.writeFieldEnd();
			}
			if (struct.payMapThis != null) {
				if (struct.isSetPayMapThis()) {
					oprot.writeFieldBegin(PAY_MAP_THIS_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
								org.apache.thrift.protocol.TType.DOUBLE, struct.payMapThis.size()));
						for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter188 : struct.payMapThis
								.entrySet()) {
							oprot.writeString(_iter188.getKey());
							oprot.writeDouble(_iter188.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
			}
			if (struct.payMapAll != null) {
				if (struct.isSetPayMapAll()) {
					oprot.writeFieldBegin(PAY_MAP_ALL_FIELD_DESC);
					{
						oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
								org.apache.thrift.protocol.TType.DOUBLE, struct.payMapAll.size()));
						for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter189 : struct.payMapAll
								.entrySet()) {
							oprot.writeString(_iter189.getKey());
							oprot.writeDouble(_iter189.getValue());
						}
						oprot.writeMapEnd();
					}
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetTransFeeThis()) {
				oprot.writeFieldBegin(TRANS_FEE_THIS_FIELD_DESC);
				oprot.writeDouble(struct.transFeeThis);
				oprot.writeFieldEnd();
			}
			if (struct.isSetTransFeeAll()) {
				oprot.writeFieldBegin(TRANS_FEE_ALL_FIELD_DESC);
				oprot.writeDouble(struct.transFeeAll);
				oprot.writeFieldEnd();
			}
			if (struct.isSetStatus()) {
				oprot.writeFieldBegin(STATUS_FIELD_DESC);
				oprot.writeI32(struct.status);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgUptOrderTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgUptOrderTupleScheme getScheme() {
			return new ArgUptOrderTupleScheme();
		}

	}

	private static class ArgUptOrderTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgUptOrder> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgUptOrder struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetOid()) {
				optionals.set(0);
			}
			if (struct.isSetPayMapThis()) {
				optionals.set(1);
			}
			if (struct.isSetPayMapAll()) {
				optionals.set(2);
			}
			if (struct.isSetTransFeeThis()) {
				optionals.set(3);
			}
			if (struct.isSetTransFeeAll()) {
				optionals.set(4);
			}
			if (struct.isSetStatus()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetOid()) {
				oprot.writeString(struct.oid);
			}
			if (struct.isSetPayMapThis()) {
				{
					oprot.writeI32(struct.payMapThis.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter190 : struct.payMapThis
							.entrySet()) {
						oprot.writeString(_iter190.getKey());
						oprot.writeDouble(_iter190.getValue());
					}
				}
			}
			if (struct.isSetPayMapAll()) {
				{
					oprot.writeI32(struct.payMapAll.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter191 : struct.payMapAll
							.entrySet()) {
						oprot.writeString(_iter191.getKey());
						oprot.writeDouble(_iter191.getValue());
					}
				}
			}
			if (struct.isSetTransFeeThis()) {
				oprot.writeDouble(struct.transFeeThis);
			}
			if (struct.isSetTransFeeAll()) {
				oprot.writeDouble(struct.transFeeAll);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgUptOrder struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.oid = iprot.readString();
				struct.setOidIsSet(true);
			}
			if (incoming.get(1)) {
				{
					org.apache.thrift.protocol.TMap _map192 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.payMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map192.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key193;
					double _val194;
					for (int _i195 = 0; _i195 < _map192.size; ++_i195) {
						_key193 = iprot.readString();
						_val194 = iprot.readDouble();
						struct.payMapThis.put(_key193, _val194);
					}
				}
				struct.setPayMapThisIsSet(true);
			}
			if (incoming.get(2)) {
				{
					org.apache.thrift.protocol.TMap _map196 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.payMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map196.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key197;
					double _val198;
					for (int _i199 = 0; _i199 < _map196.size; ++_i199) {
						_key197 = iprot.readString();
						_val198 = iprot.readDouble();
						struct.payMapAll.put(_key197, _val198);
					}
				}
				struct.setPayMapAllIsSet(true);
			}
			if (incoming.get(3)) {
				struct.transFeeThis = iprot.readDouble();
				struct.setTransFeeThisIsSet(true);
			}
			if (incoming.get(4)) {
				struct.transFeeAll = iprot.readDouble();
				struct.setTransFeeAllIsSet(true);
			}
			if (incoming.get(5)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
