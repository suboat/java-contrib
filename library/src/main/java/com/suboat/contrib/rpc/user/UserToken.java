/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 用户登录凭据
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-10")
public class UserToken implements org.apache.thrift.TBase<UserToken, UserToken._Fields>, java.io.Serializable,
		Cloneable, Comparable<UserToken> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"UserToken");

	private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"token", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("exp",
			org.apache.thrift.protocol.TType.I32, (short) 2);

	private static final org.apache.thrift.protocol.TField CRE_FIELD_DESC = new org.apache.thrift.protocol.TField("cre",
			org.apache.thrift.protocol.TType.I32, (short) 3);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"level", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip",
			org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id",
			org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField PSW_FIELD_DESC = new org.apache.thrift.protocol.TField("psw",
			org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserTokenStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserTokenTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String token; // required

	public int exp; // required

	public int cre; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String level; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String ip; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String id; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String psw; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		TOKEN((short) 1, "token"), EXP((short) 2, "exp"), CRE((short) 3, "cre"), UID((short) 4, "uid"), LEVEL((short) 5,
				"level"), IP((short) 6, "ip"), ID((short) 7, "id"), PSW((short) 8, "psw");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // TOKEN
				return TOKEN;
			case 2: // EXP
				return EXP;
			case 3: // CRE
				return CRE;
			case 4: // UID
				return UID;
			case 5: // LEVEL
				return LEVEL;
			case 6: // IP
				return IP;
			case 7: // ID
				return ID;
			case 8: // PSW
				return PSW;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __EXP_ISSET_ID = 0;

	private static final int __CRE_ISSET_ID = 1;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.TOKEN,
				new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EXP,
				new org.apache.thrift.meta_data.FieldMetaData("exp", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CRE,
				new org.apache.thrift.meta_data.FieldMetaData("cre", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LEVEL,
				new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IP,
				new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ID,
				new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PSW,
				new org.apache.thrift.meta_data.FieldMetaData("psw", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserToken.class, metaDataMap);
	}

	public UserToken() {
	}

	public UserToken(java.lang.String token, int exp, int cre, java.lang.String uid, java.lang.String level,
			java.lang.String ip, java.lang.String id, java.lang.String psw) {
		this();
		this.token = token;
		this.exp = exp;
		setExpIsSet(true);
		this.cre = cre;
		setCreIsSet(true);
		this.uid = uid;
		this.level = level;
		this.ip = ip;
		this.id = id;
		this.psw = psw;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public UserToken(UserToken other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetToken()) {
			this.token = other.token;
		}
		this.exp = other.exp;
		this.cre = other.cre;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetLevel()) {
			this.level = other.level;
		}
		if (other.isSetIp()) {
			this.ip = other.ip;
		}
		if (other.isSetId()) {
			this.id = other.id;
		}
		if (other.isSetPsw()) {
			this.psw = other.psw;
		}
	}

	public UserToken deepCopy() {
		return new UserToken(this);
	}

	@Override
	public void clear() {
		this.token = null;
		setExpIsSet(false);
		this.exp = 0;
		setCreIsSet(false);
		this.cre = 0;
		this.uid = null;
		this.level = null;
		this.ip = null;
		this.id = null;
		this.psw = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getToken() {
		return this.token;
	}

	public UserToken setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
		this.token = token;
		return this;
	}

	public void unsetToken() {
		this.token = null;
	}

	/**
	 * Returns true if field token is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetToken() {
		return this.token != null;
	}

	public void setTokenIsSet(boolean value) {
		if (!value) {
			this.token = null;
		}
	}

	public int getExp() {
		return this.exp;
	}

	public UserToken setExp(int exp) {
		this.exp = exp;
		setExpIsSet(true);
		return this;
	}

	public void unsetExp() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXP_ISSET_ID);
	}

	/**
	 * Returns true if field exp is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetExp() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXP_ISSET_ID);
	}

	public void setExpIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXP_ISSET_ID, value);
	}

	public int getCre() {
		return this.cre;
	}

	public UserToken setCre(int cre) {
		this.cre = cre;
		setCreIsSet(true);
		return this;
	}

	public void unsetCre() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CRE_ISSET_ID);
	}

	/**
	 * Returns true if field cre is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCre() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CRE_ISSET_ID);
	}

	public void setCreIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CRE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public UserToken setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLevel() {
		return this.level;
	}

	public UserToken setLevel(@org.apache.thrift.annotation.Nullable java.lang.String level) {
		this.level = level;
		return this;
	}

	public void unsetLevel() {
		this.level = null;
	}

	/**
	 * Returns true if field level is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLevel() {
		return this.level != null;
	}

	public void setLevelIsSet(boolean value) {
		if (!value) {
			this.level = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIp() {
		return this.ip;
	}

	public UserToken setIp(@org.apache.thrift.annotation.Nullable java.lang.String ip) {
		this.ip = ip;
		return this;
	}

	public void unsetIp() {
		this.ip = null;
	}

	/** Returns true if field ip is set (has been assigned a value) and false otherwise */
	public boolean isSetIp() {
		return this.ip != null;
	}

	public void setIpIsSet(boolean value) {
		if (!value) {
			this.ip = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getId() {
		return this.id;
	}

	public UserToken setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
		this.id = id;
		return this;
	}

	public void unsetId() {
		this.id = null;
	}

	/** Returns true if field id is set (has been assigned a value) and false otherwise */
	public boolean isSetId() {
		return this.id != null;
	}

	public void setIdIsSet(boolean value) {
		if (!value) {
			this.id = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPsw() {
		return this.psw;
	}

	public UserToken setPsw(@org.apache.thrift.annotation.Nullable java.lang.String psw) {
		this.psw = psw;
		return this;
	}

	public void unsetPsw() {
		this.psw = null;
	}

	/**
	 * Returns true if field psw is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPsw() {
		return this.psw != null;
	}

	public void setPswIsSet(boolean value) {
		if (!value) {
			this.psw = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case TOKEN:
			if (value == null) {
				unsetToken();
			}
			else {
				setToken((java.lang.String) value);
			}
			break;

		case EXP:
			if (value == null) {
				unsetExp();
			}
			else {
				setExp((java.lang.Integer) value);
			}
			break;

		case CRE:
			if (value == null) {
				unsetCre();
			}
			else {
				setCre((java.lang.Integer) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case LEVEL:
			if (value == null) {
				unsetLevel();
			}
			else {
				setLevel((java.lang.String) value);
			}
			break;

		case IP:
			if (value == null) {
				unsetIp();
			}
			else {
				setIp((java.lang.String) value);
			}
			break;

		case ID:
			if (value == null) {
				unsetId();
			}
			else {
				setId((java.lang.String) value);
			}
			break;

		case PSW:
			if (value == null) {
				unsetPsw();
			}
			else {
				setPsw((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case TOKEN:
			return getToken();

		case EXP:
			return getExp();

		case CRE:
			return getCre();

		case UID:
			return getUid();

		case LEVEL:
			return getLevel();

		case IP:
			return getIp();

		case ID:
			return getId();

		case PSW:
			return getPsw();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case TOKEN:
			return isSetToken();
		case EXP:
			return isSetExp();
		case CRE:
			return isSetCre();
		case UID:
			return isSetUid();
		case LEVEL:
			return isSetLevel();
		case IP:
			return isSetIp();
		case ID:
			return isSetId();
		case PSW:
			return isSetPsw();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof UserToken)
			return this.equals((UserToken) that);
		return false;
	}

	public boolean equals(UserToken that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_token = true && this.isSetToken();
		boolean that_present_token = true && that.isSetToken();
		if (this_present_token || that_present_token) {
			if (!(this_present_token && that_present_token))
				return false;
			if (!this.token.equals(that.token))
				return false;
		}

		boolean this_present_exp = true;
		boolean that_present_exp = true;
		if (this_present_exp || that_present_exp) {
			if (!(this_present_exp && that_present_exp))
				return false;
			if (this.exp != that.exp)
				return false;
		}

		boolean this_present_cre = true;
		boolean that_present_cre = true;
		if (this_present_cre || that_present_cre) {
			if (!(this_present_cre && that_present_cre))
				return false;
			if (this.cre != that.cre)
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_level = true && this.isSetLevel();
		boolean that_present_level = true && that.isSetLevel();
		if (this_present_level || that_present_level) {
			if (!(this_present_level && that_present_level))
				return false;
			if (!this.level.equals(that.level))
				return false;
		}

		boolean this_present_ip = true && this.isSetIp();
		boolean that_present_ip = true && that.isSetIp();
		if (this_present_ip || that_present_ip) {
			if (!(this_present_ip && that_present_ip))
				return false;
			if (!this.ip.equals(that.ip))
				return false;
		}

		boolean this_present_id = true && this.isSetId();
		boolean that_present_id = true && that.isSetId();
		if (this_present_id || that_present_id) {
			if (!(this_present_id && that_present_id))
				return false;
			if (!this.id.equals(that.id))
				return false;
		}

		boolean this_present_psw = true && this.isSetPsw();
		boolean that_present_psw = true && that.isSetPsw();
		if (this_present_psw || that_present_psw) {
			if (!(this_present_psw && that_present_psw))
				return false;
			if (!this.psw.equals(that.psw))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
		if (isSetToken())
			hashCode = hashCode * 8191 + token.hashCode();

		hashCode = hashCode * 8191 + exp;

		hashCode = hashCode * 8191 + cre;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetLevel()) ? 131071 : 524287);
		if (isSetLevel())
			hashCode = hashCode * 8191 + level.hashCode();

		hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
		if (isSetIp())
			hashCode = hashCode * 8191 + ip.hashCode();

		hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
		if (isSetId())
			hashCode = hashCode * 8191 + id.hashCode();

		hashCode = hashCode * 8191 + ((isSetPsw()) ? 131071 : 524287);
		if (isSetPsw())
			hashCode = hashCode * 8191 + psw.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(UserToken other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetToken()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExp()).compareTo(other.isSetExp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exp, other.exp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCre()).compareTo(other.isSetCre());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCre()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cre, other.cre);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLevel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPsw()).compareTo(other.isSetPsw());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPsw()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psw, other.psw);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("UserToken(");
		boolean first = true;

		sb.append("token:");
		if (this.token == null) {
			sb.append("null");
		}
		else {
			sb.append(this.token);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("exp:");
		sb.append(this.exp);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("cre:");
		sb.append(this.cre);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("level:");
		if (this.level == null) {
			sb.append("null");
		}
		else {
			sb.append(this.level);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("ip:");
		if (this.ip == null) {
			sb.append("null");
		}
		else {
			sb.append(this.ip);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("id:");
		if (this.id == null) {
			sb.append("null");
		}
		else {
			sb.append(this.id);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("psw:");
		if (this.psw == null) {
			sb.append("null");
		}
		else {
			sb.append(this.psw);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class UserTokenStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserTokenStandardScheme getScheme() {
			return new UserTokenStandardScheme();
		}

	}

	private static class UserTokenStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserToken> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, UserToken struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // TOKEN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.token = iprot.readString();
						struct.setTokenIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // EXP
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.exp = iprot.readI32();
						struct.setExpIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // CRE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.cre = iprot.readI32();
						struct.setCreIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // LEVEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.level = iprot.readString();
						struct.setLevelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // IP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ip = iprot.readString();
						struct.setIpIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.id = iprot.readString();
						struct.setIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // PSW
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.psw = iprot.readString();
						struct.setPswIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, UserToken struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.token != null) {
				oprot.writeFieldBegin(TOKEN_FIELD_DESC);
				oprot.writeString(struct.token);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(EXP_FIELD_DESC);
			oprot.writeI32(struct.exp);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CRE_FIELD_DESC);
			oprot.writeI32(struct.cre);
			oprot.writeFieldEnd();
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.level != null) {
				oprot.writeFieldBegin(LEVEL_FIELD_DESC);
				oprot.writeString(struct.level);
				oprot.writeFieldEnd();
			}
			if (struct.ip != null) {
				oprot.writeFieldBegin(IP_FIELD_DESC);
				oprot.writeString(struct.ip);
				oprot.writeFieldEnd();
			}
			if (struct.id != null) {
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeString(struct.id);
				oprot.writeFieldEnd();
			}
			if (struct.psw != null) {
				oprot.writeFieldBegin(PSW_FIELD_DESC);
				oprot.writeString(struct.psw);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class UserTokenTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserTokenTupleScheme getScheme() {
			return new UserTokenTupleScheme();
		}

	}

	private static class UserTokenTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserToken> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, UserToken struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetToken()) {
				optionals.set(0);
			}
			if (struct.isSetExp()) {
				optionals.set(1);
			}
			if (struct.isSetCre()) {
				optionals.set(2);
			}
			if (struct.isSetUid()) {
				optionals.set(3);
			}
			if (struct.isSetLevel()) {
				optionals.set(4);
			}
			if (struct.isSetIp()) {
				optionals.set(5);
			}
			if (struct.isSetId()) {
				optionals.set(6);
			}
			if (struct.isSetPsw()) {
				optionals.set(7);
			}
			oprot.writeBitSet(optionals, 8);
			if (struct.isSetToken()) {
				oprot.writeString(struct.token);
			}
			if (struct.isSetExp()) {
				oprot.writeI32(struct.exp);
			}
			if (struct.isSetCre()) {
				oprot.writeI32(struct.cre);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetLevel()) {
				oprot.writeString(struct.level);
			}
			if (struct.isSetIp()) {
				oprot.writeString(struct.ip);
			}
			if (struct.isSetId()) {
				oprot.writeString(struct.id);
			}
			if (struct.isSetPsw()) {
				oprot.writeString(struct.psw);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, UserToken struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(8);
			if (incoming.get(0)) {
				struct.token = iprot.readString();
				struct.setTokenIsSet(true);
			}
			if (incoming.get(1)) {
				struct.exp = iprot.readI32();
				struct.setExpIsSet(true);
			}
			if (incoming.get(2)) {
				struct.cre = iprot.readI32();
				struct.setCreIsSet(true);
			}
			if (incoming.get(3)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(4)) {
				struct.level = iprot.readString();
				struct.setLevelIsSet(true);
			}
			if (incoming.get(5)) {
				struct.ip = iprot.readString();
				struct.setIpIsSet(true);
			}
			if (incoming.get(6)) {
				struct.id = iprot.readString();
				struct.setIdIsSet(true);
			}
			if (incoming.get(7)) {
				struct.psw = iprot.readString();
				struct.setPswIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
