/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 用户实例: 微信用户详情 TODO: 弃用
 */
public class UserWeixinInfo implements org.apache.thrift.TBase<UserWeixinInfo, UserWeixinInfo._Fields>,
		java.io.Serializable, Cloneable, Comparable<UserWeixinInfo> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"UserWeixinInfo");

	private static final org.apache.thrift.protocol.TField WX_OPENID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"wxOpenid", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField WX_UNIONID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"wxUnionid", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"nickname", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"province", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"city", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"icon", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex",
			org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"country", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField SUBSCRIBE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"subscribe", org.apache.thrift.protocol.TType.BOOL, (short) 9);

	private static final org.apache.thrift.protocol.TField SUBSCRIBE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"subscribeTime", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"appId", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserWeixinInfoStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserWeixinInfoTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String wxOpenid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String wxUnionid; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String nickname; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String province; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String city; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String icon; // optional

	public int sex; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String country; // optional

	public boolean subscribe; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String subscribeTime; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String appId; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		WX_OPENID((short) 1, "wxOpenid"), WX_UNIONID((short) 2, "wxUnionid"), NICKNAME((short) 3, "nickname"), PROVINCE(
				(short) 4, "province"), CITY((short) 5, "city"), ICON((short) 6, "icon"), SEX((short) 7,
						"sex"), COUNTRY((short) 8, "country"), SUBSCRIBE((short) 9,
								"subscribe"), SUBSCRIBE_TIME((short) 10, "subscribeTime"), APP_ID((short) 11, "appId");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // WX_OPENID
				return WX_OPENID;
			case 2: // WX_UNIONID
				return WX_UNIONID;
			case 3: // NICKNAME
				return NICKNAME;
			case 4: // PROVINCE
				return PROVINCE;
			case 5: // CITY
				return CITY;
			case 6: // ICON
				return ICON;
			case 7: // SEX
				return SEX;
			case 8: // COUNTRY
				return COUNTRY;
			case 9: // SUBSCRIBE
				return SUBSCRIBE;
			case 10: // SUBSCRIBE_TIME
				return SUBSCRIBE_TIME;
			case 11: // APP_ID
				return APP_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __SEX_ISSET_ID = 0;

	private static final int __SUBSCRIBE_ISSET_ID = 1;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.WX_UNIONID, _Fields.NICKNAME, _Fields.PROVINCE, _Fields.CITY,
			_Fields.ICON, _Fields.SEX, _Fields.COUNTRY, _Fields.SUBSCRIBE, _Fields.SUBSCRIBE_TIME, _Fields.APP_ID };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.WX_OPENID,
				new org.apache.thrift.meta_data.FieldMetaData("wxOpenid",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WX_UNIONID,
				new org.apache.thrift.meta_data.FieldMetaData("wxUnionid",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NICKNAME,
				new org.apache.thrift.meta_data.FieldMetaData("nickname",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PROVINCE,
				new org.apache.thrift.meta_data.FieldMetaData("province",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CITY,
				new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ICON,
				new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SEX,
				new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.COUNTRY,
				new org.apache.thrift.meta_data.FieldMetaData("country",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SUBSCRIBE,
				new org.apache.thrift.meta_data.FieldMetaData("subscribe",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.SUBSCRIBE_TIME, new org.apache.thrift.meta_data.FieldMetaData("subscribeTime",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.APP_ID,
				new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserWeixinInfo.class, metaDataMap);
	}

	public UserWeixinInfo() {
	}

	public UserWeixinInfo(java.lang.String wxOpenid) {
		this();
		this.wxOpenid = wxOpenid;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public UserWeixinInfo(UserWeixinInfo other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetWxOpenid()) {
			this.wxOpenid = other.wxOpenid;
		}
		if (other.isSetWxUnionid()) {
			this.wxUnionid = other.wxUnionid;
		}
		if (other.isSetNickname()) {
			this.nickname = other.nickname;
		}
		if (other.isSetProvince()) {
			this.province = other.province;
		}
		if (other.isSetCity()) {
			this.city = other.city;
		}
		if (other.isSetIcon()) {
			this.icon = other.icon;
		}
		this.sex = other.sex;
		if (other.isSetCountry()) {
			this.country = other.country;
		}
		this.subscribe = other.subscribe;
		if (other.isSetSubscribeTime()) {
			this.subscribeTime = other.subscribeTime;
		}
		if (other.isSetAppId()) {
			this.appId = other.appId;
		}
	}

	public UserWeixinInfo deepCopy() {
		return new UserWeixinInfo(this);
	}

	@Override
	public void clear() {
		this.wxOpenid = null;
		this.wxUnionid = null;
		this.nickname = null;
		this.province = null;
		this.city = null;
		this.icon = null;
		setSexIsSet(false);
		this.sex = 0;
		this.country = null;
		setSubscribeIsSet(false);
		this.subscribe = false;
		this.subscribeTime = null;
		this.appId = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWxOpenid() {
		return this.wxOpenid;
	}

	public UserWeixinInfo setWxOpenid(@org.apache.thrift.annotation.Nullable java.lang.String wxOpenid) {
		this.wxOpenid = wxOpenid;
		return this;
	}

	public void unsetWxOpenid() {
		this.wxOpenid = null;
	}

	/**
	 * Returns true if field wxOpenid is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetWxOpenid() {
		return this.wxOpenid != null;
	}

	public void setWxOpenidIsSet(boolean value) {
		if (!value) {
			this.wxOpenid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWxUnionid() {
		return this.wxUnionid;
	}

	public UserWeixinInfo setWxUnionid(@org.apache.thrift.annotation.Nullable java.lang.String wxUnionid) {
		this.wxUnionid = wxUnionid;
		return this;
	}

	public void unsetWxUnionid() {
		this.wxUnionid = null;
	}

	/**
	 * Returns true if field wxUnionid is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetWxUnionid() {
		return this.wxUnionid != null;
	}

	public void setWxUnionidIsSet(boolean value) {
		if (!value) {
			this.wxUnionid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNickname() {
		return this.nickname;
	}

	public UserWeixinInfo setNickname(@org.apache.thrift.annotation.Nullable java.lang.String nickname) {
		this.nickname = nickname;
		return this;
	}

	public void unsetNickname() {
		this.nickname = null;
	}

	/**
	 * Returns true if field nickname is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNickname() {
		return this.nickname != null;
	}

	public void setNicknameIsSet(boolean value) {
		if (!value) {
			this.nickname = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProvince() {
		return this.province;
	}

	public UserWeixinInfo setProvince(@org.apache.thrift.annotation.Nullable java.lang.String province) {
		this.province = province;
		return this;
	}

	public void unsetProvince() {
		this.province = null;
	}

	/**
	 * Returns true if field province is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProvince() {
		return this.province != null;
	}

	public void setProvinceIsSet(boolean value) {
		if (!value) {
			this.province = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCity() {
		return this.city;
	}

	public UserWeixinInfo setCity(@org.apache.thrift.annotation.Nullable java.lang.String city) {
		this.city = city;
		return this;
	}

	public void unsetCity() {
		this.city = null;
	}

	/**
	 * Returns true if field city is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCity() {
		return this.city != null;
	}

	public void setCityIsSet(boolean value) {
		if (!value) {
			this.city = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIcon() {
		return this.icon;
	}

	public UserWeixinInfo setIcon(@org.apache.thrift.annotation.Nullable java.lang.String icon) {
		this.icon = icon;
		return this;
	}

	public void unsetIcon() {
		this.icon = null;
	}

	/**
	 * Returns true if field icon is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIcon() {
		return this.icon != null;
	}

	public void setIconIsSet(boolean value) {
		if (!value) {
			this.icon = null;
		}
	}

	public int getSex() {
		return this.sex;
	}

	public UserWeixinInfo setSex(int sex) {
		this.sex = sex;
		setSexIsSet(true);
		return this;
	}

	public void unsetSex() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
	}

	/**
	 * Returns true if field sex is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSex() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
	}

	public void setSexIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCountry() {
		return this.country;
	}

	public UserWeixinInfo setCountry(@org.apache.thrift.annotation.Nullable java.lang.String country) {
		this.country = country;
		return this;
	}

	public void unsetCountry() {
		this.country = null;
	}

	/**
	 * Returns true if field country is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCountry() {
		return this.country != null;
	}

	public void setCountryIsSet(boolean value) {
		if (!value) {
			this.country = null;
		}
	}

	public boolean isSubscribe() {
		return this.subscribe;
	}

	public UserWeixinInfo setSubscribe(boolean subscribe) {
		this.subscribe = subscribe;
		setSubscribeIsSet(true);
		return this;
	}

	public void unsetSubscribe() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBSCRIBE_ISSET_ID);
	}

	/**
	 * Returns true if field subscribe is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSubscribe() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBSCRIBE_ISSET_ID);
	}

	public void setSubscribeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBSCRIBE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSubscribeTime() {
		return this.subscribeTime;
	}

	public UserWeixinInfo setSubscribeTime(@org.apache.thrift.annotation.Nullable java.lang.String subscribeTime) {
		this.subscribeTime = subscribeTime;
		return this;
	}

	public void unsetSubscribeTime() {
		this.subscribeTime = null;
	}

	/**
	 * Returns true if field subscribeTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSubscribeTime() {
		return this.subscribeTime != null;
	}

	public void setSubscribeTimeIsSet(boolean value) {
		if (!value) {
			this.subscribeTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAppId() {
		return this.appId;
	}

	public UserWeixinInfo setAppId(@org.apache.thrift.annotation.Nullable java.lang.String appId) {
		this.appId = appId;
		return this;
	}

	public void unsetAppId() {
		this.appId = null;
	}

	/**
	 * Returns true if field appId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAppId() {
		return this.appId != null;
	}

	public void setAppIdIsSet(boolean value) {
		if (!value) {
			this.appId = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case WX_OPENID:
			if (value == null) {
				unsetWxOpenid();
			}
			else {
				setWxOpenid((java.lang.String) value);
			}
			break;

		case WX_UNIONID:
			if (value == null) {
				unsetWxUnionid();
			}
			else {
				setWxUnionid((java.lang.String) value);
			}
			break;

		case NICKNAME:
			if (value == null) {
				unsetNickname();
			}
			else {
				setNickname((java.lang.String) value);
			}
			break;

		case PROVINCE:
			if (value == null) {
				unsetProvince();
			}
			else {
				setProvince((java.lang.String) value);
			}
			break;

		case CITY:
			if (value == null) {
				unsetCity();
			}
			else {
				setCity((java.lang.String) value);
			}
			break;

		case ICON:
			if (value == null) {
				unsetIcon();
			}
			else {
				setIcon((java.lang.String) value);
			}
			break;

		case SEX:
			if (value == null) {
				unsetSex();
			}
			else {
				setSex((java.lang.Integer) value);
			}
			break;

		case COUNTRY:
			if (value == null) {
				unsetCountry();
			}
			else {
				setCountry((java.lang.String) value);
			}
			break;

		case SUBSCRIBE:
			if (value == null) {
				unsetSubscribe();
			}
			else {
				setSubscribe((java.lang.Boolean) value);
			}
			break;

		case SUBSCRIBE_TIME:
			if (value == null) {
				unsetSubscribeTime();
			}
			else {
				setSubscribeTime((java.lang.String) value);
			}
			break;

		case APP_ID:
			if (value == null) {
				unsetAppId();
			}
			else {
				setAppId((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case WX_OPENID:
			return getWxOpenid();

		case WX_UNIONID:
			return getWxUnionid();

		case NICKNAME:
			return getNickname();

		case PROVINCE:
			return getProvince();

		case CITY:
			return getCity();

		case ICON:
			return getIcon();

		case SEX:
			return getSex();

		case COUNTRY:
			return getCountry();

		case SUBSCRIBE:
			return isSubscribe();

		case SUBSCRIBE_TIME:
			return getSubscribeTime();

		case APP_ID:
			return getAppId();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case WX_OPENID:
			return isSetWxOpenid();
		case WX_UNIONID:
			return isSetWxUnionid();
		case NICKNAME:
			return isSetNickname();
		case PROVINCE:
			return isSetProvince();
		case CITY:
			return isSetCity();
		case ICON:
			return isSetIcon();
		case SEX:
			return isSetSex();
		case COUNTRY:
			return isSetCountry();
		case SUBSCRIBE:
			return isSetSubscribe();
		case SUBSCRIBE_TIME:
			return isSetSubscribeTime();
		case APP_ID:
			return isSetAppId();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof UserWeixinInfo)
			return this.equals((UserWeixinInfo) that);
		return false;
	}

	public boolean equals(UserWeixinInfo that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_wxOpenid = true && this.isSetWxOpenid();
		boolean that_present_wxOpenid = true && that.isSetWxOpenid();
		if (this_present_wxOpenid || that_present_wxOpenid) {
			if (!(this_present_wxOpenid && that_present_wxOpenid))
				return false;
			if (!this.wxOpenid.equals(that.wxOpenid))
				return false;
		}

		boolean this_present_wxUnionid = true && this.isSetWxUnionid();
		boolean that_present_wxUnionid = true && that.isSetWxUnionid();
		if (this_present_wxUnionid || that_present_wxUnionid) {
			if (!(this_present_wxUnionid && that_present_wxUnionid))
				return false;
			if (!this.wxUnionid.equals(that.wxUnionid))
				return false;
		}

		boolean this_present_nickname = true && this.isSetNickname();
		boolean that_present_nickname = true && that.isSetNickname();
		if (this_present_nickname || that_present_nickname) {
			if (!(this_present_nickname && that_present_nickname))
				return false;
			if (!this.nickname.equals(that.nickname))
				return false;
		}

		boolean this_present_province = true && this.isSetProvince();
		boolean that_present_province = true && that.isSetProvince();
		if (this_present_province || that_present_province) {
			if (!(this_present_province && that_present_province))
				return false;
			if (!this.province.equals(that.province))
				return false;
		}

		boolean this_present_city = true && this.isSetCity();
		boolean that_present_city = true && that.isSetCity();
		if (this_present_city || that_present_city) {
			if (!(this_present_city && that_present_city))
				return false;
			if (!this.city.equals(that.city))
				return false;
		}

		boolean this_present_icon = true && this.isSetIcon();
		boolean that_present_icon = true && that.isSetIcon();
		if (this_present_icon || that_present_icon) {
			if (!(this_present_icon && that_present_icon))
				return false;
			if (!this.icon.equals(that.icon))
				return false;
		}

		boolean this_present_sex = true && this.isSetSex();
		boolean that_present_sex = true && that.isSetSex();
		if (this_present_sex || that_present_sex) {
			if (!(this_present_sex && that_present_sex))
				return false;
			if (this.sex != that.sex)
				return false;
		}

		boolean this_present_country = true && this.isSetCountry();
		boolean that_present_country = true && that.isSetCountry();
		if (this_present_country || that_present_country) {
			if (!(this_present_country && that_present_country))
				return false;
			if (!this.country.equals(that.country))
				return false;
		}

		boolean this_present_subscribe = true && this.isSetSubscribe();
		boolean that_present_subscribe = true && that.isSetSubscribe();
		if (this_present_subscribe || that_present_subscribe) {
			if (!(this_present_subscribe && that_present_subscribe))
				return false;
			if (this.subscribe != that.subscribe)
				return false;
		}

		boolean this_present_subscribeTime = true && this.isSetSubscribeTime();
		boolean that_present_subscribeTime = true && that.isSetSubscribeTime();
		if (this_present_subscribeTime || that_present_subscribeTime) {
			if (!(this_present_subscribeTime && that_present_subscribeTime))
				return false;
			if (!this.subscribeTime.equals(that.subscribeTime))
				return false;
		}

		boolean this_present_appId = true && this.isSetAppId();
		boolean that_present_appId = true && that.isSetAppId();
		if (this_present_appId || that_present_appId) {
			if (!(this_present_appId && that_present_appId))
				return false;
			if (!this.appId.equals(that.appId))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetWxOpenid()) ? 131071 : 524287);
		if (isSetWxOpenid())
			hashCode = hashCode * 8191 + wxOpenid.hashCode();

		hashCode = hashCode * 8191 + ((isSetWxUnionid()) ? 131071 : 524287);
		if (isSetWxUnionid())
			hashCode = hashCode * 8191 + wxUnionid.hashCode();

		hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
		if (isSetNickname())
			hashCode = hashCode * 8191 + nickname.hashCode();

		hashCode = hashCode * 8191 + ((isSetProvince()) ? 131071 : 524287);
		if (isSetProvince())
			hashCode = hashCode * 8191 + province.hashCode();

		hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
		if (isSetCity())
			hashCode = hashCode * 8191 + city.hashCode();

		hashCode = hashCode * 8191 + ((isSetIcon()) ? 131071 : 524287);
		if (isSetIcon())
			hashCode = hashCode * 8191 + icon.hashCode();

		hashCode = hashCode * 8191 + ((isSetSex()) ? 131071 : 524287);
		if (isSetSex())
			hashCode = hashCode * 8191 + sex;

		hashCode = hashCode * 8191 + ((isSetCountry()) ? 131071 : 524287);
		if (isSetCountry())
			hashCode = hashCode * 8191 + country.hashCode();

		hashCode = hashCode * 8191 + ((isSetSubscribe()) ? 131071 : 524287);
		if (isSetSubscribe())
			hashCode = hashCode * 8191 + ((subscribe) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetSubscribeTime()) ? 131071 : 524287);
		if (isSetSubscribeTime())
			hashCode = hashCode * 8191 + subscribeTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
		if (isSetAppId())
			hashCode = hashCode * 8191 + appId.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(UserWeixinInfo other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetWxOpenid()).compareTo(other.isSetWxOpenid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWxOpenid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxOpenid, other.wxOpenid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWxUnionid()).compareTo(other.isSetWxUnionid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWxUnionid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxUnionid, other.wxUnionid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNickname()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProvince()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCity()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSex()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCountry()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSubscribe()).compareTo(other.isSetSubscribe());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSubscribe()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribe, other.subscribe);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSubscribeTime()).compareTo(other.isSetSubscribeTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSubscribeTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribeTime, other.subscribeTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAppId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("UserWeixinInfo(");
		boolean first = true;

		sb.append("wxOpenid:");
		if (this.wxOpenid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.wxOpenid);
		}
		first = false;
		if (isSetWxUnionid()) {
			if (!first)
				sb.append(", ");
			sb.append("wxUnionid:");
			if (this.wxUnionid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.wxUnionid);
			}
			first = false;
		}
		if (isSetNickname()) {
			if (!first)
				sb.append(", ");
			sb.append("nickname:");
			if (this.nickname == null) {
				sb.append("null");
			}
			else {
				sb.append(this.nickname);
			}
			first = false;
		}
		if (isSetProvince()) {
			if (!first)
				sb.append(", ");
			sb.append("province:");
			if (this.province == null) {
				sb.append("null");
			}
			else {
				sb.append(this.province);
			}
			first = false;
		}
		if (isSetCity()) {
			if (!first)
				sb.append(", ");
			sb.append("city:");
			if (this.city == null) {
				sb.append("null");
			}
			else {
				sb.append(this.city);
			}
			first = false;
		}
		if (isSetIcon()) {
			if (!first)
				sb.append(", ");
			sb.append("icon:");
			if (this.icon == null) {
				sb.append("null");
			}
			else {
				sb.append(this.icon);
			}
			first = false;
		}
		if (isSetSex()) {
			if (!first)
				sb.append(", ");
			sb.append("sex:");
			sb.append(this.sex);
			first = false;
		}
		if (isSetCountry()) {
			if (!first)
				sb.append(", ");
			sb.append("country:");
			if (this.country == null) {
				sb.append("null");
			}
			else {
				sb.append(this.country);
			}
			first = false;
		}
		if (isSetSubscribe()) {
			if (!first)
				sb.append(", ");
			sb.append("subscribe:");
			sb.append(this.subscribe);
			first = false;
		}
		if (isSetSubscribeTime()) {
			if (!first)
				sb.append(", ");
			sb.append("subscribeTime:");
			if (this.subscribeTime == null) {
				sb.append("null");
			}
			else {
				sb.append(this.subscribeTime);
			}
			first = false;
		}
		if (isSetAppId()) {
			if (!first)
				sb.append(", ");
			sb.append("appId:");
			if (this.appId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.appId);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class UserWeixinInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserWeixinInfoStandardScheme getScheme() {
			return new UserWeixinInfoStandardScheme();
		}

	}

	private static class UserWeixinInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserWeixinInfo> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, UserWeixinInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // WX_OPENID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.wxOpenid = iprot.readString();
						struct.setWxOpenidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // WX_UNIONID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.wxUnionid = iprot.readString();
						struct.setWxUnionidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // NICKNAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nickname = iprot.readString();
						struct.setNicknameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // PROVINCE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.province = iprot.readString();
						struct.setProvinceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CITY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.city = iprot.readString();
						struct.setCityIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // ICON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.icon = iprot.readString();
						struct.setIconIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // SEX
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.sex = iprot.readI32();
						struct.setSexIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // COUNTRY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.country = iprot.readString();
						struct.setCountryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // SUBSCRIBE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.subscribe = iprot.readBool();
						struct.setSubscribeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // SUBSCRIBE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.subscribeTime = iprot.readString();
						struct.setSubscribeTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // APP_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.appId = iprot.readString();
						struct.setAppIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, UserWeixinInfo struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.wxOpenid != null) {
				oprot.writeFieldBegin(WX_OPENID_FIELD_DESC);
				oprot.writeString(struct.wxOpenid);
				oprot.writeFieldEnd();
			}
			if (struct.wxUnionid != null) {
				if (struct.isSetWxUnionid()) {
					oprot.writeFieldBegin(WX_UNIONID_FIELD_DESC);
					oprot.writeString(struct.wxUnionid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.nickname != null) {
				if (struct.isSetNickname()) {
					oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
					oprot.writeString(struct.nickname);
					oprot.writeFieldEnd();
				}
			}
			if (struct.province != null) {
				if (struct.isSetProvince()) {
					oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
					oprot.writeString(struct.province);
					oprot.writeFieldEnd();
				}
			}
			if (struct.city != null) {
				if (struct.isSetCity()) {
					oprot.writeFieldBegin(CITY_FIELD_DESC);
					oprot.writeString(struct.city);
					oprot.writeFieldEnd();
				}
			}
			if (struct.icon != null) {
				if (struct.isSetIcon()) {
					oprot.writeFieldBegin(ICON_FIELD_DESC);
					oprot.writeString(struct.icon);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetSex()) {
				oprot.writeFieldBegin(SEX_FIELD_DESC);
				oprot.writeI32(struct.sex);
				oprot.writeFieldEnd();
			}
			if (struct.country != null) {
				if (struct.isSetCountry()) {
					oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
					oprot.writeString(struct.country);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetSubscribe()) {
				oprot.writeFieldBegin(SUBSCRIBE_FIELD_DESC);
				oprot.writeBool(struct.subscribe);
				oprot.writeFieldEnd();
			}
			if (struct.subscribeTime != null) {
				if (struct.isSetSubscribeTime()) {
					oprot.writeFieldBegin(SUBSCRIBE_TIME_FIELD_DESC);
					oprot.writeString(struct.subscribeTime);
					oprot.writeFieldEnd();
				}
			}
			if (struct.appId != null) {
				if (struct.isSetAppId()) {
					oprot.writeFieldBegin(APP_ID_FIELD_DESC);
					oprot.writeString(struct.appId);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class UserWeixinInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserWeixinInfoTupleScheme getScheme() {
			return new UserWeixinInfoTupleScheme();
		}

	}

	private static class UserWeixinInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserWeixinInfo> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, UserWeixinInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetWxOpenid()) {
				optionals.set(0);
			}
			if (struct.isSetWxUnionid()) {
				optionals.set(1);
			}
			if (struct.isSetNickname()) {
				optionals.set(2);
			}
			if (struct.isSetProvince()) {
				optionals.set(3);
			}
			if (struct.isSetCity()) {
				optionals.set(4);
			}
			if (struct.isSetIcon()) {
				optionals.set(5);
			}
			if (struct.isSetSex()) {
				optionals.set(6);
			}
			if (struct.isSetCountry()) {
				optionals.set(7);
			}
			if (struct.isSetSubscribe()) {
				optionals.set(8);
			}
			if (struct.isSetSubscribeTime()) {
				optionals.set(9);
			}
			if (struct.isSetAppId()) {
				optionals.set(10);
			}
			oprot.writeBitSet(optionals, 11);
			if (struct.isSetWxOpenid()) {
				oprot.writeString(struct.wxOpenid);
			}
			if (struct.isSetWxUnionid()) {
				oprot.writeString(struct.wxUnionid);
			}
			if (struct.isSetNickname()) {
				oprot.writeString(struct.nickname);
			}
			if (struct.isSetProvince()) {
				oprot.writeString(struct.province);
			}
			if (struct.isSetCity()) {
				oprot.writeString(struct.city);
			}
			if (struct.isSetIcon()) {
				oprot.writeString(struct.icon);
			}
			if (struct.isSetSex()) {
				oprot.writeI32(struct.sex);
			}
			if (struct.isSetCountry()) {
				oprot.writeString(struct.country);
			}
			if (struct.isSetSubscribe()) {
				oprot.writeBool(struct.subscribe);
			}
			if (struct.isSetSubscribeTime()) {
				oprot.writeString(struct.subscribeTime);
			}
			if (struct.isSetAppId()) {
				oprot.writeString(struct.appId);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, UserWeixinInfo struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(11);
			if (incoming.get(0)) {
				struct.wxOpenid = iprot.readString();
				struct.setWxOpenidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.wxUnionid = iprot.readString();
				struct.setWxUnionidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.nickname = iprot.readString();
				struct.setNicknameIsSet(true);
			}
			if (incoming.get(3)) {
				struct.province = iprot.readString();
				struct.setProvinceIsSet(true);
			}
			if (incoming.get(4)) {
				struct.city = iprot.readString();
				struct.setCityIsSet(true);
			}
			if (incoming.get(5)) {
				struct.icon = iprot.readString();
				struct.setIconIsSet(true);
			}
			if (incoming.get(6)) {
				struct.sex = iprot.readI32();
				struct.setSexIsSet(true);
			}
			if (incoming.get(7)) {
				struct.country = iprot.readString();
				struct.setCountryIsSet(true);
			}
			if (incoming.get(8)) {
				struct.subscribe = iprot.readBool();
				struct.setSubscribeIsSet(true);
			}
			if (incoming.get(9)) {
				struct.subscribeTime = iprot.readString();
				struct.setSubscribeTimeIsSet(true);
			}
			if (incoming.get(10)) {
				struct.appId = iprot.readString();
				struct.setAppIdIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
