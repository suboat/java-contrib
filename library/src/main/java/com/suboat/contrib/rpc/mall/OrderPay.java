/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class OrderPay implements org.apache.thrift.TBase<OrderPay, OrderPay._Fields>, java.io.Serializable, Cloneable,
		Comparable<OrderPay> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"OrderPay");

	private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField OID_FIELD_DESC = new org.apache.thrift.protocol.TField("oid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 6);

	private static final org.apache.thrift.protocol.TField SERIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"serialId", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"platform", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField RECEIPT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"receipt", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField WF_ACC_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"wfAcc", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OrderPayStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OrderPayTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String pid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String oid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String serialId; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String platform; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String receipt; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String wfAcc; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		PID((short) 1, "pid"), OID((short) 2, "oid"), SID((short) 3, "sid"), CREATE_TIME((short) 4,
				"createTime"), UPDATE_TIME((short) 5, "updateTime"), STATUS((short) 6, "status"), SERIAL_ID((short) 7,
						"serialId"), PLATFORM((short) 8,
								"platform"), RECEIPT((short) 9, "receipt"), WF_ACC((short) 10, "wfAcc");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // PID
				return PID;
			case 2: // OID
				return OID;
			case 3: // SID
				return SID;
			case 4: // CREATE_TIME
				return CREATE_TIME;
			case 5: // UPDATE_TIME
				return UPDATE_TIME;
			case 6: // STATUS
				return STATUS;
			case 7: // SERIAL_ID
				return SERIAL_ID;
			case 8: // PLATFORM
				return PLATFORM;
			case 9: // RECEIPT
				return RECEIPT;
			case 10: // WF_ACC
				return WF_ACC;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.PID,
				new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.OID,
				new org.apache.thrift.meta_data.FieldMetaData("oid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SERIAL_ID,
				new org.apache.thrift.meta_data.FieldMetaData("serialId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PLATFORM,
				new org.apache.thrift.meta_data.FieldMetaData("platform",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RECEIPT,
				new org.apache.thrift.meta_data.FieldMetaData("receipt",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WF_ACC,
				new org.apache.thrift.meta_data.FieldMetaData("wfAcc", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderPay.class, metaDataMap);
	}

	public OrderPay() {
	}

	public OrderPay(java.lang.String pid, java.lang.String oid, java.lang.String sid, java.lang.String createTime,
			java.lang.String updateTime, int status, java.lang.String serialId, java.lang.String platform,
			java.lang.String receipt, java.lang.String wfAcc) {
		this();
		this.pid = pid;
		this.oid = oid;
		this.sid = sid;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.status = status;
		setStatusIsSet(true);
		this.serialId = serialId;
		this.platform = platform;
		this.receipt = receipt;
		this.wfAcc = wfAcc;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public OrderPay(OrderPay other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetPid()) {
			this.pid = other.pid;
		}
		if (other.isSetOid()) {
			this.oid = other.oid;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.status = other.status;
		if (other.isSetSerialId()) {
			this.serialId = other.serialId;
		}
		if (other.isSetPlatform()) {
			this.platform = other.platform;
		}
		if (other.isSetReceipt()) {
			this.receipt = other.receipt;
		}
		if (other.isSetWfAcc()) {
			this.wfAcc = other.wfAcc;
		}
	}

	public OrderPay deepCopy() {
		return new OrderPay(this);
	}

	@Override
	public void clear() {
		this.pid = null;
		this.oid = null;
		this.sid = null;
		this.createTime = null;
		this.updateTime = null;
		setStatusIsSet(false);
		this.status = 0;
		this.serialId = null;
		this.platform = null;
		this.receipt = null;
		this.wfAcc = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPid() {
		return this.pid;
	}

	public OrderPay setPid(@org.apache.thrift.annotation.Nullable java.lang.String pid) {
		this.pid = pid;
		return this;
	}

	public void unsetPid() {
		this.pid = null;
	}

	/**
	 * Returns true if field pid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPid() {
		return this.pid != null;
	}

	public void setPidIsSet(boolean value) {
		if (!value) {
			this.pid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getOid() {
		return this.oid;
	}

	public OrderPay setOid(@org.apache.thrift.annotation.Nullable java.lang.String oid) {
		this.oid = oid;
		return this;
	}

	public void unsetOid() {
		this.oid = null;
	}

	/**
	 * Returns true if field oid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetOid() {
		return this.oid != null;
	}

	public void setOidIsSet(boolean value) {
		if (!value) {
			this.oid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public OrderPay setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public OrderPay setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public OrderPay setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public OrderPay setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSerialId() {
		return this.serialId;
	}

	public OrderPay setSerialId(@org.apache.thrift.annotation.Nullable java.lang.String serialId) {
		this.serialId = serialId;
		return this;
	}

	public void unsetSerialId() {
		this.serialId = null;
	}

	/**
	 * Returns true if field serialId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSerialId() {
		return this.serialId != null;
	}

	public void setSerialIdIsSet(boolean value) {
		if (!value) {
			this.serialId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPlatform() {
		return this.platform;
	}

	public OrderPay setPlatform(@org.apache.thrift.annotation.Nullable java.lang.String platform) {
		this.platform = platform;
		return this;
	}

	public void unsetPlatform() {
		this.platform = null;
	}

	/**
	 * Returns true if field platform is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPlatform() {
		return this.platform != null;
	}

	public void setPlatformIsSet(boolean value) {
		if (!value) {
			this.platform = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getReceipt() {
		return this.receipt;
	}

	public OrderPay setReceipt(@org.apache.thrift.annotation.Nullable java.lang.String receipt) {
		this.receipt = receipt;
		return this;
	}

	public void unsetReceipt() {
		this.receipt = null;
	}

	/**
	 * Returns true if field receipt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetReceipt() {
		return this.receipt != null;
	}

	public void setReceiptIsSet(boolean value) {
		if (!value) {
			this.receipt = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWfAcc() {
		return this.wfAcc;
	}

	public OrderPay setWfAcc(@org.apache.thrift.annotation.Nullable java.lang.String wfAcc) {
		this.wfAcc = wfAcc;
		return this;
	}

	public void unsetWfAcc() {
		this.wfAcc = null;
	}

	/**
	 * Returns true if field wfAcc is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetWfAcc() {
		return this.wfAcc != null;
	}

	public void setWfAccIsSet(boolean value) {
		if (!value) {
			this.wfAcc = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case PID:
			if (value == null) {
				unsetPid();
			}
			else {
				setPid((java.lang.String) value);
			}
			break;

		case OID:
			if (value == null) {
				unsetOid();
			}
			else {
				setOid((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case SERIAL_ID:
			if (value == null) {
				unsetSerialId();
			}
			else {
				setSerialId((java.lang.String) value);
			}
			break;

		case PLATFORM:
			if (value == null) {
				unsetPlatform();
			}
			else {
				setPlatform((java.lang.String) value);
			}
			break;

		case RECEIPT:
			if (value == null) {
				unsetReceipt();
			}
			else {
				setReceipt((java.lang.String) value);
			}
			break;

		case WF_ACC:
			if (value == null) {
				unsetWfAcc();
			}
			else {
				setWfAcc((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case PID:
			return getPid();

		case OID:
			return getOid();

		case SID:
			return getSid();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case STATUS:
			return getStatus();

		case SERIAL_ID:
			return getSerialId();

		case PLATFORM:
			return getPlatform();

		case RECEIPT:
			return getReceipt();

		case WF_ACC:
			return getWfAcc();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case PID:
			return isSetPid();
		case OID:
			return isSetOid();
		case SID:
			return isSetSid();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case STATUS:
			return isSetStatus();
		case SERIAL_ID:
			return isSetSerialId();
		case PLATFORM:
			return isSetPlatform();
		case RECEIPT:
			return isSetReceipt();
		case WF_ACC:
			return isSetWfAcc();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof OrderPay)
			return this.equals((OrderPay) that);
		return false;
	}

	public boolean equals(OrderPay that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_pid = true && this.isSetPid();
		boolean that_present_pid = true && that.isSetPid();
		if (this_present_pid || that_present_pid) {
			if (!(this_present_pid && that_present_pid))
				return false;
			if (!this.pid.equals(that.pid))
				return false;
		}

		boolean this_present_oid = true && this.isSetOid();
		boolean that_present_oid = true && that.isSetOid();
		if (this_present_oid || that_present_oid) {
			if (!(this_present_oid && that_present_oid))
				return false;
			if (!this.oid.equals(that.oid))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_serialId = true && this.isSetSerialId();
		boolean that_present_serialId = true && that.isSetSerialId();
		if (this_present_serialId || that_present_serialId) {
			if (!(this_present_serialId && that_present_serialId))
				return false;
			if (!this.serialId.equals(that.serialId))
				return false;
		}

		boolean this_present_platform = true && this.isSetPlatform();
		boolean that_present_platform = true && that.isSetPlatform();
		if (this_present_platform || that_present_platform) {
			if (!(this_present_platform && that_present_platform))
				return false;
			if (!this.platform.equals(that.platform))
				return false;
		}

		boolean this_present_receipt = true && this.isSetReceipt();
		boolean that_present_receipt = true && that.isSetReceipt();
		if (this_present_receipt || that_present_receipt) {
			if (!(this_present_receipt && that_present_receipt))
				return false;
			if (!this.receipt.equals(that.receipt))
				return false;
		}

		boolean this_present_wfAcc = true && this.isSetWfAcc();
		boolean that_present_wfAcc = true && that.isSetWfAcc();
		if (this_present_wfAcc || that_present_wfAcc) {
			if (!(this_present_wfAcc && that_present_wfAcc))
				return false;
			if (!this.wfAcc.equals(that.wfAcc))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetPid()) ? 131071 : 524287);
		if (isSetPid())
			hashCode = hashCode * 8191 + pid.hashCode();

		hashCode = hashCode * 8191 + ((isSetOid()) ? 131071 : 524287);
		if (isSetOid())
			hashCode = hashCode * 8191 + oid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetSerialId()) ? 131071 : 524287);
		if (isSetSerialId())
			hashCode = hashCode * 8191 + serialId.hashCode();

		hashCode = hashCode * 8191 + ((isSetPlatform()) ? 131071 : 524287);
		if (isSetPlatform())
			hashCode = hashCode * 8191 + platform.hashCode();

		hashCode = hashCode * 8191 + ((isSetReceipt()) ? 131071 : 524287);
		if (isSetReceipt())
			hashCode = hashCode * 8191 + receipt.hashCode();

		hashCode = hashCode * 8191 + ((isSetWfAcc()) ? 131071 : 524287);
		if (isSetWfAcc())
			hashCode = hashCode * 8191 + wfAcc.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(OrderPay other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetOid()).compareTo(other.isSetOid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oid, other.oid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSerialId()).compareTo(other.isSetSerialId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSerialId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialId, other.serialId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPlatform()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetReceipt()).compareTo(other.isSetReceipt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReceipt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receipt, other.receipt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWfAcc()).compareTo(other.isSetWfAcc());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWfAcc()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wfAcc, other.wfAcc);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("OrderPay(");
		boolean first = true;

		sb.append("pid:");
		if (this.pid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.pid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("oid:");
		if (this.oid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.oid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("serialId:");
		if (this.serialId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.serialId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("platform:");
		if (this.platform == null) {
			sb.append("null");
		}
		else {
			sb.append(this.platform);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("receipt:");
		if (this.receipt == null) {
			sb.append("null");
		}
		else {
			sb.append(this.receipt);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("wfAcc:");
		if (this.wfAcc == null) {
			sb.append("null");
		}
		else {
			sb.append(this.wfAcc);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class OrderPayStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrderPayStandardScheme getScheme() {
			return new OrderPayStandardScheme();
		}

	}

	private static class OrderPayStandardScheme extends org.apache.thrift.scheme.StandardScheme<OrderPay> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, OrderPay struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // PID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.pid = iprot.readString();
						struct.setPidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // OID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.oid = iprot.readString();
						struct.setOidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // SERIAL_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.serialId = iprot.readString();
						struct.setSerialIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // PLATFORM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.platform = iprot.readString();
						struct.setPlatformIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // RECEIPT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.receipt = iprot.readString();
						struct.setReceiptIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // WF_ACC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.wfAcc = iprot.readString();
						struct.setWfAccIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, OrderPay struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.pid != null) {
				oprot.writeFieldBegin(PID_FIELD_DESC);
				oprot.writeString(struct.pid);
				oprot.writeFieldEnd();
			}
			if (struct.oid != null) {
				oprot.writeFieldBegin(OID_FIELD_DESC);
				oprot.writeString(struct.oid);
				oprot.writeFieldEnd();
			}
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.serialId != null) {
				oprot.writeFieldBegin(SERIAL_ID_FIELD_DESC);
				oprot.writeString(struct.serialId);
				oprot.writeFieldEnd();
			}
			if (struct.platform != null) {
				oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
				oprot.writeString(struct.platform);
				oprot.writeFieldEnd();
			}
			if (struct.receipt != null) {
				oprot.writeFieldBegin(RECEIPT_FIELD_DESC);
				oprot.writeString(struct.receipt);
				oprot.writeFieldEnd();
			}
			if (struct.wfAcc != null) {
				oprot.writeFieldBegin(WF_ACC_FIELD_DESC);
				oprot.writeString(struct.wfAcc);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class OrderPayTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrderPayTupleScheme getScheme() {
			return new OrderPayTupleScheme();
		}

	}

	private static class OrderPayTupleScheme extends org.apache.thrift.scheme.TupleScheme<OrderPay> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, OrderPay struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetPid()) {
				optionals.set(0);
			}
			if (struct.isSetOid()) {
				optionals.set(1);
			}
			if (struct.isSetSid()) {
				optionals.set(2);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(3);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(4);
			}
			if (struct.isSetStatus()) {
				optionals.set(5);
			}
			if (struct.isSetSerialId()) {
				optionals.set(6);
			}
			if (struct.isSetPlatform()) {
				optionals.set(7);
			}
			if (struct.isSetReceipt()) {
				optionals.set(8);
			}
			if (struct.isSetWfAcc()) {
				optionals.set(9);
			}
			oprot.writeBitSet(optionals, 10);
			if (struct.isSetPid()) {
				oprot.writeString(struct.pid);
			}
			if (struct.isSetOid()) {
				oprot.writeString(struct.oid);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetSerialId()) {
				oprot.writeString(struct.serialId);
			}
			if (struct.isSetPlatform()) {
				oprot.writeString(struct.platform);
			}
			if (struct.isSetReceipt()) {
				oprot.writeString(struct.receipt);
			}
			if (struct.isSetWfAcc()) {
				oprot.writeString(struct.wfAcc);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, OrderPay struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(10);
			if (incoming.get(0)) {
				struct.pid = iprot.readString();
				struct.setPidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.oid = iprot.readString();
				struct.setOidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(6)) {
				struct.serialId = iprot.readString();
				struct.setSerialIdIsSet(true);
			}
			if (incoming.get(7)) {
				struct.platform = iprot.readString();
				struct.setPlatformIsSet(true);
			}
			if (incoming.get(8)) {
				struct.receipt = iprot.readString();
				struct.setReceiptIsSet(true);
			}
			if (incoming.get(9)) {
				struct.wfAcc = iprot.readString();
				struct.setWfAccIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
