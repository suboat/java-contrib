/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 微信登录授权 有效条件: 参数选填
 */
public class ArgWeixinAuth implements org.apache.thrift.TBase<ArgWeixinAuth, ArgWeixinAuth._Fields>,
		java.io.Serializable, Cloneable, Comparable<ArgWeixinAuth> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgWeixinAuth");

	private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"appId", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"time", org.apache.thrift.protocol.TType.I32, (short) 2);

	private static final org.apache.thrift.protocol.TField NONCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"nonce", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgWeixinAuthStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgWeixinAuthTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String appId; // optional

	public int time; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String nonce; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String url; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		APP_ID((short) 1, "appId"), TIME((short) 2, "time"), NONCE((short) 3, "nonce"), URL((short) 4, "url");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // APP_ID
				return APP_ID;
			case 2: // TIME
				return TIME;
			case 3: // NONCE
				return NONCE;
			case 4: // URL
				return URL;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __TIME_ISSET_ID = 0;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.APP_ID, _Fields.TIME, _Fields.NONCE, _Fields.URL };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.APP_ID,
				new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TIME,
				new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NONCE,
				new org.apache.thrift.meta_data.FieldMetaData("nonce", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.URL,
				new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgWeixinAuth.class, metaDataMap);
	}

	public ArgWeixinAuth() {
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgWeixinAuth(ArgWeixinAuth other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetAppId()) {
			this.appId = other.appId;
		}
		this.time = other.time;
		if (other.isSetNonce()) {
			this.nonce = other.nonce;
		}
		if (other.isSetUrl()) {
			this.url = other.url;
		}
	}

	public ArgWeixinAuth deepCopy() {
		return new ArgWeixinAuth(this);
	}

	@Override
	public void clear() {
		this.appId = null;
		setTimeIsSet(false);
		this.time = 0;
		this.nonce = null;
		this.url = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAppId() {
		return this.appId;
	}

	public ArgWeixinAuth setAppId(@org.apache.thrift.annotation.Nullable java.lang.String appId) {
		this.appId = appId;
		return this;
	}

	public void unsetAppId() {
		this.appId = null;
	}

	/**
	 * Returns true if field appId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAppId() {
		return this.appId != null;
	}

	public void setAppIdIsSet(boolean value) {
		if (!value) {
			this.appId = null;
		}
	}

	public int getTime() {
		return this.time;
	}

	public ArgWeixinAuth setTime(int time) {
		this.time = time;
		setTimeIsSet(true);
		return this;
	}

	public void unsetTime() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
	}

	/**
	 * Returns true if field time is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTime() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
	}

	public void setTimeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNonce() {
		return this.nonce;
	}

	public ArgWeixinAuth setNonce(@org.apache.thrift.annotation.Nullable java.lang.String nonce) {
		this.nonce = nonce;
		return this;
	}

	public void unsetNonce() {
		this.nonce = null;
	}

	/**
	 * Returns true if field nonce is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetNonce() {
		return this.nonce != null;
	}

	public void setNonceIsSet(boolean value) {
		if (!value) {
			this.nonce = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUrl() {
		return this.url;
	}

	public ArgWeixinAuth setUrl(@org.apache.thrift.annotation.Nullable java.lang.String url) {
		this.url = url;
		return this;
	}

	public void unsetUrl() {
		this.url = null;
	}

	/**
	 * Returns true if field url is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUrl() {
		return this.url != null;
	}

	public void setUrlIsSet(boolean value) {
		if (!value) {
			this.url = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case APP_ID:
			if (value == null) {
				unsetAppId();
			}
			else {
				setAppId((java.lang.String) value);
			}
			break;

		case TIME:
			if (value == null) {
				unsetTime();
			}
			else {
				setTime((java.lang.Integer) value);
			}
			break;

		case NONCE:
			if (value == null) {
				unsetNonce();
			}
			else {
				setNonce((java.lang.String) value);
			}
			break;

		case URL:
			if (value == null) {
				unsetUrl();
			}
			else {
				setUrl((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case APP_ID:
			return getAppId();

		case TIME:
			return getTime();

		case NONCE:
			return getNonce();

		case URL:
			return getUrl();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case APP_ID:
			return isSetAppId();
		case TIME:
			return isSetTime();
		case NONCE:
			return isSetNonce();
		case URL:
			return isSetUrl();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgWeixinAuth)
			return this.equals((ArgWeixinAuth) that);
		return false;
	}

	public boolean equals(ArgWeixinAuth that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_appId = true && this.isSetAppId();
		boolean that_present_appId = true && that.isSetAppId();
		if (this_present_appId || that_present_appId) {
			if (!(this_present_appId && that_present_appId))
				return false;
			if (!this.appId.equals(that.appId))
				return false;
		}

		boolean this_present_time = true && this.isSetTime();
		boolean that_present_time = true && that.isSetTime();
		if (this_present_time || that_present_time) {
			if (!(this_present_time && that_present_time))
				return false;
			if (this.time != that.time)
				return false;
		}

		boolean this_present_nonce = true && this.isSetNonce();
		boolean that_present_nonce = true && that.isSetNonce();
		if (this_present_nonce || that_present_nonce) {
			if (!(this_present_nonce && that_present_nonce))
				return false;
			if (!this.nonce.equals(that.nonce))
				return false;
		}

		boolean this_present_url = true && this.isSetUrl();
		boolean that_present_url = true && that.isSetUrl();
		if (this_present_url || that_present_url) {
			if (!(this_present_url && that_present_url))
				return false;
			if (!this.url.equals(that.url))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetAppId()) ? 131071 : 524287);
		if (isSetAppId())
			hashCode = hashCode * 8191 + appId.hashCode();

		hashCode = hashCode * 8191 + ((isSetTime()) ? 131071 : 524287);
		if (isSetTime())
			hashCode = hashCode * 8191 + time;

		hashCode = hashCode * 8191 + ((isSetNonce()) ? 131071 : 524287);
		if (isSetNonce())
			hashCode = hashCode * 8191 + nonce.hashCode();

		hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
		if (isSetUrl())
			hashCode = hashCode * 8191 + url.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgWeixinAuth other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAppId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNonce()).compareTo(other.isSetNonce());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNonce()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonce, other.nonce);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUrl()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgWeixinAuth(");
		boolean first = true;

		if (isSetAppId()) {
			sb.append("appId:");
			if (this.appId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.appId);
			}
			first = false;
		}
		if (isSetTime()) {
			if (!first)
				sb.append(", ");
			sb.append("time:");
			sb.append(this.time);
			first = false;
		}
		if (isSetNonce()) {
			if (!first)
				sb.append(", ");
			sb.append("nonce:");
			if (this.nonce == null) {
				sb.append("null");
			}
			else {
				sb.append(this.nonce);
			}
			first = false;
		}
		if (isSetUrl()) {
			if (!first)
				sb.append(", ");
			sb.append("url:");
			if (this.url == null) {
				sb.append("null");
			}
			else {
				sb.append(this.url);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgWeixinAuthStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgWeixinAuthStandardScheme getScheme() {
			return new ArgWeixinAuthStandardScheme();
		}

	}

	private static class ArgWeixinAuthStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgWeixinAuth> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgWeixinAuth struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // APP_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.appId = iprot.readString();
						struct.setAppIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.time = iprot.readI32();
						struct.setTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // NONCE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nonce = iprot.readString();
						struct.setNonceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // URL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.url = iprot.readString();
						struct.setUrlIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgWeixinAuth struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.appId != null) {
				if (struct.isSetAppId()) {
					oprot.writeFieldBegin(APP_ID_FIELD_DESC);
					oprot.writeString(struct.appId);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetTime()) {
				oprot.writeFieldBegin(TIME_FIELD_DESC);
				oprot.writeI32(struct.time);
				oprot.writeFieldEnd();
			}
			if (struct.nonce != null) {
				if (struct.isSetNonce()) {
					oprot.writeFieldBegin(NONCE_FIELD_DESC);
					oprot.writeString(struct.nonce);
					oprot.writeFieldEnd();
				}
			}
			if (struct.url != null) {
				if (struct.isSetUrl()) {
					oprot.writeFieldBegin(URL_FIELD_DESC);
					oprot.writeString(struct.url);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgWeixinAuthTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgWeixinAuthTupleScheme getScheme() {
			return new ArgWeixinAuthTupleScheme();
		}

	}

	private static class ArgWeixinAuthTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgWeixinAuth> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgWeixinAuth struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetAppId()) {
				optionals.set(0);
			}
			if (struct.isSetTime()) {
				optionals.set(1);
			}
			if (struct.isSetNonce()) {
				optionals.set(2);
			}
			if (struct.isSetUrl()) {
				optionals.set(3);
			}
			oprot.writeBitSet(optionals, 4);
			if (struct.isSetAppId()) {
				oprot.writeString(struct.appId);
			}
			if (struct.isSetTime()) {
				oprot.writeI32(struct.time);
			}
			if (struct.isSetNonce()) {
				oprot.writeString(struct.nonce);
			}
			if (struct.isSetUrl()) {
				oprot.writeString(struct.url);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgWeixinAuth struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(4);
			if (incoming.get(0)) {
				struct.appId = iprot.readString();
				struct.setAppIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.time = iprot.readI32();
				struct.setTimeIsSet(true);
			}
			if (incoming.get(2)) {
				struct.nonce = iprot.readString();
				struct.setNonceIsSet(true);
			}
			if (incoming.get(3)) {
				struct.url = iprot.readString();
				struct.setUrlIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
