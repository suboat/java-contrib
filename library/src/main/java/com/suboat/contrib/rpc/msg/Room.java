/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.msg;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Room
		implements org.apache.thrift.TBase<Room, Room._Fields>, java.io.Serializable, Cloneable, Comparable<Room> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Room");

	private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"roomId", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidCreate", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField UID_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidTarget", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField IS_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isGroup", org.apache.thrift.protocol.TType.BOOL, (short) 6);

	private static final org.apache.thrift.protocol.TField IS_REMOVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isRemove", org.apache.thrift.protocol.TType.BOOL, (short) 7);

	private static final org.apache.thrift.protocol.TField IS_SERVICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isService", org.apache.thrift.protocol.TType.BOOL, (short) 8);

	private static final org.apache.thrift.protocol.TField IS_TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isTemp", org.apache.thrift.protocol.TType.BOOL, (short) 9);

	private static final org.apache.thrift.protocol.TField MEMBER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"memberNum", org.apache.thrift.protocol.TType.I32, (short) 10);

	private static final org.apache.thrift.protocol.TField GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"groupName", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField GROUP_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"groupInfo", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField TID_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"tidFrom", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RoomStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RoomTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String roomId; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uidCreate; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uidTarget; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public boolean isGroup; // required

	public boolean isRemove; // required

	public boolean isService; // required

	public boolean isTemp; // required

	public int memberNum; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String groupName; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String groupInfo; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String tidFrom; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		ROOM_ID((short) 1, "roomId"), UID_CREATE((short) 2, "uidCreate"), UID_TARGET((short) 3,
				"uidTarget"), CREATE_TIME((short) 4, "createTime"), UPDATE_TIME((short) 5, "updateTime"), IS_GROUP(
						(short) 6, "isGroup"), IS_REMOVE((short) 7, "isRemove"), IS_SERVICE((short) 8,
								"isService"), IS_TEMP((short) 9, "isTemp"), MEMBER_NUM((short) 10,
										"memberNum"), GROUP_NAME((short) 11, "groupName"), GROUP_INFO((short) 12,
												"groupInfo"), TID_FROM((short) 13, "tidFrom");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ROOM_ID
				return ROOM_ID;
			case 2: // UID_CREATE
				return UID_CREATE;
			case 3: // UID_TARGET
				return UID_TARGET;
			case 4: // CREATE_TIME
				return CREATE_TIME;
			case 5: // UPDATE_TIME
				return UPDATE_TIME;
			case 6: // IS_GROUP
				return IS_GROUP;
			case 7: // IS_REMOVE
				return IS_REMOVE;
			case 8: // IS_SERVICE
				return IS_SERVICE;
			case 9: // IS_TEMP
				return IS_TEMP;
			case 10: // MEMBER_NUM
				return MEMBER_NUM;
			case 11: // GROUP_NAME
				return GROUP_NAME;
			case 12: // GROUP_INFO
				return GROUP_INFO;
			case 13: // TID_FROM
				return TID_FROM;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISGROUP_ISSET_ID = 0;

	private static final int __ISREMOVE_ISSET_ID = 1;

	private static final int __ISSERVICE_ISSET_ID = 2;

	private static final int __ISTEMP_ISSET_ID = 3;

	private static final int __MEMBERNUM_ISSET_ID = 4;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.TID_FROM };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ROOM_ID,
				new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID_CREATE,
				new org.apache.thrift.meta_data.FieldMetaData("uidCreate",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID_TARGET,
				new org.apache.thrift.meta_data.FieldMetaData("uidTarget",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_GROUP,
				new org.apache.thrift.meta_data.FieldMetaData("isGroup",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_REMOVE,
				new org.apache.thrift.meta_data.FieldMetaData("isRemove",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_SERVICE,
				new org.apache.thrift.meta_data.FieldMetaData("isService",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_TEMP,
				new org.apache.thrift.meta_data.FieldMetaData("isTemp", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.MEMBER_NUM,
				new org.apache.thrift.meta_data.FieldMetaData("memberNum",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.GROUP_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("groupName",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.GROUP_INFO,
				new org.apache.thrift.meta_data.FieldMetaData("groupInfo",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TID_FROM,
				new org.apache.thrift.meta_data.FieldMetaData("tidFrom",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Room.class, metaDataMap);
	}

	public Room() {
	}

	public Room(java.lang.String roomId, java.lang.String uidCreate, java.lang.String uidTarget,
			java.lang.String createTime, java.lang.String updateTime, boolean isGroup, boolean isRemove,
			boolean isService, boolean isTemp, int memberNum, java.lang.String groupName, java.lang.String groupInfo) {
		this();
		this.roomId = roomId;
		this.uidCreate = uidCreate;
		this.uidTarget = uidTarget;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.isGroup = isGroup;
		setIsGroupIsSet(true);
		this.isRemove = isRemove;
		setIsRemoveIsSet(true);
		this.isService = isService;
		setIsServiceIsSet(true);
		this.isTemp = isTemp;
		setIsTempIsSet(true);
		this.memberNum = memberNum;
		setMemberNumIsSet(true);
		this.groupName = groupName;
		this.groupInfo = groupInfo;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Room(Room other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetRoomId()) {
			this.roomId = other.roomId;
		}
		if (other.isSetUidCreate()) {
			this.uidCreate = other.uidCreate;
		}
		if (other.isSetUidTarget()) {
			this.uidTarget = other.uidTarget;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.isGroup = other.isGroup;
		this.isRemove = other.isRemove;
		this.isService = other.isService;
		this.isTemp = other.isTemp;
		this.memberNum = other.memberNum;
		if (other.isSetGroupName()) {
			this.groupName = other.groupName;
		}
		if (other.isSetGroupInfo()) {
			this.groupInfo = other.groupInfo;
		}
		if (other.isSetTidFrom()) {
			this.tidFrom = other.tidFrom;
		}
	}

	public Room deepCopy() {
		return new Room(this);
	}

	@Override
	public void clear() {
		this.roomId = null;
		this.uidCreate = null;
		this.uidTarget = null;
		this.createTime = null;
		this.updateTime = null;
		setIsGroupIsSet(false);
		this.isGroup = false;
		setIsRemoveIsSet(false);
		this.isRemove = false;
		setIsServiceIsSet(false);
		this.isService = false;
		setIsTempIsSet(false);
		this.isTemp = false;
		setMemberNumIsSet(false);
		this.memberNum = 0;
		this.groupName = null;
		this.groupInfo = null;
		this.tidFrom = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRoomId() {
		return this.roomId;
	}

	public Room setRoomId(@org.apache.thrift.annotation.Nullable java.lang.String roomId) {
		this.roomId = roomId;
		return this;
	}

	public void unsetRoomId() {
		this.roomId = null;
	}

	/**
	 * Returns true if field roomId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRoomId() {
		return this.roomId != null;
	}

	public void setRoomIdIsSet(boolean value) {
		if (!value) {
			this.roomId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidCreate() {
		return this.uidCreate;
	}

	public Room setUidCreate(@org.apache.thrift.annotation.Nullable java.lang.String uidCreate) {
		this.uidCreate = uidCreate;
		return this;
	}

	public void unsetUidCreate() {
		this.uidCreate = null;
	}

	/**
	 * Returns true if field uidCreate is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUidCreate() {
		return this.uidCreate != null;
	}

	public void setUidCreateIsSet(boolean value) {
		if (!value) {
			this.uidCreate = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidTarget() {
		return this.uidTarget;
	}

	public Room setUidTarget(@org.apache.thrift.annotation.Nullable java.lang.String uidTarget) {
		this.uidTarget = uidTarget;
		return this;
	}

	public void unsetUidTarget() {
		this.uidTarget = null;
	}

	/**
	 * Returns true if field uidTarget is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUidTarget() {
		return this.uidTarget != null;
	}

	public void setUidTargetIsSet(boolean value) {
		if (!value) {
			this.uidTarget = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Room setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Room setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public boolean isIsGroup() {
		return this.isGroup;
	}

	public Room setIsGroup(boolean isGroup) {
		this.isGroup = isGroup;
		setIsGroupIsSet(true);
		return this;
	}

	public void unsetIsGroup() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISGROUP_ISSET_ID);
	}

	/**
	 * Returns true if field isGroup is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsGroup() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISGROUP_ISSET_ID);
	}

	public void setIsGroupIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISGROUP_ISSET_ID, value);
	}

	public boolean isIsRemove() {
		return this.isRemove;
	}

	public Room setIsRemove(boolean isRemove) {
		this.isRemove = isRemove;
		setIsRemoveIsSet(true);
		return this;
	}

	public void unsetIsRemove() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREMOVE_ISSET_ID);
	}

	/**
	 * Returns true if field isRemove is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsRemove() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREMOVE_ISSET_ID);
	}

	public void setIsRemoveIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREMOVE_ISSET_ID, value);
	}

	public boolean isIsService() {
		return this.isService;
	}

	public Room setIsService(boolean isService) {
		this.isService = isService;
		setIsServiceIsSet(true);
		return this;
	}

	public void unsetIsService() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSERVICE_ISSET_ID);
	}

	/**
	 * Returns true if field isService is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsService() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSERVICE_ISSET_ID);
	}

	public void setIsServiceIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSERVICE_ISSET_ID, value);
	}

	public boolean isIsTemp() {
		return this.isTemp;
	}

	public Room setIsTemp(boolean isTemp) {
		this.isTemp = isTemp;
		setIsTempIsSet(true);
		return this;
	}

	public void unsetIsTemp() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTEMP_ISSET_ID);
	}

	/**
	 * Returns true if field isTemp is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsTemp() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTEMP_ISSET_ID);
	}

	public void setIsTempIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTEMP_ISSET_ID, value);
	}

	public int getMemberNum() {
		return this.memberNum;
	}

	public Room setMemberNum(int memberNum) {
		this.memberNum = memberNum;
		setMemberNumIsSet(true);
		return this;
	}

	public void unsetMemberNum() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMBERNUM_ISSET_ID);
	}

	/**
	 * Returns true if field memberNum is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMemberNum() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMBERNUM_ISSET_ID);
	}

	public void setMemberNumIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMBERNUM_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getGroupName() {
		return this.groupName;
	}

	public Room setGroupName(@org.apache.thrift.annotation.Nullable java.lang.String groupName) {
		this.groupName = groupName;
		return this;
	}

	public void unsetGroupName() {
		this.groupName = null;
	}

	/**
	 * Returns true if field groupName is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetGroupName() {
		return this.groupName != null;
	}

	public void setGroupNameIsSet(boolean value) {
		if (!value) {
			this.groupName = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getGroupInfo() {
		return this.groupInfo;
	}

	public Room setGroupInfo(@org.apache.thrift.annotation.Nullable java.lang.String groupInfo) {
		this.groupInfo = groupInfo;
		return this;
	}

	public void unsetGroupInfo() {
		this.groupInfo = null;
	}

	/**
	 * Returns true if field groupInfo is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetGroupInfo() {
		return this.groupInfo != null;
	}

	public void setGroupInfoIsSet(boolean value) {
		if (!value) {
			this.groupInfo = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTidFrom() {
		return this.tidFrom;
	}

	public Room setTidFrom(@org.apache.thrift.annotation.Nullable java.lang.String tidFrom) {
		this.tidFrom = tidFrom;
		return this;
	}

	public void unsetTidFrom() {
		this.tidFrom = null;
	}

	/**
	 * Returns true if field tidFrom is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTidFrom() {
		return this.tidFrom != null;
	}

	public void setTidFromIsSet(boolean value) {
		if (!value) {
			this.tidFrom = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case ROOM_ID:
			if (value == null) {
				unsetRoomId();
			}
			else {
				setRoomId((java.lang.String) value);
			}
			break;

		case UID_CREATE:
			if (value == null) {
				unsetUidCreate();
			}
			else {
				setUidCreate((java.lang.String) value);
			}
			break;

		case UID_TARGET:
			if (value == null) {
				unsetUidTarget();
			}
			else {
				setUidTarget((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case IS_GROUP:
			if (value == null) {
				unsetIsGroup();
			}
			else {
				setIsGroup((java.lang.Boolean) value);
			}
			break;

		case IS_REMOVE:
			if (value == null) {
				unsetIsRemove();
			}
			else {
				setIsRemove((java.lang.Boolean) value);
			}
			break;

		case IS_SERVICE:
			if (value == null) {
				unsetIsService();
			}
			else {
				setIsService((java.lang.Boolean) value);
			}
			break;

		case IS_TEMP:
			if (value == null) {
				unsetIsTemp();
			}
			else {
				setIsTemp((java.lang.Boolean) value);
			}
			break;

		case MEMBER_NUM:
			if (value == null) {
				unsetMemberNum();
			}
			else {
				setMemberNum((java.lang.Integer) value);
			}
			break;

		case GROUP_NAME:
			if (value == null) {
				unsetGroupName();
			}
			else {
				setGroupName((java.lang.String) value);
			}
			break;

		case GROUP_INFO:
			if (value == null) {
				unsetGroupInfo();
			}
			else {
				setGroupInfo((java.lang.String) value);
			}
			break;

		case TID_FROM:
			if (value == null) {
				unsetTidFrom();
			}
			else {
				setTidFrom((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ROOM_ID:
			return getRoomId();

		case UID_CREATE:
			return getUidCreate();

		case UID_TARGET:
			return getUidTarget();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case IS_GROUP:
			return isIsGroup();

		case IS_REMOVE:
			return isIsRemove();

		case IS_SERVICE:
			return isIsService();

		case IS_TEMP:
			return isIsTemp();

		case MEMBER_NUM:
			return getMemberNum();

		case GROUP_NAME:
			return getGroupName();

		case GROUP_INFO:
			return getGroupInfo();

		case TID_FROM:
			return getTidFrom();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ROOM_ID:
			return isSetRoomId();
		case UID_CREATE:
			return isSetUidCreate();
		case UID_TARGET:
			return isSetUidTarget();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case IS_GROUP:
			return isSetIsGroup();
		case IS_REMOVE:
			return isSetIsRemove();
		case IS_SERVICE:
			return isSetIsService();
		case IS_TEMP:
			return isSetIsTemp();
		case MEMBER_NUM:
			return isSetMemberNum();
		case GROUP_NAME:
			return isSetGroupName();
		case GROUP_INFO:
			return isSetGroupInfo();
		case TID_FROM:
			return isSetTidFrom();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Room)
			return this.equals((Room) that);
		return false;
	}

	public boolean equals(Room that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_roomId = true && this.isSetRoomId();
		boolean that_present_roomId = true && that.isSetRoomId();
		if (this_present_roomId || that_present_roomId) {
			if (!(this_present_roomId && that_present_roomId))
				return false;
			if (!this.roomId.equals(that.roomId))
				return false;
		}

		boolean this_present_uidCreate = true && this.isSetUidCreate();
		boolean that_present_uidCreate = true && that.isSetUidCreate();
		if (this_present_uidCreate || that_present_uidCreate) {
			if (!(this_present_uidCreate && that_present_uidCreate))
				return false;
			if (!this.uidCreate.equals(that.uidCreate))
				return false;
		}

		boolean this_present_uidTarget = true && this.isSetUidTarget();
		boolean that_present_uidTarget = true && that.isSetUidTarget();
		if (this_present_uidTarget || that_present_uidTarget) {
			if (!(this_present_uidTarget && that_present_uidTarget))
				return false;
			if (!this.uidTarget.equals(that.uidTarget))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_isGroup = true;
		boolean that_present_isGroup = true;
		if (this_present_isGroup || that_present_isGroup) {
			if (!(this_present_isGroup && that_present_isGroup))
				return false;
			if (this.isGroup != that.isGroup)
				return false;
		}

		boolean this_present_isRemove = true;
		boolean that_present_isRemove = true;
		if (this_present_isRemove || that_present_isRemove) {
			if (!(this_present_isRemove && that_present_isRemove))
				return false;
			if (this.isRemove != that.isRemove)
				return false;
		}

		boolean this_present_isService = true;
		boolean that_present_isService = true;
		if (this_present_isService || that_present_isService) {
			if (!(this_present_isService && that_present_isService))
				return false;
			if (this.isService != that.isService)
				return false;
		}

		boolean this_present_isTemp = true;
		boolean that_present_isTemp = true;
		if (this_present_isTemp || that_present_isTemp) {
			if (!(this_present_isTemp && that_present_isTemp))
				return false;
			if (this.isTemp != that.isTemp)
				return false;
		}

		boolean this_present_memberNum = true;
		boolean that_present_memberNum = true;
		if (this_present_memberNum || that_present_memberNum) {
			if (!(this_present_memberNum && that_present_memberNum))
				return false;
			if (this.memberNum != that.memberNum)
				return false;
		}

		boolean this_present_groupName = true && this.isSetGroupName();
		boolean that_present_groupName = true && that.isSetGroupName();
		if (this_present_groupName || that_present_groupName) {
			if (!(this_present_groupName && that_present_groupName))
				return false;
			if (!this.groupName.equals(that.groupName))
				return false;
		}

		boolean this_present_groupInfo = true && this.isSetGroupInfo();
		boolean that_present_groupInfo = true && that.isSetGroupInfo();
		if (this_present_groupInfo || that_present_groupInfo) {
			if (!(this_present_groupInfo && that_present_groupInfo))
				return false;
			if (!this.groupInfo.equals(that.groupInfo))
				return false;
		}

		boolean this_present_tidFrom = true && this.isSetTidFrom();
		boolean that_present_tidFrom = true && that.isSetTidFrom();
		if (this_present_tidFrom || that_present_tidFrom) {
			if (!(this_present_tidFrom && that_present_tidFrom))
				return false;
			if (!this.tidFrom.equals(that.tidFrom))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetRoomId()) ? 131071 : 524287);
		if (isSetRoomId())
			hashCode = hashCode * 8191 + roomId.hashCode();

		hashCode = hashCode * 8191 + ((isSetUidCreate()) ? 131071 : 524287);
		if (isSetUidCreate())
			hashCode = hashCode * 8191 + uidCreate.hashCode();

		hashCode = hashCode * 8191 + ((isSetUidTarget()) ? 131071 : 524287);
		if (isSetUidTarget())
			hashCode = hashCode * 8191 + uidTarget.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isGroup) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isRemove) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isService) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isTemp) ? 131071 : 524287);

		hashCode = hashCode * 8191 + memberNum;

		hashCode = hashCode * 8191 + ((isSetGroupName()) ? 131071 : 524287);
		if (isSetGroupName())
			hashCode = hashCode * 8191 + groupName.hashCode();

		hashCode = hashCode * 8191 + ((isSetGroupInfo()) ? 131071 : 524287);
		if (isSetGroupInfo())
			hashCode = hashCode * 8191 + groupInfo.hashCode();

		hashCode = hashCode * 8191 + ((isSetTidFrom()) ? 131071 : 524287);
		if (isSetTidFrom())
			hashCode = hashCode * 8191 + tidFrom.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(Room other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRoomId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidCreate()).compareTo(other.isSetUidCreate());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidCreate()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidCreate, other.uidCreate);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidTarget()).compareTo(other.isSetUidTarget());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidTarget()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidTarget, other.uidTarget);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsGroup()).compareTo(other.isSetIsGroup());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsGroup()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGroup, other.isGroup);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsRemove()).compareTo(other.isSetIsRemove());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsRemove()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRemove, other.isRemove);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsService()).compareTo(other.isSetIsService());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsService()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isService, other.isService);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsTemp()).compareTo(other.isSetIsTemp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsTemp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTemp, other.isTemp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMemberNum()).compareTo(other.isSetMemberNum());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMemberNum()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberNum, other.memberNum);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetGroupName()).compareTo(other.isSetGroupName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGroupName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupName, other.groupName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetGroupInfo()).compareTo(other.isSetGroupInfo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGroupInfo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupInfo, other.groupInfo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTidFrom()).compareTo(other.isSetTidFrom());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTidFrom()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tidFrom, other.tidFrom);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Room(");
		boolean first = true;

		sb.append("roomId:");
		if (this.roomId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.roomId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uidCreate:");
		if (this.uidCreate == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uidCreate);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uidTarget:");
		if (this.uidTarget == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uidTarget);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isGroup:");
		sb.append(this.isGroup);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isRemove:");
		sb.append(this.isRemove);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isService:");
		sb.append(this.isService);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isTemp:");
		sb.append(this.isTemp);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("memberNum:");
		sb.append(this.memberNum);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("groupName:");
		if (this.groupName == null) {
			sb.append("null");
		}
		else {
			sb.append(this.groupName);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("groupInfo:");
		if (this.groupInfo == null) {
			sb.append("null");
		}
		else {
			sb.append(this.groupInfo);
		}
		first = false;
		if (isSetTidFrom()) {
			if (!first)
				sb.append(", ");
			sb.append("tidFrom:");
			if (this.tidFrom == null) {
				sb.append("null");
			}
			else {
				sb.append(this.tidFrom);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class RoomStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public RoomStandardScheme getScheme() {
			return new RoomStandardScheme();
		}

	}

	private static class RoomStandardScheme extends org.apache.thrift.scheme.StandardScheme<Room> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Room struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ROOM_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.roomId = iprot.readString();
						struct.setRoomIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID_CREATE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidCreate = iprot.readString();
						struct.setUidCreateIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // UID_TARGET
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidTarget = iprot.readString();
						struct.setUidTargetIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // IS_GROUP
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isGroup = iprot.readBool();
						struct.setIsGroupIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // IS_REMOVE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isRemove = iprot.readBool();
						struct.setIsRemoveIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // IS_SERVICE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isService = iprot.readBool();
						struct.setIsServiceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_TEMP
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isTemp = iprot.readBool();
						struct.setIsTempIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // MEMBER_NUM
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.memberNum = iprot.readI32();
						struct.setMemberNumIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // GROUP_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.groupName = iprot.readString();
						struct.setGroupNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // GROUP_INFO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.groupInfo = iprot.readString();
						struct.setGroupInfoIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // TID_FROM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.tidFrom = iprot.readString();
						struct.setTidFromIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Room struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.roomId != null) {
				oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
				oprot.writeString(struct.roomId);
				oprot.writeFieldEnd();
			}
			if (struct.uidCreate != null) {
				oprot.writeFieldBegin(UID_CREATE_FIELD_DESC);
				oprot.writeString(struct.uidCreate);
				oprot.writeFieldEnd();
			}
			if (struct.uidTarget != null) {
				oprot.writeFieldBegin(UID_TARGET_FIELD_DESC);
				oprot.writeString(struct.uidTarget);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_GROUP_FIELD_DESC);
			oprot.writeBool(struct.isGroup);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_REMOVE_FIELD_DESC);
			oprot.writeBool(struct.isRemove);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_SERVICE_FIELD_DESC);
			oprot.writeBool(struct.isService);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_TEMP_FIELD_DESC);
			oprot.writeBool(struct.isTemp);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MEMBER_NUM_FIELD_DESC);
			oprot.writeI32(struct.memberNum);
			oprot.writeFieldEnd();
			if (struct.groupName != null) {
				oprot.writeFieldBegin(GROUP_NAME_FIELD_DESC);
				oprot.writeString(struct.groupName);
				oprot.writeFieldEnd();
			}
			if (struct.groupInfo != null) {
				oprot.writeFieldBegin(GROUP_INFO_FIELD_DESC);
				oprot.writeString(struct.groupInfo);
				oprot.writeFieldEnd();
			}
			if (struct.tidFrom != null) {
				if (struct.isSetTidFrom()) {
					oprot.writeFieldBegin(TID_FROM_FIELD_DESC);
					oprot.writeString(struct.tidFrom);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class RoomTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public RoomTupleScheme getScheme() {
			return new RoomTupleScheme();
		}

	}

	private static class RoomTupleScheme extends org.apache.thrift.scheme.TupleScheme<Room> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Room struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetRoomId()) {
				optionals.set(0);
			}
			if (struct.isSetUidCreate()) {
				optionals.set(1);
			}
			if (struct.isSetUidTarget()) {
				optionals.set(2);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(3);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(4);
			}
			if (struct.isSetIsGroup()) {
				optionals.set(5);
			}
			if (struct.isSetIsRemove()) {
				optionals.set(6);
			}
			if (struct.isSetIsService()) {
				optionals.set(7);
			}
			if (struct.isSetIsTemp()) {
				optionals.set(8);
			}
			if (struct.isSetMemberNum()) {
				optionals.set(9);
			}
			if (struct.isSetGroupName()) {
				optionals.set(10);
			}
			if (struct.isSetGroupInfo()) {
				optionals.set(11);
			}
			if (struct.isSetTidFrom()) {
				optionals.set(12);
			}
			oprot.writeBitSet(optionals, 13);
			if (struct.isSetRoomId()) {
				oprot.writeString(struct.roomId);
			}
			if (struct.isSetUidCreate()) {
				oprot.writeString(struct.uidCreate);
			}
			if (struct.isSetUidTarget()) {
				oprot.writeString(struct.uidTarget);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetIsGroup()) {
				oprot.writeBool(struct.isGroup);
			}
			if (struct.isSetIsRemove()) {
				oprot.writeBool(struct.isRemove);
			}
			if (struct.isSetIsService()) {
				oprot.writeBool(struct.isService);
			}
			if (struct.isSetIsTemp()) {
				oprot.writeBool(struct.isTemp);
			}
			if (struct.isSetMemberNum()) {
				oprot.writeI32(struct.memberNum);
			}
			if (struct.isSetGroupName()) {
				oprot.writeString(struct.groupName);
			}
			if (struct.isSetGroupInfo()) {
				oprot.writeString(struct.groupInfo);
			}
			if (struct.isSetTidFrom()) {
				oprot.writeString(struct.tidFrom);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Room struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(13);
			if (incoming.get(0)) {
				struct.roomId = iprot.readString();
				struct.setRoomIdIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uidCreate = iprot.readString();
				struct.setUidCreateIsSet(true);
			}
			if (incoming.get(2)) {
				struct.uidTarget = iprot.readString();
				struct.setUidTargetIsSet(true);
			}
			if (incoming.get(3)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.isGroup = iprot.readBool();
				struct.setIsGroupIsSet(true);
			}
			if (incoming.get(6)) {
				struct.isRemove = iprot.readBool();
				struct.setIsRemoveIsSet(true);
			}
			if (incoming.get(7)) {
				struct.isService = iprot.readBool();
				struct.setIsServiceIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isTemp = iprot.readBool();
				struct.setIsTempIsSet(true);
			}
			if (incoming.get(9)) {
				struct.memberNum = iprot.readI32();
				struct.setMemberNumIsSet(true);
			}
			if (incoming.get(10)) {
				struct.groupName = iprot.readString();
				struct.setGroupNameIsSet(true);
			}
			if (incoming.get(11)) {
				struct.groupInfo = iprot.readString();
				struct.setGroupInfoIsSet(true);
			}
			if (incoming.get(12)) {
				struct.tidFrom = iprot.readString();
				struct.setTidFromIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
