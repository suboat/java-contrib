/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 用户实例
 */
public class User
		implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"User");

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField IS_STAFF_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isStaff", org.apache.thrift.protocol.TType.BOOL, (short) 2);

	private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isActive", org.apache.thrift.protocol.TType.BOOL, (short) 3);

	private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isDelete", org.apache.thrift.protocol.TType.BOOL, (short) 4);

	private static final org.apache.thrift.protocol.TField IS_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isAbstract", org.apache.thrift.protocol.TType.BOOL, (short) 26);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField NUM_AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numAuth", org.apache.thrift.protocol.TType.I32, (short) 8);

	private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"username", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"email", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField LOC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"locNum", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"phone", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField UNIQUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"unique", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField SALT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"salt", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"source", org.apache.thrift.protocol.TType.STRING, (short) 15);

	private static final org.apache.thrift.protocol.TField STATUS_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusEmail", org.apache.thrift.protocol.TType.I32, (short) 16);

	private static final org.apache.thrift.protocol.TField STATUS_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusPhone", org.apache.thrift.protocol.TType.I32, (short) 17);

	private static final org.apache.thrift.protocol.TField STATUS_PSW_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusPsw", org.apache.thrift.protocol.TType.I32, (short) 18);

	private static final org.apache.thrift.protocol.TField STATUS_QUEST_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusQuest", org.apache.thrift.protocol.TType.I32, (short) 19);

	private static final org.apache.thrift.protocol.TField STATUS_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusCard", org.apache.thrift.protocol.TType.I32, (short) 20);

	private static final org.apache.thrift.protocol.TField IS_TWO_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isTwoFactor", org.apache.thrift.protocol.TType.BOOL, (short) 21);

	private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"lang", org.apache.thrift.protocol.TType.STRING, (short) 22);

	private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"level", org.apache.thrift.protocol.TType.I32, (short) 25);

	private static final org.apache.thrift.protocol.TField NUM_USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numUsername", org.apache.thrift.protocol.TType.I32, (short) 23);

	private static final org.apache.thrift.protocol.TField NUM_UNIQUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numUnique", org.apache.thrift.protocol.TType.I32, (short) 24);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public boolean isStaff; // required

	public boolean isActive; // required

	public boolean isDelete; // required

	public boolean isAbstract; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public int status; // required

	public int numAuth; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String username; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String email; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String locNum; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String phone; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String unique; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String salt; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String source; // required

	public int statusEmail; // required

	public int statusPhone; // required

	public int statusPsw; // required

	public int statusQuest; // required

	public int statusCard; // required

	public boolean isTwoFactor; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String lang; // required

	public int level; // required

	public int numUsername; // required

	public int numUnique; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID((short) 1, "uid"), IS_STAFF((short) 2, "isStaff"), IS_ACTIVE((short) 3, "isActive"), IS_DELETE((short) 4,
				"isDelete"), IS_ABSTRACT((short) 26, "isAbstract"), CREATE_TIME((short) 5, "createTime"), UPDATE_TIME(
						(short) 6,
						"updateTime"), STATUS((short) 7, "status"), NUM_AUTH((short) 8, "numAuth"), USERNAME((short) 9,
								"username"), EMAIL((short) 10, "email"), LOC_NUM((short) 11, "locNum"), PHONE(
										(short) 12,
										"phone"), UNIQUE((short) 13, "unique"), SALT((short) 14, "salt"), SOURCE(
												(short) 15,
												"source"), STATUS_EMAIL((short) 16, "statusEmail"), STATUS_PHONE(
														(short) 17, "statusPhone"), STATUS_PSW((short) 18,
																"statusPsw"), STATUS_QUEST((short) 19,
																		"statusQuest"), STATUS_CARD((short) 20,
																				"statusCard"), IS_TWO_FACTOR((short) 21,
																						"isTwoFactor"), LANG((short) 22,
																								"lang"), LEVEL(
																										(short) 25,
																										"level"), NUM_USERNAME(
																												(short) 23,
																												"numUsername"), NUM_UNIQUE(
																														(short) 24,
																														"numUnique");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID
				return UID;
			case 2: // IS_STAFF
				return IS_STAFF;
			case 3: // IS_ACTIVE
				return IS_ACTIVE;
			case 4: // IS_DELETE
				return IS_DELETE;
			case 26: // IS_ABSTRACT
				return IS_ABSTRACT;
			case 5: // CREATE_TIME
				return CREATE_TIME;
			case 6: // UPDATE_TIME
				return UPDATE_TIME;
			case 7: // STATUS
				return STATUS;
			case 8: // NUM_AUTH
				return NUM_AUTH;
			case 9: // USERNAME
				return USERNAME;
			case 10: // EMAIL
				return EMAIL;
			case 11: // LOC_NUM
				return LOC_NUM;
			case 12: // PHONE
				return PHONE;
			case 13: // UNIQUE
				return UNIQUE;
			case 14: // SALT
				return SALT;
			case 15: // SOURCE
				return SOURCE;
			case 16: // STATUS_EMAIL
				return STATUS_EMAIL;
			case 17: // STATUS_PHONE
				return STATUS_PHONE;
			case 18: // STATUS_PSW
				return STATUS_PSW;
			case 19: // STATUS_QUEST
				return STATUS_QUEST;
			case 20: // STATUS_CARD
				return STATUS_CARD;
			case 21: // IS_TWO_FACTOR
				return IS_TWO_FACTOR;
			case 22: // LANG
				return LANG;
			case 25: // LEVEL
				return LEVEL;
			case 23: // NUM_USERNAME
				return NUM_USERNAME;
			case 24: // NUM_UNIQUE
				return NUM_UNIQUE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISSTAFF_ISSET_ID = 0;

	private static final int __ISACTIVE_ISSET_ID = 1;

	private static final int __ISDELETE_ISSET_ID = 2;

	private static final int __ISABSTRACT_ISSET_ID = 3;

	private static final int __STATUS_ISSET_ID = 4;

	private static final int __NUMAUTH_ISSET_ID = 5;

	private static final int __STATUSEMAIL_ISSET_ID = 6;

	private static final int __STATUSPHONE_ISSET_ID = 7;

	private static final int __STATUSPSW_ISSET_ID = 8;

	private static final int __STATUSQUEST_ISSET_ID = 9;

	private static final int __STATUSCARD_ISSET_ID = 10;

	private static final int __ISTWOFACTOR_ISSET_ID = 11;

	private static final int __LEVEL_ISSET_ID = 12;

	private static final int __NUMUSERNAME_ISSET_ID = 13;

	private static final int __NUMUNIQUE_ISSET_ID = 14;

	private short __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_STAFF,
				new org.apache.thrift.meta_data.FieldMetaData("isStaff",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_ACTIVE,
				new org.apache.thrift.meta_data.FieldMetaData("isActive",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_DELETE,
				new org.apache.thrift.meta_data.FieldMetaData("isDelete",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_ABSTRACT,
				new org.apache.thrift.meta_data.FieldMetaData("isAbstract",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NUM_AUTH,
				new org.apache.thrift.meta_data.FieldMetaData("numAuth",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.USERNAME,
				new org.apache.thrift.meta_data.FieldMetaData("username",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EMAIL,
				new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LOC_NUM,
				new org.apache.thrift.meta_data.FieldMetaData("locNum", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PHONE,
				new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UNIQUE,
				new org.apache.thrift.meta_data.FieldMetaData("unique", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SALT,
				new org.apache.thrift.meta_data.FieldMetaData("salt", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SOURCE,
				new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STATUS_EMAIL,
				new org.apache.thrift.meta_data.FieldMetaData("statusEmail",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_PHONE,
				new org.apache.thrift.meta_data.FieldMetaData("statusPhone",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_PSW,
				new org.apache.thrift.meta_data.FieldMetaData("statusPsw",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_QUEST,
				new org.apache.thrift.meta_data.FieldMetaData("statusQuest",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_CARD,
				new org.apache.thrift.meta_data.FieldMetaData("statusCard",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_TWO_FACTOR,
				new org.apache.thrift.meta_data.FieldMetaData("isTwoFactor",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.LANG,
				new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LEVEL,
				new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NUM_USERNAME,
				new org.apache.thrift.meta_data.FieldMetaData("numUsername",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NUM_UNIQUE,
				new org.apache.thrift.meta_data.FieldMetaData("numUnique",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
	}

	public User() {
	}

	public User(java.lang.String uid, boolean isStaff, boolean isActive, boolean isDelete, boolean isAbstract,
			java.lang.String createTime, java.lang.String updateTime, int status, int numAuth,
			java.lang.String username, java.lang.String email, java.lang.String locNum, java.lang.String phone,
			java.lang.String unique, java.lang.String salt, java.lang.String source, int statusEmail, int statusPhone,
			int statusPsw, int statusQuest, int statusCard, boolean isTwoFactor, java.lang.String lang, int level,
			int numUsername, int numUnique) {
		this();
		this.uid = uid;
		this.isStaff = isStaff;
		setIsStaffIsSet(true);
		this.isActive = isActive;
		setIsActiveIsSet(true);
		this.isDelete = isDelete;
		setIsDeleteIsSet(true);
		this.isAbstract = isAbstract;
		setIsAbstractIsSet(true);
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.status = status;
		setStatusIsSet(true);
		this.numAuth = numAuth;
		setNumAuthIsSet(true);
		this.username = username;
		this.email = email;
		this.locNum = locNum;
		this.phone = phone;
		this.unique = unique;
		this.salt = salt;
		this.source = source;
		this.statusEmail = statusEmail;
		setStatusEmailIsSet(true);
		this.statusPhone = statusPhone;
		setStatusPhoneIsSet(true);
		this.statusPsw = statusPsw;
		setStatusPswIsSet(true);
		this.statusQuest = statusQuest;
		setStatusQuestIsSet(true);
		this.statusCard = statusCard;
		setStatusCardIsSet(true);
		this.isTwoFactor = isTwoFactor;
		setIsTwoFactorIsSet(true);
		this.lang = lang;
		this.level = level;
		setLevelIsSet(true);
		this.numUsername = numUsername;
		setNumUsernameIsSet(true);
		this.numUnique = numUnique;
		setNumUniqueIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public User(User other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		this.isStaff = other.isStaff;
		this.isActive = other.isActive;
		this.isDelete = other.isDelete;
		this.isAbstract = other.isAbstract;
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.status = other.status;
		this.numAuth = other.numAuth;
		if (other.isSetUsername()) {
			this.username = other.username;
		}
		if (other.isSetEmail()) {
			this.email = other.email;
		}
		if (other.isSetLocNum()) {
			this.locNum = other.locNum;
		}
		if (other.isSetPhone()) {
			this.phone = other.phone;
		}
		if (other.isSetUnique()) {
			this.unique = other.unique;
		}
		if (other.isSetSalt()) {
			this.salt = other.salt;
		}
		if (other.isSetSource()) {
			this.source = other.source;
		}
		this.statusEmail = other.statusEmail;
		this.statusPhone = other.statusPhone;
		this.statusPsw = other.statusPsw;
		this.statusQuest = other.statusQuest;
		this.statusCard = other.statusCard;
		this.isTwoFactor = other.isTwoFactor;
		if (other.isSetLang()) {
			this.lang = other.lang;
		}
		this.level = other.level;
		this.numUsername = other.numUsername;
		this.numUnique = other.numUnique;
	}

	public User deepCopy() {
		return new User(this);
	}

	@Override
	public void clear() {
		this.uid = null;
		setIsStaffIsSet(false);
		this.isStaff = false;
		setIsActiveIsSet(false);
		this.isActive = false;
		setIsDeleteIsSet(false);
		this.isDelete = false;
		setIsAbstractIsSet(false);
		this.isAbstract = false;
		this.createTime = null;
		this.updateTime = null;
		setStatusIsSet(false);
		this.status = 0;
		setNumAuthIsSet(false);
		this.numAuth = 0;
		this.username = null;
		this.email = null;
		this.locNum = null;
		this.phone = null;
		this.unique = null;
		this.salt = null;
		this.source = null;
		setStatusEmailIsSet(false);
		this.statusEmail = 0;
		setStatusPhoneIsSet(false);
		this.statusPhone = 0;
		setStatusPswIsSet(false);
		this.statusPsw = 0;
		setStatusQuestIsSet(false);
		this.statusQuest = 0;
		setStatusCardIsSet(false);
		this.statusCard = 0;
		setIsTwoFactorIsSet(false);
		this.isTwoFactor = false;
		this.lang = null;
		setLevelIsSet(false);
		this.level = 0;
		setNumUsernameIsSet(false);
		this.numUsername = 0;
		setNumUniqueIsSet(false);
		this.numUnique = 0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public User setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	public boolean isIsStaff() {
		return this.isStaff;
	}

	public User setIsStaff(boolean isStaff) {
		this.isStaff = isStaff;
		setIsStaffIsSet(true);
		return this;
	}

	public void unsetIsStaff() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTAFF_ISSET_ID);
	}

	/**
	 * Returns true if field isStaff is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsStaff() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTAFF_ISSET_ID);
	}

	public void setIsStaffIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSTAFF_ISSET_ID, value);
	}

	public boolean isIsActive() {
		return this.isActive;
	}

	public User setIsActive(boolean isActive) {
		this.isActive = isActive;
		setIsActiveIsSet(true);
		return this;
	}

	public void unsetIsActive() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	/**
	 * Returns true if field isActive is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsActive() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	public void setIsActiveIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISACTIVE_ISSET_ID, value);
	}

	public boolean isIsDelete() {
		return this.isDelete;
	}

	public User setIsDelete(boolean isDelete) {
		this.isDelete = isDelete;
		setIsDeleteIsSet(true);
		return this;
	}

	public void unsetIsDelete() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	/**
	 * Returns true if field isDelete is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsDelete() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	public void setIsDeleteIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
	}

	public boolean isIsAbstract() {
		return this.isAbstract;
	}

	public User setIsAbstract(boolean isAbstract) {
		this.isAbstract = isAbstract;
		setIsAbstractIsSet(true);
		return this;
	}

	public void unsetIsAbstract() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
	}

	/**
	 * Returns true if field isAbstract is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsAbstract() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
	}

	public void setIsAbstractIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISABSTRACT_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public User setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public User setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public User setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public int getNumAuth() {
		return this.numAuth;
	}

	public User setNumAuth(int numAuth) {
		this.numAuth = numAuth;
		setNumAuthIsSet(true);
		return this;
	}

	public void unsetNumAuth() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMAUTH_ISSET_ID);
	}

	/**
	 * Returns true if field numAuth is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumAuth() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMAUTH_ISSET_ID);
	}

	public void setNumAuthIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMAUTH_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUsername() {
		return this.username;
	}

	public User setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
		this.username = username;
		return this;
	}

	public void unsetUsername() {
		this.username = null;
	}

	/**
	 * Returns true if field username is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUsername() {
		return this.username != null;
	}

	public void setUsernameIsSet(boolean value) {
		if (!value) {
			this.username = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getEmail() {
		return this.email;
	}

	public User setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
		this.email = email;
		return this;
	}

	public void unsetEmail() {
		this.email = null;
	}

	/**
	 * Returns true if field email is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetEmail() {
		return this.email != null;
	}

	public void setEmailIsSet(boolean value) {
		if (!value) {
			this.email = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLocNum() {
		return this.locNum;
	}

	public User setLocNum(@org.apache.thrift.annotation.Nullable java.lang.String locNum) {
		this.locNum = locNum;
		return this;
	}

	public void unsetLocNum() {
		this.locNum = null;
	}

	/**
	 * Returns true if field locNum is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLocNum() {
		return this.locNum != null;
	}

	public void setLocNumIsSet(boolean value) {
		if (!value) {
			this.locNum = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPhone() {
		return this.phone;
	}

	public User setPhone(@org.apache.thrift.annotation.Nullable java.lang.String phone) {
		this.phone = phone;
		return this;
	}

	public void unsetPhone() {
		this.phone = null;
	}

	/**
	 * Returns true if field phone is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPhone() {
		return this.phone != null;
	}

	public void setPhoneIsSet(boolean value) {
		if (!value) {
			this.phone = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUnique() {
		return this.unique;
	}

	public User setUnique(@org.apache.thrift.annotation.Nullable java.lang.String unique) {
		this.unique = unique;
		return this;
	}

	public void unsetUnique() {
		this.unique = null;
	}

	/**
	 * Returns true if field unique is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUnique() {
		return this.unique != null;
	}

	public void setUniqueIsSet(boolean value) {
		if (!value) {
			this.unique = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSalt() {
		return this.salt;
	}

	public User setSalt(@org.apache.thrift.annotation.Nullable java.lang.String salt) {
		this.salt = salt;
		return this;
	}

	public void unsetSalt() {
		this.salt = null;
	}

	/**
	 * Returns true if field salt is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSalt() {
		return this.salt != null;
	}

	public void setSaltIsSet(boolean value) {
		if (!value) {
			this.salt = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSource() {
		return this.source;
	}

	public User setSource(@org.apache.thrift.annotation.Nullable java.lang.String source) {
		this.source = source;
		return this;
	}

	public void unsetSource() {
		this.source = null;
	}

	/**
	 * Returns true if field source is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSource() {
		return this.source != null;
	}

	public void setSourceIsSet(boolean value) {
		if (!value) {
			this.source = null;
		}
	}

	public int getStatusEmail() {
		return this.statusEmail;
	}

	public User setStatusEmail(int statusEmail) {
		this.statusEmail = statusEmail;
		setStatusEmailIsSet(true);
		return this;
	}

	public void unsetStatusEmail() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSEMAIL_ISSET_ID);
	}

	/**
	 * Returns true if field statusEmail is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusEmail() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSEMAIL_ISSET_ID);
	}

	public void setStatusEmailIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSEMAIL_ISSET_ID, value);
	}

	public int getStatusPhone() {
		return this.statusPhone;
	}

	public User setStatusPhone(int statusPhone) {
		this.statusPhone = statusPhone;
		setStatusPhoneIsSet(true);
		return this;
	}

	public void unsetStatusPhone() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSPHONE_ISSET_ID);
	}

	/**
	 * Returns true if field statusPhone is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusPhone() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSPHONE_ISSET_ID);
	}

	public void setStatusPhoneIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSPHONE_ISSET_ID, value);
	}

	public int getStatusPsw() {
		return this.statusPsw;
	}

	public User setStatusPsw(int statusPsw) {
		this.statusPsw = statusPsw;
		setStatusPswIsSet(true);
		return this;
	}

	public void unsetStatusPsw() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSPSW_ISSET_ID);
	}

	/**
	 * Returns true if field statusPsw is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusPsw() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSPSW_ISSET_ID);
	}

	public void setStatusPswIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSPSW_ISSET_ID, value);
	}

	public int getStatusQuest() {
		return this.statusQuest;
	}

	public User setStatusQuest(int statusQuest) {
		this.statusQuest = statusQuest;
		setStatusQuestIsSet(true);
		return this;
	}

	public void unsetStatusQuest() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSQUEST_ISSET_ID);
	}

	/**
	 * Returns true if field statusQuest is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusQuest() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSQUEST_ISSET_ID);
	}

	public void setStatusQuestIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSQUEST_ISSET_ID, value);
	}

	public int getStatusCard() {
		return this.statusCard;
	}

	public User setStatusCard(int statusCard) {
		this.statusCard = statusCard;
		setStatusCardIsSet(true);
		return this;
	}

	public void unsetStatusCard() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSCARD_ISSET_ID);
	}

	/**
	 * Returns true if field statusCard is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusCard() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSCARD_ISSET_ID);
	}

	public void setStatusCardIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSCARD_ISSET_ID, value);
	}

	public boolean isIsTwoFactor() {
		return this.isTwoFactor;
	}

	public User setIsTwoFactor(boolean isTwoFactor) {
		this.isTwoFactor = isTwoFactor;
		setIsTwoFactorIsSet(true);
		return this;
	}

	public void unsetIsTwoFactor() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTWOFACTOR_ISSET_ID);
	}

	/**
	 * Returns true if field isTwoFactor is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsTwoFactor() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTWOFACTOR_ISSET_ID);
	}

	public void setIsTwoFactorIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTWOFACTOR_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLang() {
		return this.lang;
	}

	public User setLang(@org.apache.thrift.annotation.Nullable java.lang.String lang) {
		this.lang = lang;
		return this;
	}

	public void unsetLang() {
		this.lang = null;
	}

	/**
	 * Returns true if field lang is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLang() {
		return this.lang != null;
	}

	public void setLangIsSet(boolean value) {
		if (!value) {
			this.lang = null;
		}
	}

	public int getLevel() {
		return this.level;
	}

	public User setLevel(int level) {
		this.level = level;
		setLevelIsSet(true);
		return this;
	}

	public void unsetLevel() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
	}

	/**
	 * Returns true if field level is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLevel() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
	}

	public void setLevelIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
	}

	public int getNumUsername() {
		return this.numUsername;
	}

	public User setNumUsername(int numUsername) {
		this.numUsername = numUsername;
		setNumUsernameIsSet(true);
		return this;
	}

	public void unsetNumUsername() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMUSERNAME_ISSET_ID);
	}

	/**
	 * Returns true if field numUsername is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumUsername() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMUSERNAME_ISSET_ID);
	}

	public void setNumUsernameIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMUSERNAME_ISSET_ID, value);
	}

	public int getNumUnique() {
		return this.numUnique;
	}

	public User setNumUnique(int numUnique) {
		this.numUnique = numUnique;
		setNumUniqueIsSet(true);
		return this;
	}

	public void unsetNumUnique() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMUNIQUE_ISSET_ID);
	}

	/**
	 * Returns true if field numUnique is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumUnique() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMUNIQUE_ISSET_ID);
	}

	public void setNumUniqueIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMUNIQUE_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case IS_STAFF:
			if (value == null) {
				unsetIsStaff();
			}
			else {
				setIsStaff((java.lang.Boolean) value);
			}
			break;

		case IS_ACTIVE:
			if (value == null) {
				unsetIsActive();
			}
			else {
				setIsActive((java.lang.Boolean) value);
			}
			break;

		case IS_DELETE:
			if (value == null) {
				unsetIsDelete();
			}
			else {
				setIsDelete((java.lang.Boolean) value);
			}
			break;

		case IS_ABSTRACT:
			if (value == null) {
				unsetIsAbstract();
			}
			else {
				setIsAbstract((java.lang.Boolean) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case NUM_AUTH:
			if (value == null) {
				unsetNumAuth();
			}
			else {
				setNumAuth((java.lang.Integer) value);
			}
			break;

		case USERNAME:
			if (value == null) {
				unsetUsername();
			}
			else {
				setUsername((java.lang.String) value);
			}
			break;

		case EMAIL:
			if (value == null) {
				unsetEmail();
			}
			else {
				setEmail((java.lang.String) value);
			}
			break;

		case LOC_NUM:
			if (value == null) {
				unsetLocNum();
			}
			else {
				setLocNum((java.lang.String) value);
			}
			break;

		case PHONE:
			if (value == null) {
				unsetPhone();
			}
			else {
				setPhone((java.lang.String) value);
			}
			break;

		case UNIQUE:
			if (value == null) {
				unsetUnique();
			}
			else {
				setUnique((java.lang.String) value);
			}
			break;

		case SALT:
			if (value == null) {
				unsetSalt();
			}
			else {
				setSalt((java.lang.String) value);
			}
			break;

		case SOURCE:
			if (value == null) {
				unsetSource();
			}
			else {
				setSource((java.lang.String) value);
			}
			break;

		case STATUS_EMAIL:
			if (value == null) {
				unsetStatusEmail();
			}
			else {
				setStatusEmail((java.lang.Integer) value);
			}
			break;

		case STATUS_PHONE:
			if (value == null) {
				unsetStatusPhone();
			}
			else {
				setStatusPhone((java.lang.Integer) value);
			}
			break;

		case STATUS_PSW:
			if (value == null) {
				unsetStatusPsw();
			}
			else {
				setStatusPsw((java.lang.Integer) value);
			}
			break;

		case STATUS_QUEST:
			if (value == null) {
				unsetStatusQuest();
			}
			else {
				setStatusQuest((java.lang.Integer) value);
			}
			break;

		case STATUS_CARD:
			if (value == null) {
				unsetStatusCard();
			}
			else {
				setStatusCard((java.lang.Integer) value);
			}
			break;

		case IS_TWO_FACTOR:
			if (value == null) {
				unsetIsTwoFactor();
			}
			else {
				setIsTwoFactor((java.lang.Boolean) value);
			}
			break;

		case LANG:
			if (value == null) {
				unsetLang();
			}
			else {
				setLang((java.lang.String) value);
			}
			break;

		case LEVEL:
			if (value == null) {
				unsetLevel();
			}
			else {
				setLevel((java.lang.Integer) value);
			}
			break;

		case NUM_USERNAME:
			if (value == null) {
				unsetNumUsername();
			}
			else {
				setNumUsername((java.lang.Integer) value);
			}
			break;

		case NUM_UNIQUE:
			if (value == null) {
				unsetNumUnique();
			}
			else {
				setNumUnique((java.lang.Integer) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID:
			return getUid();

		case IS_STAFF:
			return isIsStaff();

		case IS_ACTIVE:
			return isIsActive();

		case IS_DELETE:
			return isIsDelete();

		case IS_ABSTRACT:
			return isIsAbstract();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case STATUS:
			return getStatus();

		case NUM_AUTH:
			return getNumAuth();

		case USERNAME:
			return getUsername();

		case EMAIL:
			return getEmail();

		case LOC_NUM:
			return getLocNum();

		case PHONE:
			return getPhone();

		case UNIQUE:
			return getUnique();

		case SALT:
			return getSalt();

		case SOURCE:
			return getSource();

		case STATUS_EMAIL:
			return getStatusEmail();

		case STATUS_PHONE:
			return getStatusPhone();

		case STATUS_PSW:
			return getStatusPsw();

		case STATUS_QUEST:
			return getStatusQuest();

		case STATUS_CARD:
			return getStatusCard();

		case IS_TWO_FACTOR:
			return isIsTwoFactor();

		case LANG:
			return getLang();

		case LEVEL:
			return getLevel();

		case NUM_USERNAME:
			return getNumUsername();

		case NUM_UNIQUE:
			return getNumUnique();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID:
			return isSetUid();
		case IS_STAFF:
			return isSetIsStaff();
		case IS_ACTIVE:
			return isSetIsActive();
		case IS_DELETE:
			return isSetIsDelete();
		case IS_ABSTRACT:
			return isSetIsAbstract();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case STATUS:
			return isSetStatus();
		case NUM_AUTH:
			return isSetNumAuth();
		case USERNAME:
			return isSetUsername();
		case EMAIL:
			return isSetEmail();
		case LOC_NUM:
			return isSetLocNum();
		case PHONE:
			return isSetPhone();
		case UNIQUE:
			return isSetUnique();
		case SALT:
			return isSetSalt();
		case SOURCE:
			return isSetSource();
		case STATUS_EMAIL:
			return isSetStatusEmail();
		case STATUS_PHONE:
			return isSetStatusPhone();
		case STATUS_PSW:
			return isSetStatusPsw();
		case STATUS_QUEST:
			return isSetStatusQuest();
		case STATUS_CARD:
			return isSetStatusCard();
		case IS_TWO_FACTOR:
			return isSetIsTwoFactor();
		case LANG:
			return isSetLang();
		case LEVEL:
			return isSetLevel();
		case NUM_USERNAME:
			return isSetNumUsername();
		case NUM_UNIQUE:
			return isSetNumUnique();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof User)
			return this.equals((User) that);
		return false;
	}

	public boolean equals(User that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_isStaff = true;
		boolean that_present_isStaff = true;
		if (this_present_isStaff || that_present_isStaff) {
			if (!(this_present_isStaff && that_present_isStaff))
				return false;
			if (this.isStaff != that.isStaff)
				return false;
		}

		boolean this_present_isActive = true;
		boolean that_present_isActive = true;
		if (this_present_isActive || that_present_isActive) {
			if (!(this_present_isActive && that_present_isActive))
				return false;
			if (this.isActive != that.isActive)
				return false;
		}

		boolean this_present_isDelete = true;
		boolean that_present_isDelete = true;
		if (this_present_isDelete || that_present_isDelete) {
			if (!(this_present_isDelete && that_present_isDelete))
				return false;
			if (this.isDelete != that.isDelete)
				return false;
		}

		boolean this_present_isAbstract = true;
		boolean that_present_isAbstract = true;
		if (this_present_isAbstract || that_present_isAbstract) {
			if (!(this_present_isAbstract && that_present_isAbstract))
				return false;
			if (this.isAbstract != that.isAbstract)
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_numAuth = true;
		boolean that_present_numAuth = true;
		if (this_present_numAuth || that_present_numAuth) {
			if (!(this_present_numAuth && that_present_numAuth))
				return false;
			if (this.numAuth != that.numAuth)
				return false;
		}

		boolean this_present_username = true && this.isSetUsername();
		boolean that_present_username = true && that.isSetUsername();
		if (this_present_username || that_present_username) {
			if (!(this_present_username && that_present_username))
				return false;
			if (!this.username.equals(that.username))
				return false;
		}

		boolean this_present_email = true && this.isSetEmail();
		boolean that_present_email = true && that.isSetEmail();
		if (this_present_email || that_present_email) {
			if (!(this_present_email && that_present_email))
				return false;
			if (!this.email.equals(that.email))
				return false;
		}

		boolean this_present_locNum = true && this.isSetLocNum();
		boolean that_present_locNum = true && that.isSetLocNum();
		if (this_present_locNum || that_present_locNum) {
			if (!(this_present_locNum && that_present_locNum))
				return false;
			if (!this.locNum.equals(that.locNum))
				return false;
		}

		boolean this_present_phone = true && this.isSetPhone();
		boolean that_present_phone = true && that.isSetPhone();
		if (this_present_phone || that_present_phone) {
			if (!(this_present_phone && that_present_phone))
				return false;
			if (!this.phone.equals(that.phone))
				return false;
		}

		boolean this_present_unique = true && this.isSetUnique();
		boolean that_present_unique = true && that.isSetUnique();
		if (this_present_unique || that_present_unique) {
			if (!(this_present_unique && that_present_unique))
				return false;
			if (!this.unique.equals(that.unique))
				return false;
		}

		boolean this_present_salt = true && this.isSetSalt();
		boolean that_present_salt = true && that.isSetSalt();
		if (this_present_salt || that_present_salt) {
			if (!(this_present_salt && that_present_salt))
				return false;
			if (!this.salt.equals(that.salt))
				return false;
		}

		boolean this_present_source = true && this.isSetSource();
		boolean that_present_source = true && that.isSetSource();
		if (this_present_source || that_present_source) {
			if (!(this_present_source && that_present_source))
				return false;
			if (!this.source.equals(that.source))
				return false;
		}

		boolean this_present_statusEmail = true;
		boolean that_present_statusEmail = true;
		if (this_present_statusEmail || that_present_statusEmail) {
			if (!(this_present_statusEmail && that_present_statusEmail))
				return false;
			if (this.statusEmail != that.statusEmail)
				return false;
		}

		boolean this_present_statusPhone = true;
		boolean that_present_statusPhone = true;
		if (this_present_statusPhone || that_present_statusPhone) {
			if (!(this_present_statusPhone && that_present_statusPhone))
				return false;
			if (this.statusPhone != that.statusPhone)
				return false;
		}

		boolean this_present_statusPsw = true;
		boolean that_present_statusPsw = true;
		if (this_present_statusPsw || that_present_statusPsw) {
			if (!(this_present_statusPsw && that_present_statusPsw))
				return false;
			if (this.statusPsw != that.statusPsw)
				return false;
		}

		boolean this_present_statusQuest = true;
		boolean that_present_statusQuest = true;
		if (this_present_statusQuest || that_present_statusQuest) {
			if (!(this_present_statusQuest && that_present_statusQuest))
				return false;
			if (this.statusQuest != that.statusQuest)
				return false;
		}

		boolean this_present_statusCard = true;
		boolean that_present_statusCard = true;
		if (this_present_statusCard || that_present_statusCard) {
			if (!(this_present_statusCard && that_present_statusCard))
				return false;
			if (this.statusCard != that.statusCard)
				return false;
		}

		boolean this_present_isTwoFactor = true;
		boolean that_present_isTwoFactor = true;
		if (this_present_isTwoFactor || that_present_isTwoFactor) {
			if (!(this_present_isTwoFactor && that_present_isTwoFactor))
				return false;
			if (this.isTwoFactor != that.isTwoFactor)
				return false;
		}

		boolean this_present_lang = true && this.isSetLang();
		boolean that_present_lang = true && that.isSetLang();
		if (this_present_lang || that_present_lang) {
			if (!(this_present_lang && that_present_lang))
				return false;
			if (!this.lang.equals(that.lang))
				return false;
		}

		boolean this_present_level = true;
		boolean that_present_level = true;
		if (this_present_level || that_present_level) {
			if (!(this_present_level && that_present_level))
				return false;
			if (this.level != that.level)
				return false;
		}

		boolean this_present_numUsername = true;
		boolean that_present_numUsername = true;
		if (this_present_numUsername || that_present_numUsername) {
			if (!(this_present_numUsername && that_present_numUsername))
				return false;
			if (this.numUsername != that.numUsername)
				return false;
		}

		boolean this_present_numUnique = true;
		boolean that_present_numUnique = true;
		if (this_present_numUnique || that_present_numUnique) {
			if (!(this_present_numUnique && that_present_numUnique))
				return false;
			if (this.numUnique != that.numUnique)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isStaff) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isActive) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isDelete) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isAbstract) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + numAuth;

		hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
		if (isSetUsername())
			hashCode = hashCode * 8191 + username.hashCode();

		hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
		if (isSetEmail())
			hashCode = hashCode * 8191 + email.hashCode();

		hashCode = hashCode * 8191 + ((isSetLocNum()) ? 131071 : 524287);
		if (isSetLocNum())
			hashCode = hashCode * 8191 + locNum.hashCode();

		hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
		if (isSetPhone())
			hashCode = hashCode * 8191 + phone.hashCode();

		hashCode = hashCode * 8191 + ((isSetUnique()) ? 131071 : 524287);
		if (isSetUnique())
			hashCode = hashCode * 8191 + unique.hashCode();

		hashCode = hashCode * 8191 + ((isSetSalt()) ? 131071 : 524287);
		if (isSetSalt())
			hashCode = hashCode * 8191 + salt.hashCode();

		hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
		if (isSetSource())
			hashCode = hashCode * 8191 + source.hashCode();

		hashCode = hashCode * 8191 + statusEmail;

		hashCode = hashCode * 8191 + statusPhone;

		hashCode = hashCode * 8191 + statusPsw;

		hashCode = hashCode * 8191 + statusQuest;

		hashCode = hashCode * 8191 + statusCard;

		hashCode = hashCode * 8191 + ((isTwoFactor) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetLang()) ? 131071 : 524287);
		if (isSetLang())
			hashCode = hashCode * 8191 + lang.hashCode();

		hashCode = hashCode * 8191 + level;

		hashCode = hashCode * 8191 + numUsername;

		hashCode = hashCode * 8191 + numUnique;

		return hashCode;
	}

	@Override
	public int compareTo(User other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsStaff()).compareTo(other.isSetIsStaff());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsStaff()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStaff, other.isStaff);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsActive()).compareTo(other.isSetIsActive());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsActive()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsDelete()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsAbstract()).compareTo(other.isSetIsAbstract());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsAbstract()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAbstract, other.isAbstract);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumAuth()).compareTo(other.isSetNumAuth());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumAuth()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numAuth, other.numAuth);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUsername()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEmail()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLocNum()).compareTo(other.isSetLocNum());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLocNum()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locNum, other.locNum);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPhone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUnique()).compareTo(other.isSetUnique());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUnique()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unique, other.unique);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSalt()).compareTo(other.isSetSalt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSalt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salt, other.salt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSource()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusEmail()).compareTo(other.isSetStatusEmail());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusEmail()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusEmail, other.statusEmail);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusPhone()).compareTo(other.isSetStatusPhone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusPhone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusPhone, other.statusPhone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusPsw()).compareTo(other.isSetStatusPsw());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusPsw()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusPsw, other.statusPsw);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusQuest()).compareTo(other.isSetStatusQuest());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusQuest()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusQuest, other.statusQuest);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusCard()).compareTo(other.isSetStatusCard());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusCard()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusCard, other.statusCard);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsTwoFactor()).compareTo(other.isSetIsTwoFactor());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsTwoFactor()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTwoFactor, other.isTwoFactor);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLang()).compareTo(other.isSetLang());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLang()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLevel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumUsername()).compareTo(other.isSetNumUsername());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumUsername()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numUsername, other.numUsername);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumUnique()).compareTo(other.isSetNumUnique());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumUnique()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numUnique, other.numUnique);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("User(");
		boolean first = true;

		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isStaff:");
		sb.append(this.isStaff);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isActive:");
		sb.append(this.isActive);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isDelete:");
		sb.append(this.isDelete);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isAbstract:");
		sb.append(this.isAbstract);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numAuth:");
		sb.append(this.numAuth);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("username:");
		if (this.username == null) {
			sb.append("null");
		}
		else {
			sb.append(this.username);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("email:");
		if (this.email == null) {
			sb.append("null");
		}
		else {
			sb.append(this.email);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("locNum:");
		if (this.locNum == null) {
			sb.append("null");
		}
		else {
			sb.append(this.locNum);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("phone:");
		if (this.phone == null) {
			sb.append("null");
		}
		else {
			sb.append(this.phone);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("unique:");
		if (this.unique == null) {
			sb.append("null");
		}
		else {
			sb.append(this.unique);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("salt:");
		if (this.salt == null) {
			sb.append("null");
		}
		else {
			sb.append(this.salt);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("source:");
		if (this.source == null) {
			sb.append("null");
		}
		else {
			sb.append(this.source);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("statusEmail:");
		sb.append(this.statusEmail);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("statusPhone:");
		sb.append(this.statusPhone);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("statusPsw:");
		sb.append(this.statusPsw);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("statusQuest:");
		sb.append(this.statusQuest);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("statusCard:");
		sb.append(this.statusCard);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isTwoFactor:");
		sb.append(this.isTwoFactor);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("lang:");
		if (this.lang == null) {
			sb.append("null");
		}
		else {
			sb.append(this.lang);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("level:");
		sb.append(this.level);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numUsername:");
		sb.append(this.numUsername);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numUnique:");
		sb.append(this.numUnique);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class UserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserStandardScheme getScheme() {
			return new UserStandardScheme();
		}

	}

	private static class UserStandardScheme extends org.apache.thrift.scheme.StandardScheme<User> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // IS_STAFF
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isStaff = iprot.readBool();
						struct.setIsStaffIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // IS_ACTIVE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isActive = iprot.readBool();
						struct.setIsActiveIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // IS_DELETE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isDelete = iprot.readBool();
						struct.setIsDeleteIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 26: // IS_ABSTRACT
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isAbstract = iprot.readBool();
						struct.setIsAbstractIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // NUM_AUTH
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numAuth = iprot.readI32();
						struct.setNumAuthIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // USERNAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.username = iprot.readString();
						struct.setUsernameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // EMAIL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.email = iprot.readString();
						struct.setEmailIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // LOC_NUM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.locNum = iprot.readString();
						struct.setLocNumIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // PHONE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.phone = iprot.readString();
						struct.setPhoneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // UNIQUE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.unique = iprot.readString();
						struct.setUniqueIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // SALT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.salt = iprot.readString();
						struct.setSaltIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // SOURCE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.source = iprot.readString();
						struct.setSourceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // STATUS_EMAIL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusEmail = iprot.readI32();
						struct.setStatusEmailIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // STATUS_PHONE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusPhone = iprot.readI32();
						struct.setStatusPhoneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // STATUS_PSW
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusPsw = iprot.readI32();
						struct.setStatusPswIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // STATUS_QUEST
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusQuest = iprot.readI32();
						struct.setStatusQuestIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // STATUS_CARD
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusCard = iprot.readI32();
						struct.setStatusCardIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // IS_TWO_FACTOR
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isTwoFactor = iprot.readBool();
						struct.setIsTwoFactorIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // LANG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.lang = iprot.readString();
						struct.setLangIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 25: // LEVEL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.level = iprot.readI32();
						struct.setLevelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // NUM_USERNAME
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numUsername = iprot.readI32();
						struct.setNumUsernameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 24: // NUM_UNIQUE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numUnique = iprot.readI32();
						struct.setNumUniqueIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_STAFF_FIELD_DESC);
			oprot.writeBool(struct.isStaff);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
			oprot.writeBool(struct.isActive);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
			oprot.writeBool(struct.isDelete);
			oprot.writeFieldEnd();
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_AUTH_FIELD_DESC);
			oprot.writeI32(struct.numAuth);
			oprot.writeFieldEnd();
			if (struct.username != null) {
				oprot.writeFieldBegin(USERNAME_FIELD_DESC);
				oprot.writeString(struct.username);
				oprot.writeFieldEnd();
			}
			if (struct.email != null) {
				oprot.writeFieldBegin(EMAIL_FIELD_DESC);
				oprot.writeString(struct.email);
				oprot.writeFieldEnd();
			}
			if (struct.locNum != null) {
				oprot.writeFieldBegin(LOC_NUM_FIELD_DESC);
				oprot.writeString(struct.locNum);
				oprot.writeFieldEnd();
			}
			if (struct.phone != null) {
				oprot.writeFieldBegin(PHONE_FIELD_DESC);
				oprot.writeString(struct.phone);
				oprot.writeFieldEnd();
			}
			if (struct.unique != null) {
				oprot.writeFieldBegin(UNIQUE_FIELD_DESC);
				oprot.writeString(struct.unique);
				oprot.writeFieldEnd();
			}
			if (struct.salt != null) {
				oprot.writeFieldBegin(SALT_FIELD_DESC);
				oprot.writeString(struct.salt);
				oprot.writeFieldEnd();
			}
			if (struct.source != null) {
				oprot.writeFieldBegin(SOURCE_FIELD_DESC);
				oprot.writeString(struct.source);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_EMAIL_FIELD_DESC);
			oprot.writeI32(struct.statusEmail);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_PHONE_FIELD_DESC);
			oprot.writeI32(struct.statusPhone);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_PSW_FIELD_DESC);
			oprot.writeI32(struct.statusPsw);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_QUEST_FIELD_DESC);
			oprot.writeI32(struct.statusQuest);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_CARD_FIELD_DESC);
			oprot.writeI32(struct.statusCard);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_TWO_FACTOR_FIELD_DESC);
			oprot.writeBool(struct.isTwoFactor);
			oprot.writeFieldEnd();
			if (struct.lang != null) {
				oprot.writeFieldBegin(LANG_FIELD_DESC);
				oprot.writeString(struct.lang);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(NUM_USERNAME_FIELD_DESC);
			oprot.writeI32(struct.numUsername);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_UNIQUE_FIELD_DESC);
			oprot.writeI32(struct.numUnique);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(LEVEL_FIELD_DESC);
			oprot.writeI32(struct.level);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_ABSTRACT_FIELD_DESC);
			oprot.writeBool(struct.isAbstract);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class UserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserTupleScheme getScheme() {
			return new UserTupleScheme();
		}

	}

	private static class UserTupleScheme extends org.apache.thrift.scheme.TupleScheme<User> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUid()) {
				optionals.set(0);
			}
			if (struct.isSetIsStaff()) {
				optionals.set(1);
			}
			if (struct.isSetIsActive()) {
				optionals.set(2);
			}
			if (struct.isSetIsDelete()) {
				optionals.set(3);
			}
			if (struct.isSetIsAbstract()) {
				optionals.set(4);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(5);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(6);
			}
			if (struct.isSetStatus()) {
				optionals.set(7);
			}
			if (struct.isSetNumAuth()) {
				optionals.set(8);
			}
			if (struct.isSetUsername()) {
				optionals.set(9);
			}
			if (struct.isSetEmail()) {
				optionals.set(10);
			}
			if (struct.isSetLocNum()) {
				optionals.set(11);
			}
			if (struct.isSetPhone()) {
				optionals.set(12);
			}
			if (struct.isSetUnique()) {
				optionals.set(13);
			}
			if (struct.isSetSalt()) {
				optionals.set(14);
			}
			if (struct.isSetSource()) {
				optionals.set(15);
			}
			if (struct.isSetStatusEmail()) {
				optionals.set(16);
			}
			if (struct.isSetStatusPhone()) {
				optionals.set(17);
			}
			if (struct.isSetStatusPsw()) {
				optionals.set(18);
			}
			if (struct.isSetStatusQuest()) {
				optionals.set(19);
			}
			if (struct.isSetStatusCard()) {
				optionals.set(20);
			}
			if (struct.isSetIsTwoFactor()) {
				optionals.set(21);
			}
			if (struct.isSetLang()) {
				optionals.set(22);
			}
			if (struct.isSetLevel()) {
				optionals.set(23);
			}
			if (struct.isSetNumUsername()) {
				optionals.set(24);
			}
			if (struct.isSetNumUnique()) {
				optionals.set(25);
			}
			oprot.writeBitSet(optionals, 26);
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetIsStaff()) {
				oprot.writeBool(struct.isStaff);
			}
			if (struct.isSetIsActive()) {
				oprot.writeBool(struct.isActive);
			}
			if (struct.isSetIsDelete()) {
				oprot.writeBool(struct.isDelete);
			}
			if (struct.isSetIsAbstract()) {
				oprot.writeBool(struct.isAbstract);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetNumAuth()) {
				oprot.writeI32(struct.numAuth);
			}
			if (struct.isSetUsername()) {
				oprot.writeString(struct.username);
			}
			if (struct.isSetEmail()) {
				oprot.writeString(struct.email);
			}
			if (struct.isSetLocNum()) {
				oprot.writeString(struct.locNum);
			}
			if (struct.isSetPhone()) {
				oprot.writeString(struct.phone);
			}
			if (struct.isSetUnique()) {
				oprot.writeString(struct.unique);
			}
			if (struct.isSetSalt()) {
				oprot.writeString(struct.salt);
			}
			if (struct.isSetSource()) {
				oprot.writeString(struct.source);
			}
			if (struct.isSetStatusEmail()) {
				oprot.writeI32(struct.statusEmail);
			}
			if (struct.isSetStatusPhone()) {
				oprot.writeI32(struct.statusPhone);
			}
			if (struct.isSetStatusPsw()) {
				oprot.writeI32(struct.statusPsw);
			}
			if (struct.isSetStatusQuest()) {
				oprot.writeI32(struct.statusQuest);
			}
			if (struct.isSetStatusCard()) {
				oprot.writeI32(struct.statusCard);
			}
			if (struct.isSetIsTwoFactor()) {
				oprot.writeBool(struct.isTwoFactor);
			}
			if (struct.isSetLang()) {
				oprot.writeString(struct.lang);
			}
			if (struct.isSetLevel()) {
				oprot.writeI32(struct.level);
			}
			if (struct.isSetNumUsername()) {
				oprot.writeI32(struct.numUsername);
			}
			if (struct.isSetNumUnique()) {
				oprot.writeI32(struct.numUnique);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(26);
			if (incoming.get(0)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.isStaff = iprot.readBool();
				struct.setIsStaffIsSet(true);
			}
			if (incoming.get(2)) {
				struct.isActive = iprot.readBool();
				struct.setIsActiveIsSet(true);
			}
			if (incoming.get(3)) {
				struct.isDelete = iprot.readBool();
				struct.setIsDeleteIsSet(true);
			}
			if (incoming.get(4)) {
				struct.isAbstract = iprot.readBool();
				struct.setIsAbstractIsSet(true);
			}
			if (incoming.get(5)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(6)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(8)) {
				struct.numAuth = iprot.readI32();
				struct.setNumAuthIsSet(true);
			}
			if (incoming.get(9)) {
				struct.username = iprot.readString();
				struct.setUsernameIsSet(true);
			}
			if (incoming.get(10)) {
				struct.email = iprot.readString();
				struct.setEmailIsSet(true);
			}
			if (incoming.get(11)) {
				struct.locNum = iprot.readString();
				struct.setLocNumIsSet(true);
			}
			if (incoming.get(12)) {
				struct.phone = iprot.readString();
				struct.setPhoneIsSet(true);
			}
			if (incoming.get(13)) {
				struct.unique = iprot.readString();
				struct.setUniqueIsSet(true);
			}
			if (incoming.get(14)) {
				struct.salt = iprot.readString();
				struct.setSaltIsSet(true);
			}
			if (incoming.get(15)) {
				struct.source = iprot.readString();
				struct.setSourceIsSet(true);
			}
			if (incoming.get(16)) {
				struct.statusEmail = iprot.readI32();
				struct.setStatusEmailIsSet(true);
			}
			if (incoming.get(17)) {
				struct.statusPhone = iprot.readI32();
				struct.setStatusPhoneIsSet(true);
			}
			if (incoming.get(18)) {
				struct.statusPsw = iprot.readI32();
				struct.setStatusPswIsSet(true);
			}
			if (incoming.get(19)) {
				struct.statusQuest = iprot.readI32();
				struct.setStatusQuestIsSet(true);
			}
			if (incoming.get(20)) {
				struct.statusCard = iprot.readI32();
				struct.setStatusCardIsSet(true);
			}
			if (incoming.get(21)) {
				struct.isTwoFactor = iprot.readBool();
				struct.setIsTwoFactorIsSet(true);
			}
			if (incoming.get(22)) {
				struct.lang = iprot.readString();
				struct.setLangIsSet(true);
			}
			if (incoming.get(23)) {
				struct.level = iprot.readI32();
				struct.setLevelIsSet(true);
			}
			if (incoming.get(24)) {
				struct.numUsername = iprot.readI32();
				struct.setNumUsernameIsSet(true);
			}
			if (incoming.get(25)) {
				struct.numUnique = iprot.readI32();
				struct.setNumUniqueIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
