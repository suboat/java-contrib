/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 用户实例: 支付宝基础信息
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-09")
public class UserAlipayBase implements org.apache.thrift.TBase<UserAlipayBase, UserAlipayBase._Fields>,
		java.io.Serializable, Cloneable, Comparable<UserAlipayBase> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"UserAlipayBase");

	private static final org.apache.thrift.protocol.TField ALIPAY_UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"alipayUid", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"accessToken", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"nickname", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"province", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"city", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"icon", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex",
			org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField IS_CERTIFIED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"is_certified", org.apache.thrift.protocol.TType.BOOL, (short) 8);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserAlipayBaseStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserAlipayBaseTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String alipayUid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String accessToken; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String nickname; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String province; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String city; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String icon; // optional

	public int sex; // optional

	public boolean is_certified; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		ALIPAY_UID((short) 1, "alipayUid"), ACCESS_TOKEN((short) 2, "accessToken"), NICKNAME((short) 3,
				"nickname"), PROVINCE((short) 4, "province"), CITY((short) 5, "city"), ICON((short) 6,
						"icon"), SEX((short) 7, "sex"), IS_CERTIFIED((short) 8, "is_certified");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ALIPAY_UID
				return ALIPAY_UID;
			case 2: // ACCESS_TOKEN
				return ACCESS_TOKEN;
			case 3: // NICKNAME
				return NICKNAME;
			case 4: // PROVINCE
				return PROVINCE;
			case 5: // CITY
				return CITY;
			case 6: // ICON
				return ICON;
			case 7: // SEX
				return SEX;
			case 8: // IS_CERTIFIED
				return IS_CERTIFIED;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __SEX_ISSET_ID = 0;

	private static final int __IS_CERTIFIED_ISSET_ID = 1;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.ACCESS_TOKEN, _Fields.NICKNAME, _Fields.PROVINCE, _Fields.CITY,
			_Fields.ICON, _Fields.SEX, _Fields.IS_CERTIFIED };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ALIPAY_UID,
				new org.apache.thrift.meta_data.FieldMetaData("alipayUid",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ACCESS_TOKEN,
				new org.apache.thrift.meta_data.FieldMetaData("accessToken",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NICKNAME,
				new org.apache.thrift.meta_data.FieldMetaData("nickname",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PROVINCE,
				new org.apache.thrift.meta_data.FieldMetaData("province",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CITY,
				new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ICON,
				new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SEX,
				new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_CERTIFIED,
				new org.apache.thrift.meta_data.FieldMetaData("is_certified",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserAlipayBase.class, metaDataMap);
	}

	public UserAlipayBase() {
	}

	public UserAlipayBase(java.lang.String alipayUid) {
		this();
		this.alipayUid = alipayUid;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public UserAlipayBase(UserAlipayBase other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetAlipayUid()) {
			this.alipayUid = other.alipayUid;
		}
		if (other.isSetAccessToken()) {
			this.accessToken = other.accessToken;
		}
		if (other.isSetNickname()) {
			this.nickname = other.nickname;
		}
		if (other.isSetProvince()) {
			this.province = other.province;
		}
		if (other.isSetCity()) {
			this.city = other.city;
		}
		if (other.isSetIcon()) {
			this.icon = other.icon;
		}
		this.sex = other.sex;
		this.is_certified = other.is_certified;
	}

	public UserAlipayBase deepCopy() {
		return new UserAlipayBase(this);
	}

	@Override
	public void clear() {
		this.alipayUid = null;
		this.accessToken = null;
		this.nickname = null;
		this.province = null;
		this.city = null;
		this.icon = null;
		setSexIsSet(false);
		this.sex = 0;
		setIs_certifiedIsSet(false);
		this.is_certified = false;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAlipayUid() {
		return this.alipayUid;
	}

	public UserAlipayBase setAlipayUid(@org.apache.thrift.annotation.Nullable java.lang.String alipayUid) {
		this.alipayUid = alipayUid;
		return this;
	}

	public void unsetAlipayUid() {
		this.alipayUid = null;
	}

	/**
	 * Returns true if field alipayUid is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAlipayUid() {
		return this.alipayUid != null;
	}

	public void setAlipayUidIsSet(boolean value) {
		if (!value) {
			this.alipayUid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAccessToken() {
		return this.accessToken;
	}

	public UserAlipayBase setAccessToken(@org.apache.thrift.annotation.Nullable java.lang.String accessToken) {
		this.accessToken = accessToken;
		return this;
	}

	public void unsetAccessToken() {
		this.accessToken = null;
	}

	/**
	 * Returns true if field accessToken is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAccessToken() {
		return this.accessToken != null;
	}

	public void setAccessTokenIsSet(boolean value) {
		if (!value) {
			this.accessToken = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNickname() {
		return this.nickname;
	}

	public UserAlipayBase setNickname(@org.apache.thrift.annotation.Nullable java.lang.String nickname) {
		this.nickname = nickname;
		return this;
	}

	public void unsetNickname() {
		this.nickname = null;
	}

	/**
	 * Returns true if field nickname is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNickname() {
		return this.nickname != null;
	}

	public void setNicknameIsSet(boolean value) {
		if (!value) {
			this.nickname = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProvince() {
		return this.province;
	}

	public UserAlipayBase setProvince(@org.apache.thrift.annotation.Nullable java.lang.String province) {
		this.province = province;
		return this;
	}

	public void unsetProvince() {
		this.province = null;
	}

	/**
	 * Returns true if field province is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProvince() {
		return this.province != null;
	}

	public void setProvinceIsSet(boolean value) {
		if (!value) {
			this.province = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCity() {
		return this.city;
	}

	public UserAlipayBase setCity(@org.apache.thrift.annotation.Nullable java.lang.String city) {
		this.city = city;
		return this;
	}

	public void unsetCity() {
		this.city = null;
	}

	/**
	 * Returns true if field city is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCity() {
		return this.city != null;
	}

	public void setCityIsSet(boolean value) {
		if (!value) {
			this.city = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIcon() {
		return this.icon;
	}

	public UserAlipayBase setIcon(@org.apache.thrift.annotation.Nullable java.lang.String icon) {
		this.icon = icon;
		return this;
	}

	public void unsetIcon() {
		this.icon = null;
	}

	/**
	 * Returns true if field icon is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIcon() {
		return this.icon != null;
	}

	public void setIconIsSet(boolean value) {
		if (!value) {
			this.icon = null;
		}
	}

	public int getSex() {
		return this.sex;
	}

	public UserAlipayBase setSex(int sex) {
		this.sex = sex;
		setSexIsSet(true);
		return this;
	}

	public void unsetSex() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
	}

	/**
	 * Returns true if field sex is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSex() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
	}

	public void setSexIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
	}

	public boolean isIs_certified() {
		return this.is_certified;
	}

	public UserAlipayBase setIs_certified(boolean is_certified) {
		this.is_certified = is_certified;
		setIs_certifiedIsSet(true);
		return this;
	}

	public void unsetIs_certified() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_CERTIFIED_ISSET_ID);
	}

	/**
	 * Returns true if field is_certified is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIs_certified() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_CERTIFIED_ISSET_ID);
	}

	public void setIs_certifiedIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_CERTIFIED_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case ALIPAY_UID:
			if (value == null) {
				unsetAlipayUid();
			}
			else {
				setAlipayUid((java.lang.String) value);
			}
			break;

		case ACCESS_TOKEN:
			if (value == null) {
				unsetAccessToken();
			}
			else {
				setAccessToken((java.lang.String) value);
			}
			break;

		case NICKNAME:
			if (value == null) {
				unsetNickname();
			}
			else {
				setNickname((java.lang.String) value);
			}
			break;

		case PROVINCE:
			if (value == null) {
				unsetProvince();
			}
			else {
				setProvince((java.lang.String) value);
			}
			break;

		case CITY:
			if (value == null) {
				unsetCity();
			}
			else {
				setCity((java.lang.String) value);
			}
			break;

		case ICON:
			if (value == null) {
				unsetIcon();
			}
			else {
				setIcon((java.lang.String) value);
			}
			break;

		case SEX:
			if (value == null) {
				unsetSex();
			}
			else {
				setSex((java.lang.Integer) value);
			}
			break;

		case IS_CERTIFIED:
			if (value == null) {
				unsetIs_certified();
			}
			else {
				setIs_certified((java.lang.Boolean) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ALIPAY_UID:
			return getAlipayUid();

		case ACCESS_TOKEN:
			return getAccessToken();

		case NICKNAME:
			return getNickname();

		case PROVINCE:
			return getProvince();

		case CITY:
			return getCity();

		case ICON:
			return getIcon();

		case SEX:
			return getSex();

		case IS_CERTIFIED:
			return isIs_certified();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ALIPAY_UID:
			return isSetAlipayUid();
		case ACCESS_TOKEN:
			return isSetAccessToken();
		case NICKNAME:
			return isSetNickname();
		case PROVINCE:
			return isSetProvince();
		case CITY:
			return isSetCity();
		case ICON:
			return isSetIcon();
		case SEX:
			return isSetSex();
		case IS_CERTIFIED:
			return isSetIs_certified();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof UserAlipayBase)
			return this.equals((UserAlipayBase) that);
		return false;
	}

	public boolean equals(UserAlipayBase that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_alipayUid = true && this.isSetAlipayUid();
		boolean that_present_alipayUid = true && that.isSetAlipayUid();
		if (this_present_alipayUid || that_present_alipayUid) {
			if (!(this_present_alipayUid && that_present_alipayUid))
				return false;
			if (!this.alipayUid.equals(that.alipayUid))
				return false;
		}

		boolean this_present_accessToken = true && this.isSetAccessToken();
		boolean that_present_accessToken = true && that.isSetAccessToken();
		if (this_present_accessToken || that_present_accessToken) {
			if (!(this_present_accessToken && that_present_accessToken))
				return false;
			if (!this.accessToken.equals(that.accessToken))
				return false;
		}

		boolean this_present_nickname = true && this.isSetNickname();
		boolean that_present_nickname = true && that.isSetNickname();
		if (this_present_nickname || that_present_nickname) {
			if (!(this_present_nickname && that_present_nickname))
				return false;
			if (!this.nickname.equals(that.nickname))
				return false;
		}

		boolean this_present_province = true && this.isSetProvince();
		boolean that_present_province = true && that.isSetProvince();
		if (this_present_province || that_present_province) {
			if (!(this_present_province && that_present_province))
				return false;
			if (!this.province.equals(that.province))
				return false;
		}

		boolean this_present_city = true && this.isSetCity();
		boolean that_present_city = true && that.isSetCity();
		if (this_present_city || that_present_city) {
			if (!(this_present_city && that_present_city))
				return false;
			if (!this.city.equals(that.city))
				return false;
		}

		boolean this_present_icon = true && this.isSetIcon();
		boolean that_present_icon = true && that.isSetIcon();
		if (this_present_icon || that_present_icon) {
			if (!(this_present_icon && that_present_icon))
				return false;
			if (!this.icon.equals(that.icon))
				return false;
		}

		boolean this_present_sex = true && this.isSetSex();
		boolean that_present_sex = true && that.isSetSex();
		if (this_present_sex || that_present_sex) {
			if (!(this_present_sex && that_present_sex))
				return false;
			if (this.sex != that.sex)
				return false;
		}

		boolean this_present_is_certified = true && this.isSetIs_certified();
		boolean that_present_is_certified = true && that.isSetIs_certified();
		if (this_present_is_certified || that_present_is_certified) {
			if (!(this_present_is_certified && that_present_is_certified))
				return false;
			if (this.is_certified != that.is_certified)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetAlipayUid()) ? 131071 : 524287);
		if (isSetAlipayUid())
			hashCode = hashCode * 8191 + alipayUid.hashCode();

		hashCode = hashCode * 8191 + ((isSetAccessToken()) ? 131071 : 524287);
		if (isSetAccessToken())
			hashCode = hashCode * 8191 + accessToken.hashCode();

		hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
		if (isSetNickname())
			hashCode = hashCode * 8191 + nickname.hashCode();

		hashCode = hashCode * 8191 + ((isSetProvince()) ? 131071 : 524287);
		if (isSetProvince())
			hashCode = hashCode * 8191 + province.hashCode();

		hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
		if (isSetCity())
			hashCode = hashCode * 8191 + city.hashCode();

		hashCode = hashCode * 8191 + ((isSetIcon()) ? 131071 : 524287);
		if (isSetIcon())
			hashCode = hashCode * 8191 + icon.hashCode();

		hashCode = hashCode * 8191 + ((isSetSex()) ? 131071 : 524287);
		if (isSetSex())
			hashCode = hashCode * 8191 + sex;

		hashCode = hashCode * 8191 + ((isSetIs_certified()) ? 131071 : 524287);
		if (isSetIs_certified())
			hashCode = hashCode * 8191 + ((is_certified) ? 131071 : 524287);

		return hashCode;
	}

	@Override
	public int compareTo(UserAlipayBase other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetAlipayUid()).compareTo(other.isSetAlipayUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAlipayUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipayUid, other.alipayUid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAccessToken()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNickname()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProvince()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCity()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSex()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIs_certified()).compareTo(other.isSetIs_certified());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIs_certified()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_certified, other.is_certified);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("UserAlipayBase(");
		boolean first = true;

		sb.append("alipayUid:");
		if (this.alipayUid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.alipayUid);
		}
		first = false;
		if (isSetAccessToken()) {
			if (!first)
				sb.append(", ");
			sb.append("accessToken:");
			if (this.accessToken == null) {
				sb.append("null");
			}
			else {
				sb.append(this.accessToken);
			}
			first = false;
		}
		if (isSetNickname()) {
			if (!first)
				sb.append(", ");
			sb.append("nickname:");
			if (this.nickname == null) {
				sb.append("null");
			}
			else {
				sb.append(this.nickname);
			}
			first = false;
		}
		if (isSetProvince()) {
			if (!first)
				sb.append(", ");
			sb.append("province:");
			if (this.province == null) {
				sb.append("null");
			}
			else {
				sb.append(this.province);
			}
			first = false;
		}
		if (isSetCity()) {
			if (!first)
				sb.append(", ");
			sb.append("city:");
			if (this.city == null) {
				sb.append("null");
			}
			else {
				sb.append(this.city);
			}
			first = false;
		}
		if (isSetIcon()) {
			if (!first)
				sb.append(", ");
			sb.append("icon:");
			if (this.icon == null) {
				sb.append("null");
			}
			else {
				sb.append(this.icon);
			}
			first = false;
		}
		if (isSetSex()) {
			if (!first)
				sb.append(", ");
			sb.append("sex:");
			sb.append(this.sex);
			first = false;
		}
		if (isSetIs_certified()) {
			if (!first)
				sb.append(", ");
			sb.append("is_certified:");
			sb.append(this.is_certified);
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class UserAlipayBaseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserAlipayBaseStandardScheme getScheme() {
			return new UserAlipayBaseStandardScheme();
		}

	}

	private static class UserAlipayBaseStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserAlipayBase> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, UserAlipayBase struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ALIPAY_UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.alipayUid = iprot.readString();
						struct.setAlipayUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // ACCESS_TOKEN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.accessToken = iprot.readString();
						struct.setAccessTokenIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // NICKNAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nickname = iprot.readString();
						struct.setNicknameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // PROVINCE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.province = iprot.readString();
						struct.setProvinceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CITY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.city = iprot.readString();
						struct.setCityIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // ICON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.icon = iprot.readString();
						struct.setIconIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // SEX
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.sex = iprot.readI32();
						struct.setSexIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // IS_CERTIFIED
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.is_certified = iprot.readBool();
						struct.setIs_certifiedIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, UserAlipayBase struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.alipayUid != null) {
				oprot.writeFieldBegin(ALIPAY_UID_FIELD_DESC);
				oprot.writeString(struct.alipayUid);
				oprot.writeFieldEnd();
			}
			if (struct.accessToken != null) {
				if (struct.isSetAccessToken()) {
					oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
					oprot.writeString(struct.accessToken);
					oprot.writeFieldEnd();
				}
			}
			if (struct.nickname != null) {
				if (struct.isSetNickname()) {
					oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
					oprot.writeString(struct.nickname);
					oprot.writeFieldEnd();
				}
			}
			if (struct.province != null) {
				if (struct.isSetProvince()) {
					oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
					oprot.writeString(struct.province);
					oprot.writeFieldEnd();
				}
			}
			if (struct.city != null) {
				if (struct.isSetCity()) {
					oprot.writeFieldBegin(CITY_FIELD_DESC);
					oprot.writeString(struct.city);
					oprot.writeFieldEnd();
				}
			}
			if (struct.icon != null) {
				if (struct.isSetIcon()) {
					oprot.writeFieldBegin(ICON_FIELD_DESC);
					oprot.writeString(struct.icon);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetSex()) {
				oprot.writeFieldBegin(SEX_FIELD_DESC);
				oprot.writeI32(struct.sex);
				oprot.writeFieldEnd();
			}
			if (struct.isSetIs_certified()) {
				oprot.writeFieldBegin(IS_CERTIFIED_FIELD_DESC);
				oprot.writeBool(struct.is_certified);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class UserAlipayBaseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserAlipayBaseTupleScheme getScheme() {
			return new UserAlipayBaseTupleScheme();
		}

	}

	private static class UserAlipayBaseTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserAlipayBase> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, UserAlipayBase struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetAlipayUid()) {
				optionals.set(0);
			}
			if (struct.isSetAccessToken()) {
				optionals.set(1);
			}
			if (struct.isSetNickname()) {
				optionals.set(2);
			}
			if (struct.isSetProvince()) {
				optionals.set(3);
			}
			if (struct.isSetCity()) {
				optionals.set(4);
			}
			if (struct.isSetIcon()) {
				optionals.set(5);
			}
			if (struct.isSetSex()) {
				optionals.set(6);
			}
			if (struct.isSetIs_certified()) {
				optionals.set(7);
			}
			oprot.writeBitSet(optionals, 8);
			if (struct.isSetAlipayUid()) {
				oprot.writeString(struct.alipayUid);
			}
			if (struct.isSetAccessToken()) {
				oprot.writeString(struct.accessToken);
			}
			if (struct.isSetNickname()) {
				oprot.writeString(struct.nickname);
			}
			if (struct.isSetProvince()) {
				oprot.writeString(struct.province);
			}
			if (struct.isSetCity()) {
				oprot.writeString(struct.city);
			}
			if (struct.isSetIcon()) {
				oprot.writeString(struct.icon);
			}
			if (struct.isSetSex()) {
				oprot.writeI32(struct.sex);
			}
			if (struct.isSetIs_certified()) {
				oprot.writeBool(struct.is_certified);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, UserAlipayBase struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(8);
			if (incoming.get(0)) {
				struct.alipayUid = iprot.readString();
				struct.setAlipayUidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.accessToken = iprot.readString();
				struct.setAccessTokenIsSet(true);
			}
			if (incoming.get(2)) {
				struct.nickname = iprot.readString();
				struct.setNicknameIsSet(true);
			}
			if (incoming.get(3)) {
				struct.province = iprot.readString();
				struct.setProvinceIsSet(true);
			}
			if (incoming.get(4)) {
				struct.city = iprot.readString();
				struct.setCityIsSet(true);
			}
			if (incoming.get(5)) {
				struct.icon = iprot.readString();
				struct.setIconIsSet(true);
			}
			if (incoming.get(6)) {
				struct.sex = iprot.readI32();
				struct.setSexIsSet(true);
			}
			if (incoming.get(7)) {
				struct.is_certified = iprot.readBool();
				struct.setIs_certifiedIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
