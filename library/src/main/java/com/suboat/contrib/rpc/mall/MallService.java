/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class MallService {

	public interface Iface extends com.suboat.contrib.rpc.base.BaseService.Iface {

		/**
		 *
		 * -----get接口------ getUser 取一个用户 getUserList 取用户列表 getUserStore 取一个用户-店铺信息
		 * getUserStoreList 取用户-店铺信息列表 getStore 取一个店铺 getStoreList 取店铺列表 getCategory 取一个分类
		 * getCategoryList 取分类列表 getLabel 取一个规格 getLabelList 取规格列表 getBrand 取一个品牌
		 * getBrandList 取品牌列表 getGood 取一个商品 getGoodList 取商品列表 getGoodBrand 取一个商品/品牌关联记录
		 * getGoodBrandList 取商品/品牌关联记录列表 getOrderIndex 取一个订单 getOrderIndexList 取订单列表
		 * getOrder 取一个订单 getOrderList 取订单列表 getOrderPay 取一个支付信息 getOrderPayList 取支付信息列表
		 *
		 * -----业务接口------ tryOrderUser 用户尝试下单(询最终价) createOrderUser 用户下单 setOrder
		 * 修改订单信息,支付费用及运费等
		 * @param uid
		 */
		public User getUser(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUser getUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public UserStore getUserStore(ArgRefUserStore form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUserStore getUserStoreList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Store getStore(java.lang.String sid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultStore getStoreList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Category getCategory(ArgRefCategory form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultCategory getCategoryList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Label getLabel(ArgRefLabel form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultLabel getLabelList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Brand getBrand(ArgRefBrand form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultBrand getBrandList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Goods getGoods(ArgRefGoods form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultGoods getGoodsList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Good getGood(ArgRefGood form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultGood getGoodList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public GoodBrand getGoodBrand(ArgRefGoodBrand form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultGoodBrand getGoodBrandList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public OrderIndex getOrderIndex(ArgRefOrderIndex form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultOrderIndex getOrderIndexList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Order getOrder(ArgRefOrder form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultOrder getOrderList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public OrderPay getOrderPay(ArgRefOrderPay form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultOrderPay getOrderPayList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public CouponStore getCouponStore(ArgRefCouponStore form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultCouponStore getCouponStoreList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public CouponUser getCouponUser(ArgRefCouponUser form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultCouponUser getCouponUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public OrderIndex tryOrderUser(ArgOrderUser form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public OrderIndex createOrderUser(ArgOrderUser form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Order setOrder(ArgUptOrder form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

	}

	public interface AsyncIface extends com.suboat.contrib.rpc.base.BaseService.AsyncIface {

		public void getUser(java.lang.String uid, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserStore(ArgRefUserStore form,
				org.apache.thrift.async.AsyncMethodCallback<UserStore> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserStoreList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserStore> resultHandler)
				throws org.apache.thrift.TException;

		public void getStore(java.lang.String sid, org.apache.thrift.async.AsyncMethodCallback<Store> resultHandler)
				throws org.apache.thrift.TException;

		public void getStoreList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultStore> resultHandler)
				throws org.apache.thrift.TException;

		public void getCategory(ArgRefCategory form,
				org.apache.thrift.async.AsyncMethodCallback<Category> resultHandler)
				throws org.apache.thrift.TException;

		public void getCategoryList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultCategory> resultHandler)
				throws org.apache.thrift.TException;

		public void getLabel(ArgRefLabel form, org.apache.thrift.async.AsyncMethodCallback<Label> resultHandler)
				throws org.apache.thrift.TException;

		public void getLabelList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultLabel> resultHandler)
				throws org.apache.thrift.TException;

		public void getBrand(ArgRefBrand form, org.apache.thrift.async.AsyncMethodCallback<Brand> resultHandler)
				throws org.apache.thrift.TException;

		public void getBrandList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultBrand> resultHandler)
				throws org.apache.thrift.TException;

		public void getGoods(ArgRefGoods form, org.apache.thrift.async.AsyncMethodCallback<Goods> resultHandler)
				throws org.apache.thrift.TException;

		public void getGoodsList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultGoods> resultHandler)
				throws org.apache.thrift.TException;

		public void getGood(ArgRefGood form, org.apache.thrift.async.AsyncMethodCallback<Good> resultHandler)
				throws org.apache.thrift.TException;

		public void getGoodList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultGood> resultHandler)
				throws org.apache.thrift.TException;

		public void getGoodBrand(ArgRefGoodBrand form,
				org.apache.thrift.async.AsyncMethodCallback<GoodBrand> resultHandler)
				throws org.apache.thrift.TException;

		public void getGoodBrandList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultGoodBrand> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrderIndex(ArgRefOrderIndex form,
				org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrderIndexList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrderIndex> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrder(ArgRefOrder form, org.apache.thrift.async.AsyncMethodCallback<Order> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrderList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrder> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrderPay(ArgRefOrderPay form,
				org.apache.thrift.async.AsyncMethodCallback<OrderPay> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrderPayList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrderPay> resultHandler)
				throws org.apache.thrift.TException;

		public void getCouponStore(ArgRefCouponStore form,
				org.apache.thrift.async.AsyncMethodCallback<CouponStore> resultHandler)
				throws org.apache.thrift.TException;

		public void getCouponStoreList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultCouponStore> resultHandler)
				throws org.apache.thrift.TException;

		public void getCouponUser(ArgRefCouponUser form,
				org.apache.thrift.async.AsyncMethodCallback<CouponUser> resultHandler)
				throws org.apache.thrift.TException;

		public void getCouponUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultCouponUser> resultHandler)
				throws org.apache.thrift.TException;

		public void tryOrderUser(ArgOrderUser form,
				org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler)
				throws org.apache.thrift.TException;

		public void createOrderUser(ArgOrderUser form,
				org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler)
				throws org.apache.thrift.TException;

		public void setOrder(ArgUptOrder form, org.apache.thrift.async.AsyncMethodCallback<Order> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends com.suboat.contrib.rpc.base.BaseService.Client implements Iface {

		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}

		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public User getUser(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUser(uid);
			return recv_getUser();
		}

		public void send_getUser(java.lang.String uid) throws org.apache.thrift.TException {
			getUser_args args = new getUser_args();
			args.setUid(uid);
			sendBase("getUser", args);
		}

		public User recv_getUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUser_result result = new getUser_result();
			receiveBase(result, "getUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUser failed: unknown result");
		}

		public ResultUser getUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserList(query);
			return recv_getUserList();
		}

		public void send_getUserList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getUserList_args args = new getUserList_args();
			args.setQuery(query);
			sendBase("getUserList", args);
		}

		public ResultUser recv_getUserList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserList_result result = new getUserList_result();
			receiveBase(result, "getUserList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserList failed: unknown result");
		}

		public UserStore getUserStore(ArgRefUserStore form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserStore(form);
			return recv_getUserStore();
		}

		public void send_getUserStore(ArgRefUserStore form) throws org.apache.thrift.TException {
			getUserStore_args args = new getUserStore_args();
			args.setForm(form);
			sendBase("getUserStore", args);
		}

		public UserStore recv_getUserStore() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserStore_result result = new getUserStore_result();
			receiveBase(result, "getUserStore");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserStore failed: unknown result");
		}

		public ResultUserStore getUserStoreList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserStoreList(query);
			return recv_getUserStoreList();
		}

		public void send_getUserStoreList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getUserStoreList_args args = new getUserStoreList_args();
			args.setQuery(query);
			sendBase("getUserStoreList", args);
		}

		public ResultUserStore recv_getUserStoreList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserStoreList_result result = new getUserStoreList_result();
			receiveBase(result, "getUserStoreList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserStoreList failed: unknown result");
		}

		public Store getStore(java.lang.String sid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getStore(sid);
			return recv_getStore();
		}

		public void send_getStore(java.lang.String sid) throws org.apache.thrift.TException {
			getStore_args args = new getStore_args();
			args.setSid(sid);
			sendBase("getStore", args);
		}

		public Store recv_getStore() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getStore_result result = new getStore_result();
			receiveBase(result, "getStore");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getStore failed: unknown result");
		}

		public ResultStore getStoreList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getStoreList(query);
			return recv_getStoreList();
		}

		public void send_getStoreList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getStoreList_args args = new getStoreList_args();
			args.setQuery(query);
			sendBase("getStoreList", args);
		}

		public ResultStore recv_getStoreList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getStoreList_result result = new getStoreList_result();
			receiveBase(result, "getStoreList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getStoreList failed: unknown result");
		}

		public Category getCategory(ArgRefCategory form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getCategory(form);
			return recv_getCategory();
		}

		public void send_getCategory(ArgRefCategory form) throws org.apache.thrift.TException {
			getCategory_args args = new getCategory_args();
			args.setForm(form);
			sendBase("getCategory", args);
		}

		public Category recv_getCategory() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getCategory_result result = new getCategory_result();
			receiveBase(result, "getCategory");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCategory failed: unknown result");
		}

		public ResultCategory getCategoryList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getCategoryList(query);
			return recv_getCategoryList();
		}

		public void send_getCategoryList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getCategoryList_args args = new getCategoryList_args();
			args.setQuery(query);
			sendBase("getCategoryList", args);
		}

		public ResultCategory recv_getCategoryList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getCategoryList_result result = new getCategoryList_result();
			receiveBase(result, "getCategoryList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCategoryList failed: unknown result");
		}

		public Label getLabel(ArgRefLabel form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getLabel(form);
			return recv_getLabel();
		}

		public void send_getLabel(ArgRefLabel form) throws org.apache.thrift.TException {
			getLabel_args args = new getLabel_args();
			args.setForm(form);
			sendBase("getLabel", args);
		}

		public Label recv_getLabel() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getLabel_result result = new getLabel_result();
			receiveBase(result, "getLabel");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getLabel failed: unknown result");
		}

		public ResultLabel getLabelList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getLabelList(query);
			return recv_getLabelList();
		}

		public void send_getLabelList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getLabelList_args args = new getLabelList_args();
			args.setQuery(query);
			sendBase("getLabelList", args);
		}

		public ResultLabel recv_getLabelList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getLabelList_result result = new getLabelList_result();
			receiveBase(result, "getLabelList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getLabelList failed: unknown result");
		}

		public Brand getBrand(ArgRefBrand form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getBrand(form);
			return recv_getBrand();
		}

		public void send_getBrand(ArgRefBrand form) throws org.apache.thrift.TException {
			getBrand_args args = new getBrand_args();
			args.setForm(form);
			sendBase("getBrand", args);
		}

		public Brand recv_getBrand() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getBrand_result result = new getBrand_result();
			receiveBase(result, "getBrand");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getBrand failed: unknown result");
		}

		public ResultBrand getBrandList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getBrandList(query);
			return recv_getBrandList();
		}

		public void send_getBrandList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getBrandList_args args = new getBrandList_args();
			args.setQuery(query);
			sendBase("getBrandList", args);
		}

		public ResultBrand recv_getBrandList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getBrandList_result result = new getBrandList_result();
			receiveBase(result, "getBrandList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getBrandList failed: unknown result");
		}

		public Goods getGoods(ArgRefGoods form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getGoods(form);
			return recv_getGoods();
		}

		public void send_getGoods(ArgRefGoods form) throws org.apache.thrift.TException {
			getGoods_args args = new getGoods_args();
			args.setForm(form);
			sendBase("getGoods", args);
		}

		public Goods recv_getGoods() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getGoods_result result = new getGoods_result();
			receiveBase(result, "getGoods");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getGoods failed: unknown result");
		}

		public ResultGoods getGoodsList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getGoodsList(query);
			return recv_getGoodsList();
		}

		public void send_getGoodsList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getGoodsList_args args = new getGoodsList_args();
			args.setQuery(query);
			sendBase("getGoodsList", args);
		}

		public ResultGoods recv_getGoodsList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getGoodsList_result result = new getGoodsList_result();
			receiveBase(result, "getGoodsList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getGoodsList failed: unknown result");
		}

		public Good getGood(ArgRefGood form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getGood(form);
			return recv_getGood();
		}

		public void send_getGood(ArgRefGood form) throws org.apache.thrift.TException {
			getGood_args args = new getGood_args();
			args.setForm(form);
			sendBase("getGood", args);
		}

		public Good recv_getGood() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getGood_result result = new getGood_result();
			receiveBase(result, "getGood");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getGood failed: unknown result");
		}

		public ResultGood getGoodList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getGoodList(query);
			return recv_getGoodList();
		}

		public void send_getGoodList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getGoodList_args args = new getGoodList_args();
			args.setQuery(query);
			sendBase("getGoodList", args);
		}

		public ResultGood recv_getGoodList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getGoodList_result result = new getGoodList_result();
			receiveBase(result, "getGoodList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getGoodList failed: unknown result");
		}

		public GoodBrand getGoodBrand(ArgRefGoodBrand form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getGoodBrand(form);
			return recv_getGoodBrand();
		}

		public void send_getGoodBrand(ArgRefGoodBrand form) throws org.apache.thrift.TException {
			getGoodBrand_args args = new getGoodBrand_args();
			args.setForm(form);
			sendBase("getGoodBrand", args);
		}

		public GoodBrand recv_getGoodBrand() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getGoodBrand_result result = new getGoodBrand_result();
			receiveBase(result, "getGoodBrand");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getGoodBrand failed: unknown result");
		}

		public ResultGoodBrand getGoodBrandList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getGoodBrandList(query);
			return recv_getGoodBrandList();
		}

		public void send_getGoodBrandList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getGoodBrandList_args args = new getGoodBrandList_args();
			args.setQuery(query);
			sendBase("getGoodBrandList", args);
		}

		public ResultGoodBrand recv_getGoodBrandList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getGoodBrandList_result result = new getGoodBrandList_result();
			receiveBase(result, "getGoodBrandList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getGoodBrandList failed: unknown result");
		}

		public OrderIndex getOrderIndex(ArgRefOrderIndex form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrderIndex(form);
			return recv_getOrderIndex();
		}

		public void send_getOrderIndex(ArgRefOrderIndex form) throws org.apache.thrift.TException {
			getOrderIndex_args args = new getOrderIndex_args();
			args.setForm(form);
			sendBase("getOrderIndex", args);
		}

		public OrderIndex recv_getOrderIndex() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrderIndex_result result = new getOrderIndex_result();
			receiveBase(result, "getOrderIndex");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrderIndex failed: unknown result");
		}

		public ResultOrderIndex getOrderIndexList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrderIndexList(query);
			return recv_getOrderIndexList();
		}

		public void send_getOrderIndexList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getOrderIndexList_args args = new getOrderIndexList_args();
			args.setQuery(query);
			sendBase("getOrderIndexList", args);
		}

		public ResultOrderIndex recv_getOrderIndexList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrderIndexList_result result = new getOrderIndexList_result();
			receiveBase(result, "getOrderIndexList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrderIndexList failed: unknown result");
		}

		public Order getOrder(ArgRefOrder form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrder(form);
			return recv_getOrder();
		}

		public void send_getOrder(ArgRefOrder form) throws org.apache.thrift.TException {
			getOrder_args args = new getOrder_args();
			args.setForm(form);
			sendBase("getOrder", args);
		}

		public Order recv_getOrder() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrder_result result = new getOrder_result();
			receiveBase(result, "getOrder");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrder failed: unknown result");
		}

		public ResultOrder getOrderList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrderList(query);
			return recv_getOrderList();
		}

		public void send_getOrderList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getOrderList_args args = new getOrderList_args();
			args.setQuery(query);
			sendBase("getOrderList", args);
		}

		public ResultOrder recv_getOrderList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrderList_result result = new getOrderList_result();
			receiveBase(result, "getOrderList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrderList failed: unknown result");
		}

		public OrderPay getOrderPay(ArgRefOrderPay form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrderPay(form);
			return recv_getOrderPay();
		}

		public void send_getOrderPay(ArgRefOrderPay form) throws org.apache.thrift.TException {
			getOrderPay_args args = new getOrderPay_args();
			args.setForm(form);
			sendBase("getOrderPay", args);
		}

		public OrderPay recv_getOrderPay() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrderPay_result result = new getOrderPay_result();
			receiveBase(result, "getOrderPay");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrderPay failed: unknown result");
		}

		public ResultOrderPay getOrderPayList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrderPayList(query);
			return recv_getOrderPayList();
		}

		public void send_getOrderPayList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getOrderPayList_args args = new getOrderPayList_args();
			args.setQuery(query);
			sendBase("getOrderPayList", args);
		}

		public ResultOrderPay recv_getOrderPayList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrderPayList_result result = new getOrderPayList_result();
			receiveBase(result, "getOrderPayList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrderPayList failed: unknown result");
		}

		public CouponStore getCouponStore(ArgRefCouponStore form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getCouponStore(form);
			return recv_getCouponStore();
		}

		public void send_getCouponStore(ArgRefCouponStore form) throws org.apache.thrift.TException {
			getCouponStore_args args = new getCouponStore_args();
			args.setForm(form);
			sendBase("getCouponStore", args);
		}

		public CouponStore recv_getCouponStore()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getCouponStore_result result = new getCouponStore_result();
			receiveBase(result, "getCouponStore");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCouponStore failed: unknown result");
		}

		public ResultCouponStore getCouponStoreList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getCouponStoreList(query);
			return recv_getCouponStoreList();
		}

		public void send_getCouponStoreList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getCouponStoreList_args args = new getCouponStoreList_args();
			args.setQuery(query);
			sendBase("getCouponStoreList", args);
		}

		public ResultCouponStore recv_getCouponStoreList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getCouponStoreList_result result = new getCouponStoreList_result();
			receiveBase(result, "getCouponStoreList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCouponStoreList failed: unknown result");
		}

		public CouponUser getCouponUser(ArgRefCouponUser form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getCouponUser(form);
			return recv_getCouponUser();
		}

		public void send_getCouponUser(ArgRefCouponUser form) throws org.apache.thrift.TException {
			getCouponUser_args args = new getCouponUser_args();
			args.setForm(form);
			sendBase("getCouponUser", args);
		}

		public CouponUser recv_getCouponUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getCouponUser_result result = new getCouponUser_result();
			receiveBase(result, "getCouponUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCouponUser failed: unknown result");
		}

		public ResultCouponUser getCouponUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getCouponUserList(query);
			return recv_getCouponUserList();
		}

		public void send_getCouponUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getCouponUserList_args args = new getCouponUserList_args();
			args.setQuery(query);
			sendBase("getCouponUserList", args);
		}

		public ResultCouponUser recv_getCouponUserList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getCouponUserList_result result = new getCouponUserList_result();
			receiveBase(result, "getCouponUserList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getCouponUserList failed: unknown result");
		}

		public OrderIndex tryOrderUser(ArgOrderUser form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_tryOrderUser(form);
			return recv_tryOrderUser();
		}

		public void send_tryOrderUser(ArgOrderUser form) throws org.apache.thrift.TException {
			tryOrderUser_args args = new tryOrderUser_args();
			args.setForm(form);
			sendBase("tryOrderUser", args);
		}

		public OrderIndex recv_tryOrderUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			tryOrderUser_result result = new tryOrderUser_result();
			receiveBase(result, "tryOrderUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"tryOrderUser failed: unknown result");
		}

		public OrderIndex createOrderUser(ArgOrderUser form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_createOrderUser(form);
			return recv_createOrderUser();
		}

		public void send_createOrderUser(ArgOrderUser form) throws org.apache.thrift.TException {
			createOrderUser_args args = new createOrderUser_args();
			args.setForm(form);
			sendBase("createOrderUser", args);
		}

		public OrderIndex recv_createOrderUser()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			createOrderUser_result result = new createOrderUser_result();
			receiveBase(result, "createOrderUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"createOrderUser failed: unknown result");
		}

		public Order setOrder(ArgUptOrder form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setOrder(form);
			return recv_setOrder();
		}

		public void send_setOrder(ArgUptOrder form) throws org.apache.thrift.TException {
			setOrder_args args = new setOrder_args();
			args.setForm(form);
			sendBase("setOrder", args);
		}

		public Order recv_setOrder() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setOrder_result result = new setOrder_result();
			receiveBase(result, "setOrder");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setOrder failed: unknown result");
		}

	}

	public static class AsyncClient extends com.suboat.contrib.rpc.base.BaseService.AsyncClient implements AsyncIface {

		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

			private org.apache.thrift.async.TAsyncClientManager clientManager;

			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}

		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getUser(java.lang.String uid, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUser_call method_call = new getUser_call(uid, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUser_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private java.lang.String uid;

			public getUser_call(java.lang.String uid, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUser_args args = new getUser_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUser();
			}

		}

		public void getUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserList_call method_call = new getUserList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultUser> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserList_args args = new getUserList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUser getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserList();
			}

		}

		public void getUserStore(ArgRefUserStore form,
				org.apache.thrift.async.AsyncMethodCallback<UserStore> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserStore_call method_call = new getUserStore_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserStore_call extends org.apache.thrift.async.TAsyncMethodCall<UserStore> {

			private ArgRefUserStore form;

			public getUserStore_call(ArgRefUserStore form,
					org.apache.thrift.async.AsyncMethodCallback<UserStore> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserStore",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserStore_args args = new getUserStore_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserStore getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserStore();
			}

		}

		public void getUserStoreList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserStore> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserStoreList_call method_call = new getUserStoreList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserStoreList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultUserStore> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserStoreList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserStore> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserStoreList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserStoreList_args args = new getUserStoreList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUserStore getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserStoreList();
			}

		}

		public void getStore(java.lang.String sid, org.apache.thrift.async.AsyncMethodCallback<Store> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getStore_call method_call = new getStore_call(sid, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getStore_call extends org.apache.thrift.async.TAsyncMethodCall<Store> {

			private java.lang.String sid;

			public getStore_call(java.lang.String sid, org.apache.thrift.async.AsyncMethodCallback<Store> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.sid = sid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStore",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getStore_args args = new getStore_args();
				args.setSid(sid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Store getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getStore();
			}

		}

		public void getStoreList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultStore> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getStoreList_call method_call = new getStoreList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getStoreList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultStore> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getStoreList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultStore> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStoreList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getStoreList_args args = new getStoreList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultStore getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getStoreList();
			}

		}

		public void getCategory(ArgRefCategory form,
				org.apache.thrift.async.AsyncMethodCallback<Category> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCategory_call method_call = new getCategory_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCategory_call extends org.apache.thrift.async.TAsyncMethodCall<Category> {

			private ArgRefCategory form;

			public getCategory_call(ArgRefCategory form,
					org.apache.thrift.async.AsyncMethodCallback<Category> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategory",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCategory_args args = new getCategory_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Category getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCategory();
			}

		}

		public void getCategoryList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultCategory> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCategoryList_call method_call = new getCategoryList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCategoryList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultCategory> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getCategoryList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultCategory> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCategoryList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCategoryList_args args = new getCategoryList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultCategory getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCategoryList();
			}

		}

		public void getLabel(ArgRefLabel form, org.apache.thrift.async.AsyncMethodCallback<Label> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getLabel_call method_call = new getLabel_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getLabel_call extends org.apache.thrift.async.TAsyncMethodCall<Label> {

			private ArgRefLabel form;

			public getLabel_call(ArgRefLabel form, org.apache.thrift.async.AsyncMethodCallback<Label> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLabel",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getLabel_args args = new getLabel_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Label getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getLabel();
			}

		}

		public void getLabelList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultLabel> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getLabelList_call method_call = new getLabelList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getLabelList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultLabel> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getLabelList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultLabel> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLabelList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getLabelList_args args = new getLabelList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultLabel getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getLabelList();
			}

		}

		public void getBrand(ArgRefBrand form, org.apache.thrift.async.AsyncMethodCallback<Brand> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getBrand_call method_call = new getBrand_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getBrand_call extends org.apache.thrift.async.TAsyncMethodCall<Brand> {

			private ArgRefBrand form;

			public getBrand_call(ArgRefBrand form, org.apache.thrift.async.AsyncMethodCallback<Brand> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBrand",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getBrand_args args = new getBrand_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Brand getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getBrand();
			}

		}

		public void getBrandList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultBrand> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getBrandList_call method_call = new getBrandList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getBrandList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultBrand> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getBrandList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultBrand> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBrandList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getBrandList_args args = new getBrandList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultBrand getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getBrandList();
			}

		}

		public void getGoods(ArgRefGoods form, org.apache.thrift.async.AsyncMethodCallback<Goods> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getGoods_call method_call = new getGoods_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getGoods_call extends org.apache.thrift.async.TAsyncMethodCall<Goods> {

			private ArgRefGoods form;

			public getGoods_call(ArgRefGoods form, org.apache.thrift.async.AsyncMethodCallback<Goods> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoods",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getGoods_args args = new getGoods_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Goods getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getGoods();
			}

		}

		public void getGoodsList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultGoods> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getGoodsList_call method_call = new getGoodsList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getGoodsList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultGoods> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getGoodsList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultGoods> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoodsList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getGoodsList_args args = new getGoodsList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultGoods getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getGoodsList();
			}

		}

		public void getGood(ArgRefGood form, org.apache.thrift.async.AsyncMethodCallback<Good> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getGood_call method_call = new getGood_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getGood_call extends org.apache.thrift.async.TAsyncMethodCall<Good> {

			private ArgRefGood form;

			public getGood_call(ArgRefGood form, org.apache.thrift.async.AsyncMethodCallback<Good> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGood",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getGood_args args = new getGood_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Good getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getGood();
			}

		}

		public void getGoodList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultGood> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getGoodList_call method_call = new getGoodList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getGoodList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultGood> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getGoodList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultGood> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoodList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getGoodList_args args = new getGoodList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultGood getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getGoodList();
			}

		}

		public void getGoodBrand(ArgRefGoodBrand form,
				org.apache.thrift.async.AsyncMethodCallback<GoodBrand> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getGoodBrand_call method_call = new getGoodBrand_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getGoodBrand_call extends org.apache.thrift.async.TAsyncMethodCall<GoodBrand> {

			private ArgRefGoodBrand form;

			public getGoodBrand_call(ArgRefGoodBrand form,
					org.apache.thrift.async.AsyncMethodCallback<GoodBrand> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoodBrand",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getGoodBrand_args args = new getGoodBrand_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public GoodBrand getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getGoodBrand();
			}

		}

		public void getGoodBrandList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultGoodBrand> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getGoodBrandList_call method_call = new getGoodBrandList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getGoodBrandList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultGoodBrand> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getGoodBrandList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultGoodBrand> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoodBrandList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getGoodBrandList_args args = new getGoodBrandList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultGoodBrand getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getGoodBrandList();
			}

		}

		public void getOrderIndex(ArgRefOrderIndex form,
				org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrderIndex_call method_call = new getOrderIndex_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrderIndex_call extends org.apache.thrift.async.TAsyncMethodCall<OrderIndex> {

			private ArgRefOrderIndex form;

			public getOrderIndex_call(ArgRefOrderIndex form,
					org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderIndex",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrderIndex_args args = new getOrderIndex_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public OrderIndex getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrderIndex();
			}

		}

		public void getOrderIndexList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrderIndex> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrderIndexList_call method_call = new getOrderIndexList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrderIndexList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultOrderIndex> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getOrderIndexList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrderIndex> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderIndexList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrderIndexList_args args = new getOrderIndexList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultOrderIndex getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrderIndexList();
			}

		}

		public void getOrder(ArgRefOrder form, org.apache.thrift.async.AsyncMethodCallback<Order> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrder_call method_call = new getOrder_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrder_call extends org.apache.thrift.async.TAsyncMethodCall<Order> {

			private ArgRefOrder form;

			public getOrder_call(ArgRefOrder form, org.apache.thrift.async.AsyncMethodCallback<Order> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrder",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrder_args args = new getOrder_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Order getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrder();
			}

		}

		public void getOrderList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrder> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrderList_call method_call = new getOrderList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrderList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultOrder> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getOrderList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrder> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrderList_args args = new getOrderList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultOrder getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrderList();
			}

		}

		public void getOrderPay(ArgRefOrderPay form,
				org.apache.thrift.async.AsyncMethodCallback<OrderPay> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrderPay_call method_call = new getOrderPay_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrderPay_call extends org.apache.thrift.async.TAsyncMethodCall<OrderPay> {

			private ArgRefOrderPay form;

			public getOrderPay_call(ArgRefOrderPay form,
					org.apache.thrift.async.AsyncMethodCallback<OrderPay> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderPay",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrderPay_args args = new getOrderPay_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public OrderPay getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrderPay();
			}

		}

		public void getOrderPayList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrderPay> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrderPayList_call method_call = new getOrderPayList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrderPayList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultOrderPay> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getOrderPayList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrderPay> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrderPayList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrderPayList_args args = new getOrderPayList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultOrderPay getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrderPayList();
			}

		}

		public void getCouponStore(ArgRefCouponStore form,
				org.apache.thrift.async.AsyncMethodCallback<CouponStore> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCouponStore_call method_call = new getCouponStore_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCouponStore_call extends org.apache.thrift.async.TAsyncMethodCall<CouponStore> {

			private ArgRefCouponStore form;

			public getCouponStore_call(ArgRefCouponStore form,
					org.apache.thrift.async.AsyncMethodCallback<CouponStore> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCouponStore",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCouponStore_args args = new getCouponStore_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public CouponStore getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCouponStore();
			}

		}

		public void getCouponStoreList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultCouponStore> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCouponStoreList_call method_call = new getCouponStoreList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCouponStoreList_call
				extends org.apache.thrift.async.TAsyncMethodCall<ResultCouponStore> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getCouponStoreList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultCouponStore> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCouponStoreList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCouponStoreList_args args = new getCouponStoreList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultCouponStore getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCouponStoreList();
			}

		}

		public void getCouponUser(ArgRefCouponUser form,
				org.apache.thrift.async.AsyncMethodCallback<CouponUser> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCouponUser_call method_call = new getCouponUser_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCouponUser_call extends org.apache.thrift.async.TAsyncMethodCall<CouponUser> {

			private ArgRefCouponUser form;

			public getCouponUser_call(ArgRefCouponUser form,
					org.apache.thrift.async.AsyncMethodCallback<CouponUser> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCouponUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCouponUser_args args = new getCouponUser_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public CouponUser getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCouponUser();
			}

		}

		public void getCouponUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultCouponUser> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getCouponUserList_call method_call = new getCouponUserList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getCouponUserList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultCouponUser> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getCouponUserList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultCouponUser> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCouponUserList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getCouponUserList_args args = new getCouponUserList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultCouponUser getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getCouponUserList();
			}

		}

		public void tryOrderUser(ArgOrderUser form,
				org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			tryOrderUser_call method_call = new tryOrderUser_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class tryOrderUser_call extends org.apache.thrift.async.TAsyncMethodCall<OrderIndex> {

			private ArgOrderUser form;

			public tryOrderUser_call(ArgOrderUser form,
					org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("tryOrderUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				tryOrderUser_args args = new tryOrderUser_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public OrderIndex getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_tryOrderUser();
			}

		}

		public void createOrderUser(ArgOrderUser form,
				org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			createOrderUser_call method_call = new createOrderUser_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class createOrderUser_call extends org.apache.thrift.async.TAsyncMethodCall<OrderIndex> {

			private ArgOrderUser form;

			public createOrderUser_call(ArgOrderUser form,
					org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOrderUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				createOrderUser_args args = new createOrderUser_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public OrderIndex getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_createOrderUser();
			}

		}

		public void setOrder(ArgUptOrder form, org.apache.thrift.async.AsyncMethodCallback<Order> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setOrder_call method_call = new setOrder_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setOrder_call extends org.apache.thrift.async.TAsyncMethodCall<Order> {

			private ArgUptOrder form;

			public setOrder_call(ArgUptOrder form, org.apache.thrift.async.AsyncMethodCallback<Order> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setOrder",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setOrder_args args = new setOrder_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Order getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setOrder();
			}

		}

	}

	public static class Processor<I extends Iface> extends com.suboat.contrib.rpc.base.BaseService.Processor<I>
			implements org.apache.thrift.TProcessor {

		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getUser", new getUser());
			processMap.put("getUserList", new getUserList());
			processMap.put("getUserStore", new getUserStore());
			processMap.put("getUserStoreList", new getUserStoreList());
			processMap.put("getStore", new getStore());
			processMap.put("getStoreList", new getStoreList());
			processMap.put("getCategory", new getCategory());
			processMap.put("getCategoryList", new getCategoryList());
			processMap.put("getLabel", new getLabel());
			processMap.put("getLabelList", new getLabelList());
			processMap.put("getBrand", new getBrand());
			processMap.put("getBrandList", new getBrandList());
			processMap.put("getGoods", new getGoods());
			processMap.put("getGoodsList", new getGoodsList());
			processMap.put("getGood", new getGood());
			processMap.put("getGoodList", new getGoodList());
			processMap.put("getGoodBrand", new getGoodBrand());
			processMap.put("getGoodBrandList", new getGoodBrandList());
			processMap.put("getOrderIndex", new getOrderIndex());
			processMap.put("getOrderIndexList", new getOrderIndexList());
			processMap.put("getOrder", new getOrder());
			processMap.put("getOrderList", new getOrderList());
			processMap.put("getOrderPay", new getOrderPay());
			processMap.put("getOrderPayList", new getOrderPayList());
			processMap.put("getCouponStore", new getCouponStore());
			processMap.put("getCouponStoreList", new getCouponStoreList());
			processMap.put("getCouponUser", new getCouponUser());
			processMap.put("getCouponUserList", new getCouponUserList());
			processMap.put("tryOrderUser", new tryOrderUser());
			processMap.put("createOrderUser", new createOrderUser());
			processMap.put("setOrder", new setOrder());
			return processMap;
		}

		public static class getUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUser_args> {

			public getUser() {
				super("getUser");
			}

			public getUser_args getEmptyArgsInstance() {
				return new getUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUser_result getResult(I iface, getUser_args args) throws org.apache.thrift.TException {
				getUser_result result = new getUser_result();
				try {
					result.success = iface.getUser(args.uid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserList_args> {

			public getUserList() {
				super("getUserList");
			}

			public getUserList_args getEmptyArgsInstance() {
				return new getUserList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserList_result getResult(I iface, getUserList_args args) throws org.apache.thrift.TException {
				getUserList_result result = new getUserList_result();
				try {
					result.success = iface.getUserList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserStore<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserStore_args> {

			public getUserStore() {
				super("getUserStore");
			}

			public getUserStore_args getEmptyArgsInstance() {
				return new getUserStore_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserStore_result getResult(I iface, getUserStore_args args) throws org.apache.thrift.TException {
				getUserStore_result result = new getUserStore_result();
				try {
					result.success = iface.getUserStore(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserStoreList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserStoreList_args> {

			public getUserStoreList() {
				super("getUserStoreList");
			}

			public getUserStoreList_args getEmptyArgsInstance() {
				return new getUserStoreList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserStoreList_result getResult(I iface, getUserStoreList_args args)
					throws org.apache.thrift.TException {
				getUserStoreList_result result = new getUserStoreList_result();
				try {
					result.success = iface.getUserStoreList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getStore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStore_args> {

			public getStore() {
				super("getStore");
			}

			public getStore_args getEmptyArgsInstance() {
				return new getStore_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getStore_result getResult(I iface, getStore_args args) throws org.apache.thrift.TException {
				getStore_result result = new getStore_result();
				try {
					result.success = iface.getStore(args.sid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getStoreList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getStoreList_args> {

			public getStoreList() {
				super("getStoreList");
			}

			public getStoreList_args getEmptyArgsInstance() {
				return new getStoreList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getStoreList_result getResult(I iface, getStoreList_args args) throws org.apache.thrift.TException {
				getStoreList_result result = new getStoreList_result();
				try {
					result.success = iface.getStoreList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getCategory<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getCategory_args> {

			public getCategory() {
				super("getCategory");
			}

			public getCategory_args getEmptyArgsInstance() {
				return new getCategory_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getCategory_result getResult(I iface, getCategory_args args) throws org.apache.thrift.TException {
				getCategory_result result = new getCategory_result();
				try {
					result.success = iface.getCategory(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getCategoryList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getCategoryList_args> {

			public getCategoryList() {
				super("getCategoryList");
			}

			public getCategoryList_args getEmptyArgsInstance() {
				return new getCategoryList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getCategoryList_result getResult(I iface, getCategoryList_args args)
					throws org.apache.thrift.TException {
				getCategoryList_result result = new getCategoryList_result();
				try {
					result.success = iface.getCategoryList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getLabel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLabel_args> {

			public getLabel() {
				super("getLabel");
			}

			public getLabel_args getEmptyArgsInstance() {
				return new getLabel_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getLabel_result getResult(I iface, getLabel_args args) throws org.apache.thrift.TException {
				getLabel_result result = new getLabel_result();
				try {
					result.success = iface.getLabel(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getLabelList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getLabelList_args> {

			public getLabelList() {
				super("getLabelList");
			}

			public getLabelList_args getEmptyArgsInstance() {
				return new getLabelList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getLabelList_result getResult(I iface, getLabelList_args args) throws org.apache.thrift.TException {
				getLabelList_result result = new getLabelList_result();
				try {
					result.success = iface.getLabelList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getBrand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBrand_args> {

			public getBrand() {
				super("getBrand");
			}

			public getBrand_args getEmptyArgsInstance() {
				return new getBrand_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getBrand_result getResult(I iface, getBrand_args args) throws org.apache.thrift.TException {
				getBrand_result result = new getBrand_result();
				try {
					result.success = iface.getBrand(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getBrandList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getBrandList_args> {

			public getBrandList() {
				super("getBrandList");
			}

			public getBrandList_args getEmptyArgsInstance() {
				return new getBrandList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getBrandList_result getResult(I iface, getBrandList_args args) throws org.apache.thrift.TException {
				getBrandList_result result = new getBrandList_result();
				try {
					result.success = iface.getBrandList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getGoods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGoods_args> {

			public getGoods() {
				super("getGoods");
			}

			public getGoods_args getEmptyArgsInstance() {
				return new getGoods_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getGoods_result getResult(I iface, getGoods_args args) throws org.apache.thrift.TException {
				getGoods_result result = new getGoods_result();
				try {
					result.success = iface.getGoods(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getGoodsList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getGoodsList_args> {

			public getGoodsList() {
				super("getGoodsList");
			}

			public getGoodsList_args getEmptyArgsInstance() {
				return new getGoodsList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getGoodsList_result getResult(I iface, getGoodsList_args args) throws org.apache.thrift.TException {
				getGoodsList_result result = new getGoodsList_result();
				try {
					result.success = iface.getGoodsList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getGood<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGood_args> {

			public getGood() {
				super("getGood");
			}

			public getGood_args getEmptyArgsInstance() {
				return new getGood_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getGood_result getResult(I iface, getGood_args args) throws org.apache.thrift.TException {
				getGood_result result = new getGood_result();
				try {
					result.success = iface.getGood(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getGoodList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getGoodList_args> {

			public getGoodList() {
				super("getGoodList");
			}

			public getGoodList_args getEmptyArgsInstance() {
				return new getGoodList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getGoodList_result getResult(I iface, getGoodList_args args) throws org.apache.thrift.TException {
				getGoodList_result result = new getGoodList_result();
				try {
					result.success = iface.getGoodList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getGoodBrand<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getGoodBrand_args> {

			public getGoodBrand() {
				super("getGoodBrand");
			}

			public getGoodBrand_args getEmptyArgsInstance() {
				return new getGoodBrand_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getGoodBrand_result getResult(I iface, getGoodBrand_args args) throws org.apache.thrift.TException {
				getGoodBrand_result result = new getGoodBrand_result();
				try {
					result.success = iface.getGoodBrand(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getGoodBrandList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getGoodBrandList_args> {

			public getGoodBrandList() {
				super("getGoodBrandList");
			}

			public getGoodBrandList_args getEmptyArgsInstance() {
				return new getGoodBrandList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getGoodBrandList_result getResult(I iface, getGoodBrandList_args args)
					throws org.apache.thrift.TException {
				getGoodBrandList_result result = new getGoodBrandList_result();
				try {
					result.success = iface.getGoodBrandList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrderIndex<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrderIndex_args> {

			public getOrderIndex() {
				super("getOrderIndex");
			}

			public getOrderIndex_args getEmptyArgsInstance() {
				return new getOrderIndex_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrderIndex_result getResult(I iface, getOrderIndex_args args)
					throws org.apache.thrift.TException {
				getOrderIndex_result result = new getOrderIndex_result();
				try {
					result.success = iface.getOrderIndex(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrderIndexList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrderIndexList_args> {

			public getOrderIndexList() {
				super("getOrderIndexList");
			}

			public getOrderIndexList_args getEmptyArgsInstance() {
				return new getOrderIndexList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrderIndexList_result getResult(I iface, getOrderIndexList_args args)
					throws org.apache.thrift.TException {
				getOrderIndexList_result result = new getOrderIndexList_result();
				try {
					result.success = iface.getOrderIndexList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrder_args> {

			public getOrder() {
				super("getOrder");
			}

			public getOrder_args getEmptyArgsInstance() {
				return new getOrder_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrder_result getResult(I iface, getOrder_args args) throws org.apache.thrift.TException {
				getOrder_result result = new getOrder_result();
				try {
					result.success = iface.getOrder(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrderList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrderList_args> {

			public getOrderList() {
				super("getOrderList");
			}

			public getOrderList_args getEmptyArgsInstance() {
				return new getOrderList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrderList_result getResult(I iface, getOrderList_args args) throws org.apache.thrift.TException {
				getOrderList_result result = new getOrderList_result();
				try {
					result.success = iface.getOrderList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrderPay<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrderPay_args> {

			public getOrderPay() {
				super("getOrderPay");
			}

			public getOrderPay_args getEmptyArgsInstance() {
				return new getOrderPay_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrderPay_result getResult(I iface, getOrderPay_args args) throws org.apache.thrift.TException {
				getOrderPay_result result = new getOrderPay_result();
				try {
					result.success = iface.getOrderPay(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrderPayList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrderPayList_args> {

			public getOrderPayList() {
				super("getOrderPayList");
			}

			public getOrderPayList_args getEmptyArgsInstance() {
				return new getOrderPayList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrderPayList_result getResult(I iface, getOrderPayList_args args)
					throws org.apache.thrift.TException {
				getOrderPayList_result result = new getOrderPayList_result();
				try {
					result.success = iface.getOrderPayList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getCouponStore<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getCouponStore_args> {

			public getCouponStore() {
				super("getCouponStore");
			}

			public getCouponStore_args getEmptyArgsInstance() {
				return new getCouponStore_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getCouponStore_result getResult(I iface, getCouponStore_args args)
					throws org.apache.thrift.TException {
				getCouponStore_result result = new getCouponStore_result();
				try {
					result.success = iface.getCouponStore(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getCouponStoreList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getCouponStoreList_args> {

			public getCouponStoreList() {
				super("getCouponStoreList");
			}

			public getCouponStoreList_args getEmptyArgsInstance() {
				return new getCouponStoreList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getCouponStoreList_result getResult(I iface, getCouponStoreList_args args)
					throws org.apache.thrift.TException {
				getCouponStoreList_result result = new getCouponStoreList_result();
				try {
					result.success = iface.getCouponStoreList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getCouponUser<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getCouponUser_args> {

			public getCouponUser() {
				super("getCouponUser");
			}

			public getCouponUser_args getEmptyArgsInstance() {
				return new getCouponUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getCouponUser_result getResult(I iface, getCouponUser_args args)
					throws org.apache.thrift.TException {
				getCouponUser_result result = new getCouponUser_result();
				try {
					result.success = iface.getCouponUser(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getCouponUserList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getCouponUserList_args> {

			public getCouponUserList() {
				super("getCouponUserList");
			}

			public getCouponUserList_args getEmptyArgsInstance() {
				return new getCouponUserList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getCouponUserList_result getResult(I iface, getCouponUserList_args args)
					throws org.apache.thrift.TException {
				getCouponUserList_result result = new getCouponUserList_result();
				try {
					result.success = iface.getCouponUserList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class tryOrderUser<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, tryOrderUser_args> {

			public tryOrderUser() {
				super("tryOrderUser");
			}

			public tryOrderUser_args getEmptyArgsInstance() {
				return new tryOrderUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public tryOrderUser_result getResult(I iface, tryOrderUser_args args) throws org.apache.thrift.TException {
				tryOrderUser_result result = new tryOrderUser_result();
				try {
					result.success = iface.tryOrderUser(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class createOrderUser<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, createOrderUser_args> {

			public createOrderUser() {
				super("createOrderUser");
			}

			public createOrderUser_args getEmptyArgsInstance() {
				return new createOrderUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public createOrderUser_result getResult(I iface, createOrderUser_args args)
					throws org.apache.thrift.TException {
				createOrderUser_result result = new createOrderUser_result();
				try {
					result.success = iface.createOrderUser(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setOrder_args> {

			public setOrder() {
				super("setOrder");
			}

			public setOrder_args getEmptyArgsInstance() {
				return new setOrder_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setOrder_result getResult(I iface, setOrder_args args) throws org.apache.thrift.TException {
				setOrder_result result = new setOrder_result();
				try {
					result.success = iface.setOrder(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

	}

	public static class AsyncProcessor<I extends AsyncIface>
			extends com.suboat.contrib.rpc.base.BaseService.AsyncProcessor<I> {

		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getUser", new getUser());
			processMap.put("getUserList", new getUserList());
			processMap.put("getUserStore", new getUserStore());
			processMap.put("getUserStoreList", new getUserStoreList());
			processMap.put("getStore", new getStore());
			processMap.put("getStoreList", new getStoreList());
			processMap.put("getCategory", new getCategory());
			processMap.put("getCategoryList", new getCategoryList());
			processMap.put("getLabel", new getLabel());
			processMap.put("getLabelList", new getLabelList());
			processMap.put("getBrand", new getBrand());
			processMap.put("getBrandList", new getBrandList());
			processMap.put("getGoods", new getGoods());
			processMap.put("getGoodsList", new getGoodsList());
			processMap.put("getGood", new getGood());
			processMap.put("getGoodList", new getGoodList());
			processMap.put("getGoodBrand", new getGoodBrand());
			processMap.put("getGoodBrandList", new getGoodBrandList());
			processMap.put("getOrderIndex", new getOrderIndex());
			processMap.put("getOrderIndexList", new getOrderIndexList());
			processMap.put("getOrder", new getOrder());
			processMap.put("getOrderList", new getOrderList());
			processMap.put("getOrderPay", new getOrderPay());
			processMap.put("getOrderPayList", new getOrderPayList());
			processMap.put("getCouponStore", new getCouponStore());
			processMap.put("getCouponStoreList", new getCouponStoreList());
			processMap.put("getCouponUser", new getCouponUser());
			processMap.put("getCouponUserList", new getCouponUserList());
			processMap.put("tryOrderUser", new tryOrderUser());
			processMap.put("createOrderUser", new createOrderUser());
			processMap.put("setOrder", new setOrder());
			return processMap;
		}

		public static class getUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUser_args, User> {

			public getUser() {
				super("getUser");
			}

			public getUser_args getEmptyArgsInstance() {
				return new getUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						getUser_result result = new getUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUser_result result = new getUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUser(args.uid, resultHandler);
			}

		}

		public static class getUserList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserList_args, ResultUser> {

			public getUserList() {
				super("getUserList");
			}

			public getUserList_args getEmptyArgsInstance() {
				return new getUserList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUser> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUser>() {
					public void onComplete(ResultUser o) {
						getUserList_result result = new getUserList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserList_result result = new getUserList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserList(args.query, resultHandler);
			}

		}

		public static class getUserStore<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserStore_args, UserStore> {

			public getUserStore() {
				super("getUserStore");
			}

			public getUserStore_args getEmptyArgsInstance() {
				return new getUserStore_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserStore> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserStore>() {
					public void onComplete(UserStore o) {
						getUserStore_result result = new getUserStore_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserStore_result result = new getUserStore_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserStore_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserStore> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserStore(args.form, resultHandler);
			}

		}

		public static class getUserStoreList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserStoreList_args, ResultUserStore> {

			public getUserStoreList() {
				super("getUserStoreList");
			}

			public getUserStoreList_args getEmptyArgsInstance() {
				return new getUserStoreList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUserStore> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUserStore>() {
					public void onComplete(ResultUserStore o) {
						getUserStoreList_result result = new getUserStoreList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserStoreList_result result = new getUserStoreList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserStoreList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserStore> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserStoreList(args.query, resultHandler);
			}

		}

		public static class getStore<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getStore_args, Store> {

			public getStore() {
				super("getStore");
			}

			public getStore_args getEmptyArgsInstance() {
				return new getStore_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Store> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Store>() {
					public void onComplete(Store o) {
						getStore_result result = new getStore_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getStore_result result = new getStore_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getStore_args args,
					org.apache.thrift.async.AsyncMethodCallback<Store> resultHandler)
					throws org.apache.thrift.TException {
				iface.getStore(args.sid, resultHandler);
			}

		}

		public static class getStoreList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getStoreList_args, ResultStore> {

			public getStoreList() {
				super("getStoreList");
			}

			public getStoreList_args getEmptyArgsInstance() {
				return new getStoreList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultStore> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultStore>() {
					public void onComplete(ResultStore o) {
						getStoreList_result result = new getStoreList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getStoreList_result result = new getStoreList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getStoreList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultStore> resultHandler)
					throws org.apache.thrift.TException {
				iface.getStoreList(args.query, resultHandler);
			}

		}

		public static class getCategory<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getCategory_args, Category> {

			public getCategory() {
				super("getCategory");
			}

			public getCategory_args getEmptyArgsInstance() {
				return new getCategory_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Category> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Category>() {
					public void onComplete(Category o) {
						getCategory_result result = new getCategory_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getCategory_result result = new getCategory_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getCategory_args args,
					org.apache.thrift.async.AsyncMethodCallback<Category> resultHandler)
					throws org.apache.thrift.TException {
				iface.getCategory(args.form, resultHandler);
			}

		}

		public static class getCategoryList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getCategoryList_args, ResultCategory> {

			public getCategoryList() {
				super("getCategoryList");
			}

			public getCategoryList_args getEmptyArgsInstance() {
				return new getCategoryList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultCategory> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultCategory>() {
					public void onComplete(ResultCategory o) {
						getCategoryList_result result = new getCategoryList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getCategoryList_result result = new getCategoryList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getCategoryList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultCategory> resultHandler)
					throws org.apache.thrift.TException {
				iface.getCategoryList(args.query, resultHandler);
			}

		}

		public static class getLabel<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getLabel_args, Label> {

			public getLabel() {
				super("getLabel");
			}

			public getLabel_args getEmptyArgsInstance() {
				return new getLabel_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Label> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Label>() {
					public void onComplete(Label o) {
						getLabel_result result = new getLabel_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getLabel_result result = new getLabel_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getLabel_args args,
					org.apache.thrift.async.AsyncMethodCallback<Label> resultHandler)
					throws org.apache.thrift.TException {
				iface.getLabel(args.form, resultHandler);
			}

		}

		public static class getLabelList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getLabelList_args, ResultLabel> {

			public getLabelList() {
				super("getLabelList");
			}

			public getLabelList_args getEmptyArgsInstance() {
				return new getLabelList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultLabel> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultLabel>() {
					public void onComplete(ResultLabel o) {
						getLabelList_result result = new getLabelList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getLabelList_result result = new getLabelList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getLabelList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultLabel> resultHandler)
					throws org.apache.thrift.TException {
				iface.getLabelList(args.query, resultHandler);
			}

		}

		public static class getBrand<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getBrand_args, Brand> {

			public getBrand() {
				super("getBrand");
			}

			public getBrand_args getEmptyArgsInstance() {
				return new getBrand_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Brand> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Brand>() {
					public void onComplete(Brand o) {
						getBrand_result result = new getBrand_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getBrand_result result = new getBrand_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getBrand_args args,
					org.apache.thrift.async.AsyncMethodCallback<Brand> resultHandler)
					throws org.apache.thrift.TException {
				iface.getBrand(args.form, resultHandler);
			}

		}

		public static class getBrandList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getBrandList_args, ResultBrand> {

			public getBrandList() {
				super("getBrandList");
			}

			public getBrandList_args getEmptyArgsInstance() {
				return new getBrandList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultBrand> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultBrand>() {
					public void onComplete(ResultBrand o) {
						getBrandList_result result = new getBrandList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getBrandList_result result = new getBrandList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getBrandList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultBrand> resultHandler)
					throws org.apache.thrift.TException {
				iface.getBrandList(args.query, resultHandler);
			}

		}

		public static class getGoods<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getGoods_args, Goods> {

			public getGoods() {
				super("getGoods");
			}

			public getGoods_args getEmptyArgsInstance() {
				return new getGoods_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Goods> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Goods>() {
					public void onComplete(Goods o) {
						getGoods_result result = new getGoods_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getGoods_result result = new getGoods_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getGoods_args args,
					org.apache.thrift.async.AsyncMethodCallback<Goods> resultHandler)
					throws org.apache.thrift.TException {
				iface.getGoods(args.form, resultHandler);
			}

		}

		public static class getGoodsList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getGoodsList_args, ResultGoods> {

			public getGoodsList() {
				super("getGoodsList");
			}

			public getGoodsList_args getEmptyArgsInstance() {
				return new getGoodsList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultGoods> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultGoods>() {
					public void onComplete(ResultGoods o) {
						getGoodsList_result result = new getGoodsList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getGoodsList_result result = new getGoodsList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getGoodsList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultGoods> resultHandler)
					throws org.apache.thrift.TException {
				iface.getGoodsList(args.query, resultHandler);
			}

		}

		public static class getGood<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getGood_args, Good> {

			public getGood() {
				super("getGood");
			}

			public getGood_args getEmptyArgsInstance() {
				return new getGood_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Good> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Good>() {
					public void onComplete(Good o) {
						getGood_result result = new getGood_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getGood_result result = new getGood_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getGood_args args,
					org.apache.thrift.async.AsyncMethodCallback<Good> resultHandler)
					throws org.apache.thrift.TException {
				iface.getGood(args.form, resultHandler);
			}

		}

		public static class getGoodList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getGoodList_args, ResultGood> {

			public getGoodList() {
				super("getGoodList");
			}

			public getGoodList_args getEmptyArgsInstance() {
				return new getGoodList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultGood> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultGood>() {
					public void onComplete(ResultGood o) {
						getGoodList_result result = new getGoodList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getGoodList_result result = new getGoodList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getGoodList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultGood> resultHandler)
					throws org.apache.thrift.TException {
				iface.getGoodList(args.query, resultHandler);
			}

		}

		public static class getGoodBrand<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getGoodBrand_args, GoodBrand> {

			public getGoodBrand() {
				super("getGoodBrand");
			}

			public getGoodBrand_args getEmptyArgsInstance() {
				return new getGoodBrand_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<GoodBrand> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<GoodBrand>() {
					public void onComplete(GoodBrand o) {
						getGoodBrand_result result = new getGoodBrand_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getGoodBrand_result result = new getGoodBrand_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getGoodBrand_args args,
					org.apache.thrift.async.AsyncMethodCallback<GoodBrand> resultHandler)
					throws org.apache.thrift.TException {
				iface.getGoodBrand(args.form, resultHandler);
			}

		}

		public static class getGoodBrandList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getGoodBrandList_args, ResultGoodBrand> {

			public getGoodBrandList() {
				super("getGoodBrandList");
			}

			public getGoodBrandList_args getEmptyArgsInstance() {
				return new getGoodBrandList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultGoodBrand> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultGoodBrand>() {
					public void onComplete(ResultGoodBrand o) {
						getGoodBrandList_result result = new getGoodBrandList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getGoodBrandList_result result = new getGoodBrandList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getGoodBrandList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultGoodBrand> resultHandler)
					throws org.apache.thrift.TException {
				iface.getGoodBrandList(args.query, resultHandler);
			}

		}

		public static class getOrderIndex<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrderIndex_args, OrderIndex> {

			public getOrderIndex() {
				super("getOrderIndex");
			}

			public getOrderIndex_args getEmptyArgsInstance() {
				return new getOrderIndex_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<OrderIndex> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<OrderIndex>() {
					public void onComplete(OrderIndex o) {
						getOrderIndex_result result = new getOrderIndex_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrderIndex_result result = new getOrderIndex_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrderIndex_args args,
					org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrderIndex(args.form, resultHandler);
			}

		}

		public static class getOrderIndexList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrderIndexList_args, ResultOrderIndex> {

			public getOrderIndexList() {
				super("getOrderIndexList");
			}

			public getOrderIndexList_args getEmptyArgsInstance() {
				return new getOrderIndexList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultOrderIndex> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultOrderIndex>() {
					public void onComplete(ResultOrderIndex o) {
						getOrderIndexList_result result = new getOrderIndexList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrderIndexList_result result = new getOrderIndexList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrderIndexList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrderIndex> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrderIndexList(args.query, resultHandler);
			}

		}

		public static class getOrder<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrder_args, Order> {

			public getOrder() {
				super("getOrder");
			}

			public getOrder_args getEmptyArgsInstance() {
				return new getOrder_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Order> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Order>() {
					public void onComplete(Order o) {
						getOrder_result result = new getOrder_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrder_result result = new getOrder_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrder_args args,
					org.apache.thrift.async.AsyncMethodCallback<Order> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrder(args.form, resultHandler);
			}

		}

		public static class getOrderList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrderList_args, ResultOrder> {

			public getOrderList() {
				super("getOrderList");
			}

			public getOrderList_args getEmptyArgsInstance() {
				return new getOrderList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultOrder> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultOrder>() {
					public void onComplete(ResultOrder o) {
						getOrderList_result result = new getOrderList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrderList_result result = new getOrderList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrderList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrder> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrderList(args.query, resultHandler);
			}

		}

		public static class getOrderPay<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrderPay_args, OrderPay> {

			public getOrderPay() {
				super("getOrderPay");
			}

			public getOrderPay_args getEmptyArgsInstance() {
				return new getOrderPay_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<OrderPay> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<OrderPay>() {
					public void onComplete(OrderPay o) {
						getOrderPay_result result = new getOrderPay_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrderPay_result result = new getOrderPay_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrderPay_args args,
					org.apache.thrift.async.AsyncMethodCallback<OrderPay> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrderPay(args.form, resultHandler);
			}

		}

		public static class getOrderPayList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrderPayList_args, ResultOrderPay> {

			public getOrderPayList() {
				super("getOrderPayList");
			}

			public getOrderPayList_args getEmptyArgsInstance() {
				return new getOrderPayList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultOrderPay> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultOrderPay>() {
					public void onComplete(ResultOrderPay o) {
						getOrderPayList_result result = new getOrderPayList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrderPayList_result result = new getOrderPayList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrderPayList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrderPay> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrderPayList(args.query, resultHandler);
			}

		}

		public static class getCouponStore<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getCouponStore_args, CouponStore> {

			public getCouponStore() {
				super("getCouponStore");
			}

			public getCouponStore_args getEmptyArgsInstance() {
				return new getCouponStore_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<CouponStore> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<CouponStore>() {
					public void onComplete(CouponStore o) {
						getCouponStore_result result = new getCouponStore_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getCouponStore_result result = new getCouponStore_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getCouponStore_args args,
					org.apache.thrift.async.AsyncMethodCallback<CouponStore> resultHandler)
					throws org.apache.thrift.TException {
				iface.getCouponStore(args.form, resultHandler);
			}

		}

		public static class getCouponStoreList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getCouponStoreList_args, ResultCouponStore> {

			public getCouponStoreList() {
				super("getCouponStoreList");
			}

			public getCouponStoreList_args getEmptyArgsInstance() {
				return new getCouponStoreList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultCouponStore> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultCouponStore>() {
					public void onComplete(ResultCouponStore o) {
						getCouponStoreList_result result = new getCouponStoreList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getCouponStoreList_result result = new getCouponStoreList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getCouponStoreList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultCouponStore> resultHandler)
					throws org.apache.thrift.TException {
				iface.getCouponStoreList(args.query, resultHandler);
			}

		}

		public static class getCouponUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getCouponUser_args, CouponUser> {

			public getCouponUser() {
				super("getCouponUser");
			}

			public getCouponUser_args getEmptyArgsInstance() {
				return new getCouponUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<CouponUser> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<CouponUser>() {
					public void onComplete(CouponUser o) {
						getCouponUser_result result = new getCouponUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getCouponUser_result result = new getCouponUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getCouponUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<CouponUser> resultHandler)
					throws org.apache.thrift.TException {
				iface.getCouponUser(args.form, resultHandler);
			}

		}

		public static class getCouponUserList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getCouponUserList_args, ResultCouponUser> {

			public getCouponUserList() {
				super("getCouponUserList");
			}

			public getCouponUserList_args getEmptyArgsInstance() {
				return new getCouponUserList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultCouponUser> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultCouponUser>() {
					public void onComplete(ResultCouponUser o) {
						getCouponUserList_result result = new getCouponUserList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getCouponUserList_result result = new getCouponUserList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getCouponUserList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultCouponUser> resultHandler)
					throws org.apache.thrift.TException {
				iface.getCouponUserList(args.query, resultHandler);
			}

		}

		public static class tryOrderUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, tryOrderUser_args, OrderIndex> {

			public tryOrderUser() {
				super("tryOrderUser");
			}

			public tryOrderUser_args getEmptyArgsInstance() {
				return new tryOrderUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<OrderIndex> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<OrderIndex>() {
					public void onComplete(OrderIndex o) {
						tryOrderUser_result result = new tryOrderUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						tryOrderUser_result result = new tryOrderUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, tryOrderUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler)
					throws org.apache.thrift.TException {
				iface.tryOrderUser(args.form, resultHandler);
			}

		}

		public static class createOrderUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, createOrderUser_args, OrderIndex> {

			public createOrderUser() {
				super("createOrderUser");
			}

			public createOrderUser_args getEmptyArgsInstance() {
				return new createOrderUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<OrderIndex> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<OrderIndex>() {
					public void onComplete(OrderIndex o) {
						createOrderUser_result result = new createOrderUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						createOrderUser_result result = new createOrderUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, createOrderUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<OrderIndex> resultHandler)
					throws org.apache.thrift.TException {
				iface.createOrderUser(args.form, resultHandler);
			}

		}

		public static class setOrder<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setOrder_args, Order> {

			public setOrder() {
				super("setOrder");
			}

			public setOrder_args getEmptyArgsInstance() {
				return new setOrder_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Order> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Order>() {
					public void onComplete(Order o) {
						setOrder_result result = new setOrder_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setOrder_result result = new setOrder_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setOrder_args args,
					org.apache.thrift.async.AsyncMethodCallback<Order> resultHandler)
					throws org.apache.thrift.TException {
				iface.setOrder(args.form, resultHandler);
			}

		}

	}

	public static class getUser_args implements org.apache.thrift.TBase<getUser_args, getUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUser_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_args.class, metaDataMap);
		}

		public getUser_args() {
		}

		public getUser_args(java.lang.String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUser_args(getUser_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public getUser_args deepCopy() {
			return new getUser_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getUser_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUser_args)
				return this.equals((getUser_args) that);
			return false;
		}

		public boolean equals(getUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUser_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_argsStandardScheme getScheme() {
				return new getUser_argsStandardScheme();
			}

		}

		private static class getUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_argsTupleScheme getScheme() {
				return new getUser_argsTupleScheme();
			}

		}

		private static class getUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUser_result implements org.apache.thrift.TBase<getUser_result, getUser_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_result.class, metaDataMap);
		}

		public getUser_result() {
		}

		public getUser_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUser_result(getUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUser_result deepCopy() {
			return new getUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public getUser_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUser_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUser_result)
				return this.equals((getUser_result) that);
			return false;
		}

		public boolean equals(getUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_resultStandardScheme getScheme() {
				return new getUser_resultStandardScheme();
			}

		}

		private static class getUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_resultTupleScheme getScheme() {
				return new getUser_resultTupleScheme();
			}

		}

		private static class getUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserList_args implements org.apache.thrift.TBase<getUserList_args, getUserList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_args.class, metaDataMap);
		}

		public getUserList_args() {
		}

		public getUserList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserList_args(getUserList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserList_args deepCopy() {
			return new getUserList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserList_args)
				return this.equals((getUserList_args) that);
			return false;
		}

		public boolean equals(getUserList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_argsStandardScheme getScheme() {
				return new getUserList_argsStandardScheme();
			}

		}

		private static class getUserList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_argsTupleScheme getScheme() {
				return new getUserList_argsTupleScheme();
			}

		}

		private static class getUserList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserList_result
			implements org.apache.thrift.TBase<getUserList_result, getUserList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUser success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUser")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_result.class, metaDataMap);
		}

		public getUserList_result() {
		}

		public getUserList_result(ResultUser success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserList_result(getUserList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUser(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserList_result deepCopy() {
			return new getUserList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUser getSuccess() {
			return this.success;
		}

		public getUserList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUser success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserList_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUser) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserList_result)
				return this.equals((getUserList_result) that);
			return false;
		}

		public boolean equals(getUserList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_resultStandardScheme getScheme() {
				return new getUserList_resultStandardScheme();
			}

		}

		private static class getUserList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUser();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_resultTupleScheme getScheme() {
				return new getUserList_resultTupleScheme();
			}

		}

		private static class getUserList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUser();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserStore_args
			implements org.apache.thrift.TBase<getUserStore_args, getUserStore_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserStore_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserStore_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserStore_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserStore_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefUserStore form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefUserStore")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserStore_args.class, metaDataMap);
		}

		public getUserStore_args() {
		}

		public getUserStore_args(ArgRefUserStore form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserStore_args(getUserStore_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefUserStore(other.form);
			}
		}

		public getUserStore_args deepCopy() {
			return new getUserStore_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefUserStore getForm() {
			return this.form;
		}

		public getUserStore_args setForm(@org.apache.thrift.annotation.Nullable ArgRefUserStore form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefUserStore) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserStore_args)
				return this.equals((getUserStore_args) that);
			return false;
		}

		public boolean equals(getUserStore_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserStore_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserStore_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserStore_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserStore_argsStandardScheme getScheme() {
				return new getUserStore_argsStandardScheme();
			}

		}

		private static class getUserStore_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserStore_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserStore_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefUserStore();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserStore_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserStore_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserStore_argsTupleScheme getScheme() {
				return new getUserStore_argsTupleScheme();
			}

		}

		private static class getUserStore_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserStore_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserStore_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserStore_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefUserStore();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserStore_result
			implements org.apache.thrift.TBase<getUserStore_result, getUserStore_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserStore_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserStore_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserStore_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserStore_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserStore success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserStore.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserStore_result.class, metaDataMap);
		}

		public getUserStore_result() {
		}

		public getUserStore_result(UserStore success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserStore_result(getUserStore_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserStore(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserStore_result deepCopy() {
			return new getUserStore_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserStore getSuccess() {
			return this.success;
		}

		public getUserStore_result setSuccess(@org.apache.thrift.annotation.Nullable UserStore success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserStore_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserStore) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserStore_result)
				return this.equals((getUserStore_result) that);
			return false;
		}

		public boolean equals(getUserStore_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserStore_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserStore_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserStore_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserStore_resultStandardScheme getScheme() {
				return new getUserStore_resultStandardScheme();
			}

		}

		private static class getUserStore_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserStore_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserStore_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserStore();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserStore_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserStore_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserStore_resultTupleScheme getScheme() {
				return new getUserStore_resultTupleScheme();
			}

		}

		private static class getUserStore_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserStore_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserStore_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserStore_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserStore();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserStoreList_args
			implements org.apache.thrift.TBase<getUserStoreList_args, getUserStoreList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserStoreList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserStoreList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserStoreList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserStoreList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserStoreList_args.class, metaDataMap);
		}

		public getUserStoreList_args() {
		}

		public getUserStoreList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserStoreList_args(getUserStoreList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserStoreList_args deepCopy() {
			return new getUserStoreList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserStoreList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserStoreList_args)
				return this.equals((getUserStoreList_args) that);
			return false;
		}

		public boolean equals(getUserStoreList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserStoreList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserStoreList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserStoreList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserStoreList_argsStandardScheme getScheme() {
				return new getUserStoreList_argsStandardScheme();
			}

		}

		private static class getUserStoreList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserStoreList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserStoreList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserStoreList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserStoreList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserStoreList_argsTupleScheme getScheme() {
				return new getUserStoreList_argsTupleScheme();
			}

		}

		private static class getUserStoreList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserStoreList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserStoreList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserStoreList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserStoreList_result
			implements org.apache.thrift.TBase<getUserStoreList_result, getUserStoreList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserStoreList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserStoreList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserStoreList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserStoreList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUserStore success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUserStore")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserStoreList_result.class, metaDataMap);
		}

		public getUserStoreList_result() {
		}

		public getUserStoreList_result(ResultUserStore success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserStoreList_result(getUserStoreList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUserStore(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserStoreList_result deepCopy() {
			return new getUserStoreList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUserStore getSuccess() {
			return this.success;
		}

		public getUserStoreList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUserStore success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserStoreList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUserStore) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserStoreList_result)
				return this.equals((getUserStoreList_result) that);
			return false;
		}

		public boolean equals(getUserStoreList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserStoreList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserStoreList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserStoreList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserStoreList_resultStandardScheme getScheme() {
				return new getUserStoreList_resultStandardScheme();
			}

		}

		private static class getUserStoreList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserStoreList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserStoreList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUserStore();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserStoreList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserStoreList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserStoreList_resultTupleScheme getScheme() {
				return new getUserStoreList_resultTupleScheme();
			}

		}

		private static class getUserStoreList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserStoreList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserStoreList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserStoreList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUserStore();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getStore_args implements org.apache.thrift.TBase<getStore_args, getStore_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getStore_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStore_args");

		private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"sid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStore_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStore_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SID((short) 1, "sid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // SID
					return SID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SID, new org.apache.thrift.meta_data.FieldMetaData("sid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStore_args.class, metaDataMap);
		}

		public getStore_args() {
		}

		public getStore_args(java.lang.String sid) {
			this();
			this.sid = sid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStore_args(getStore_args other) {
			if (other.isSetSid()) {
				this.sid = other.sid;
			}
		}

		public getStore_args deepCopy() {
			return new getStore_args(this);
		}

		@Override
		public void clear() {
			this.sid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getSid() {
			return this.sid;
		}

		public getStore_args setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
			this.sid = sid;
			return this;
		}

		public void unsetSid() {
			this.sid = null;
		}

		/**
		 * Returns true if field sid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSid() {
			return this.sid != null;
		}

		public void setSidIsSet(boolean value) {
			if (!value) {
				this.sid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SID:
				if (value == null) {
					unsetSid();
				}
				else {
					setSid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SID:
				return getSid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SID:
				return isSetSid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getStore_args)
				return this.equals((getStore_args) that);
			return false;
		}

		public boolean equals(getStore_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_sid = true && this.isSetSid();
			boolean that_present_sid = true && that.isSetSid();
			if (this_present_sid || that_present_sid) {
				if (!(this_present_sid && that_present_sid))
					return false;
				if (!this.sid.equals(that.sid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
			if (isSetSid())
				hashCode = hashCode * 8191 + sid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getStore_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getStore_args(");
			boolean first = true;

			sb.append("sid:");
			if (this.sid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.sid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getStore_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getStore_argsStandardScheme getScheme() {
				return new getStore_argsStandardScheme();
			}

		}

		private static class getStore_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getStore_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getStore_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // SID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.sid = iprot.readString();
							struct.setSidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getStore_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.sid != null) {
					oprot.writeFieldBegin(SID_FIELD_DESC);
					oprot.writeString(struct.sid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStore_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getStore_argsTupleScheme getScheme() {
				return new getStore_argsTupleScheme();
			}

		}

		private static class getStore_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStore_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getStore_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSid()) {
					oprot.writeString(struct.sid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getStore_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.sid = iprot.readString();
					struct.setSidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getStore_result implements org.apache.thrift.TBase<getStore_result, getStore_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getStore_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStore_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStore_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStore_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Store success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Store.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStore_result.class, metaDataMap);
		}

		public getStore_result() {
		}

		public getStore_result(Store success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStore_result(getStore_result other) {
			if (other.isSetSuccess()) {
				this.success = new Store(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getStore_result deepCopy() {
			return new getStore_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Store getSuccess() {
			return this.success;
		}

		public getStore_result setSuccess(@org.apache.thrift.annotation.Nullable Store success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getStore_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Store) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getStore_result)
				return this.equals((getStore_result) that);
			return false;
		}

		public boolean equals(getStore_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getStore_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getStore_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getStore_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getStore_resultStandardScheme getScheme() {
				return new getStore_resultStandardScheme();
			}

		}

		private static class getStore_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getStore_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getStore_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Store();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getStore_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStore_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getStore_resultTupleScheme getScheme() {
				return new getStore_resultTupleScheme();
			}

		}

		private static class getStore_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getStore_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getStore_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getStore_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Store();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getStoreList_args
			implements org.apache.thrift.TBase<getStoreList_args, getStoreList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getStoreList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStoreList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStoreList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStoreList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStoreList_args.class, metaDataMap);
		}

		public getStoreList_args() {
		}

		public getStoreList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStoreList_args(getStoreList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getStoreList_args deepCopy() {
			return new getStoreList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getStoreList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getStoreList_args)
				return this.equals((getStoreList_args) that);
			return false;
		}

		public boolean equals(getStoreList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getStoreList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getStoreList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getStoreList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getStoreList_argsStandardScheme getScheme() {
				return new getStoreList_argsStandardScheme();
			}

		}

		private static class getStoreList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getStoreList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getStoreList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getStoreList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStoreList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getStoreList_argsTupleScheme getScheme() {
				return new getStoreList_argsTupleScheme();
			}

		}

		private static class getStoreList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getStoreList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getStoreList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getStoreList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getStoreList_result
			implements org.apache.thrift.TBase<getStoreList_result, getStoreList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getStoreList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getStoreList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getStoreList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getStoreList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultStore success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultStore")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStoreList_result.class, metaDataMap);
		}

		public getStoreList_result() {
		}

		public getStoreList_result(ResultStore success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getStoreList_result(getStoreList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultStore(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getStoreList_result deepCopy() {
			return new getStoreList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultStore getSuccess() {
			return this.success;
		}

		public getStoreList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultStore success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getStoreList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultStore) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getStoreList_result)
				return this.equals((getStoreList_result) that);
			return false;
		}

		public boolean equals(getStoreList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getStoreList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getStoreList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getStoreList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getStoreList_resultStandardScheme getScheme() {
				return new getStoreList_resultStandardScheme();
			}

		}

		private static class getStoreList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getStoreList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getStoreList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultStore();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getStoreList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getStoreList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getStoreList_resultTupleScheme getScheme() {
				return new getStoreList_resultTupleScheme();
			}

		}

		private static class getStoreList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getStoreList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getStoreList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getStoreList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultStore();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCategory_args implements org.apache.thrift.TBase<getCategory_args, getCategory_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCategory_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCategory_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCategory_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCategory_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefCategory form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefCategory")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategory_args.class, metaDataMap);
		}

		public getCategory_args() {
		}

		public getCategory_args(ArgRefCategory form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCategory_args(getCategory_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefCategory(other.form);
			}
		}

		public getCategory_args deepCopy() {
			return new getCategory_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefCategory getForm() {
			return this.form;
		}

		public getCategory_args setForm(@org.apache.thrift.annotation.Nullable ArgRefCategory form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefCategory) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCategory_args)
				return this.equals((getCategory_args) that);
			return false;
		}

		public boolean equals(getCategory_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCategory_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCategory_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCategory_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCategory_argsStandardScheme getScheme() {
				return new getCategory_argsStandardScheme();
			}

		}

		private static class getCategory_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCategory_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCategory_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefCategory();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCategory_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCategory_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCategory_argsTupleScheme getScheme() {
				return new getCategory_argsTupleScheme();
			}

		}

		private static class getCategory_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCategory_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCategory_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCategory_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefCategory();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCategory_result
			implements org.apache.thrift.TBase<getCategory_result, getCategory_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getCategory_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCategory_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCategory_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCategory_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Category success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Category.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategory_result.class, metaDataMap);
		}

		public getCategory_result() {
		}

		public getCategory_result(Category success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCategory_result(getCategory_result other) {
			if (other.isSetSuccess()) {
				this.success = new Category(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getCategory_result deepCopy() {
			return new getCategory_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Category getSuccess() {
			return this.success;
		}

		public getCategory_result setSuccess(@org.apache.thrift.annotation.Nullable Category success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getCategory_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Category) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCategory_result)
				return this.equals((getCategory_result) that);
			return false;
		}

		public boolean equals(getCategory_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCategory_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCategory_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCategory_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCategory_resultStandardScheme getScheme() {
				return new getCategory_resultStandardScheme();
			}

		}

		private static class getCategory_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCategory_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCategory_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Category();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCategory_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCategory_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCategory_resultTupleScheme getScheme() {
				return new getCategory_resultTupleScheme();
			}

		}

		private static class getCategory_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCategory_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCategory_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCategory_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Category();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCategoryList_args
			implements org.apache.thrift.TBase<getCategoryList_args, getCategoryList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCategoryList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCategoryList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCategoryList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCategoryList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategoryList_args.class, metaDataMap);
		}

		public getCategoryList_args() {
		}

		public getCategoryList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCategoryList_args(getCategoryList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getCategoryList_args deepCopy() {
			return new getCategoryList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getCategoryList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCategoryList_args)
				return this.equals((getCategoryList_args) that);
			return false;
		}

		public boolean equals(getCategoryList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCategoryList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCategoryList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCategoryList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCategoryList_argsStandardScheme getScheme() {
				return new getCategoryList_argsStandardScheme();
			}

		}

		private static class getCategoryList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCategoryList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCategoryList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCategoryList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCategoryList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCategoryList_argsTupleScheme getScheme() {
				return new getCategoryList_argsTupleScheme();
			}

		}

		private static class getCategoryList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCategoryList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCategoryList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCategoryList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCategoryList_result
			implements org.apache.thrift.TBase<getCategoryList_result, getCategoryList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCategoryList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCategoryList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCategoryList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCategoryList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultCategory success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultCategory")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCategoryList_result.class, metaDataMap);
		}

		public getCategoryList_result() {
		}

		public getCategoryList_result(ResultCategory success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCategoryList_result(getCategoryList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultCategory(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getCategoryList_result deepCopy() {
			return new getCategoryList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultCategory getSuccess() {
			return this.success;
		}

		public getCategoryList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultCategory success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getCategoryList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultCategory) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCategoryList_result)
				return this.equals((getCategoryList_result) that);
			return false;
		}

		public boolean equals(getCategoryList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCategoryList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCategoryList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCategoryList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCategoryList_resultStandardScheme getScheme() {
				return new getCategoryList_resultStandardScheme();
			}

		}

		private static class getCategoryList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCategoryList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCategoryList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultCategory();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCategoryList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCategoryList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCategoryList_resultTupleScheme getScheme() {
				return new getCategoryList_resultTupleScheme();
			}

		}

		private static class getCategoryList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCategoryList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCategoryList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCategoryList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultCategory();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getLabel_args implements org.apache.thrift.TBase<getLabel_args, getLabel_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getLabel_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getLabel_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLabel_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLabel_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefLabel form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefLabel")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLabel_args.class, metaDataMap);
		}

		public getLabel_args() {
		}

		public getLabel_args(ArgRefLabel form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getLabel_args(getLabel_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefLabel(other.form);
			}
		}

		public getLabel_args deepCopy() {
			return new getLabel_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefLabel getForm() {
			return this.form;
		}

		public getLabel_args setForm(@org.apache.thrift.annotation.Nullable ArgRefLabel form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefLabel) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getLabel_args)
				return this.equals((getLabel_args) that);
			return false;
		}

		public boolean equals(getLabel_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getLabel_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getLabel_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getLabel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getLabel_argsStandardScheme getScheme() {
				return new getLabel_argsStandardScheme();
			}

		}

		private static class getLabel_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getLabel_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getLabel_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefLabel();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getLabel_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getLabel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getLabel_argsTupleScheme getScheme() {
				return new getLabel_argsTupleScheme();
			}

		}

		private static class getLabel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLabel_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getLabel_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getLabel_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefLabel();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getLabel_result implements org.apache.thrift.TBase<getLabel_result, getLabel_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getLabel_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getLabel_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLabel_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLabel_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Label success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Label.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLabel_result.class, metaDataMap);
		}

		public getLabel_result() {
		}

		public getLabel_result(Label success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getLabel_result(getLabel_result other) {
			if (other.isSetSuccess()) {
				this.success = new Label(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getLabel_result deepCopy() {
			return new getLabel_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Label getSuccess() {
			return this.success;
		}

		public getLabel_result setSuccess(@org.apache.thrift.annotation.Nullable Label success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getLabel_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Label) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getLabel_result)
				return this.equals((getLabel_result) that);
			return false;
		}

		public boolean equals(getLabel_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getLabel_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getLabel_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getLabel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getLabel_resultStandardScheme getScheme() {
				return new getLabel_resultStandardScheme();
			}

		}

		private static class getLabel_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getLabel_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getLabel_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Label();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getLabel_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getLabel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getLabel_resultTupleScheme getScheme() {
				return new getLabel_resultTupleScheme();
			}

		}

		private static class getLabel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getLabel_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getLabel_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getLabel_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Label();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getLabelList_args
			implements org.apache.thrift.TBase<getLabelList_args, getLabelList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getLabelList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getLabelList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLabelList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLabelList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLabelList_args.class, metaDataMap);
		}

		public getLabelList_args() {
		}

		public getLabelList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getLabelList_args(getLabelList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getLabelList_args deepCopy() {
			return new getLabelList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getLabelList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getLabelList_args)
				return this.equals((getLabelList_args) that);
			return false;
		}

		public boolean equals(getLabelList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getLabelList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getLabelList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getLabelList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getLabelList_argsStandardScheme getScheme() {
				return new getLabelList_argsStandardScheme();
			}

		}

		private static class getLabelList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getLabelList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getLabelList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getLabelList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getLabelList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getLabelList_argsTupleScheme getScheme() {
				return new getLabelList_argsTupleScheme();
			}

		}

		private static class getLabelList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getLabelList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getLabelList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getLabelList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getLabelList_result
			implements org.apache.thrift.TBase<getLabelList_result, getLabelList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getLabelList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getLabelList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getLabelList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getLabelList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultLabel success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultLabel")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLabelList_result.class, metaDataMap);
		}

		public getLabelList_result() {
		}

		public getLabelList_result(ResultLabel success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getLabelList_result(getLabelList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultLabel(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getLabelList_result deepCopy() {
			return new getLabelList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultLabel getSuccess() {
			return this.success;
		}

		public getLabelList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultLabel success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getLabelList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultLabel) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getLabelList_result)
				return this.equals((getLabelList_result) that);
			return false;
		}

		public boolean equals(getLabelList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getLabelList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getLabelList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getLabelList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getLabelList_resultStandardScheme getScheme() {
				return new getLabelList_resultStandardScheme();
			}

		}

		private static class getLabelList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getLabelList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getLabelList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultLabel();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getLabelList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getLabelList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getLabelList_resultTupleScheme getScheme() {
				return new getLabelList_resultTupleScheme();
			}

		}

		private static class getLabelList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getLabelList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getLabelList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getLabelList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultLabel();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getBrand_args implements org.apache.thrift.TBase<getBrand_args, getBrand_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getBrand_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBrand_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBrand_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBrand_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefBrand form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefBrand")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBrand_args.class, metaDataMap);
		}

		public getBrand_args() {
		}

		public getBrand_args(ArgRefBrand form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBrand_args(getBrand_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefBrand(other.form);
			}
		}

		public getBrand_args deepCopy() {
			return new getBrand_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefBrand getForm() {
			return this.form;
		}

		public getBrand_args setForm(@org.apache.thrift.annotation.Nullable ArgRefBrand form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefBrand) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBrand_args)
				return this.equals((getBrand_args) that);
			return false;
		}

		public boolean equals(getBrand_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBrand_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBrand_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBrand_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getBrand_argsStandardScheme getScheme() {
				return new getBrand_argsStandardScheme();
			}

		}

		private static class getBrand_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBrand_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBrand_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefBrand();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBrand_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBrand_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getBrand_argsTupleScheme getScheme() {
				return new getBrand_argsTupleScheme();
			}

		}

		private static class getBrand_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBrand_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBrand_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBrand_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefBrand();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getBrand_result implements org.apache.thrift.TBase<getBrand_result, getBrand_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getBrand_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBrand_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBrand_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBrand_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Brand success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Brand.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBrand_result.class, metaDataMap);
		}

		public getBrand_result() {
		}

		public getBrand_result(Brand success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBrand_result(getBrand_result other) {
			if (other.isSetSuccess()) {
				this.success = new Brand(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getBrand_result deepCopy() {
			return new getBrand_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Brand getSuccess() {
			return this.success;
		}

		public getBrand_result setSuccess(@org.apache.thrift.annotation.Nullable Brand success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getBrand_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Brand) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBrand_result)
				return this.equals((getBrand_result) that);
			return false;
		}

		public boolean equals(getBrand_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBrand_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBrand_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBrand_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getBrand_resultStandardScheme getScheme() {
				return new getBrand_resultStandardScheme();
			}

		}

		private static class getBrand_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBrand_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBrand_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Brand();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBrand_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBrand_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getBrand_resultTupleScheme getScheme() {
				return new getBrand_resultTupleScheme();
			}

		}

		private static class getBrand_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBrand_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBrand_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBrand_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Brand();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getBrandList_args
			implements org.apache.thrift.TBase<getBrandList_args, getBrandList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getBrandList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBrandList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBrandList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBrandList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBrandList_args.class, metaDataMap);
		}

		public getBrandList_args() {
		}

		public getBrandList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBrandList_args(getBrandList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getBrandList_args deepCopy() {
			return new getBrandList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getBrandList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBrandList_args)
				return this.equals((getBrandList_args) that);
			return false;
		}

		public boolean equals(getBrandList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBrandList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBrandList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBrandList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getBrandList_argsStandardScheme getScheme() {
				return new getBrandList_argsStandardScheme();
			}

		}

		private static class getBrandList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBrandList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBrandList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBrandList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBrandList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getBrandList_argsTupleScheme getScheme() {
				return new getBrandList_argsTupleScheme();
			}

		}

		private static class getBrandList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBrandList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBrandList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBrandList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getBrandList_result
			implements org.apache.thrift.TBase<getBrandList_result, getBrandList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getBrandList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getBrandList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBrandList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBrandList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultBrand success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultBrand")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBrandList_result.class, metaDataMap);
		}

		public getBrandList_result() {
		}

		public getBrandList_result(ResultBrand success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getBrandList_result(getBrandList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultBrand(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getBrandList_result deepCopy() {
			return new getBrandList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultBrand getSuccess() {
			return this.success;
		}

		public getBrandList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultBrand success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getBrandList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultBrand) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getBrandList_result)
				return this.equals((getBrandList_result) that);
			return false;
		}

		public boolean equals(getBrandList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getBrandList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getBrandList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getBrandList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getBrandList_resultStandardScheme getScheme() {
				return new getBrandList_resultStandardScheme();
			}

		}

		private static class getBrandList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getBrandList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getBrandList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultBrand();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getBrandList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getBrandList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getBrandList_resultTupleScheme getScheme() {
				return new getBrandList_resultTupleScheme();
			}

		}

		private static class getBrandList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getBrandList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getBrandList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getBrandList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultBrand();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoods_args implements org.apache.thrift.TBase<getGoods_args, getGoods_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getGoods_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoods_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoods_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoods_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefGoods form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefGoods")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoods_args.class, metaDataMap);
		}

		public getGoods_args() {
		}

		public getGoods_args(ArgRefGoods form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoods_args(getGoods_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefGoods(other.form);
			}
		}

		public getGoods_args deepCopy() {
			return new getGoods_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefGoods getForm() {
			return this.form;
		}

		public getGoods_args setForm(@org.apache.thrift.annotation.Nullable ArgRefGoods form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefGoods) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoods_args)
				return this.equals((getGoods_args) that);
			return false;
		}

		public boolean equals(getGoods_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoods_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoods_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoods_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoods_argsStandardScheme getScheme() {
				return new getGoods_argsStandardScheme();
			}

		}

		private static class getGoods_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoods_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoods_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefGoods();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoods_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoods_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoods_argsTupleScheme getScheme() {
				return new getGoods_argsTupleScheme();
			}

		}

		private static class getGoods_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getGoods_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoods_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoods_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefGoods();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoods_result implements org.apache.thrift.TBase<getGoods_result, getGoods_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getGoods_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoods_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoods_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoods_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Goods success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Goods.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoods_result.class, metaDataMap);
		}

		public getGoods_result() {
		}

		public getGoods_result(Goods success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoods_result(getGoods_result other) {
			if (other.isSetSuccess()) {
				this.success = new Goods(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getGoods_result deepCopy() {
			return new getGoods_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Goods getSuccess() {
			return this.success;
		}

		public getGoods_result setSuccess(@org.apache.thrift.annotation.Nullable Goods success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getGoods_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Goods) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoods_result)
				return this.equals((getGoods_result) that);
			return false;
		}

		public boolean equals(getGoods_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoods_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoods_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoods_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoods_resultStandardScheme getScheme() {
				return new getGoods_resultStandardScheme();
			}

		}

		private static class getGoods_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoods_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoods_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Goods();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoods_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoods_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoods_resultTupleScheme getScheme() {
				return new getGoods_resultTupleScheme();
			}

		}

		private static class getGoods_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getGoods_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoods_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoods_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Goods();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoodsList_args
			implements org.apache.thrift.TBase<getGoodsList_args, getGoodsList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getGoodsList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoodsList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoodsList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoodsList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsList_args.class, metaDataMap);
		}

		public getGoodsList_args() {
		}

		public getGoodsList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoodsList_args(getGoodsList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getGoodsList_args deepCopy() {
			return new getGoodsList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getGoodsList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoodsList_args)
				return this.equals((getGoodsList_args) that);
			return false;
		}

		public boolean equals(getGoodsList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoodsList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoodsList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoodsList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodsList_argsStandardScheme getScheme() {
				return new getGoodsList_argsStandardScheme();
			}

		}

		private static class getGoodsList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoodsList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoodsList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodsList_argsTupleScheme getScheme() {
				return new getGoodsList_argsTupleScheme();
			}

		}

		private static class getGoodsList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getGoodsList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoodsList_result
			implements org.apache.thrift.TBase<getGoodsList_result, getGoodsList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getGoodsList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoodsList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoodsList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoodsList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultGoods success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultGoods")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsList_result.class, metaDataMap);
		}

		public getGoodsList_result() {
		}

		public getGoodsList_result(ResultGoods success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoodsList_result(getGoodsList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultGoods(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getGoodsList_result deepCopy() {
			return new getGoodsList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultGoods getSuccess() {
			return this.success;
		}

		public getGoodsList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultGoods success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getGoodsList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultGoods) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoodsList_result)
				return this.equals((getGoodsList_result) that);
			return false;
		}

		public boolean equals(getGoodsList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoodsList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoodsList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoodsList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodsList_resultStandardScheme getScheme() {
				return new getGoodsList_resultStandardScheme();
			}

		}

		private static class getGoodsList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoodsList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultGoods();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoodsList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodsList_resultTupleScheme getScheme() {
				return new getGoodsList_resultTupleScheme();
			}

		}

		private static class getGoodsList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getGoodsList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultGoods();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGood_args implements org.apache.thrift.TBase<getGood_args, getGood_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getGood_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGood_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGood_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGood_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefGood form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefGood")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGood_args.class, metaDataMap);
		}

		public getGood_args() {
		}

		public getGood_args(ArgRefGood form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGood_args(getGood_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefGood(other.form);
			}
		}

		public getGood_args deepCopy() {
			return new getGood_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefGood getForm() {
			return this.form;
		}

		public getGood_args setForm(@org.apache.thrift.annotation.Nullable ArgRefGood form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefGood) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGood_args)
				return this.equals((getGood_args) that);
			return false;
		}

		public boolean equals(getGood_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGood_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGood_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGood_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGood_argsStandardScheme getScheme() {
				return new getGood_argsStandardScheme();
			}

		}

		private static class getGood_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getGood_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGood_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefGood();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGood_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGood_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGood_argsTupleScheme getScheme() {
				return new getGood_argsTupleScheme();
			}

		}

		private static class getGood_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getGood_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGood_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGood_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefGood();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGood_result implements org.apache.thrift.TBase<getGood_result, getGood_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getGood_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGood_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGood_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGood_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Good success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Good.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGood_result.class, metaDataMap);
		}

		public getGood_result() {
		}

		public getGood_result(Good success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGood_result(getGood_result other) {
			if (other.isSetSuccess()) {
				this.success = new Good(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getGood_result deepCopy() {
			return new getGood_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Good getSuccess() {
			return this.success;
		}

		public getGood_result setSuccess(@org.apache.thrift.annotation.Nullable Good success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getGood_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Good) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGood_result)
				return this.equals((getGood_result) that);
			return false;
		}

		public boolean equals(getGood_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGood_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGood_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGood_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGood_resultStandardScheme getScheme() {
				return new getGood_resultStandardScheme();
			}

		}

		private static class getGood_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGood_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGood_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Good();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGood_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGood_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGood_resultTupleScheme getScheme() {
				return new getGood_resultTupleScheme();
			}

		}

		private static class getGood_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getGood_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGood_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGood_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Good();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoodList_args implements org.apache.thrift.TBase<getGoodList_args, getGoodList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getGoodList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoodList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoodList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoodList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodList_args.class, metaDataMap);
		}

		public getGoodList_args() {
		}

		public getGoodList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoodList_args(getGoodList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getGoodList_args deepCopy() {
			return new getGoodList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getGoodList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoodList_args)
				return this.equals((getGoodList_args) that);
			return false;
		}

		public boolean equals(getGoodList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoodList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoodList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoodList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodList_argsStandardScheme getScheme() {
				return new getGoodList_argsStandardScheme();
			}

		}

		private static class getGoodList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoodList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoodList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodList_argsTupleScheme getScheme() {
				return new getGoodList_argsTupleScheme();
			}

		}

		private static class getGoodList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getGoodList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoodList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoodList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoodList_result
			implements org.apache.thrift.TBase<getGoodList_result, getGoodList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getGoodList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoodList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoodList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoodList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultGood success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultGood")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodList_result.class, metaDataMap);
		}

		public getGoodList_result() {
		}

		public getGoodList_result(ResultGood success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoodList_result(getGoodList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultGood(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getGoodList_result deepCopy() {
			return new getGoodList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultGood getSuccess() {
			return this.success;
		}

		public getGoodList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultGood success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getGoodList_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultGood) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoodList_result)
				return this.equals((getGoodList_result) that);
			return false;
		}

		public boolean equals(getGoodList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoodList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoodList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoodList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodList_resultStandardScheme getScheme() {
				return new getGoodList_resultStandardScheme();
			}

		}

		private static class getGoodList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoodList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultGood();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoodList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodList_resultTupleScheme getScheme() {
				return new getGoodList_resultTupleScheme();
			}

		}

		private static class getGoodList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getGoodList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoodList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoodList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultGood();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoodBrand_args
			implements org.apache.thrift.TBase<getGoodBrand_args, getGoodBrand_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getGoodBrand_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoodBrand_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoodBrand_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoodBrand_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefGoodBrand form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefGoodBrand")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodBrand_args.class, metaDataMap);
		}

		public getGoodBrand_args() {
		}

		public getGoodBrand_args(ArgRefGoodBrand form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoodBrand_args(getGoodBrand_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefGoodBrand(other.form);
			}
		}

		public getGoodBrand_args deepCopy() {
			return new getGoodBrand_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefGoodBrand getForm() {
			return this.form;
		}

		public getGoodBrand_args setForm(@org.apache.thrift.annotation.Nullable ArgRefGoodBrand form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefGoodBrand) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoodBrand_args)
				return this.equals((getGoodBrand_args) that);
			return false;
		}

		public boolean equals(getGoodBrand_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoodBrand_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoodBrand_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoodBrand_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodBrand_argsStandardScheme getScheme() {
				return new getGoodBrand_argsStandardScheme();
			}

		}

		private static class getGoodBrand_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoodBrand_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodBrand_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefGoodBrand();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodBrand_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoodBrand_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodBrand_argsTupleScheme getScheme() {
				return new getGoodBrand_argsTupleScheme();
			}

		}

		private static class getGoodBrand_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getGoodBrand_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoodBrand_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoodBrand_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefGoodBrand();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoodBrand_result
			implements org.apache.thrift.TBase<getGoodBrand_result, getGoodBrand_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getGoodBrand_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoodBrand_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoodBrand_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoodBrand_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable GoodBrand success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									GoodBrand.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodBrand_result.class, metaDataMap);
		}

		public getGoodBrand_result() {
		}

		public getGoodBrand_result(GoodBrand success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoodBrand_result(getGoodBrand_result other) {
			if (other.isSetSuccess()) {
				this.success = new GoodBrand(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getGoodBrand_result deepCopy() {
			return new getGoodBrand_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public GoodBrand getSuccess() {
			return this.success;
		}

		public getGoodBrand_result setSuccess(@org.apache.thrift.annotation.Nullable GoodBrand success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getGoodBrand_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((GoodBrand) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoodBrand_result)
				return this.equals((getGoodBrand_result) that);
			return false;
		}

		public boolean equals(getGoodBrand_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoodBrand_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoodBrand_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoodBrand_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodBrand_resultStandardScheme getScheme() {
				return new getGoodBrand_resultStandardScheme();
			}

		}

		private static class getGoodBrand_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoodBrand_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodBrand_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new GoodBrand();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodBrand_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoodBrand_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodBrand_resultTupleScheme getScheme() {
				return new getGoodBrand_resultTupleScheme();
			}

		}

		private static class getGoodBrand_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getGoodBrand_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoodBrand_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoodBrand_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new GoodBrand();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoodBrandList_args
			implements org.apache.thrift.TBase<getGoodBrandList_args, getGoodBrandList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getGoodBrandList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoodBrandList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoodBrandList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoodBrandList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodBrandList_args.class, metaDataMap);
		}

		public getGoodBrandList_args() {
		}

		public getGoodBrandList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoodBrandList_args(getGoodBrandList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getGoodBrandList_args deepCopy() {
			return new getGoodBrandList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getGoodBrandList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoodBrandList_args)
				return this.equals((getGoodBrandList_args) that);
			return false;
		}

		public boolean equals(getGoodBrandList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoodBrandList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoodBrandList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoodBrandList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodBrandList_argsStandardScheme getScheme() {
				return new getGoodBrandList_argsStandardScheme();
			}

		}

		private static class getGoodBrandList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoodBrandList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodBrandList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodBrandList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoodBrandList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodBrandList_argsTupleScheme getScheme() {
				return new getGoodBrandList_argsTupleScheme();
			}

		}

		private static class getGoodBrandList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getGoodBrandList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoodBrandList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoodBrandList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getGoodBrandList_result
			implements org.apache.thrift.TBase<getGoodBrandList_result, getGoodBrandList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getGoodBrandList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getGoodBrandList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getGoodBrandList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getGoodBrandList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultGoodBrand success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultGoodBrand")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodBrandList_result.class, metaDataMap);
		}

		public getGoodBrandList_result() {
		}

		public getGoodBrandList_result(ResultGoodBrand success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getGoodBrandList_result(getGoodBrandList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultGoodBrand(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getGoodBrandList_result deepCopy() {
			return new getGoodBrandList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultGoodBrand getSuccess() {
			return this.success;
		}

		public getGoodBrandList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultGoodBrand success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getGoodBrandList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultGoodBrand) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getGoodBrandList_result)
				return this.equals((getGoodBrandList_result) that);
			return false;
		}

		public boolean equals(getGoodBrandList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getGoodBrandList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getGoodBrandList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getGoodBrandList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodBrandList_resultStandardScheme getScheme() {
				return new getGoodBrandList_resultStandardScheme();
			}

		}

		private static class getGoodBrandList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getGoodBrandList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodBrandList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultGoodBrand();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodBrandList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getGoodBrandList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getGoodBrandList_resultTupleScheme getScheme() {
				return new getGoodBrandList_resultTupleScheme();
			}

		}

		private static class getGoodBrandList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getGoodBrandList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getGoodBrandList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getGoodBrandList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultGoodBrand();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderIndex_args
			implements org.apache.thrift.TBase<getOrderIndex_args, getOrderIndex_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getOrderIndex_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderIndex_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderIndex_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderIndex_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefOrderIndex form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefOrderIndex")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderIndex_args.class, metaDataMap);
		}

		public getOrderIndex_args() {
		}

		public getOrderIndex_args(ArgRefOrderIndex form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderIndex_args(getOrderIndex_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefOrderIndex(other.form);
			}
		}

		public getOrderIndex_args deepCopy() {
			return new getOrderIndex_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefOrderIndex getForm() {
			return this.form;
		}

		public getOrderIndex_args setForm(@org.apache.thrift.annotation.Nullable ArgRefOrderIndex form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefOrderIndex) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderIndex_args)
				return this.equals((getOrderIndex_args) that);
			return false;
		}

		public boolean equals(getOrderIndex_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderIndex_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderIndex_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderIndex_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderIndex_argsStandardScheme getScheme() {
				return new getOrderIndex_argsStandardScheme();
			}

		}

		private static class getOrderIndex_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderIndex_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderIndex_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefOrderIndex();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderIndex_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderIndex_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderIndex_argsTupleScheme getScheme() {
				return new getOrderIndex_argsTupleScheme();
			}

		}

		private static class getOrderIndex_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderIndex_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderIndex_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderIndex_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefOrderIndex();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderIndex_result
			implements org.apache.thrift.TBase<getOrderIndex_result, getOrderIndex_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrderIndex_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderIndex_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderIndex_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderIndex_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable OrderIndex success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									OrderIndex.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderIndex_result.class, metaDataMap);
		}

		public getOrderIndex_result() {
		}

		public getOrderIndex_result(OrderIndex success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderIndex_result(getOrderIndex_result other) {
			if (other.isSetSuccess()) {
				this.success = new OrderIndex(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrderIndex_result deepCopy() {
			return new getOrderIndex_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public OrderIndex getSuccess() {
			return this.success;
		}

		public getOrderIndex_result setSuccess(@org.apache.thrift.annotation.Nullable OrderIndex success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrderIndex_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((OrderIndex) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderIndex_result)
				return this.equals((getOrderIndex_result) that);
			return false;
		}

		public boolean equals(getOrderIndex_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderIndex_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderIndex_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderIndex_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderIndex_resultStandardScheme getScheme() {
				return new getOrderIndex_resultStandardScheme();
			}

		}

		private static class getOrderIndex_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderIndex_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderIndex_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new OrderIndex();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderIndex_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderIndex_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderIndex_resultTupleScheme getScheme() {
				return new getOrderIndex_resultTupleScheme();
			}

		}

		private static class getOrderIndex_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderIndex_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderIndex_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderIndex_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new OrderIndex();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderIndexList_args
			implements org.apache.thrift.TBase<getOrderIndexList_args, getOrderIndexList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrderIndexList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderIndexList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderIndexList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderIndexList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderIndexList_args.class, metaDataMap);
		}

		public getOrderIndexList_args() {
		}

		public getOrderIndexList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderIndexList_args(getOrderIndexList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getOrderIndexList_args deepCopy() {
			return new getOrderIndexList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getOrderIndexList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderIndexList_args)
				return this.equals((getOrderIndexList_args) that);
			return false;
		}

		public boolean equals(getOrderIndexList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderIndexList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderIndexList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderIndexList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderIndexList_argsStandardScheme getScheme() {
				return new getOrderIndexList_argsStandardScheme();
			}

		}

		private static class getOrderIndexList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderIndexList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderIndexList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderIndexList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderIndexList_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderIndexList_argsTupleScheme getScheme() {
				return new getOrderIndexList_argsTupleScheme();
			}

		}

		private static class getOrderIndexList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderIndexList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderIndexList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderIndexList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderIndexList_result
			implements org.apache.thrift.TBase<getOrderIndexList_result, getOrderIndexList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrderIndexList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderIndexList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderIndexList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderIndexList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultOrderIndex success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultOrderIndex")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderIndexList_result.class, metaDataMap);
		}

		public getOrderIndexList_result() {
		}

		public getOrderIndexList_result(ResultOrderIndex success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderIndexList_result(getOrderIndexList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultOrderIndex(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrderIndexList_result deepCopy() {
			return new getOrderIndexList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultOrderIndex getSuccess() {
			return this.success;
		}

		public getOrderIndexList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultOrderIndex success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrderIndexList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultOrderIndex) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderIndexList_result)
				return this.equals((getOrderIndexList_result) that);
			return false;
		}

		public boolean equals(getOrderIndexList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderIndexList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderIndexList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderIndexList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderIndexList_resultStandardScheme getScheme() {
				return new getOrderIndexList_resultStandardScheme();
			}

		}

		private static class getOrderIndexList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderIndexList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderIndexList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultOrderIndex();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderIndexList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderIndexList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderIndexList_resultTupleScheme getScheme() {
				return new getOrderIndexList_resultTupleScheme();
			}

		}

		private static class getOrderIndexList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderIndexList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderIndexList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderIndexList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultOrderIndex();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrder_args implements org.apache.thrift.TBase<getOrder_args, getOrder_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrder_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrder_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrder_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrder_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefOrder form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefOrder")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrder_args.class, metaDataMap);
		}

		public getOrder_args() {
		}

		public getOrder_args(ArgRefOrder form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrder_args(getOrder_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefOrder(other.form);
			}
		}

		public getOrder_args deepCopy() {
			return new getOrder_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefOrder getForm() {
			return this.form;
		}

		public getOrder_args setForm(@org.apache.thrift.annotation.Nullable ArgRefOrder form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefOrder) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrder_args)
				return this.equals((getOrder_args) that);
			return false;
		}

		public boolean equals(getOrder_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrder_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrder_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrder_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrder_argsStandardScheme getScheme() {
				return new getOrder_argsStandardScheme();
			}

		}

		private static class getOrder_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrder_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefOrder();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrder_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrder_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrder_argsTupleScheme getScheme() {
				return new getOrder_argsTupleScheme();
			}

		}

		private static class getOrder_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getOrder_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefOrder();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrder_result implements org.apache.thrift.TBase<getOrder_result, getOrder_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrder_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrder_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrder_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrder_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Order success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Order.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrder_result.class, metaDataMap);
		}

		public getOrder_result() {
		}

		public getOrder_result(Order success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrder_result(getOrder_result other) {
			if (other.isSetSuccess()) {
				this.success = new Order(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrder_result deepCopy() {
			return new getOrder_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Order getSuccess() {
			return this.success;
		}

		public getOrder_result setSuccess(@org.apache.thrift.annotation.Nullable Order success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrder_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Order) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrder_result)
				return this.equals((getOrder_result) that);
			return false;
		}

		public boolean equals(getOrder_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrder_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrder_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrder_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrder_resultStandardScheme getScheme() {
				return new getOrder_resultStandardScheme();
			}

		}

		private static class getOrder_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrder_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Order();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrder_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrder_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrder_resultTupleScheme getScheme() {
				return new getOrder_resultTupleScheme();
			}

		}

		private static class getOrder_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getOrder_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Order();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderList_args
			implements org.apache.thrift.TBase<getOrderList_args, getOrderList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getOrderList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderList_args.class, metaDataMap);
		}

		public getOrderList_args() {
		}

		public getOrderList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderList_args(getOrderList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getOrderList_args deepCopy() {
			return new getOrderList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getOrderList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderList_args)
				return this.equals((getOrderList_args) that);
			return false;
		}

		public boolean equals(getOrderList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderList_argsStandardScheme getScheme() {
				return new getOrderList_argsStandardScheme();
			}

		}

		private static class getOrderList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderList_argsTupleScheme getScheme() {
				return new getOrderList_argsTupleScheme();
			}

		}

		private static class getOrderList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderList_result
			implements org.apache.thrift.TBase<getOrderList_result, getOrderList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getOrderList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultOrder success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultOrder")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderList_result.class, metaDataMap);
		}

		public getOrderList_result() {
		}

		public getOrderList_result(ResultOrder success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderList_result(getOrderList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultOrder(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrderList_result deepCopy() {
			return new getOrderList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultOrder getSuccess() {
			return this.success;
		}

		public getOrderList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultOrder success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrderList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultOrder) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderList_result)
				return this.equals((getOrderList_result) that);
			return false;
		}

		public boolean equals(getOrderList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderList_resultStandardScheme getScheme() {
				return new getOrderList_resultStandardScheme();
			}

		}

		private static class getOrderList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultOrder();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderList_resultTupleScheme getScheme() {
				return new getOrderList_resultTupleScheme();
			}

		}

		private static class getOrderList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultOrder();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderPay_args implements org.apache.thrift.TBase<getOrderPay_args, getOrderPay_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrderPay_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderPay_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderPay_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderPay_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefOrderPay form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefOrderPay")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderPay_args.class, metaDataMap);
		}

		public getOrderPay_args() {
		}

		public getOrderPay_args(ArgRefOrderPay form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderPay_args(getOrderPay_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefOrderPay(other.form);
			}
		}

		public getOrderPay_args deepCopy() {
			return new getOrderPay_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefOrderPay getForm() {
			return this.form;
		}

		public getOrderPay_args setForm(@org.apache.thrift.annotation.Nullable ArgRefOrderPay form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefOrderPay) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderPay_args)
				return this.equals((getOrderPay_args) that);
			return false;
		}

		public boolean equals(getOrderPay_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderPay_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderPay_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderPay_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderPay_argsStandardScheme getScheme() {
				return new getOrderPay_argsStandardScheme();
			}

		}

		private static class getOrderPay_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderPay_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderPay_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefOrderPay();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderPay_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderPay_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderPay_argsTupleScheme getScheme() {
				return new getOrderPay_argsTupleScheme();
			}

		}

		private static class getOrderPay_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderPay_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderPay_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderPay_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefOrderPay();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderPay_result
			implements org.apache.thrift.TBase<getOrderPay_result, getOrderPay_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getOrderPay_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderPay_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderPay_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderPay_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable OrderPay success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									OrderPay.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderPay_result.class, metaDataMap);
		}

		public getOrderPay_result() {
		}

		public getOrderPay_result(OrderPay success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderPay_result(getOrderPay_result other) {
			if (other.isSetSuccess()) {
				this.success = new OrderPay(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrderPay_result deepCopy() {
			return new getOrderPay_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public OrderPay getSuccess() {
			return this.success;
		}

		public getOrderPay_result setSuccess(@org.apache.thrift.annotation.Nullable OrderPay success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrderPay_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((OrderPay) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderPay_result)
				return this.equals((getOrderPay_result) that);
			return false;
		}

		public boolean equals(getOrderPay_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderPay_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderPay_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderPay_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderPay_resultStandardScheme getScheme() {
				return new getOrderPay_resultStandardScheme();
			}

		}

		private static class getOrderPay_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderPay_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderPay_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new OrderPay();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderPay_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderPay_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderPay_resultTupleScheme getScheme() {
				return new getOrderPay_resultTupleScheme();
			}

		}

		private static class getOrderPay_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderPay_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderPay_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderPay_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new OrderPay();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderPayList_args
			implements org.apache.thrift.TBase<getOrderPayList_args, getOrderPayList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrderPayList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderPayList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderPayList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderPayList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderPayList_args.class, metaDataMap);
		}

		public getOrderPayList_args() {
		}

		public getOrderPayList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderPayList_args(getOrderPayList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getOrderPayList_args deepCopy() {
			return new getOrderPayList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getOrderPayList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderPayList_args)
				return this.equals((getOrderPayList_args) that);
			return false;
		}

		public boolean equals(getOrderPayList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderPayList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderPayList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderPayList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderPayList_argsStandardScheme getScheme() {
				return new getOrderPayList_argsStandardScheme();
			}

		}

		private static class getOrderPayList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderPayList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderPayList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderPayList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderPayList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderPayList_argsTupleScheme getScheme() {
				return new getOrderPayList_argsTupleScheme();
			}

		}

		private static class getOrderPayList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderPayList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderPayList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderPayList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrderPayList_result
			implements org.apache.thrift.TBase<getOrderPayList_result, getOrderPayList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrderPayList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrderPayList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrderPayList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrderPayList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultOrderPay success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultOrderPay")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrderPayList_result.class, metaDataMap);
		}

		public getOrderPayList_result() {
		}

		public getOrderPayList_result(ResultOrderPay success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrderPayList_result(getOrderPayList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultOrderPay(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrderPayList_result deepCopy() {
			return new getOrderPayList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultOrderPay getSuccess() {
			return this.success;
		}

		public getOrderPayList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultOrderPay success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrderPayList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultOrderPay) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrderPayList_result)
				return this.equals((getOrderPayList_result) that);
			return false;
		}

		public boolean equals(getOrderPayList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrderPayList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrderPayList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrderPayList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderPayList_resultStandardScheme getScheme() {
				return new getOrderPayList_resultStandardScheme();
			}

		}

		private static class getOrderPayList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrderPayList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrderPayList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultOrderPay();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrderPayList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrderPayList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrderPayList_resultTupleScheme getScheme() {
				return new getOrderPayList_resultTupleScheme();
			}

		}

		private static class getOrderPayList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrderPayList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrderPayList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrderPayList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultOrderPay();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCouponStore_args
			implements org.apache.thrift.TBase<getCouponStore_args, getCouponStore_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getCouponStore_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCouponStore_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCouponStore_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCouponStore_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefCouponStore form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefCouponStore")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCouponStore_args.class, metaDataMap);
		}

		public getCouponStore_args() {
		}

		public getCouponStore_args(ArgRefCouponStore form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCouponStore_args(getCouponStore_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefCouponStore(other.form);
			}
		}

		public getCouponStore_args deepCopy() {
			return new getCouponStore_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefCouponStore getForm() {
			return this.form;
		}

		public getCouponStore_args setForm(@org.apache.thrift.annotation.Nullable ArgRefCouponStore form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefCouponStore) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCouponStore_args)
				return this.equals((getCouponStore_args) that);
			return false;
		}

		public boolean equals(getCouponStore_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCouponStore_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCouponStore_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCouponStore_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponStore_argsStandardScheme getScheme() {
				return new getCouponStore_argsStandardScheme();
			}

		}

		private static class getCouponStore_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCouponStore_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCouponStore_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefCouponStore();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCouponStore_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCouponStore_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponStore_argsTupleScheme getScheme() {
				return new getCouponStore_argsTupleScheme();
			}

		}

		private static class getCouponStore_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCouponStore_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCouponStore_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCouponStore_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefCouponStore();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCouponStore_result
			implements org.apache.thrift.TBase<getCouponStore_result, getCouponStore_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCouponStore_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCouponStore_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCouponStore_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCouponStore_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable CouponStore success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									CouponStore.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCouponStore_result.class, metaDataMap);
		}

		public getCouponStore_result() {
		}

		public getCouponStore_result(CouponStore success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCouponStore_result(getCouponStore_result other) {
			if (other.isSetSuccess()) {
				this.success = new CouponStore(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getCouponStore_result deepCopy() {
			return new getCouponStore_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public CouponStore getSuccess() {
			return this.success;
		}

		public getCouponStore_result setSuccess(@org.apache.thrift.annotation.Nullable CouponStore success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getCouponStore_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((CouponStore) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCouponStore_result)
				return this.equals((getCouponStore_result) that);
			return false;
		}

		public boolean equals(getCouponStore_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCouponStore_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCouponStore_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCouponStore_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponStore_resultStandardScheme getScheme() {
				return new getCouponStore_resultStandardScheme();
			}

		}

		private static class getCouponStore_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCouponStore_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCouponStore_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new CouponStore();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCouponStore_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCouponStore_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponStore_resultTupleScheme getScheme() {
				return new getCouponStore_resultTupleScheme();
			}

		}

		private static class getCouponStore_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCouponStore_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCouponStore_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCouponStore_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new CouponStore();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCouponStoreList_args
			implements org.apache.thrift.TBase<getCouponStoreList_args, getCouponStoreList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCouponStoreList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCouponStoreList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCouponStoreList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCouponStoreList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCouponStoreList_args.class, metaDataMap);
		}

		public getCouponStoreList_args() {
		}

		public getCouponStoreList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCouponStoreList_args(getCouponStoreList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getCouponStoreList_args deepCopy() {
			return new getCouponStoreList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getCouponStoreList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCouponStoreList_args)
				return this.equals((getCouponStoreList_args) that);
			return false;
		}

		public boolean equals(getCouponStoreList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCouponStoreList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCouponStoreList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCouponStoreList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponStoreList_argsStandardScheme getScheme() {
				return new getCouponStoreList_argsStandardScheme();
			}

		}

		private static class getCouponStoreList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCouponStoreList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCouponStoreList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCouponStoreList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCouponStoreList_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponStoreList_argsTupleScheme getScheme() {
				return new getCouponStoreList_argsTupleScheme();
			}

		}

		private static class getCouponStoreList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCouponStoreList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCouponStoreList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCouponStoreList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCouponStoreList_result
			implements org.apache.thrift.TBase<getCouponStoreList_result, getCouponStoreList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCouponStoreList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCouponStoreList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCouponStoreList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCouponStoreList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultCouponStore success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultCouponStore")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCouponStoreList_result.class,
					metaDataMap);
		}

		public getCouponStoreList_result() {
		}

		public getCouponStoreList_result(ResultCouponStore success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCouponStoreList_result(getCouponStoreList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultCouponStore(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getCouponStoreList_result deepCopy() {
			return new getCouponStoreList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultCouponStore getSuccess() {
			return this.success;
		}

		public getCouponStoreList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultCouponStore success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getCouponStoreList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultCouponStore) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCouponStoreList_result)
				return this.equals((getCouponStoreList_result) that);
			return false;
		}

		public boolean equals(getCouponStoreList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCouponStoreList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCouponStoreList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCouponStoreList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponStoreList_resultStandardScheme getScheme() {
				return new getCouponStoreList_resultStandardScheme();
			}

		}

		private static class getCouponStoreList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCouponStoreList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCouponStoreList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultCouponStore();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCouponStoreList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCouponStoreList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponStoreList_resultTupleScheme getScheme() {
				return new getCouponStoreList_resultTupleScheme();
			}

		}

		private static class getCouponStoreList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCouponStoreList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCouponStoreList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCouponStoreList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultCouponStore();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCouponUser_args
			implements org.apache.thrift.TBase<getCouponUser_args, getCouponUser_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getCouponUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCouponUser_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCouponUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCouponUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefCouponUser form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefCouponUser")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCouponUser_args.class, metaDataMap);
		}

		public getCouponUser_args() {
		}

		public getCouponUser_args(ArgRefCouponUser form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCouponUser_args(getCouponUser_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefCouponUser(other.form);
			}
		}

		public getCouponUser_args deepCopy() {
			return new getCouponUser_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefCouponUser getForm() {
			return this.form;
		}

		public getCouponUser_args setForm(@org.apache.thrift.annotation.Nullable ArgRefCouponUser form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefCouponUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCouponUser_args)
				return this.equals((getCouponUser_args) that);
			return false;
		}

		public boolean equals(getCouponUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCouponUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCouponUser_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCouponUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponUser_argsStandardScheme getScheme() {
				return new getCouponUser_argsStandardScheme();
			}

		}

		private static class getCouponUser_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCouponUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCouponUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefCouponUser();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCouponUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCouponUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponUser_argsTupleScheme getScheme() {
				return new getCouponUser_argsTupleScheme();
			}

		}

		private static class getCouponUser_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCouponUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCouponUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCouponUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefCouponUser();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCouponUser_result
			implements org.apache.thrift.TBase<getCouponUser_result, getCouponUser_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCouponUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCouponUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCouponUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCouponUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable CouponUser success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									CouponUser.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCouponUser_result.class, metaDataMap);
		}

		public getCouponUser_result() {
		}

		public getCouponUser_result(CouponUser success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCouponUser_result(getCouponUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new CouponUser(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getCouponUser_result deepCopy() {
			return new getCouponUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public CouponUser getSuccess() {
			return this.success;
		}

		public getCouponUser_result setSuccess(@org.apache.thrift.annotation.Nullable CouponUser success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getCouponUser_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((CouponUser) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCouponUser_result)
				return this.equals((getCouponUser_result) that);
			return false;
		}

		public boolean equals(getCouponUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCouponUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCouponUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCouponUser_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponUser_resultStandardScheme getScheme() {
				return new getCouponUser_resultStandardScheme();
			}

		}

		private static class getCouponUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCouponUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCouponUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new CouponUser();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCouponUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCouponUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponUser_resultTupleScheme getScheme() {
				return new getCouponUser_resultTupleScheme();
			}

		}

		private static class getCouponUser_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCouponUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCouponUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCouponUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new CouponUser();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCouponUserList_args
			implements org.apache.thrift.TBase<getCouponUserList_args, getCouponUserList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCouponUserList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCouponUserList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCouponUserList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCouponUserList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCouponUserList_args.class, metaDataMap);
		}

		public getCouponUserList_args() {
		}

		public getCouponUserList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCouponUserList_args(getCouponUserList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getCouponUserList_args deepCopy() {
			return new getCouponUserList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getCouponUserList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCouponUserList_args)
				return this.equals((getCouponUserList_args) that);
			return false;
		}

		public boolean equals(getCouponUserList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCouponUserList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCouponUserList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCouponUserList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponUserList_argsStandardScheme getScheme() {
				return new getCouponUserList_argsStandardScheme();
			}

		}

		private static class getCouponUserList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCouponUserList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCouponUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCouponUserList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCouponUserList_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponUserList_argsTupleScheme getScheme() {
				return new getCouponUserList_argsTupleScheme();
			}

		}

		private static class getCouponUserList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCouponUserList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCouponUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCouponUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getCouponUserList_result
			implements org.apache.thrift.TBase<getCouponUserList_result, getCouponUserList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getCouponUserList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getCouponUserList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCouponUserList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCouponUserList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultCouponUser success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultCouponUser")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCouponUserList_result.class, metaDataMap);
		}

		public getCouponUserList_result() {
		}

		public getCouponUserList_result(ResultCouponUser success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getCouponUserList_result(getCouponUserList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultCouponUser(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getCouponUserList_result deepCopy() {
			return new getCouponUserList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultCouponUser getSuccess() {
			return this.success;
		}

		public getCouponUserList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultCouponUser success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getCouponUserList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultCouponUser) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getCouponUserList_result)
				return this.equals((getCouponUserList_result) that);
			return false;
		}

		public boolean equals(getCouponUserList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getCouponUserList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getCouponUserList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getCouponUserList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponUserList_resultStandardScheme getScheme() {
				return new getCouponUserList_resultStandardScheme();
			}

		}

		private static class getCouponUserList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getCouponUserList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getCouponUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultCouponUser();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getCouponUserList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getCouponUserList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getCouponUserList_resultTupleScheme getScheme() {
				return new getCouponUserList_resultTupleScheme();
			}

		}

		private static class getCouponUserList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getCouponUserList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getCouponUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getCouponUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultCouponUser();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class tryOrderUser_args
			implements org.apache.thrift.TBase<tryOrderUser_args, tryOrderUser_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<tryOrderUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"tryOrderUser_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new tryOrderUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new tryOrderUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgOrderUser form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgOrderUser")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tryOrderUser_args.class, metaDataMap);
		}

		public tryOrderUser_args() {
		}

		public tryOrderUser_args(ArgOrderUser form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public tryOrderUser_args(tryOrderUser_args other) {
			if (other.isSetForm()) {
				this.form = new ArgOrderUser(other.form);
			}
		}

		public tryOrderUser_args deepCopy() {
			return new tryOrderUser_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgOrderUser getForm() {
			return this.form;
		}

		public tryOrderUser_args setForm(@org.apache.thrift.annotation.Nullable ArgOrderUser form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgOrderUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof tryOrderUser_args)
				return this.equals((tryOrderUser_args) that);
			return false;
		}

		public boolean equals(tryOrderUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(tryOrderUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("tryOrderUser_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class tryOrderUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public tryOrderUser_argsStandardScheme getScheme() {
				return new tryOrderUser_argsStandardScheme();
			}

		}

		private static class tryOrderUser_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<tryOrderUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, tryOrderUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgOrderUser();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, tryOrderUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class tryOrderUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public tryOrderUser_argsTupleScheme getScheme() {
				return new tryOrderUser_argsTupleScheme();
			}

		}

		private static class tryOrderUser_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<tryOrderUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, tryOrderUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, tryOrderUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgOrderUser();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class tryOrderUser_result
			implements org.apache.thrift.TBase<tryOrderUser_result, tryOrderUser_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<tryOrderUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"tryOrderUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new tryOrderUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new tryOrderUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable OrderIndex success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									OrderIndex.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(tryOrderUser_result.class, metaDataMap);
		}

		public tryOrderUser_result() {
		}

		public tryOrderUser_result(OrderIndex success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public tryOrderUser_result(tryOrderUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new OrderIndex(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public tryOrderUser_result deepCopy() {
			return new tryOrderUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public OrderIndex getSuccess() {
			return this.success;
		}

		public tryOrderUser_result setSuccess(@org.apache.thrift.annotation.Nullable OrderIndex success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public tryOrderUser_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((OrderIndex) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof tryOrderUser_result)
				return this.equals((tryOrderUser_result) that);
			return false;
		}

		public boolean equals(tryOrderUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(tryOrderUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("tryOrderUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class tryOrderUser_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public tryOrderUser_resultStandardScheme getScheme() {
				return new tryOrderUser_resultStandardScheme();
			}

		}

		private static class tryOrderUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<tryOrderUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, tryOrderUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new OrderIndex();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, tryOrderUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class tryOrderUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public tryOrderUser_resultTupleScheme getScheme() {
				return new tryOrderUser_resultTupleScheme();
			}

		}

		private static class tryOrderUser_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<tryOrderUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, tryOrderUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, tryOrderUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new OrderIndex();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createOrderUser_args
			implements org.apache.thrift.TBase<createOrderUser_args, createOrderUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<createOrderUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createOrderUser_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOrderUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOrderUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgOrderUser form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgOrderUser")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrderUser_args.class, metaDataMap);
		}

		public createOrderUser_args() {
		}

		public createOrderUser_args(ArgOrderUser form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createOrderUser_args(createOrderUser_args other) {
			if (other.isSetForm()) {
				this.form = new ArgOrderUser(other.form);
			}
		}

		public createOrderUser_args deepCopy() {
			return new createOrderUser_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgOrderUser getForm() {
			return this.form;
		}

		public createOrderUser_args setForm(@org.apache.thrift.annotation.Nullable ArgOrderUser form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgOrderUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createOrderUser_args)
				return this.equals((createOrderUser_args) that);
			return false;
		}

		public boolean equals(createOrderUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createOrderUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createOrderUser_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createOrderUser_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public createOrderUser_argsStandardScheme getScheme() {
				return new createOrderUser_argsStandardScheme();
			}

		}

		private static class createOrderUser_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createOrderUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createOrderUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgOrderUser();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createOrderUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createOrderUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createOrderUser_argsTupleScheme getScheme() {
				return new createOrderUser_argsTupleScheme();
			}

		}

		private static class createOrderUser_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<createOrderUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createOrderUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createOrderUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgOrderUser();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createOrderUser_result
			implements org.apache.thrift.TBase<createOrderUser_result, createOrderUser_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<createOrderUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createOrderUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOrderUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOrderUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable OrderIndex success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									OrderIndex.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrderUser_result.class, metaDataMap);
		}

		public createOrderUser_result() {
		}

		public createOrderUser_result(OrderIndex success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createOrderUser_result(createOrderUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new OrderIndex(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public createOrderUser_result deepCopy() {
			return new createOrderUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public OrderIndex getSuccess() {
			return this.success;
		}

		public createOrderUser_result setSuccess(@org.apache.thrift.annotation.Nullable OrderIndex success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public createOrderUser_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((OrderIndex) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createOrderUser_result)
				return this.equals((createOrderUser_result) that);
			return false;
		}

		public boolean equals(createOrderUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createOrderUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createOrderUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createOrderUser_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public createOrderUser_resultStandardScheme getScheme() {
				return new createOrderUser_resultStandardScheme();
			}

		}

		private static class createOrderUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createOrderUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createOrderUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new OrderIndex();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createOrderUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createOrderUser_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public createOrderUser_resultTupleScheme getScheme() {
				return new createOrderUser_resultTupleScheme();
			}

		}

		private static class createOrderUser_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<createOrderUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createOrderUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createOrderUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new OrderIndex();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setOrder_args implements org.apache.thrift.TBase<setOrder_args, setOrder_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setOrder_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setOrder_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setOrder_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setOrder_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUptOrder form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUptOrder")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrder_args.class, metaDataMap);
		}

		public setOrder_args() {
		}

		public setOrder_args(ArgUptOrder form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setOrder_args(setOrder_args other) {
			if (other.isSetForm()) {
				this.form = new ArgUptOrder(other.form);
			}
		}

		public setOrder_args deepCopy() {
			return new setOrder_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUptOrder getForm() {
			return this.form;
		}

		public setOrder_args setForm(@org.apache.thrift.annotation.Nullable ArgUptOrder form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgUptOrder) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setOrder_args)
				return this.equals((setOrder_args) that);
			return false;
		}

		public boolean equals(setOrder_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setOrder_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setOrder_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setOrder_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setOrder_argsStandardScheme getScheme() {
				return new setOrder_argsStandardScheme();
			}

		}

		private static class setOrder_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setOrder_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setOrder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgUptOrder();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setOrder_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setOrder_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setOrder_argsTupleScheme getScheme() {
				return new setOrder_argsTupleScheme();
			}

		}

		private static class setOrder_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setOrder_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setOrder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setOrder_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgUptOrder();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setOrder_result implements org.apache.thrift.TBase<setOrder_result, setOrder_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setOrder_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setOrder_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setOrder_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setOrder_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Order success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Order.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setOrder_result.class, metaDataMap);
		}

		public setOrder_result() {
		}

		public setOrder_result(Order success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setOrder_result(setOrder_result other) {
			if (other.isSetSuccess()) {
				this.success = new Order(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setOrder_result deepCopy() {
			return new setOrder_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Order getSuccess() {
			return this.success;
		}

		public setOrder_result setSuccess(@org.apache.thrift.annotation.Nullable Order success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setOrder_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Order) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setOrder_result)
				return this.equals((setOrder_result) that);
			return false;
		}

		public boolean equals(setOrder_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setOrder_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setOrder_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setOrder_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setOrder_resultStandardScheme getScheme() {
				return new setOrder_resultStandardScheme();
			}

		}

		private static class setOrder_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setOrder_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setOrder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Order();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setOrder_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setOrder_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setOrder_resultTupleScheme getScheme() {
				return new setOrder_resultTupleScheme();
			}

		}

		private static class setOrder_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setOrder_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setOrder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setOrder_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Order();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

}
