/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-02-18")
public class UserService {

	public interface Iface extends com.suboat.contrib.rpc.base.BaseService.Iface {

		/**
		 * -----用户查询------ getUser 传入argUser参数,获取一个用户 getAdmin 传入argAdmin参数,获取一个管理员
		 * getUserDetail 传入argUser参数,获取一个用户详情 getAdminDetail 传入argAdmin参数,获取一个管理员详情
		 * getUserList 传入argQuery参数,取用户列表 getAdminList 传入argQuery参数,取管理员列表
		 * getUserSessionList 传入query参数，取用户登录状态列表
		 * @param name
		 */
		public User getUser(ArgUser name) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Admin getAdmin(ArgAdmin name) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public UserDetail getUserDetail(ArgUser name)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public AdminDetail getAdminDetail(ArgAdmin name)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUser getUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultAdmin getAdminList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUserSession getUserSessionList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		/**
		 * * -----用户创建------ * 应用举例：其他模块需要快速创建一个用户. a情景.用户名不存在且传入密码参数,则创建用户并返回;
		 * b情景.用户名不存在且没有传入密码参数,则创建一个无密码用户(不可登陆的用户)并返回 c情景.用户名已存在,则忽略剩余传入参数,直接返回已存在的用户信息 *
		 * createUser 创建一个新用户,如果已经存在则报错 * ensureUser 确保一个用户存在,不存在则创建 * createAdmin
		 * 创建一个新管理员,如果已经存在则报错 * ensureAdmin 确保一个管理员存在,不存在则创建 * deleteByUid
		 * 软删除一个用户,如果用户创建时间小于1小时,则硬删除
		 * @param name
		 * @param password
		 * @param profile
		 */
		public User createUser(ArgUser name, ArgPassword password, ArgUserProfile profile)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public User ensureUser(ArgUser name, ArgPassword password, ArgUserProfile profile)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Admin createAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Admin ensureAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public User deleteByUid(ArgUser name) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		/**
		 * -----用户登录------ getUserToken 传入用户uid，取用户登录token getAdminToken
		 * 传入管理员uid，取管理员登录token
		 * @param form
		 */
		public UserToken getUserToken(ArgLogin form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public UserToken getAdminToken(ArgLogin form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		/**
		 * -----用户编辑------ setUser 修改用户。uid后的参数，传则改，不传则不处理不报错 setUserBind 设置用户与第三方平台的绑定,
		 * isRemove为true时移除绑定 setUserCreateTime 修改用户创建时间 setUserRolesAdd 添加用户角色，重复不会报错
		 * setUserRolesDel 去除用户角色，重复不会报错
		 * @param uid
		 * @param name
		 * @param password
		 * @param profile
		 * @param status
		 */
		public User setUser(java.lang.String uid, ArgUser name, ArgPassword password, ArgUserProfile profile,
				ArgStatus status) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public User setUserBind(java.lang.String uid, ArgBind bind, boolean isRemove)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public User setUserCreateTime(java.lang.String uid, java.lang.String createTime)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<java.lang.String> setUserRolesAdd(java.lang.String uid,
				java.util.List<java.lang.String> roleLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<java.lang.String> setUserRolesDel(java.lang.String uid,
				java.util.List<java.lang.String> roleLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		/**
		 * ----- 拓展信息------ getUserExt 传入argQuery参数,取用户安全拓展表 getUserExtPub
		 * 传入argQuery参数,取用户普通拓展表 getUserBankCardList 传入argQuery参数,取银行卡列表 getUserActionList
		 * 传入argQuery参数,取操作历史列表
		 * @param query
		 */
		public ResultUserExt getUserExt(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUserExtPub getUserExtPub(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUserBankCard getUserBankCardList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUserAction getUserActionList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		/**
		 * -----权限验证------ getRBAC 取当前系统的权限配置信息 setRBAC 覆盖当前系统的权限配置信息 ensurePerm 添加一条权限信息,
		 * 重复调用不报错 checkPassword 查看用户密码是否正确:
		 * 传入为用户uid、密码类型("":登陆密码,"secure":安全密码,"pay":交易密码), 密码明文; 密码正确返回true, 错误返回false;
		 * 无法判断或异常抛出error checkCaptcha 判断图片验证码正确 checkVerify 判断短信验证码正确 checkGranted
		 * 查看用户组是否具备权限: 传入用户组列表、权限列表; 具备返回true，不具备权限则返回false checkPerms 查看用户是否具备权限:
		 * 传入为用户uid、权限列表, 返回与checkGranted相同 checkRoles 查看用户是否具备角色: 传入为用户uid、角色列表,
		 * 返回与checkGranted相同 findPerms 查看用户是否具备权限: 传入为用户uid、权限的正则表达式, 返回匹配到的权限列表
		 */
		public UserRBAC getRBAC() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public UserRBAC setRBAC(UserRBAC form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public RbacPerm ensurePerm(RbacPerm perm)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public boolean checkPassword(java.lang.String uid, java.lang.String cate, java.lang.String psw)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public boolean checkCaptcha(java.lang.String question, java.lang.String answer)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public boolean checkVerify(java.lang.String question, java.lang.String answer)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public boolean checkGranted(java.util.List<java.lang.String> roleLis, java.util.List<java.lang.String> permLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public boolean checkPerms(java.lang.String uid, java.util.List<java.lang.String> permLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public boolean checkRoles(java.lang.String uid, java.util.List<java.lang.String> roleLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public boolean checkAreas(java.lang.String uid, java.util.List<java.lang.String> areaLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<RbacPerm> findPerms(java.lang.String uid, java.lang.String permReg)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		/**
		 * -----操作记录------ addAction 记录用户操作
		 * @param form
		 */
		public UserAction addAction(ArgAction form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		/**
		 * -----用户绑定------ getUserBinds 获取在bindKey下绑定了bindVal的所有用户,如果填写了code,则自动创建新用户
		 * getUserWeixin 利用在user模块下的微信配置,获取微信用户信息
		 * @param bind
		 */
		public java.util.List<User> getUserBinds(ArgBind bind)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public UserWeixin getUserWeixin(ArgBind bind)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public UserAlipay getUserAlipay(ArgBind bind)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		/**
		 * -----快捷方式------ getUserProfile 传入argUser参数,获取一个用户资料 getUserSessions
		 * 传入argUser参数,获取一个用户当前所有登录状态 getUserBankCards 传入argUser参数,获取该用户的所有银行卡数组
		 * @param uid
		 */
		public UserProfile getUserProfile(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<UserSession> getUserSessions(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public java.util.List<UserBankCard> getUserBankCards(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

	}

	public interface AsyncIface extends com.suboat.contrib.rpc.base.BaseService.AsyncIface {

		public void getUser(ArgUser name, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException;

		public void getAdmin(ArgAdmin name, org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserDetail(ArgUser name, org.apache.thrift.async.AsyncMethodCallback<UserDetail> resultHandler)
				throws org.apache.thrift.TException;

		public void getAdminDetail(ArgAdmin name,
				org.apache.thrift.async.AsyncMethodCallback<AdminDetail> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
				throws org.apache.thrift.TException;

		public void getAdminList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultAdmin> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserSessionList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserSession> resultHandler)
				throws org.apache.thrift.TException;

		public void createUser(ArgUser name, ArgPassword password, ArgUserProfile profile,
				org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws org.apache.thrift.TException;

		public void ensureUser(ArgUser name, ArgPassword password, ArgUserProfile profile,
				org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws org.apache.thrift.TException;

		public void createAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile,
				org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler) throws org.apache.thrift.TException;

		public void ensureAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile,
				org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler) throws org.apache.thrift.TException;

		public void deleteByUid(ArgUser name, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserToken(ArgLogin form, org.apache.thrift.async.AsyncMethodCallback<UserToken> resultHandler)
				throws org.apache.thrift.TException;

		public void getAdminToken(ArgLogin form, org.apache.thrift.async.AsyncMethodCallback<UserToken> resultHandler)
				throws org.apache.thrift.TException;

		public void setUser(java.lang.String uid, ArgUser name, ArgPassword password, ArgUserProfile profile,
				ArgStatus status, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException;

		public void setUserBind(java.lang.String uid, ArgBind bind, boolean isRemove,
				org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws org.apache.thrift.TException;

		public void setUserCreateTime(java.lang.String uid, java.lang.String createTime,
				org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws org.apache.thrift.TException;

		public void setUserRolesAdd(java.lang.String uid, java.util.List<java.lang.String> roleLis,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler)
				throws org.apache.thrift.TException;

		public void setUserRolesDel(java.lang.String uid, java.util.List<java.lang.String> roleLis,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserExt(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserExt> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserExtPub(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserExtPub> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserBankCardList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserBankCard> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserActionList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserAction> resultHandler)
				throws org.apache.thrift.TException;

		public void getRBAC(org.apache.thrift.async.AsyncMethodCallback<UserRBAC> resultHandler)
				throws org.apache.thrift.TException;

		public void setRBAC(UserRBAC form, org.apache.thrift.async.AsyncMethodCallback<UserRBAC> resultHandler)
				throws org.apache.thrift.TException;

		public void ensurePerm(RbacPerm perm, org.apache.thrift.async.AsyncMethodCallback<RbacPerm> resultHandler)
				throws org.apache.thrift.TException;

		public void checkPassword(java.lang.String uid, java.lang.String cate, java.lang.String psw,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException;

		public void checkCaptcha(java.lang.String question, java.lang.String answer,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException;

		public void checkVerify(java.lang.String question, java.lang.String answer,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException;

		public void checkGranted(java.util.List<java.lang.String> roleLis, java.util.List<java.lang.String> permLis,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException;

		public void checkPerms(java.lang.String uid, java.util.List<java.lang.String> permLis,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException;

		public void checkRoles(java.lang.String uid, java.util.List<java.lang.String> roleLis,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException;

		public void checkAreas(java.lang.String uid, java.util.List<java.lang.String> areaLis,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException;

		public void findPerms(java.lang.String uid, java.lang.String permReg,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<RbacPerm>> resultHandler)
				throws org.apache.thrift.TException;

		public void addAction(ArgAction form, org.apache.thrift.async.AsyncMethodCallback<UserAction> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserBinds(ArgBind bind,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<User>> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserWeixin(ArgBind bind, org.apache.thrift.async.AsyncMethodCallback<UserWeixin> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserAlipay(ArgBind bind, org.apache.thrift.async.AsyncMethodCallback<UserAlipay> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserProfile(java.lang.String uid,
				org.apache.thrift.async.AsyncMethodCallback<UserProfile> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserSessions(java.lang.String uid,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserSession>> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserBankCards(java.lang.String uid,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserBankCard>> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends com.suboat.contrib.rpc.base.BaseService.Client implements Iface {

		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}

		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public User getUser(ArgUser name) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUser(name);
			return recv_getUser();
		}

		public void send_getUser(ArgUser name) throws org.apache.thrift.TException {
			getUser_args args = new getUser_args();
			args.setName(name);
			sendBase("getUser", args);
		}

		public User recv_getUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUser_result result = new getUser_result();
			receiveBase(result, "getUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUser failed: unknown result");
		}

		public Admin getAdmin(ArgAdmin name) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getAdmin(name);
			return recv_getAdmin();
		}

		public void send_getAdmin(ArgAdmin name) throws org.apache.thrift.TException {
			getAdmin_args args = new getAdmin_args();
			args.setName(name);
			sendBase("getAdmin", args);
		}

		public Admin recv_getAdmin() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getAdmin_result result = new getAdmin_result();
			receiveBase(result, "getAdmin");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getAdmin failed: unknown result");
		}

		public UserDetail getUserDetail(ArgUser name)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserDetail(name);
			return recv_getUserDetail();
		}

		public void send_getUserDetail(ArgUser name) throws org.apache.thrift.TException {
			getUserDetail_args args = new getUserDetail_args();
			args.setName(name);
			sendBase("getUserDetail", args);
		}

		public UserDetail recv_getUserDetail() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserDetail_result result = new getUserDetail_result();
			receiveBase(result, "getUserDetail");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserDetail failed: unknown result");
		}

		public AdminDetail getAdminDetail(ArgAdmin name)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getAdminDetail(name);
			return recv_getAdminDetail();
		}

		public void send_getAdminDetail(ArgAdmin name) throws org.apache.thrift.TException {
			getAdminDetail_args args = new getAdminDetail_args();
			args.setName(name);
			sendBase("getAdminDetail", args);
		}

		public AdminDetail recv_getAdminDetail()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getAdminDetail_result result = new getAdminDetail_result();
			receiveBase(result, "getAdminDetail");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getAdminDetail failed: unknown result");
		}

		public ResultUser getUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserList(query);
			return recv_getUserList();
		}

		public void send_getUserList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getUserList_args args = new getUserList_args();
			args.setQuery(query);
			sendBase("getUserList", args);
		}

		public ResultUser recv_getUserList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserList_result result = new getUserList_result();
			receiveBase(result, "getUserList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserList failed: unknown result");
		}

		public ResultAdmin getAdminList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getAdminList(query);
			return recv_getAdminList();
		}

		public void send_getAdminList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getAdminList_args args = new getAdminList_args();
			args.setQuery(query);
			sendBase("getAdminList", args);
		}

		public ResultAdmin recv_getAdminList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getAdminList_result result = new getAdminList_result();
			receiveBase(result, "getAdminList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getAdminList failed: unknown result");
		}

		public ResultUserSession getUserSessionList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserSessionList(query);
			return recv_getUserSessionList();
		}

		public void send_getUserSessionList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getUserSessionList_args args = new getUserSessionList_args();
			args.setQuery(query);
			sendBase("getUserSessionList", args);
		}

		public ResultUserSession recv_getUserSessionList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserSessionList_result result = new getUserSessionList_result();
			receiveBase(result, "getUserSessionList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserSessionList failed: unknown result");
		}

		public User createUser(ArgUser name, ArgPassword password, ArgUserProfile profile)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_createUser(name, password, profile);
			return recv_createUser();
		}

		public void send_createUser(ArgUser name, ArgPassword password, ArgUserProfile profile)
				throws org.apache.thrift.TException {
			createUser_args args = new createUser_args();
			args.setName(name);
			args.setPassword(password);
			args.setProfile(profile);
			sendBase("createUser", args);
		}

		public User recv_createUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			createUser_result result = new createUser_result();
			receiveBase(result, "createUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"createUser failed: unknown result");
		}

		public User ensureUser(ArgUser name, ArgPassword password, ArgUserProfile profile)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_ensureUser(name, password, profile);
			return recv_ensureUser();
		}

		public void send_ensureUser(ArgUser name, ArgPassword password, ArgUserProfile profile)
				throws org.apache.thrift.TException {
			ensureUser_args args = new ensureUser_args();
			args.setName(name);
			args.setPassword(password);
			args.setProfile(profile);
			sendBase("ensureUser", args);
		}

		public User recv_ensureUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			ensureUser_result result = new ensureUser_result();
			receiveBase(result, "ensureUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"ensureUser failed: unknown result");
		}

		public Admin createAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_createAdmin(admin, user, password, profile);
			return recv_createAdmin();
		}

		public void send_createAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile)
				throws org.apache.thrift.TException {
			createAdmin_args args = new createAdmin_args();
			args.setAdmin(admin);
			args.setUser(user);
			args.setPassword(password);
			args.setProfile(profile);
			sendBase("createAdmin", args);
		}

		public Admin recv_createAdmin() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			createAdmin_result result = new createAdmin_result();
			receiveBase(result, "createAdmin");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"createAdmin failed: unknown result");
		}

		public Admin ensureAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_ensureAdmin(admin, user, password, profile);
			return recv_ensureAdmin();
		}

		public void send_ensureAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile)
				throws org.apache.thrift.TException {
			ensureAdmin_args args = new ensureAdmin_args();
			args.setAdmin(admin);
			args.setUser(user);
			args.setPassword(password);
			args.setProfile(profile);
			sendBase("ensureAdmin", args);
		}

		public Admin recv_ensureAdmin() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			ensureAdmin_result result = new ensureAdmin_result();
			receiveBase(result, "ensureAdmin");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"ensureAdmin failed: unknown result");
		}

		public User deleteByUid(ArgUser name) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_deleteByUid(name);
			return recv_deleteByUid();
		}

		public void send_deleteByUid(ArgUser name) throws org.apache.thrift.TException {
			deleteByUid_args args = new deleteByUid_args();
			args.setName(name);
			sendBase("deleteByUid", args);
		}

		public User recv_deleteByUid() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			deleteByUid_result result = new deleteByUid_result();
			receiveBase(result, "deleteByUid");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"deleteByUid failed: unknown result");
		}

		public UserToken getUserToken(ArgLogin form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserToken(form);
			return recv_getUserToken();
		}

		public void send_getUserToken(ArgLogin form) throws org.apache.thrift.TException {
			getUserToken_args args = new getUserToken_args();
			args.setForm(form);
			sendBase("getUserToken", args);
		}

		public UserToken recv_getUserToken() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserToken_result result = new getUserToken_result();
			receiveBase(result, "getUserToken");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserToken failed: unknown result");
		}

		public UserToken getAdminToken(ArgLogin form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getAdminToken(form);
			return recv_getAdminToken();
		}

		public void send_getAdminToken(ArgLogin form) throws org.apache.thrift.TException {
			getAdminToken_args args = new getAdminToken_args();
			args.setForm(form);
			sendBase("getAdminToken", args);
		}

		public UserToken recv_getAdminToken() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getAdminToken_result result = new getAdminToken_result();
			receiveBase(result, "getAdminToken");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getAdminToken failed: unknown result");
		}

		public User setUser(java.lang.String uid, ArgUser name, ArgPassword password, ArgUserProfile profile,
				ArgStatus status) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setUser(uid, name, password, profile, status);
			return recv_setUser();
		}

		public void send_setUser(java.lang.String uid, ArgUser name, ArgPassword password, ArgUserProfile profile,
				ArgStatus status) throws org.apache.thrift.TException {
			setUser_args args = new setUser_args();
			args.setUid(uid);
			args.setName(name);
			args.setPassword(password);
			args.setProfile(profile);
			args.setStatus(status);
			sendBase("setUser", args);
		}

		public User recv_setUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setUser_result result = new setUser_result();
			receiveBase(result, "setUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setUser failed: unknown result");
		}

		public User setUserBind(java.lang.String uid, ArgBind bind, boolean isRemove)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setUserBind(uid, bind, isRemove);
			return recv_setUserBind();
		}

		public void send_setUserBind(java.lang.String uid, ArgBind bind, boolean isRemove)
				throws org.apache.thrift.TException {
			setUserBind_args args = new setUserBind_args();
			args.setUid(uid);
			args.setBind(bind);
			args.setIsRemove(isRemove);
			sendBase("setUserBind", args);
		}

		public User recv_setUserBind() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setUserBind_result result = new setUserBind_result();
			receiveBase(result, "setUserBind");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setUserBind failed: unknown result");
		}

		public User setUserCreateTime(java.lang.String uid, java.lang.String createTime)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setUserCreateTime(uid, createTime);
			return recv_setUserCreateTime();
		}

		public void send_setUserCreateTime(java.lang.String uid, java.lang.String createTime)
				throws org.apache.thrift.TException {
			setUserCreateTime_args args = new setUserCreateTime_args();
			args.setUid(uid);
			args.setCreateTime(createTime);
			sendBase("setUserCreateTime", args);
		}

		public User recv_setUserCreateTime() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setUserCreateTime_result result = new setUserCreateTime_result();
			receiveBase(result, "setUserCreateTime");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setUserCreateTime failed: unknown result");
		}

		public java.util.List<java.lang.String> setUserRolesAdd(java.lang.String uid,
				java.util.List<java.lang.String> roleLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setUserRolesAdd(uid, roleLis);
			return recv_setUserRolesAdd();
		}

		public void send_setUserRolesAdd(java.lang.String uid, java.util.List<java.lang.String> roleLis)
				throws org.apache.thrift.TException {
			setUserRolesAdd_args args = new setUserRolesAdd_args();
			args.setUid(uid);
			args.setRoleLis(roleLis);
			sendBase("setUserRolesAdd", args);
		}

		public java.util.List<java.lang.String> recv_setUserRolesAdd()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setUserRolesAdd_result result = new setUserRolesAdd_result();
			receiveBase(result, "setUserRolesAdd");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setUserRolesAdd failed: unknown result");
		}

		public java.util.List<java.lang.String> setUserRolesDel(java.lang.String uid,
				java.util.List<java.lang.String> roleLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setUserRolesDel(uid, roleLis);
			return recv_setUserRolesDel();
		}

		public void send_setUserRolesDel(java.lang.String uid, java.util.List<java.lang.String> roleLis)
				throws org.apache.thrift.TException {
			setUserRolesDel_args args = new setUserRolesDel_args();
			args.setUid(uid);
			args.setRoleLis(roleLis);
			sendBase("setUserRolesDel", args);
		}

		public java.util.List<java.lang.String> recv_setUserRolesDel()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setUserRolesDel_result result = new setUserRolesDel_result();
			receiveBase(result, "setUserRolesDel");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setUserRolesDel failed: unknown result");
		}

		public ResultUserExt getUserExt(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserExt(query);
			return recv_getUserExt();
		}

		public void send_getUserExt(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getUserExt_args args = new getUserExt_args();
			args.setQuery(query);
			sendBase("getUserExt", args);
		}

		public ResultUserExt recv_getUserExt() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserExt_result result = new getUserExt_result();
			receiveBase(result, "getUserExt");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserExt failed: unknown result");
		}

		public ResultUserExtPub getUserExtPub(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserExtPub(query);
			return recv_getUserExtPub();
		}

		public void send_getUserExtPub(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getUserExtPub_args args = new getUserExtPub_args();
			args.setQuery(query);
			sendBase("getUserExtPub", args);
		}

		public ResultUserExtPub recv_getUserExtPub()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserExtPub_result result = new getUserExtPub_result();
			receiveBase(result, "getUserExtPub");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserExtPub failed: unknown result");
		}

		public ResultUserBankCard getUserBankCardList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserBankCardList(query);
			return recv_getUserBankCardList();
		}

		public void send_getUserBankCardList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getUserBankCardList_args args = new getUserBankCardList_args();
			args.setQuery(query);
			sendBase("getUserBankCardList", args);
		}

		public ResultUserBankCard recv_getUserBankCardList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserBankCardList_result result = new getUserBankCardList_result();
			receiveBase(result, "getUserBankCardList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserBankCardList failed: unknown result");
		}

		public ResultUserAction getUserActionList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserActionList(query);
			return recv_getUserActionList();
		}

		public void send_getUserActionList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getUserActionList_args args = new getUserActionList_args();
			args.setQuery(query);
			sendBase("getUserActionList", args);
		}

		public ResultUserAction recv_getUserActionList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserActionList_result result = new getUserActionList_result();
			receiveBase(result, "getUserActionList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserActionList failed: unknown result");
		}

		public UserRBAC getRBAC() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getRBAC();
			return recv_getRBAC();
		}

		public void send_getRBAC() throws org.apache.thrift.TException {
			getRBAC_args args = new getRBAC_args();
			sendBase("getRBAC", args);
		}

		public UserRBAC recv_getRBAC() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getRBAC_result result = new getRBAC_result();
			receiveBase(result, "getRBAC");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getRBAC failed: unknown result");
		}

		public UserRBAC setRBAC(UserRBAC form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setRBAC(form);
			return recv_setRBAC();
		}

		public void send_setRBAC(UserRBAC form) throws org.apache.thrift.TException {
			setRBAC_args args = new setRBAC_args();
			args.setForm(form);
			sendBase("setRBAC", args);
		}

		public UserRBAC recv_setRBAC() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setRBAC_result result = new setRBAC_result();
			receiveBase(result, "setRBAC");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setRBAC failed: unknown result");
		}

		public RbacPerm ensurePerm(RbacPerm perm)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_ensurePerm(perm);
			return recv_ensurePerm();
		}

		public void send_ensurePerm(RbacPerm perm) throws org.apache.thrift.TException {
			ensurePerm_args args = new ensurePerm_args();
			args.setPerm(perm);
			sendBase("ensurePerm", args);
		}

		public RbacPerm recv_ensurePerm() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			ensurePerm_result result = new ensurePerm_result();
			receiveBase(result, "ensurePerm");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"ensurePerm failed: unknown result");
		}

		public boolean checkPassword(java.lang.String uid, java.lang.String cate, java.lang.String psw)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_checkPassword(uid, cate, psw);
			return recv_checkPassword();
		}

		public void send_checkPassword(java.lang.String uid, java.lang.String cate, java.lang.String psw)
				throws org.apache.thrift.TException {
			checkPassword_args args = new checkPassword_args();
			args.setUid(uid);
			args.setCate(cate);
			args.setPsw(psw);
			sendBase("checkPassword", args);
		}

		public boolean recv_checkPassword() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			checkPassword_result result = new checkPassword_result();
			receiveBase(result, "checkPassword");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"checkPassword failed: unknown result");
		}

		public boolean checkCaptcha(java.lang.String question, java.lang.String answer)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_checkCaptcha(question, answer);
			return recv_checkCaptcha();
		}

		public void send_checkCaptcha(java.lang.String question, java.lang.String answer)
				throws org.apache.thrift.TException {
			checkCaptcha_args args = new checkCaptcha_args();
			args.setQuestion(question);
			args.setAnswer(answer);
			sendBase("checkCaptcha", args);
		}

		public boolean recv_checkCaptcha() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			checkCaptcha_result result = new checkCaptcha_result();
			receiveBase(result, "checkCaptcha");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"checkCaptcha failed: unknown result");
		}

		public boolean checkVerify(java.lang.String question, java.lang.String answer)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_checkVerify(question, answer);
			return recv_checkVerify();
		}

		public void send_checkVerify(java.lang.String question, java.lang.String answer)
				throws org.apache.thrift.TException {
			checkVerify_args args = new checkVerify_args();
			args.setQuestion(question);
			args.setAnswer(answer);
			sendBase("checkVerify", args);
		}

		public boolean recv_checkVerify() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			checkVerify_result result = new checkVerify_result();
			receiveBase(result, "checkVerify");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"checkVerify failed: unknown result");
		}

		public boolean checkGranted(java.util.List<java.lang.String> roleLis, java.util.List<java.lang.String> permLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_checkGranted(roleLis, permLis);
			return recv_checkGranted();
		}

		public void send_checkGranted(java.util.List<java.lang.String> roleLis,
				java.util.List<java.lang.String> permLis) throws org.apache.thrift.TException {
			checkGranted_args args = new checkGranted_args();
			args.setRoleLis(roleLis);
			args.setPermLis(permLis);
			sendBase("checkGranted", args);
		}

		public boolean recv_checkGranted() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			checkGranted_result result = new checkGranted_result();
			receiveBase(result, "checkGranted");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"checkGranted failed: unknown result");
		}

		public boolean checkPerms(java.lang.String uid, java.util.List<java.lang.String> permLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_checkPerms(uid, permLis);
			return recv_checkPerms();
		}

		public void send_checkPerms(java.lang.String uid, java.util.List<java.lang.String> permLis)
				throws org.apache.thrift.TException {
			checkPerms_args args = new checkPerms_args();
			args.setUid(uid);
			args.setPermLis(permLis);
			sendBase("checkPerms", args);
		}

		public boolean recv_checkPerms() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			checkPerms_result result = new checkPerms_result();
			receiveBase(result, "checkPerms");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"checkPerms failed: unknown result");
		}

		public boolean checkRoles(java.lang.String uid, java.util.List<java.lang.String> roleLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_checkRoles(uid, roleLis);
			return recv_checkRoles();
		}

		public void send_checkRoles(java.lang.String uid, java.util.List<java.lang.String> roleLis)
				throws org.apache.thrift.TException {
			checkRoles_args args = new checkRoles_args();
			args.setUid(uid);
			args.setRoleLis(roleLis);
			sendBase("checkRoles", args);
		}

		public boolean recv_checkRoles() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			checkRoles_result result = new checkRoles_result();
			receiveBase(result, "checkRoles");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"checkRoles failed: unknown result");
		}

		public boolean checkAreas(java.lang.String uid, java.util.List<java.lang.String> areaLis)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_checkAreas(uid, areaLis);
			return recv_checkAreas();
		}

		public void send_checkAreas(java.lang.String uid, java.util.List<java.lang.String> areaLis)
				throws org.apache.thrift.TException {
			checkAreas_args args = new checkAreas_args();
			args.setUid(uid);
			args.setAreaLis(areaLis);
			sendBase("checkAreas", args);
		}

		public boolean recv_checkAreas() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			checkAreas_result result = new checkAreas_result();
			receiveBase(result, "checkAreas");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"checkAreas failed: unknown result");
		}

		public java.util.List<RbacPerm> findPerms(java.lang.String uid, java.lang.String permReg)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_findPerms(uid, permReg);
			return recv_findPerms();
		}

		public void send_findPerms(java.lang.String uid, java.lang.String permReg) throws org.apache.thrift.TException {
			findPerms_args args = new findPerms_args();
			args.setUid(uid);
			args.setPermReg(permReg);
			sendBase("findPerms", args);
		}

		public java.util.List<RbacPerm> recv_findPerms()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			findPerms_result result = new findPerms_result();
			receiveBase(result, "findPerms");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"findPerms failed: unknown result");
		}

		public UserAction addAction(ArgAction form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_addAction(form);
			return recv_addAction();
		}

		public void send_addAction(ArgAction form) throws org.apache.thrift.TException {
			addAction_args args = new addAction_args();
			args.setForm(form);
			sendBase("addAction", args);
		}

		public UserAction recv_addAction() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			addAction_result result = new addAction_result();
			receiveBase(result, "addAction");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"addAction failed: unknown result");
		}

		public java.util.List<User> getUserBinds(ArgBind bind)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserBinds(bind);
			return recv_getUserBinds();
		}

		public void send_getUserBinds(ArgBind bind) throws org.apache.thrift.TException {
			getUserBinds_args args = new getUserBinds_args();
			args.setBind(bind);
			sendBase("getUserBinds", args);
		}

		public java.util.List<User> recv_getUserBinds()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserBinds_result result = new getUserBinds_result();
			receiveBase(result, "getUserBinds");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserBinds failed: unknown result");
		}

		public UserWeixin getUserWeixin(ArgBind bind)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserWeixin(bind);
			return recv_getUserWeixin();
		}

		public void send_getUserWeixin(ArgBind bind) throws org.apache.thrift.TException {
			getUserWeixin_args args = new getUserWeixin_args();
			args.setBind(bind);
			sendBase("getUserWeixin", args);
		}

		public UserWeixin recv_getUserWeixin() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserWeixin_result result = new getUserWeixin_result();
			receiveBase(result, "getUserWeixin");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserWeixin failed: unknown result");
		}

		public UserAlipay getUserAlipay(ArgBind bind)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserAlipay(bind);
			return recv_getUserAlipay();
		}

		public void send_getUserAlipay(ArgBind bind) throws org.apache.thrift.TException {
			getUserAlipay_args args = new getUserAlipay_args();
			args.setBind(bind);
			sendBase("getUserAlipay", args);
		}

		public UserAlipay recv_getUserAlipay() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserAlipay_result result = new getUserAlipay_result();
			receiveBase(result, "getUserAlipay");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserAlipay failed: unknown result");
		}

		public UserProfile getUserProfile(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserProfile(uid);
			return recv_getUserProfile();
		}

		public void send_getUserProfile(java.lang.String uid) throws org.apache.thrift.TException {
			getUserProfile_args args = new getUserProfile_args();
			args.setUid(uid);
			sendBase("getUserProfile", args);
		}

		public UserProfile recv_getUserProfile()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserProfile_result result = new getUserProfile_result();
			receiveBase(result, "getUserProfile");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserProfile failed: unknown result");
		}

		public java.util.List<UserSession> getUserSessions(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserSessions(uid);
			return recv_getUserSessions();
		}

		public void send_getUserSessions(java.lang.String uid) throws org.apache.thrift.TException {
			getUserSessions_args args = new getUserSessions_args();
			args.setUid(uid);
			sendBase("getUserSessions", args);
		}

		public java.util.List<UserSession> recv_getUserSessions()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserSessions_result result = new getUserSessions_result();
			receiveBase(result, "getUserSessions");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserSessions failed: unknown result");
		}

		public java.util.List<UserBankCard> getUserBankCards(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserBankCards(uid);
			return recv_getUserBankCards();
		}

		public void send_getUserBankCards(java.lang.String uid) throws org.apache.thrift.TException {
			getUserBankCards_args args = new getUserBankCards_args();
			args.setUid(uid);
			sendBase("getUserBankCards", args);
		}

		public java.util.List<UserBankCard> recv_getUserBankCards()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserBankCards_result result = new getUserBankCards_result();
			receiveBase(result, "getUserBankCards");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserBankCards failed: unknown result");
		}

	}

	public static class AsyncClient extends com.suboat.contrib.rpc.base.BaseService.AsyncClient implements AsyncIface {

		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

			private org.apache.thrift.async.TAsyncClientManager clientManager;

			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}

		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getUser(ArgUser name, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUser_call method_call = new getUser_call(name, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUser_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private ArgUser name;

			public getUser_call(ArgUser name, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.name = name;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUser_args args = new getUser_args();
				args.setName(name);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUser();
			}

		}

		public void getAdmin(ArgAdmin name, org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getAdmin_call method_call = new getAdmin_call(name, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getAdmin_call extends org.apache.thrift.async.TAsyncMethodCall<Admin> {

			private ArgAdmin name;

			public getAdmin_call(ArgAdmin name, org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.name = name;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdmin",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getAdmin_args args = new getAdmin_args();
				args.setName(name);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Admin getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getAdmin();
			}

		}

		public void getUserDetail(ArgUser name, org.apache.thrift.async.AsyncMethodCallback<UserDetail> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserDetail_call method_call = new getUserDetail_call(name, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserDetail_call extends org.apache.thrift.async.TAsyncMethodCall<UserDetail> {

			private ArgUser name;

			public getUserDetail_call(ArgUser name,
					org.apache.thrift.async.AsyncMethodCallback<UserDetail> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.name = name;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserDetail",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserDetail_args args = new getUserDetail_args();
				args.setName(name);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserDetail getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserDetail();
			}

		}

		public void getAdminDetail(ArgAdmin name,
				org.apache.thrift.async.AsyncMethodCallback<AdminDetail> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getAdminDetail_call method_call = new getAdminDetail_call(name, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getAdminDetail_call extends org.apache.thrift.async.TAsyncMethodCall<AdminDetail> {

			private ArgAdmin name;

			public getAdminDetail_call(ArgAdmin name,
					org.apache.thrift.async.AsyncMethodCallback<AdminDetail> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.name = name;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdminDetail",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getAdminDetail_args args = new getAdminDetail_args();
				args.setName(name);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public AdminDetail getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getAdminDetail();
			}

		}

		public void getUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserList_call method_call = new getUserList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultUser> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserList_args args = new getUserList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUser getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserList();
			}

		}

		public void getAdminList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultAdmin> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getAdminList_call method_call = new getAdminList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getAdminList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultAdmin> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getAdminList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultAdmin> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdminList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getAdminList_args args = new getAdminList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultAdmin getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getAdminList();
			}

		}

		public void getUserSessionList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserSession> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserSessionList_call method_call = new getUserSessionList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserSessionList_call
				extends org.apache.thrift.async.TAsyncMethodCall<ResultUserSession> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserSessionList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserSession> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserSessionList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserSessionList_args args = new getUserSessionList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUserSession getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserSessionList();
			}

		}

		public void createUser(ArgUser name, ArgPassword password, ArgUserProfile profile,
				org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			createUser_call method_call = new createUser_call(name, password, profile, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class createUser_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private ArgUser name;

			private ArgPassword password;

			private ArgUserProfile profile;

			public createUser_call(ArgUser name, ArgPassword password, ArgUserProfile profile,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.name = name;
				this.password = password;
				this.profile = profile;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				createUser_args args = new createUser_args();
				args.setName(name);
				args.setPassword(password);
				args.setProfile(profile);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_createUser();
			}

		}

		public void ensureUser(ArgUser name, ArgPassword password, ArgUserProfile profile,
				org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			ensureUser_call method_call = new ensureUser_call(name, password, profile, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class ensureUser_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private ArgUser name;

			private ArgPassword password;

			private ArgUserProfile profile;

			public ensureUser_call(ArgUser name, ArgPassword password, ArgUserProfile profile,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.name = name;
				this.password = password;
				this.profile = profile;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ensureUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				ensureUser_args args = new ensureUser_args();
				args.setName(name);
				args.setPassword(password);
				args.setProfile(profile);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_ensureUser();
			}

		}

		public void createAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile,
				org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			createAdmin_call method_call = new createAdmin_call(admin, user, password, profile, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class createAdmin_call extends org.apache.thrift.async.TAsyncMethodCall<Admin> {

			private ArgAdmin admin;

			private ArgUser user;

			private ArgPassword password;

			private ArgUserProfile profile;

			public createAdmin_call(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile,
					org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.admin = admin;
				this.user = user;
				this.password = password;
				this.profile = profile;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAdmin",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				createAdmin_args args = new createAdmin_args();
				args.setAdmin(admin);
				args.setUser(user);
				args.setPassword(password);
				args.setProfile(profile);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Admin getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_createAdmin();
			}

		}

		public void ensureAdmin(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile,
				org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			ensureAdmin_call method_call = new ensureAdmin_call(admin, user, password, profile, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class ensureAdmin_call extends org.apache.thrift.async.TAsyncMethodCall<Admin> {

			private ArgAdmin admin;

			private ArgUser user;

			private ArgPassword password;

			private ArgUserProfile profile;

			public ensureAdmin_call(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile,
					org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.admin = admin;
				this.user = user;
				this.password = password;
				this.profile = profile;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ensureAdmin",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				ensureAdmin_args args = new ensureAdmin_args();
				args.setAdmin(admin);
				args.setUser(user);
				args.setPassword(password);
				args.setProfile(profile);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Admin getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_ensureAdmin();
			}

		}

		public void deleteByUid(ArgUser name, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			deleteByUid_call method_call = new deleteByUid_call(name, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class deleteByUid_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private ArgUser name;

			public deleteByUid_call(ArgUser name, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.name = name;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteByUid",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				deleteByUid_args args = new deleteByUid_args();
				args.setName(name);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_deleteByUid();
			}

		}

		public void getUserToken(ArgLogin form, org.apache.thrift.async.AsyncMethodCallback<UserToken> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserToken_call method_call = new getUserToken_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserToken_call extends org.apache.thrift.async.TAsyncMethodCall<UserToken> {

			private ArgLogin form;

			public getUserToken_call(ArgLogin form,
					org.apache.thrift.async.AsyncMethodCallback<UserToken> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserToken",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserToken_args args = new getUserToken_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserToken getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserToken();
			}

		}

		public void getAdminToken(ArgLogin form, org.apache.thrift.async.AsyncMethodCallback<UserToken> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getAdminToken_call method_call = new getAdminToken_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getAdminToken_call extends org.apache.thrift.async.TAsyncMethodCall<UserToken> {

			private ArgLogin form;

			public getAdminToken_call(ArgLogin form,
					org.apache.thrift.async.AsyncMethodCallback<UserToken> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdminToken",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getAdminToken_args args = new getAdminToken_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserToken getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getAdminToken();
			}

		}

		public void setUser(java.lang.String uid, ArgUser name, ArgPassword password, ArgUserProfile profile,
				ArgStatus status, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setUser_call method_call = new setUser_call(uid, name, password, profile, status, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setUser_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private java.lang.String uid;

			private ArgUser name;

			private ArgPassword password;

			private ArgUserProfile profile;

			private ArgStatus status;

			public setUser_call(java.lang.String uid, ArgUser name, ArgPassword password, ArgUserProfile profile,
					ArgStatus status, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.name = name;
				this.password = password;
				this.profile = profile;
				this.status = status;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setUser_args args = new setUser_args();
				args.setUid(uid);
				args.setName(name);
				args.setPassword(password);
				args.setProfile(profile);
				args.setStatus(status);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setUser();
			}

		}

		public void setUserBind(java.lang.String uid, ArgBind bind, boolean isRemove,
				org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setUserBind_call method_call = new setUserBind_call(uid, bind, isRemove, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setUserBind_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private java.lang.String uid;

			private ArgBind bind;

			private boolean isRemove;

			public setUserBind_call(java.lang.String uid, ArgBind bind, boolean isRemove,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.bind = bind;
				this.isRemove = isRemove;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserBind",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setUserBind_args args = new setUserBind_args();
				args.setUid(uid);
				args.setBind(bind);
				args.setIsRemove(isRemove);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setUserBind();
			}

		}

		public void setUserCreateTime(java.lang.String uid, java.lang.String createTime,
				org.apache.thrift.async.AsyncMethodCallback<User> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setUserCreateTime_call method_call = new setUserCreateTime_call(uid, createTime, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setUserCreateTime_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private java.lang.String uid;

			private java.lang.String createTime;

			public setUserCreateTime_call(java.lang.String uid, java.lang.String createTime,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.createTime = createTime;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserCreateTime",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setUserCreateTime_args args = new setUserCreateTime_args();
				args.setUid(uid);
				args.setCreateTime(createTime);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setUserCreateTime();
			}

		}

		public void setUserRolesAdd(java.lang.String uid, java.util.List<java.lang.String> roleLis,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setUserRolesAdd_call method_call = new setUserRolesAdd_call(uid, roleLis, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setUserRolesAdd_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {

			private java.lang.String uid;

			private java.util.List<java.lang.String> roleLis;

			public setUserRolesAdd_call(java.lang.String uid, java.util.List<java.lang.String> roleLis,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.roleLis = roleLis;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserRolesAdd",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setUserRolesAdd_args args = new setUserRolesAdd_args();
				args.setUid(uid);
				args.setRoleLis(roleLis);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<java.lang.String> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setUserRolesAdd();
			}

		}

		public void setUserRolesDel(java.lang.String uid, java.util.List<java.lang.String> roleLis,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setUserRolesDel_call method_call = new setUserRolesDel_call(uid, roleLis, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setUserRolesDel_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {

			private java.lang.String uid;

			private java.util.List<java.lang.String> roleLis;

			public setUserRolesDel_call(java.lang.String uid, java.util.List<java.lang.String> roleLis,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.roleLis = roleLis;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserRolesDel",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setUserRolesDel_args args = new setUserRolesDel_args();
				args.setUid(uid);
				args.setRoleLis(roleLis);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<java.lang.String> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setUserRolesDel();
			}

		}

		public void getUserExt(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserExt> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserExt_call method_call = new getUserExt_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserExt_call extends org.apache.thrift.async.TAsyncMethodCall<ResultUserExt> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserExt_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserExt> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserExt",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserExt_args args = new getUserExt_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUserExt getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserExt();
			}

		}

		public void getUserExtPub(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserExtPub> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserExtPub_call method_call = new getUserExtPub_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserExtPub_call extends org.apache.thrift.async.TAsyncMethodCall<ResultUserExtPub> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserExtPub_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserExtPub> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserExtPub",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserExtPub_args args = new getUserExtPub_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUserExtPub getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserExtPub();
			}

		}

		public void getUserBankCardList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserBankCard> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserBankCardList_call method_call = new getUserBankCardList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserBankCardList_call
				extends org.apache.thrift.async.TAsyncMethodCall<ResultUserBankCard> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserBankCardList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserBankCard> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserBankCardList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserBankCardList_args args = new getUserBankCardList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUserBankCard getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserBankCardList();
			}

		}

		public void getUserActionList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserAction> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserActionList_call method_call = new getUserActionList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserActionList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultUserAction> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserActionList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserAction> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserActionList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserActionList_args args = new getUserActionList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUserAction getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserActionList();
			}

		}

		public void getRBAC(org.apache.thrift.async.AsyncMethodCallback<UserRBAC> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getRBAC_call method_call = new getRBAC_call(resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getRBAC_call extends org.apache.thrift.async.TAsyncMethodCall<UserRBAC> {

			public getRBAC_call(org.apache.thrift.async.AsyncMethodCallback<UserRBAC> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRBAC",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getRBAC_args args = new getRBAC_args();
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserRBAC getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getRBAC();
			}

		}

		public void setRBAC(UserRBAC form, org.apache.thrift.async.AsyncMethodCallback<UserRBAC> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setRBAC_call method_call = new setRBAC_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setRBAC_call extends org.apache.thrift.async.TAsyncMethodCall<UserRBAC> {

			private UserRBAC form;

			public setRBAC_call(UserRBAC form, org.apache.thrift.async.AsyncMethodCallback<UserRBAC> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRBAC",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setRBAC_args args = new setRBAC_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserRBAC getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setRBAC();
			}

		}

		public void ensurePerm(RbacPerm perm, org.apache.thrift.async.AsyncMethodCallback<RbacPerm> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			ensurePerm_call method_call = new ensurePerm_call(perm, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class ensurePerm_call extends org.apache.thrift.async.TAsyncMethodCall<RbacPerm> {

			private RbacPerm perm;

			public ensurePerm_call(RbacPerm perm, org.apache.thrift.async.AsyncMethodCallback<RbacPerm> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.perm = perm;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ensurePerm",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				ensurePerm_args args = new ensurePerm_args();
				args.setPerm(perm);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public RbacPerm getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_ensurePerm();
			}

		}

		public void checkPassword(java.lang.String uid, java.lang.String cate, java.lang.String psw,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			checkPassword_call method_call = new checkPassword_call(uid, cate, psw, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class checkPassword_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {

			private java.lang.String uid;

			private java.lang.String cate;

			private java.lang.String psw;

			public checkPassword_call(java.lang.String uid, java.lang.String cate, java.lang.String psw,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.cate = cate;
				this.psw = psw;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkPassword",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				checkPassword_args args = new checkPassword_args();
				args.setUid(uid);
				args.setCate(cate);
				args.setPsw(psw);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Boolean getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_checkPassword();
			}

		}

		public void checkCaptcha(java.lang.String question, java.lang.String answer,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			checkCaptcha_call method_call = new checkCaptcha_call(question, answer, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class checkCaptcha_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {

			private java.lang.String question;

			private java.lang.String answer;

			public checkCaptcha_call(java.lang.String question, java.lang.String answer,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.question = question;
				this.answer = answer;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkCaptcha",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				checkCaptcha_args args = new checkCaptcha_args();
				args.setQuestion(question);
				args.setAnswer(answer);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Boolean getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_checkCaptcha();
			}

		}

		public void checkVerify(java.lang.String question, java.lang.String answer,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			checkVerify_call method_call = new checkVerify_call(question, answer, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class checkVerify_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {

			private java.lang.String question;

			private java.lang.String answer;

			public checkVerify_call(java.lang.String question, java.lang.String answer,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.question = question;
				this.answer = answer;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkVerify",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				checkVerify_args args = new checkVerify_args();
				args.setQuestion(question);
				args.setAnswer(answer);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Boolean getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_checkVerify();
			}

		}

		public void checkGranted(java.util.List<java.lang.String> roleLis, java.util.List<java.lang.String> permLis,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			checkGranted_call method_call = new checkGranted_call(roleLis, permLis, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class checkGranted_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {

			private java.util.List<java.lang.String> roleLis;

			private java.util.List<java.lang.String> permLis;

			public checkGranted_call(java.util.List<java.lang.String> roleLis, java.util.List<java.lang.String> permLis,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.roleLis = roleLis;
				this.permLis = permLis;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkGranted",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				checkGranted_args args = new checkGranted_args();
				args.setRoleLis(roleLis);
				args.setPermLis(permLis);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Boolean getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_checkGranted();
			}

		}

		public void checkPerms(java.lang.String uid, java.util.List<java.lang.String> permLis,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			checkPerms_call method_call = new checkPerms_call(uid, permLis, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class checkPerms_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {

			private java.lang.String uid;

			private java.util.List<java.lang.String> permLis;

			public checkPerms_call(java.lang.String uid, java.util.List<java.lang.String> permLis,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.permLis = permLis;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkPerms",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				checkPerms_args args = new checkPerms_args();
				args.setUid(uid);
				args.setPermLis(permLis);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Boolean getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_checkPerms();
			}

		}

		public void checkRoles(java.lang.String uid, java.util.List<java.lang.String> roleLis,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			checkRoles_call method_call = new checkRoles_call(uid, roleLis, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class checkRoles_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {

			private java.lang.String uid;

			private java.util.List<java.lang.String> roleLis;

			public checkRoles_call(java.lang.String uid, java.util.List<java.lang.String> roleLis,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.roleLis = roleLis;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkRoles",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				checkRoles_args args = new checkRoles_args();
				args.setUid(uid);
				args.setRoleLis(roleLis);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Boolean getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_checkRoles();
			}

		}

		public void checkAreas(java.lang.String uid, java.util.List<java.lang.String> areaLis,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			checkAreas_call method_call = new checkAreas_call(uid, areaLis, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class checkAreas_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {

			private java.lang.String uid;

			private java.util.List<java.lang.String> areaLis;

			public checkAreas_call(java.lang.String uid, java.util.List<java.lang.String> areaLis,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.areaLis = areaLis;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkAreas",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				checkAreas_args args = new checkAreas_args();
				args.setUid(uid);
				args.setAreaLis(areaLis);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Boolean getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_checkAreas();
			}

		}

		public void findPerms(java.lang.String uid, java.lang.String permReg,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<RbacPerm>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			findPerms_call method_call = new findPerms_call(uid, permReg, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class findPerms_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<RbacPerm>> {

			private java.lang.String uid;

			private java.lang.String permReg;

			public findPerms_call(java.lang.String uid, java.lang.String permReg,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<RbacPerm>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.permReg = permReg;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPerms",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				findPerms_args args = new findPerms_args();
				args.setUid(uid);
				args.setPermReg(permReg);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<RbacPerm> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_findPerms();
			}

		}

		public void addAction(ArgAction form, org.apache.thrift.async.AsyncMethodCallback<UserAction> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			addAction_call method_call = new addAction_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class addAction_call extends org.apache.thrift.async.TAsyncMethodCall<UserAction> {

			private ArgAction form;

			public addAction_call(ArgAction form, org.apache.thrift.async.AsyncMethodCallback<UserAction> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAction",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				addAction_args args = new addAction_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserAction getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_addAction();
			}

		}

		public void getUserBinds(ArgBind bind,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<User>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserBinds_call method_call = new getUserBinds_call(bind, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserBinds_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<User>> {

			private ArgBind bind;

			public getUserBinds_call(ArgBind bind,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<User>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.bind = bind;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserBinds",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserBinds_args args = new getUserBinds_args();
				args.setBind(bind);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<User> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserBinds();
			}

		}

		public void getUserWeixin(ArgBind bind, org.apache.thrift.async.AsyncMethodCallback<UserWeixin> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserWeixin_call method_call = new getUserWeixin_call(bind, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserWeixin_call extends org.apache.thrift.async.TAsyncMethodCall<UserWeixin> {

			private ArgBind bind;

			public getUserWeixin_call(ArgBind bind,
					org.apache.thrift.async.AsyncMethodCallback<UserWeixin> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.bind = bind;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserWeixin",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserWeixin_args args = new getUserWeixin_args();
				args.setBind(bind);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserWeixin getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserWeixin();
			}

		}

		public void getUserAlipay(ArgBind bind, org.apache.thrift.async.AsyncMethodCallback<UserAlipay> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserAlipay_call method_call = new getUserAlipay_call(bind, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserAlipay_call extends org.apache.thrift.async.TAsyncMethodCall<UserAlipay> {

			private ArgBind bind;

			public getUserAlipay_call(ArgBind bind,
					org.apache.thrift.async.AsyncMethodCallback<UserAlipay> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.bind = bind;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserAlipay",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserAlipay_args args = new getUserAlipay_args();
				args.setBind(bind);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserAlipay getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserAlipay();
			}

		}

		public void getUserProfile(java.lang.String uid,
				org.apache.thrift.async.AsyncMethodCallback<UserProfile> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserProfile_call method_call = new getUserProfile_call(uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall<UserProfile> {

			private java.lang.String uid;

			public getUserProfile_call(java.lang.String uid,
					org.apache.thrift.async.AsyncMethodCallback<UserProfile> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserProfile",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserProfile_args args = new getUserProfile_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserProfile getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserProfile();
			}

		}

		public void getUserSessions(java.lang.String uid,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserSession>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserSessions_call method_call = new getUserSessions_call(uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserSessions_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<UserSession>> {

			private java.lang.String uid;

			public getUserSessions_call(java.lang.String uid,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserSession>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserSessions",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserSessions_args args = new getUserSessions_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<UserSession> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserSessions();
			}

		}

		public void getUserBankCards(java.lang.String uid,
				org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserBankCard>> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserBankCards_call method_call = new getUserBankCards_call(uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserBankCards_call
				extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<UserBankCard>> {

			private java.lang.String uid;

			public getUserBankCards_call(java.lang.String uid,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserBankCard>> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserBankCards",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserBankCards_args args = new getUserBankCards_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.util.List<UserBankCard> getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserBankCards();
			}

		}

	}

	public static class Processor<I extends Iface> extends com.suboat.contrib.rpc.base.BaseService.Processor<I>
			implements org.apache.thrift.TProcessor {

		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getUser", new getUser());
			processMap.put("getAdmin", new getAdmin());
			processMap.put("getUserDetail", new getUserDetail());
			processMap.put("getAdminDetail", new getAdminDetail());
			processMap.put("getUserList", new getUserList());
			processMap.put("getAdminList", new getAdminList());
			processMap.put("getUserSessionList", new getUserSessionList());
			processMap.put("createUser", new createUser());
			processMap.put("ensureUser", new ensureUser());
			processMap.put("createAdmin", new createAdmin());
			processMap.put("ensureAdmin", new ensureAdmin());
			processMap.put("deleteByUid", new deleteByUid());
			processMap.put("getUserToken", new getUserToken());
			processMap.put("getAdminToken", new getAdminToken());
			processMap.put("setUser", new setUser());
			processMap.put("setUserBind", new setUserBind());
			processMap.put("setUserCreateTime", new setUserCreateTime());
			processMap.put("setUserRolesAdd", new setUserRolesAdd());
			processMap.put("setUserRolesDel", new setUserRolesDel());
			processMap.put("getUserExt", new getUserExt());
			processMap.put("getUserExtPub", new getUserExtPub());
			processMap.put("getUserBankCardList", new getUserBankCardList());
			processMap.put("getUserActionList", new getUserActionList());
			processMap.put("getRBAC", new getRBAC());
			processMap.put("setRBAC", new setRBAC());
			processMap.put("ensurePerm", new ensurePerm());
			processMap.put("checkPassword", new checkPassword());
			processMap.put("checkCaptcha", new checkCaptcha());
			processMap.put("checkVerify", new checkVerify());
			processMap.put("checkGranted", new checkGranted());
			processMap.put("checkPerms", new checkPerms());
			processMap.put("checkRoles", new checkRoles());
			processMap.put("checkAreas", new checkAreas());
			processMap.put("findPerms", new findPerms());
			processMap.put("addAction", new addAction());
			processMap.put("getUserBinds", new getUserBinds());
			processMap.put("getUserWeixin", new getUserWeixin());
			processMap.put("getUserAlipay", new getUserAlipay());
			processMap.put("getUserProfile", new getUserProfile());
			processMap.put("getUserSessions", new getUserSessions());
			processMap.put("getUserBankCards", new getUserBankCards());
			return processMap;
		}

		public static class getUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUser_args> {

			public getUser() {
				super("getUser");
			}

			public getUser_args getEmptyArgsInstance() {
				return new getUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUser_result getResult(I iface, getUser_args args) throws org.apache.thrift.TException {
				getUser_result result = new getUser_result();
				try {
					result.success = iface.getUser(args.name);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getAdmin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdmin_args> {

			public getAdmin() {
				super("getAdmin");
			}

			public getAdmin_args getEmptyArgsInstance() {
				return new getAdmin_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getAdmin_result getResult(I iface, getAdmin_args args) throws org.apache.thrift.TException {
				getAdmin_result result = new getAdmin_result();
				try {
					result.success = iface.getAdmin(args.name);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserDetail<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserDetail_args> {

			public getUserDetail() {
				super("getUserDetail");
			}

			public getUserDetail_args getEmptyArgsInstance() {
				return new getUserDetail_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserDetail_result getResult(I iface, getUserDetail_args args)
					throws org.apache.thrift.TException {
				getUserDetail_result result = new getUserDetail_result();
				try {
					result.success = iface.getUserDetail(args.name);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getAdminDetail<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getAdminDetail_args> {

			public getAdminDetail() {
				super("getAdminDetail");
			}

			public getAdminDetail_args getEmptyArgsInstance() {
				return new getAdminDetail_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getAdminDetail_result getResult(I iface, getAdminDetail_args args)
					throws org.apache.thrift.TException {
				getAdminDetail_result result = new getAdminDetail_result();
				try {
					result.success = iface.getAdminDetail(args.name);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserList_args> {

			public getUserList() {
				super("getUserList");
			}

			public getUserList_args getEmptyArgsInstance() {
				return new getUserList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserList_result getResult(I iface, getUserList_args args) throws org.apache.thrift.TException {
				getUserList_result result = new getUserList_result();
				try {
					result.success = iface.getUserList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getAdminList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getAdminList_args> {

			public getAdminList() {
				super("getAdminList");
			}

			public getAdminList_args getEmptyArgsInstance() {
				return new getAdminList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getAdminList_result getResult(I iface, getAdminList_args args) throws org.apache.thrift.TException {
				getAdminList_result result = new getAdminList_result();
				try {
					result.success = iface.getAdminList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserSessionList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserSessionList_args> {

			public getUserSessionList() {
				super("getUserSessionList");
			}

			public getUserSessionList_args getEmptyArgsInstance() {
				return new getUserSessionList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserSessionList_result getResult(I iface, getUserSessionList_args args)
					throws org.apache.thrift.TException {
				getUserSessionList_result result = new getUserSessionList_result();
				try {
					result.success = iface.getUserSessionList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class createUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createUser_args> {

			public createUser() {
				super("createUser");
			}

			public createUser_args getEmptyArgsInstance() {
				return new createUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public createUser_result getResult(I iface, createUser_args args) throws org.apache.thrift.TException {
				createUser_result result = new createUser_result();
				try {
					result.success = iface.createUser(args.name, args.password, args.profile);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class ensureUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ensureUser_args> {

			public ensureUser() {
				super("ensureUser");
			}

			public ensureUser_args getEmptyArgsInstance() {
				return new ensureUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public ensureUser_result getResult(I iface, ensureUser_args args) throws org.apache.thrift.TException {
				ensureUser_result result = new ensureUser_result();
				try {
					result.success = iface.ensureUser(args.name, args.password, args.profile);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class createAdmin<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, createAdmin_args> {

			public createAdmin() {
				super("createAdmin");
			}

			public createAdmin_args getEmptyArgsInstance() {
				return new createAdmin_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public createAdmin_result getResult(I iface, createAdmin_args args) throws org.apache.thrift.TException {
				createAdmin_result result = new createAdmin_result();
				try {
					result.success = iface.createAdmin(args.admin, args.user, args.password, args.profile);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class ensureAdmin<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, ensureAdmin_args> {

			public ensureAdmin() {
				super("ensureAdmin");
			}

			public ensureAdmin_args getEmptyArgsInstance() {
				return new ensureAdmin_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public ensureAdmin_result getResult(I iface, ensureAdmin_args args) throws org.apache.thrift.TException {
				ensureAdmin_result result = new ensureAdmin_result();
				try {
					result.success = iface.ensureAdmin(args.admin, args.user, args.password, args.profile);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class deleteByUid<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, deleteByUid_args> {

			public deleteByUid() {
				super("deleteByUid");
			}

			public deleteByUid_args getEmptyArgsInstance() {
				return new deleteByUid_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public deleteByUid_result getResult(I iface, deleteByUid_args args) throws org.apache.thrift.TException {
				deleteByUid_result result = new deleteByUid_result();
				try {
					result.success = iface.deleteByUid(args.name);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserToken<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserToken_args> {

			public getUserToken() {
				super("getUserToken");
			}

			public getUserToken_args getEmptyArgsInstance() {
				return new getUserToken_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserToken_result getResult(I iface, getUserToken_args args) throws org.apache.thrift.TException {
				getUserToken_result result = new getUserToken_result();
				try {
					result.success = iface.getUserToken(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getAdminToken<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getAdminToken_args> {

			public getAdminToken() {
				super("getAdminToken");
			}

			public getAdminToken_args getEmptyArgsInstance() {
				return new getAdminToken_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getAdminToken_result getResult(I iface, getAdminToken_args args)
					throws org.apache.thrift.TException {
				getAdminToken_result result = new getAdminToken_result();
				try {
					result.success = iface.getAdminToken(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUser_args> {

			public setUser() {
				super("setUser");
			}

			public setUser_args getEmptyArgsInstance() {
				return new setUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setUser_result getResult(I iface, setUser_args args) throws org.apache.thrift.TException {
				setUser_result result = new setUser_result();
				try {
					result.success = iface.setUser(args.uid, args.name, args.password, args.profile, args.status);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setUserBind<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setUserBind_args> {

			public setUserBind() {
				super("setUserBind");
			}

			public setUserBind_args getEmptyArgsInstance() {
				return new setUserBind_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setUserBind_result getResult(I iface, setUserBind_args args) throws org.apache.thrift.TException {
				setUserBind_result result = new setUserBind_result();
				try {
					result.success = iface.setUserBind(args.uid, args.bind, args.isRemove);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setUserCreateTime<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setUserCreateTime_args> {

			public setUserCreateTime() {
				super("setUserCreateTime");
			}

			public setUserCreateTime_args getEmptyArgsInstance() {
				return new setUserCreateTime_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setUserCreateTime_result getResult(I iface, setUserCreateTime_args args)
					throws org.apache.thrift.TException {
				setUserCreateTime_result result = new setUserCreateTime_result();
				try {
					result.success = iface.setUserCreateTime(args.uid, args.createTime);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setUserRolesAdd<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setUserRolesAdd_args> {

			public setUserRolesAdd() {
				super("setUserRolesAdd");
			}

			public setUserRolesAdd_args getEmptyArgsInstance() {
				return new setUserRolesAdd_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setUserRolesAdd_result getResult(I iface, setUserRolesAdd_args args)
					throws org.apache.thrift.TException {
				setUserRolesAdd_result result = new setUserRolesAdd_result();
				try {
					result.success = iface.setUserRolesAdd(args.uid, args.roleLis);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setUserRolesDel<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setUserRolesDel_args> {

			public setUserRolesDel() {
				super("setUserRolesDel");
			}

			public setUserRolesDel_args getEmptyArgsInstance() {
				return new setUserRolesDel_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setUserRolesDel_result getResult(I iface, setUserRolesDel_args args)
					throws org.apache.thrift.TException {
				setUserRolesDel_result result = new setUserRolesDel_result();
				try {
					result.success = iface.setUserRolesDel(args.uid, args.roleLis);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserExt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserExt_args> {

			public getUserExt() {
				super("getUserExt");
			}

			public getUserExt_args getEmptyArgsInstance() {
				return new getUserExt_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserExt_result getResult(I iface, getUserExt_args args) throws org.apache.thrift.TException {
				getUserExt_result result = new getUserExt_result();
				try {
					result.success = iface.getUserExt(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserExtPub<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserExtPub_args> {

			public getUserExtPub() {
				super("getUserExtPub");
			}

			public getUserExtPub_args getEmptyArgsInstance() {
				return new getUserExtPub_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserExtPub_result getResult(I iface, getUserExtPub_args args)
					throws org.apache.thrift.TException {
				getUserExtPub_result result = new getUserExtPub_result();
				try {
					result.success = iface.getUserExtPub(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserBankCardList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserBankCardList_args> {

			public getUserBankCardList() {
				super("getUserBankCardList");
			}

			public getUserBankCardList_args getEmptyArgsInstance() {
				return new getUserBankCardList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserBankCardList_result getResult(I iface, getUserBankCardList_args args)
					throws org.apache.thrift.TException {
				getUserBankCardList_result result = new getUserBankCardList_result();
				try {
					result.success = iface.getUserBankCardList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserActionList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserActionList_args> {

			public getUserActionList() {
				super("getUserActionList");
			}

			public getUserActionList_args getEmptyArgsInstance() {
				return new getUserActionList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserActionList_result getResult(I iface, getUserActionList_args args)
					throws org.apache.thrift.TException {
				getUserActionList_result result = new getUserActionList_result();
				try {
					result.success = iface.getUserActionList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getRBAC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRBAC_args> {

			public getRBAC() {
				super("getRBAC");
			}

			public getRBAC_args getEmptyArgsInstance() {
				return new getRBAC_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getRBAC_result getResult(I iface, getRBAC_args args) throws org.apache.thrift.TException {
				getRBAC_result result = new getRBAC_result();
				try {
					result.success = iface.getRBAC();
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setRBAC<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRBAC_args> {

			public setRBAC() {
				super("setRBAC");
			}

			public setRBAC_args getEmptyArgsInstance() {
				return new setRBAC_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setRBAC_result getResult(I iface, setRBAC_args args) throws org.apache.thrift.TException {
				setRBAC_result result = new setRBAC_result();
				try {
					result.success = iface.setRBAC(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class ensurePerm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ensurePerm_args> {

			public ensurePerm() {
				super("ensurePerm");
			}

			public ensurePerm_args getEmptyArgsInstance() {
				return new ensurePerm_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public ensurePerm_result getResult(I iface, ensurePerm_args args) throws org.apache.thrift.TException {
				ensurePerm_result result = new ensurePerm_result();
				try {
					result.success = iface.ensurePerm(args.perm);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class checkPassword<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, checkPassword_args> {

			public checkPassword() {
				super("checkPassword");
			}

			public checkPassword_args getEmptyArgsInstance() {
				return new checkPassword_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public checkPassword_result getResult(I iface, checkPassword_args args)
					throws org.apache.thrift.TException {
				checkPassword_result result = new checkPassword_result();
				try {
					result.success = iface.checkPassword(args.uid, args.cate, args.psw);
					result.setSuccessIsSet(true);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class checkCaptcha<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, checkCaptcha_args> {

			public checkCaptcha() {
				super("checkCaptcha");
			}

			public checkCaptcha_args getEmptyArgsInstance() {
				return new checkCaptcha_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public checkCaptcha_result getResult(I iface, checkCaptcha_args args) throws org.apache.thrift.TException {
				checkCaptcha_result result = new checkCaptcha_result();
				try {
					result.success = iface.checkCaptcha(args.question, args.answer);
					result.setSuccessIsSet(true);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class checkVerify<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, checkVerify_args> {

			public checkVerify() {
				super("checkVerify");
			}

			public checkVerify_args getEmptyArgsInstance() {
				return new checkVerify_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public checkVerify_result getResult(I iface, checkVerify_args args) throws org.apache.thrift.TException {
				checkVerify_result result = new checkVerify_result();
				try {
					result.success = iface.checkVerify(args.question, args.answer);
					result.setSuccessIsSet(true);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class checkGranted<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, checkGranted_args> {

			public checkGranted() {
				super("checkGranted");
			}

			public checkGranted_args getEmptyArgsInstance() {
				return new checkGranted_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public checkGranted_result getResult(I iface, checkGranted_args args) throws org.apache.thrift.TException {
				checkGranted_result result = new checkGranted_result();
				try {
					result.success = iface.checkGranted(args.roleLis, args.permLis);
					result.setSuccessIsSet(true);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class checkPerms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkPerms_args> {

			public checkPerms() {
				super("checkPerms");
			}

			public checkPerms_args getEmptyArgsInstance() {
				return new checkPerms_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public checkPerms_result getResult(I iface, checkPerms_args args) throws org.apache.thrift.TException {
				checkPerms_result result = new checkPerms_result();
				try {
					result.success = iface.checkPerms(args.uid, args.permLis);
					result.setSuccessIsSet(true);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class checkRoles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkRoles_args> {

			public checkRoles() {
				super("checkRoles");
			}

			public checkRoles_args getEmptyArgsInstance() {
				return new checkRoles_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public checkRoles_result getResult(I iface, checkRoles_args args) throws org.apache.thrift.TException {
				checkRoles_result result = new checkRoles_result();
				try {
					result.success = iface.checkRoles(args.uid, args.roleLis);
					result.setSuccessIsSet(true);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class checkAreas<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkAreas_args> {

			public checkAreas() {
				super("checkAreas");
			}

			public checkAreas_args getEmptyArgsInstance() {
				return new checkAreas_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public checkAreas_result getResult(I iface, checkAreas_args args) throws org.apache.thrift.TException {
				checkAreas_result result = new checkAreas_result();
				try {
					result.success = iface.checkAreas(args.uid, args.areaLis);
					result.setSuccessIsSet(true);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class findPerms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPerms_args> {

			public findPerms() {
				super("findPerms");
			}

			public findPerms_args getEmptyArgsInstance() {
				return new findPerms_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public findPerms_result getResult(I iface, findPerms_args args) throws org.apache.thrift.TException {
				findPerms_result result = new findPerms_result();
				try {
					result.success = iface.findPerms(args.uid, args.permReg);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class addAction<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAction_args> {

			public addAction() {
				super("addAction");
			}

			public addAction_args getEmptyArgsInstance() {
				return new addAction_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public addAction_result getResult(I iface, addAction_args args) throws org.apache.thrift.TException {
				addAction_result result = new addAction_result();
				try {
					result.success = iface.addAction(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserBinds<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserBinds_args> {

			public getUserBinds() {
				super("getUserBinds");
			}

			public getUserBinds_args getEmptyArgsInstance() {
				return new getUserBinds_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserBinds_result getResult(I iface, getUserBinds_args args) throws org.apache.thrift.TException {
				getUserBinds_result result = new getUserBinds_result();
				try {
					result.success = iface.getUserBinds(args.bind);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserWeixin<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserWeixin_args> {

			public getUserWeixin() {
				super("getUserWeixin");
			}

			public getUserWeixin_args getEmptyArgsInstance() {
				return new getUserWeixin_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserWeixin_result getResult(I iface, getUserWeixin_args args)
					throws org.apache.thrift.TException {
				getUserWeixin_result result = new getUserWeixin_result();
				try {
					result.success = iface.getUserWeixin(args.bind);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserAlipay<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserAlipay_args> {

			public getUserAlipay() {
				super("getUserAlipay");
			}

			public getUserAlipay_args getEmptyArgsInstance() {
				return new getUserAlipay_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserAlipay_result getResult(I iface, getUserAlipay_args args)
					throws org.apache.thrift.TException {
				getUserAlipay_result result = new getUserAlipay_result();
				try {
					result.success = iface.getUserAlipay(args.bind);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserProfile<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserProfile_args> {

			public getUserProfile() {
				super("getUserProfile");
			}

			public getUserProfile_args getEmptyArgsInstance() {
				return new getUserProfile_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserProfile_result getResult(I iface, getUserProfile_args args)
					throws org.apache.thrift.TException {
				getUserProfile_result result = new getUserProfile_result();
				try {
					result.success = iface.getUserProfile(args.uid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserSessions<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserSessions_args> {

			public getUserSessions() {
				super("getUserSessions");
			}

			public getUserSessions_args getEmptyArgsInstance() {
				return new getUserSessions_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserSessions_result getResult(I iface, getUserSessions_args args)
					throws org.apache.thrift.TException {
				getUserSessions_result result = new getUserSessions_result();
				try {
					result.success = iface.getUserSessions(args.uid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserBankCards<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserBankCards_args> {

			public getUserBankCards() {
				super("getUserBankCards");
			}

			public getUserBankCards_args getEmptyArgsInstance() {
				return new getUserBankCards_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserBankCards_result getResult(I iface, getUserBankCards_args args)
					throws org.apache.thrift.TException {
				getUserBankCards_result result = new getUserBankCards_result();
				try {
					result.success = iface.getUserBankCards(args.uid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

	}

	public static class AsyncProcessor<I extends AsyncIface>
			extends com.suboat.contrib.rpc.base.BaseService.AsyncProcessor<I> {

		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getUser", new getUser());
			processMap.put("getAdmin", new getAdmin());
			processMap.put("getUserDetail", new getUserDetail());
			processMap.put("getAdminDetail", new getAdminDetail());
			processMap.put("getUserList", new getUserList());
			processMap.put("getAdminList", new getAdminList());
			processMap.put("getUserSessionList", new getUserSessionList());
			processMap.put("createUser", new createUser());
			processMap.put("ensureUser", new ensureUser());
			processMap.put("createAdmin", new createAdmin());
			processMap.put("ensureAdmin", new ensureAdmin());
			processMap.put("deleteByUid", new deleteByUid());
			processMap.put("getUserToken", new getUserToken());
			processMap.put("getAdminToken", new getAdminToken());
			processMap.put("setUser", new setUser());
			processMap.put("setUserBind", new setUserBind());
			processMap.put("setUserCreateTime", new setUserCreateTime());
			processMap.put("setUserRolesAdd", new setUserRolesAdd());
			processMap.put("setUserRolesDel", new setUserRolesDel());
			processMap.put("getUserExt", new getUserExt());
			processMap.put("getUserExtPub", new getUserExtPub());
			processMap.put("getUserBankCardList", new getUserBankCardList());
			processMap.put("getUserActionList", new getUserActionList());
			processMap.put("getRBAC", new getRBAC());
			processMap.put("setRBAC", new setRBAC());
			processMap.put("ensurePerm", new ensurePerm());
			processMap.put("checkPassword", new checkPassword());
			processMap.put("checkCaptcha", new checkCaptcha());
			processMap.put("checkVerify", new checkVerify());
			processMap.put("checkGranted", new checkGranted());
			processMap.put("checkPerms", new checkPerms());
			processMap.put("checkRoles", new checkRoles());
			processMap.put("checkAreas", new checkAreas());
			processMap.put("findPerms", new findPerms());
			processMap.put("addAction", new addAction());
			processMap.put("getUserBinds", new getUserBinds());
			processMap.put("getUserWeixin", new getUserWeixin());
			processMap.put("getUserAlipay", new getUserAlipay());
			processMap.put("getUserProfile", new getUserProfile());
			processMap.put("getUserSessions", new getUserSessions());
			processMap.put("getUserBankCards", new getUserBankCards());
			return processMap;
		}

		public static class getUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUser_args, User> {

			public getUser() {
				super("getUser");
			}

			public getUser_args getEmptyArgsInstance() {
				return new getUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						getUser_result result = new getUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUser_result result = new getUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUser(args.name, resultHandler);
			}

		}

		public static class getAdmin<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getAdmin_args, Admin> {

			public getAdmin() {
				super("getAdmin");
			}

			public getAdmin_args getEmptyArgsInstance() {
				return new getAdmin_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Admin> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Admin>() {
					public void onComplete(Admin o) {
						getAdmin_result result = new getAdmin_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getAdmin_result result = new getAdmin_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getAdmin_args args,
					org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler)
					throws org.apache.thrift.TException {
				iface.getAdmin(args.name, resultHandler);
			}

		}

		public static class getUserDetail<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserDetail_args, UserDetail> {

			public getUserDetail() {
				super("getUserDetail");
			}

			public getUserDetail_args getEmptyArgsInstance() {
				return new getUserDetail_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserDetail> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserDetail>() {
					public void onComplete(UserDetail o) {
						getUserDetail_result result = new getUserDetail_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserDetail_result result = new getUserDetail_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserDetail_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserDetail> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserDetail(args.name, resultHandler);
			}

		}

		public static class getAdminDetail<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getAdminDetail_args, AdminDetail> {

			public getAdminDetail() {
				super("getAdminDetail");
			}

			public getAdminDetail_args getEmptyArgsInstance() {
				return new getAdminDetail_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<AdminDetail> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<AdminDetail>() {
					public void onComplete(AdminDetail o) {
						getAdminDetail_result result = new getAdminDetail_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getAdminDetail_result result = new getAdminDetail_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getAdminDetail_args args,
					org.apache.thrift.async.AsyncMethodCallback<AdminDetail> resultHandler)
					throws org.apache.thrift.TException {
				iface.getAdminDetail(args.name, resultHandler);
			}

		}

		public static class getUserList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserList_args, ResultUser> {

			public getUserList() {
				super("getUserList");
			}

			public getUserList_args getEmptyArgsInstance() {
				return new getUserList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUser> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUser>() {
					public void onComplete(ResultUser o) {
						getUserList_result result = new getUserList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserList_result result = new getUserList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserList(args.query, resultHandler);
			}

		}

		public static class getAdminList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getAdminList_args, ResultAdmin> {

			public getAdminList() {
				super("getAdminList");
			}

			public getAdminList_args getEmptyArgsInstance() {
				return new getAdminList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultAdmin> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultAdmin>() {
					public void onComplete(ResultAdmin o) {
						getAdminList_result result = new getAdminList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getAdminList_result result = new getAdminList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getAdminList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultAdmin> resultHandler)
					throws org.apache.thrift.TException {
				iface.getAdminList(args.query, resultHandler);
			}

		}

		public static class getUserSessionList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserSessionList_args, ResultUserSession> {

			public getUserSessionList() {
				super("getUserSessionList");
			}

			public getUserSessionList_args getEmptyArgsInstance() {
				return new getUserSessionList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUserSession> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUserSession>() {
					public void onComplete(ResultUserSession o) {
						getUserSessionList_result result = new getUserSessionList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserSessionList_result result = new getUserSessionList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserSessionList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserSession> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserSessionList(args.query, resultHandler);
			}

		}

		public static class createUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, createUser_args, User> {

			public createUser() {
				super("createUser");
			}

			public createUser_args getEmptyArgsInstance() {
				return new createUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						createUser_result result = new createUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						createUser_result result = new createUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, createUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.createUser(args.name, args.password, args.profile, resultHandler);
			}

		}

		public static class ensureUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, ensureUser_args, User> {

			public ensureUser() {
				super("ensureUser");
			}

			public ensureUser_args getEmptyArgsInstance() {
				return new ensureUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						ensureUser_result result = new ensureUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						ensureUser_result result = new ensureUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, ensureUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.ensureUser(args.name, args.password, args.profile, resultHandler);
			}

		}

		public static class createAdmin<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, createAdmin_args, Admin> {

			public createAdmin() {
				super("createAdmin");
			}

			public createAdmin_args getEmptyArgsInstance() {
				return new createAdmin_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Admin> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Admin>() {
					public void onComplete(Admin o) {
						createAdmin_result result = new createAdmin_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						createAdmin_result result = new createAdmin_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, createAdmin_args args,
					org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler)
					throws org.apache.thrift.TException {
				iface.createAdmin(args.admin, args.user, args.password, args.profile, resultHandler);
			}

		}

		public static class ensureAdmin<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, ensureAdmin_args, Admin> {

			public ensureAdmin() {
				super("ensureAdmin");
			}

			public ensureAdmin_args getEmptyArgsInstance() {
				return new ensureAdmin_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Admin> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Admin>() {
					public void onComplete(Admin o) {
						ensureAdmin_result result = new ensureAdmin_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						ensureAdmin_result result = new ensureAdmin_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, ensureAdmin_args args,
					org.apache.thrift.async.AsyncMethodCallback<Admin> resultHandler)
					throws org.apache.thrift.TException {
				iface.ensureAdmin(args.admin, args.user, args.password, args.profile, resultHandler);
			}

		}

		public static class deleteByUid<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, deleteByUid_args, User> {

			public deleteByUid() {
				super("deleteByUid");
			}

			public deleteByUid_args getEmptyArgsInstance() {
				return new deleteByUid_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						deleteByUid_result result = new deleteByUid_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						deleteByUid_result result = new deleteByUid_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, deleteByUid_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.deleteByUid(args.name, resultHandler);
			}

		}

		public static class getUserToken<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserToken_args, UserToken> {

			public getUserToken() {
				super("getUserToken");
			}

			public getUserToken_args getEmptyArgsInstance() {
				return new getUserToken_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserToken> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserToken>() {
					public void onComplete(UserToken o) {
						getUserToken_result result = new getUserToken_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserToken_result result = new getUserToken_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserToken_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserToken> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserToken(args.form, resultHandler);
			}

		}

		public static class getAdminToken<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getAdminToken_args, UserToken> {

			public getAdminToken() {
				super("getAdminToken");
			}

			public getAdminToken_args getEmptyArgsInstance() {
				return new getAdminToken_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserToken> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserToken>() {
					public void onComplete(UserToken o) {
						getAdminToken_result result = new getAdminToken_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getAdminToken_result result = new getAdminToken_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getAdminToken_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserToken> resultHandler)
					throws org.apache.thrift.TException {
				iface.getAdminToken(args.form, resultHandler);
			}

		}

		public static class setUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setUser_args, User> {

			public setUser() {
				super("setUser");
			}

			public setUser_args getEmptyArgsInstance() {
				return new setUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						setUser_result result = new setUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setUser_result result = new setUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.setUser(args.uid, args.name, args.password, args.profile, args.status, resultHandler);
			}

		}

		public static class setUserBind<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setUserBind_args, User> {

			public setUserBind() {
				super("setUserBind");
			}

			public setUserBind_args getEmptyArgsInstance() {
				return new setUserBind_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						setUserBind_result result = new setUserBind_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setUserBind_result result = new setUserBind_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setUserBind_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.setUserBind(args.uid, args.bind, args.isRemove, resultHandler);
			}

		}

		public static class setUserCreateTime<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setUserCreateTime_args, User> {

			public setUserCreateTime() {
				super("setUserCreateTime");
			}

			public setUserCreateTime_args getEmptyArgsInstance() {
				return new setUserCreateTime_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						setUserCreateTime_result result = new setUserCreateTime_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setUserCreateTime_result result = new setUserCreateTime_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setUserCreateTime_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.setUserCreateTime(args.uid, args.createTime, resultHandler);
			}

		}

		public static class setUserRolesAdd<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, setUserRolesAdd_args, java.util.List<java.lang.String>> {

			public setUserRolesAdd() {
				super("setUserRolesAdd");
			}

			public setUserRolesAdd_args getEmptyArgsInstance() {
				return new setUserRolesAdd_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() {
					public void onComplete(java.util.List<java.lang.String> o) {
						setUserRolesAdd_result result = new setUserRolesAdd_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setUserRolesAdd_result result = new setUserRolesAdd_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setUserRolesAdd_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler)
					throws org.apache.thrift.TException {
				iface.setUserRolesAdd(args.uid, args.roleLis, resultHandler);
			}

		}

		public static class setUserRolesDel<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, setUserRolesDel_args, java.util.List<java.lang.String>> {

			public setUserRolesDel() {
				super("setUserRolesDel");
			}

			public setUserRolesDel_args getEmptyArgsInstance() {
				return new setUserRolesDel_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() {
					public void onComplete(java.util.List<java.lang.String> o) {
						setUserRolesDel_result result = new setUserRolesDel_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setUserRolesDel_result result = new setUserRolesDel_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setUserRolesDel_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler)
					throws org.apache.thrift.TException {
				iface.setUserRolesDel(args.uid, args.roleLis, resultHandler);
			}

		}

		public static class getUserExt<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserExt_args, ResultUserExt> {

			public getUserExt() {
				super("getUserExt");
			}

			public getUserExt_args getEmptyArgsInstance() {
				return new getUserExt_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUserExt> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUserExt>() {
					public void onComplete(ResultUserExt o) {
						getUserExt_result result = new getUserExt_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserExt_result result = new getUserExt_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserExt_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserExt> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserExt(args.query, resultHandler);
			}

		}

		public static class getUserExtPub<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserExtPub_args, ResultUserExtPub> {

			public getUserExtPub() {
				super("getUserExtPub");
			}

			public getUserExtPub_args getEmptyArgsInstance() {
				return new getUserExtPub_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUserExtPub> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUserExtPub>() {
					public void onComplete(ResultUserExtPub o) {
						getUserExtPub_result result = new getUserExtPub_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserExtPub_result result = new getUserExtPub_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserExtPub_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserExtPub> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserExtPub(args.query, resultHandler);
			}

		}

		public static class getUserBankCardList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserBankCardList_args, ResultUserBankCard> {

			public getUserBankCardList() {
				super("getUserBankCardList");
			}

			public getUserBankCardList_args getEmptyArgsInstance() {
				return new getUserBankCardList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUserBankCard> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUserBankCard>() {
					public void onComplete(ResultUserBankCard o) {
						getUserBankCardList_result result = new getUserBankCardList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserBankCardList_result result = new getUserBankCardList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserBankCardList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserBankCard> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserBankCardList(args.query, resultHandler);
			}

		}

		public static class getUserActionList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserActionList_args, ResultUserAction> {

			public getUserActionList() {
				super("getUserActionList");
			}

			public getUserActionList_args getEmptyArgsInstance() {
				return new getUserActionList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUserAction> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUserAction>() {
					public void onComplete(ResultUserAction o) {
						getUserActionList_result result = new getUserActionList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserActionList_result result = new getUserActionList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserActionList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserAction> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserActionList(args.query, resultHandler);
			}

		}

		public static class getRBAC<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getRBAC_args, UserRBAC> {

			public getRBAC() {
				super("getRBAC");
			}

			public getRBAC_args getEmptyArgsInstance() {
				return new getRBAC_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserRBAC> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserRBAC>() {
					public void onComplete(UserRBAC o) {
						getRBAC_result result = new getRBAC_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getRBAC_result result = new getRBAC_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getRBAC_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserRBAC> resultHandler)
					throws org.apache.thrift.TException {
				iface.getRBAC(resultHandler);
			}

		}

		public static class setRBAC<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setRBAC_args, UserRBAC> {

			public setRBAC() {
				super("setRBAC");
			}

			public setRBAC_args getEmptyArgsInstance() {
				return new setRBAC_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserRBAC> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserRBAC>() {
					public void onComplete(UserRBAC o) {
						setRBAC_result result = new setRBAC_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setRBAC_result result = new setRBAC_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setRBAC_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserRBAC> resultHandler)
					throws org.apache.thrift.TException {
				iface.setRBAC(args.form, resultHandler);
			}

		}

		public static class ensurePerm<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, ensurePerm_args, RbacPerm> {

			public ensurePerm() {
				super("ensurePerm");
			}

			public ensurePerm_args getEmptyArgsInstance() {
				return new ensurePerm_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<RbacPerm> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<RbacPerm>() {
					public void onComplete(RbacPerm o) {
						ensurePerm_result result = new ensurePerm_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						ensurePerm_result result = new ensurePerm_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, ensurePerm_args args,
					org.apache.thrift.async.AsyncMethodCallback<RbacPerm> resultHandler)
					throws org.apache.thrift.TException {
				iface.ensurePerm(args.perm, resultHandler);
			}

		}

		public static class checkPassword<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, checkPassword_args, java.lang.Boolean> {

			public checkPassword() {
				super("checkPassword");
			}

			public checkPassword_args getEmptyArgsInstance() {
				return new checkPassword_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
					public void onComplete(java.lang.Boolean o) {
						checkPassword_result result = new checkPassword_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						checkPassword_result result = new checkPassword_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, checkPassword_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
					throws org.apache.thrift.TException {
				iface.checkPassword(args.uid, args.cate, args.psw, resultHandler);
			}

		}

		public static class checkCaptcha<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, checkCaptcha_args, java.lang.Boolean> {

			public checkCaptcha() {
				super("checkCaptcha");
			}

			public checkCaptcha_args getEmptyArgsInstance() {
				return new checkCaptcha_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
					public void onComplete(java.lang.Boolean o) {
						checkCaptcha_result result = new checkCaptcha_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						checkCaptcha_result result = new checkCaptcha_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, checkCaptcha_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
					throws org.apache.thrift.TException {
				iface.checkCaptcha(args.question, args.answer, resultHandler);
			}

		}

		public static class checkVerify<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, checkVerify_args, java.lang.Boolean> {

			public checkVerify() {
				super("checkVerify");
			}

			public checkVerify_args getEmptyArgsInstance() {
				return new checkVerify_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
					public void onComplete(java.lang.Boolean o) {
						checkVerify_result result = new checkVerify_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						checkVerify_result result = new checkVerify_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, checkVerify_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
					throws org.apache.thrift.TException {
				iface.checkVerify(args.question, args.answer, resultHandler);
			}

		}

		public static class checkGranted<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, checkGranted_args, java.lang.Boolean> {

			public checkGranted() {
				super("checkGranted");
			}

			public checkGranted_args getEmptyArgsInstance() {
				return new checkGranted_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
					public void onComplete(java.lang.Boolean o) {
						checkGranted_result result = new checkGranted_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						checkGranted_result result = new checkGranted_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, checkGranted_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
					throws org.apache.thrift.TException {
				iface.checkGranted(args.roleLis, args.permLis, resultHandler);
			}

		}

		public static class checkPerms<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, checkPerms_args, java.lang.Boolean> {

			public checkPerms() {
				super("checkPerms");
			}

			public checkPerms_args getEmptyArgsInstance() {
				return new checkPerms_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
					public void onComplete(java.lang.Boolean o) {
						checkPerms_result result = new checkPerms_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						checkPerms_result result = new checkPerms_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, checkPerms_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
					throws org.apache.thrift.TException {
				iface.checkPerms(args.uid, args.permLis, resultHandler);
			}

		}

		public static class checkRoles<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, checkRoles_args, java.lang.Boolean> {

			public checkRoles() {
				super("checkRoles");
			}

			public checkRoles_args getEmptyArgsInstance() {
				return new checkRoles_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
					public void onComplete(java.lang.Boolean o) {
						checkRoles_result result = new checkRoles_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						checkRoles_result result = new checkRoles_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, checkRoles_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
					throws org.apache.thrift.TException {
				iface.checkRoles(args.uid, args.roleLis, resultHandler);
			}

		}

		public static class checkAreas<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, checkAreas_args, java.lang.Boolean> {

			public checkAreas() {
				super("checkAreas");
			}

			public checkAreas_args getEmptyArgsInstance() {
				return new checkAreas_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() {
					public void onComplete(java.lang.Boolean o) {
						checkAreas_result result = new checkAreas_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						checkAreas_result result = new checkAreas_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, checkAreas_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler)
					throws org.apache.thrift.TException {
				iface.checkAreas(args.uid, args.areaLis, resultHandler);
			}

		}

		public static class findPerms<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, findPerms_args, java.util.List<RbacPerm>> {

			public findPerms() {
				super("findPerms");
			}

			public findPerms_args getEmptyArgsInstance() {
				return new findPerms_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<RbacPerm>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<RbacPerm>>() {
					public void onComplete(java.util.List<RbacPerm> o) {
						findPerms_result result = new findPerms_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						findPerms_result result = new findPerms_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, findPerms_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<RbacPerm>> resultHandler)
					throws org.apache.thrift.TException {
				iface.findPerms(args.uid, args.permReg, resultHandler);
			}

		}

		public static class addAction<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, addAction_args, UserAction> {

			public addAction() {
				super("addAction");
			}

			public addAction_args getEmptyArgsInstance() {
				return new addAction_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserAction> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserAction>() {
					public void onComplete(UserAction o) {
						addAction_result result = new addAction_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						addAction_result result = new addAction_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, addAction_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserAction> resultHandler)
					throws org.apache.thrift.TException {
				iface.addAction(args.form, resultHandler);
			}

		}

		public static class getUserBinds<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserBinds_args, java.util.List<User>> {

			public getUserBinds() {
				super("getUserBinds");
			}

			public getUserBinds_args getEmptyArgsInstance() {
				return new getUserBinds_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<User>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<User>>() {
					public void onComplete(java.util.List<User> o) {
						getUserBinds_result result = new getUserBinds_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserBinds_result result = new getUserBinds_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserBinds_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<User>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserBinds(args.bind, resultHandler);
			}

		}

		public static class getUserWeixin<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserWeixin_args, UserWeixin> {

			public getUserWeixin() {
				super("getUserWeixin");
			}

			public getUserWeixin_args getEmptyArgsInstance() {
				return new getUserWeixin_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserWeixin> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserWeixin>() {
					public void onComplete(UserWeixin o) {
						getUserWeixin_result result = new getUserWeixin_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserWeixin_result result = new getUserWeixin_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserWeixin_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserWeixin> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserWeixin(args.bind, resultHandler);
			}

		}

		public static class getUserAlipay<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserAlipay_args, UserAlipay> {

			public getUserAlipay() {
				super("getUserAlipay");
			}

			public getUserAlipay_args getEmptyArgsInstance() {
				return new getUserAlipay_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserAlipay> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserAlipay>() {
					public void onComplete(UserAlipay o) {
						getUserAlipay_result result = new getUserAlipay_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserAlipay_result result = new getUserAlipay_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserAlipay_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserAlipay> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserAlipay(args.bind, resultHandler);
			}

		}

		public static class getUserProfile<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserProfile_args, UserProfile> {

			public getUserProfile() {
				super("getUserProfile");
			}

			public getUserProfile_args getEmptyArgsInstance() {
				return new getUserProfile_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserProfile> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserProfile>() {
					public void onComplete(UserProfile o) {
						getUserProfile_result result = new getUserProfile_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserProfile_result result = new getUserProfile_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserProfile_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserProfile> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserProfile(args.uid, resultHandler);
			}

		}

		public static class getUserSessions<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserSessions_args, java.util.List<UserSession>> {

			public getUserSessions() {
				super("getUserSessions");
			}

			public getUserSessions_args getEmptyArgsInstance() {
				return new getUserSessions_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserSession>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserSession>>() {
					public void onComplete(java.util.List<UserSession> o) {
						getUserSessions_result result = new getUserSessions_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserSessions_result result = new getUserSessions_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserSessions_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserSession>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserSessions(args.uid, resultHandler);
			}

		}

		public static class getUserBankCards<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserBankCards_args, java.util.List<UserBankCard>> {

			public getUserBankCards() {
				super("getUserBankCards");
			}

			public getUserBankCards_args getEmptyArgsInstance() {
				return new getUserBankCards_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserBankCard>> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserBankCard>>() {
					public void onComplete(java.util.List<UserBankCard> o) {
						getUserBankCards_result result = new getUserBankCards_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserBankCards_result result = new getUserBankCards_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserBankCards_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.util.List<UserBankCard>> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserBankCards(args.uid, resultHandler);
			}

		}

	}

	public static class getUser_args implements org.apache.thrift.TBase<getUser_args, getUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUser_args");

		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"name", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUser name; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			NAME((short) 1, "name");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // NAME
					return NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.NAME,
					new org.apache.thrift.meta_data.FieldMetaData("name",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_args.class, metaDataMap);
		}

		public getUser_args() {
		}

		public getUser_args(ArgUser name) {
			this();
			this.name = name;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUser_args(getUser_args other) {
			if (other.isSetName()) {
				this.name = new ArgUser(other.name);
			}
		}

		public getUser_args deepCopy() {
			return new getUser_args(this);
		}

		@Override
		public void clear() {
			this.name = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getName() {
			return this.name;
		}

		public getUser_args setName(@org.apache.thrift.annotation.Nullable ArgUser name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/**
		 * Returns true if field name is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case NAME:
				if (value == null) {
					unsetName();
				}
				else {
					setName((ArgUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case NAME:
				return getName();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case NAME:
				return isSetName();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUser_args)
				return this.equals((getUser_args) that);
			return false;
		}

		public boolean equals(getUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
			if (isSetName())
				hashCode = hashCode * 8191 + name.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUser_args(");
			boolean first = true;

			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			}
			else {
				sb.append(this.name);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_argsStandardScheme getScheme() {
				return new getUser_argsStandardScheme();
			}

		}

		private static class getUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.name = new ArgUser();
							struct.name.read(iprot);
							struct.setNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					struct.name.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_argsTupleScheme getScheme() {
				return new getUser_argsTupleScheme();
			}

		}

		private static class getUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetName()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetName()) {
					struct.name.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.name = new ArgUser();
					struct.name.read(iprot);
					struct.setNameIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUser_result implements org.apache.thrift.TBase<getUser_result, getUser_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_result.class, metaDataMap);
		}

		public getUser_result() {
		}

		public getUser_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUser_result(getUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUser_result deepCopy() {
			return new getUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public getUser_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUser_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUser_result)
				return this.equals((getUser_result) that);
			return false;
		}

		public boolean equals(getUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_resultStandardScheme getScheme() {
				return new getUser_resultStandardScheme();
			}

		}

		private static class getUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_resultTupleScheme getScheme() {
				return new getUser_resultTupleScheme();
			}

		}

		private static class getUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getAdmin_args implements org.apache.thrift.TBase<getAdmin_args, getAdmin_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getAdmin_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAdmin_args");

		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"name", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdmin_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdmin_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgAdmin name; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			NAME((short) 1, "name");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // NAME
					return NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.NAME,
					new org.apache.thrift.meta_data.FieldMetaData("name",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgAdmin")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdmin_args.class, metaDataMap);
		}

		public getAdmin_args() {
		}

		public getAdmin_args(ArgAdmin name) {
			this();
			this.name = name;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAdmin_args(getAdmin_args other) {
			if (other.isSetName()) {
				this.name = new ArgAdmin(other.name);
			}
		}

		public getAdmin_args deepCopy() {
			return new getAdmin_args(this);
		}

		@Override
		public void clear() {
			this.name = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgAdmin getName() {
			return this.name;
		}

		public getAdmin_args setName(@org.apache.thrift.annotation.Nullable ArgAdmin name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/**
		 * Returns true if field name is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case NAME:
				if (value == null) {
					unsetName();
				}
				else {
					setName((ArgAdmin) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case NAME:
				return getName();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case NAME:
				return isSetName();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAdmin_args)
				return this.equals((getAdmin_args) that);
			return false;
		}

		public boolean equals(getAdmin_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
			if (isSetName())
				hashCode = hashCode * 8191 + name.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAdmin_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdmin_args(");
			boolean first = true;

			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			}
			else {
				sb.append(this.name);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAdmin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdmin_argsStandardScheme getScheme() {
				return new getAdmin_argsStandardScheme();
			}

		}

		private static class getAdmin_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAdmin_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAdmin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.name = new ArgAdmin();
							struct.name.read(iprot);
							struct.setNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAdmin_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					struct.name.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAdmin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdmin_argsTupleScheme getScheme() {
				return new getAdmin_argsTupleScheme();
			}

		}

		private static class getAdmin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdmin_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAdmin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetName()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetName()) {
					struct.name.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAdmin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.name = new ArgAdmin();
					struct.name.read(iprot);
					struct.setNameIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getAdmin_result implements org.apache.thrift.TBase<getAdmin_result, getAdmin_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getAdmin_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAdmin_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdmin_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdmin_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Admin success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Admin.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdmin_result.class, metaDataMap);
		}

		public getAdmin_result() {
		}

		public getAdmin_result(Admin success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAdmin_result(getAdmin_result other) {
			if (other.isSetSuccess()) {
				this.success = new Admin(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getAdmin_result deepCopy() {
			return new getAdmin_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Admin getSuccess() {
			return this.success;
		}

		public getAdmin_result setSuccess(@org.apache.thrift.annotation.Nullable Admin success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getAdmin_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Admin) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAdmin_result)
				return this.equals((getAdmin_result) that);
			return false;
		}

		public boolean equals(getAdmin_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAdmin_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdmin_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAdmin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdmin_resultStandardScheme getScheme() {
				return new getAdmin_resultStandardScheme();
			}

		}

		private static class getAdmin_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAdmin_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAdmin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Admin();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAdmin_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAdmin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdmin_resultTupleScheme getScheme() {
				return new getAdmin_resultTupleScheme();
			}

		}

		private static class getAdmin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdmin_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAdmin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAdmin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Admin();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserDetail_args
			implements org.apache.thrift.TBase<getUserDetail_args, getUserDetail_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserDetail_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserDetail_args");

		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"name", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserDetail_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserDetail_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUser name; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			NAME((short) 1, "name");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // NAME
					return NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.NAME,
					new org.apache.thrift.meta_data.FieldMetaData("name",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserDetail_args.class, metaDataMap);
		}

		public getUserDetail_args() {
		}

		public getUserDetail_args(ArgUser name) {
			this();
			this.name = name;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserDetail_args(getUserDetail_args other) {
			if (other.isSetName()) {
				this.name = new ArgUser(other.name);
			}
		}

		public getUserDetail_args deepCopy() {
			return new getUserDetail_args(this);
		}

		@Override
		public void clear() {
			this.name = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getName() {
			return this.name;
		}

		public getUserDetail_args setName(@org.apache.thrift.annotation.Nullable ArgUser name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/**
		 * Returns true if field name is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case NAME:
				if (value == null) {
					unsetName();
				}
				else {
					setName((ArgUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case NAME:
				return getName();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case NAME:
				return isSetName();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserDetail_args)
				return this.equals((getUserDetail_args) that);
			return false;
		}

		public boolean equals(getUserDetail_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
			if (isSetName())
				hashCode = hashCode * 8191 + name.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserDetail_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserDetail_args(");
			boolean first = true;

			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			}
			else {
				sb.append(this.name);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserDetail_argsStandardScheme getScheme() {
				return new getUserDetail_argsStandardScheme();
			}

		}

		private static class getUserDetail_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserDetail_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserDetail_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.name = new ArgUser();
							struct.name.read(iprot);
							struct.setNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserDetail_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					struct.name.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserDetail_argsTupleScheme getScheme() {
				return new getUserDetail_argsTupleScheme();
			}

		}

		private static class getUserDetail_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserDetail_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserDetail_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetName()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetName()) {
					struct.name.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserDetail_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.name = new ArgUser();
					struct.name.read(iprot);
					struct.setNameIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserDetail_result
			implements org.apache.thrift.TBase<getUserDetail_result, getUserDetail_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserDetail_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserDetail_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserDetail_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserDetail_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserDetail success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserDetail.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserDetail_result.class, metaDataMap);
		}

		public getUserDetail_result() {
		}

		public getUserDetail_result(UserDetail success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserDetail_result(getUserDetail_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserDetail(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserDetail_result deepCopy() {
			return new getUserDetail_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserDetail getSuccess() {
			return this.success;
		}

		public getUserDetail_result setSuccess(@org.apache.thrift.annotation.Nullable UserDetail success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserDetail_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserDetail) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserDetail_result)
				return this.equals((getUserDetail_result) that);
			return false;
		}

		public boolean equals(getUserDetail_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserDetail_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserDetail_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserDetail_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserDetail_resultStandardScheme getScheme() {
				return new getUserDetail_resultStandardScheme();
			}

		}

		private static class getUserDetail_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserDetail_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserDetail_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserDetail();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserDetail_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserDetail_resultTupleScheme getScheme() {
				return new getUserDetail_resultTupleScheme();
			}

		}

		private static class getUserDetail_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserDetail_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserDetail_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserDetail_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserDetail();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getAdminDetail_args
			implements org.apache.thrift.TBase<getAdminDetail_args, getAdminDetail_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getAdminDetail_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAdminDetail_args");

		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"name", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdminDetail_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdminDetail_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgAdmin name; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			NAME((short) 1, "name");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // NAME
					return NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.NAME,
					new org.apache.thrift.meta_data.FieldMetaData("name",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgAdmin")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminDetail_args.class, metaDataMap);
		}

		public getAdminDetail_args() {
		}

		public getAdminDetail_args(ArgAdmin name) {
			this();
			this.name = name;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAdminDetail_args(getAdminDetail_args other) {
			if (other.isSetName()) {
				this.name = new ArgAdmin(other.name);
			}
		}

		public getAdminDetail_args deepCopy() {
			return new getAdminDetail_args(this);
		}

		@Override
		public void clear() {
			this.name = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgAdmin getName() {
			return this.name;
		}

		public getAdminDetail_args setName(@org.apache.thrift.annotation.Nullable ArgAdmin name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/**
		 * Returns true if field name is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case NAME:
				if (value == null) {
					unsetName();
				}
				else {
					setName((ArgAdmin) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case NAME:
				return getName();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case NAME:
				return isSetName();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAdminDetail_args)
				return this.equals((getAdminDetail_args) that);
			return false;
		}

		public boolean equals(getAdminDetail_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
			if (isSetName())
				hashCode = hashCode * 8191 + name.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAdminDetail_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdminDetail_args(");
			boolean first = true;

			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			}
			else {
				sb.append(this.name);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAdminDetail_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminDetail_argsStandardScheme getScheme() {
				return new getAdminDetail_argsStandardScheme();
			}

		}

		private static class getAdminDetail_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAdminDetail_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminDetail_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.name = new ArgAdmin();
							struct.name.read(iprot);
							struct.setNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminDetail_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					struct.name.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAdminDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminDetail_argsTupleScheme getScheme() {
				return new getAdminDetail_argsTupleScheme();
			}

		}

		private static class getAdminDetail_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getAdminDetail_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAdminDetail_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetName()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetName()) {
					struct.name.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAdminDetail_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.name = new ArgAdmin();
					struct.name.read(iprot);
					struct.setNameIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getAdminDetail_result
			implements org.apache.thrift.TBase<getAdminDetail_result, getAdminDetail_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getAdminDetail_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAdminDetail_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdminDetail_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdminDetail_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable AdminDetail success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									AdminDetail.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminDetail_result.class, metaDataMap);
		}

		public getAdminDetail_result() {
		}

		public getAdminDetail_result(AdminDetail success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAdminDetail_result(getAdminDetail_result other) {
			if (other.isSetSuccess()) {
				this.success = new AdminDetail(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getAdminDetail_result deepCopy() {
			return new getAdminDetail_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public AdminDetail getSuccess() {
			return this.success;
		}

		public getAdminDetail_result setSuccess(@org.apache.thrift.annotation.Nullable AdminDetail success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getAdminDetail_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((AdminDetail) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAdminDetail_result)
				return this.equals((getAdminDetail_result) that);
			return false;
		}

		public boolean equals(getAdminDetail_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAdminDetail_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdminDetail_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAdminDetail_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminDetail_resultStandardScheme getScheme() {
				return new getAdminDetail_resultStandardScheme();
			}

		}

		private static class getAdminDetail_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAdminDetail_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminDetail_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new AdminDetail();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminDetail_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAdminDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminDetail_resultTupleScheme getScheme() {
				return new getAdminDetail_resultTupleScheme();
			}

		}

		private static class getAdminDetail_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getAdminDetail_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAdminDetail_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAdminDetail_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new AdminDetail();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserList_args implements org.apache.thrift.TBase<getUserList_args, getUserList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_args.class, metaDataMap);
		}

		public getUserList_args() {
		}

		public getUserList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserList_args(getUserList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserList_args deepCopy() {
			return new getUserList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserList_args)
				return this.equals((getUserList_args) that);
			return false;
		}

		public boolean equals(getUserList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_argsStandardScheme getScheme() {
				return new getUserList_argsStandardScheme();
			}

		}

		private static class getUserList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_argsTupleScheme getScheme() {
				return new getUserList_argsTupleScheme();
			}

		}

		private static class getUserList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserList_result
			implements org.apache.thrift.TBase<getUserList_result, getUserList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUser success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUser")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_result.class, metaDataMap);
		}

		public getUserList_result() {
		}

		public getUserList_result(ResultUser success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserList_result(getUserList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUser(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserList_result deepCopy() {
			return new getUserList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUser getSuccess() {
			return this.success;
		}

		public getUserList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUser success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserList_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUser) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserList_result)
				return this.equals((getUserList_result) that);
			return false;
		}

		public boolean equals(getUserList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_resultStandardScheme getScheme() {
				return new getUserList_resultStandardScheme();
			}

		}

		private static class getUserList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUser();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_resultTupleScheme getScheme() {
				return new getUserList_resultTupleScheme();
			}

		}

		private static class getUserList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUser();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getAdminList_args
			implements org.apache.thrift.TBase<getAdminList_args, getAdminList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getAdminList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAdminList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdminList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdminList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminList_args.class, metaDataMap);
		}

		public getAdminList_args() {
		}

		public getAdminList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAdminList_args(getAdminList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getAdminList_args deepCopy() {
			return new getAdminList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getAdminList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAdminList_args)
				return this.equals((getAdminList_args) that);
			return false;
		}

		public boolean equals(getAdminList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAdminList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdminList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAdminList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminList_argsStandardScheme getScheme() {
				return new getAdminList_argsStandardScheme();
			}

		}

		private static class getAdminList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAdminList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAdminList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminList_argsTupleScheme getScheme() {
				return new getAdminList_argsTupleScheme();
			}

		}

		private static class getAdminList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getAdminList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAdminList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAdminList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getAdminList_result
			implements org.apache.thrift.TBase<getAdminList_result, getAdminList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getAdminList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAdminList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdminList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdminList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultAdmin success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultAdmin")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminList_result.class, metaDataMap);
		}

		public getAdminList_result() {
		}

		public getAdminList_result(ResultAdmin success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAdminList_result(getAdminList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultAdmin(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getAdminList_result deepCopy() {
			return new getAdminList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultAdmin getSuccess() {
			return this.success;
		}

		public getAdminList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultAdmin success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getAdminList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultAdmin) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAdminList_result)
				return this.equals((getAdminList_result) that);
			return false;
		}

		public boolean equals(getAdminList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAdminList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdminList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAdminList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminList_resultStandardScheme getScheme() {
				return new getAdminList_resultStandardScheme();
			}

		}

		private static class getAdminList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAdminList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultAdmin();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAdminList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminList_resultTupleScheme getScheme() {
				return new getAdminList_resultTupleScheme();
			}

		}

		private static class getAdminList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getAdminList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAdminList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAdminList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultAdmin();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserSessionList_args
			implements org.apache.thrift.TBase<getUserSessionList_args, getUserSessionList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserSessionList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserSessionList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserSessionList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserSessionList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSessionList_args.class, metaDataMap);
		}

		public getUserSessionList_args() {
		}

		public getUserSessionList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserSessionList_args(getUserSessionList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserSessionList_args deepCopy() {
			return new getUserSessionList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserSessionList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserSessionList_args)
				return this.equals((getUserSessionList_args) that);
			return false;
		}

		public boolean equals(getUserSessionList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserSessionList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserSessionList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserSessionList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserSessionList_argsStandardScheme getScheme() {
				return new getUserSessionList_argsStandardScheme();
			}

		}

		private static class getUserSessionList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserSessionList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSessionList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSessionList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserSessionList_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserSessionList_argsTupleScheme getScheme() {
				return new getUserSessionList_argsTupleScheme();
			}

		}

		private static class getUserSessionList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserSessionList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserSessionList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserSessionList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserSessionList_result
			implements org.apache.thrift.TBase<getUserSessionList_result, getUserSessionList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserSessionList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserSessionList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserSessionList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserSessionList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUserSession success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUserSession")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSessionList_result.class,
					metaDataMap);
		}

		public getUserSessionList_result() {
		}

		public getUserSessionList_result(ResultUserSession success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserSessionList_result(getUserSessionList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUserSession(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserSessionList_result deepCopy() {
			return new getUserSessionList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUserSession getSuccess() {
			return this.success;
		}

		public getUserSessionList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUserSession success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserSessionList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUserSession) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserSessionList_result)
				return this.equals((getUserSessionList_result) that);
			return false;
		}

		public boolean equals(getUserSessionList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserSessionList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserSessionList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserSessionList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserSessionList_resultStandardScheme getScheme() {
				return new getUserSessionList_resultStandardScheme();
			}

		}

		private static class getUserSessionList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserSessionList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSessionList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUserSession();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSessionList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserSessionList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserSessionList_resultTupleScheme getScheme() {
				return new getUserSessionList_resultTupleScheme();
			}

		}

		private static class getUserSessionList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserSessionList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserSessionList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserSessionList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUserSession();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createUser_args implements org.apache.thrift.TBase<createUser_args, createUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<createUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createUser_args");

		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"name", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"password", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"profile", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUser name; // required

		public @org.apache.thrift.annotation.Nullable ArgPassword password; // required

		public @org.apache.thrift.annotation.Nullable ArgUserProfile profile; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			NAME((short) 1, "name"), PASSWORD((short) 2, "password"), PROFILE((short) 3, "profile");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // NAME
					return NAME;
				case 2: // PASSWORD
					return PASSWORD;
				case 3: // PROFILE
					return PROFILE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.NAME,
					new org.apache.thrift.meta_data.FieldMetaData("name",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			tmpMap.put(_Fields.PASSWORD,
					new org.apache.thrift.meta_data.FieldMetaData("password",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgPassword")));
			tmpMap.put(_Fields.PROFILE,
					new org.apache.thrift.meta_data.FieldMetaData("profile",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUserProfile")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUser_args.class, metaDataMap);
		}

		public createUser_args() {
		}

		public createUser_args(ArgUser name, ArgPassword password, ArgUserProfile profile) {
			this();
			this.name = name;
			this.password = password;
			this.profile = profile;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createUser_args(createUser_args other) {
			if (other.isSetName()) {
				this.name = new ArgUser(other.name);
			}
			if (other.isSetPassword()) {
				this.password = new ArgPassword(other.password);
			}
			if (other.isSetProfile()) {
				this.profile = new ArgUserProfile(other.profile);
			}
		}

		public createUser_args deepCopy() {
			return new createUser_args(this);
		}

		@Override
		public void clear() {
			this.name = null;
			this.password = null;
			this.profile = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getName() {
			return this.name;
		}

		public createUser_args setName(@org.apache.thrift.annotation.Nullable ArgUser name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/**
		 * Returns true if field name is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgPassword getPassword() {
			return this.password;
		}

		public createUser_args setPassword(@org.apache.thrift.annotation.Nullable ArgPassword password) {
			this.password = password;
			return this;
		}

		public void unsetPassword() {
			this.password = null;
		}

		/**
		 * Returns true if field password is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPassword() {
			return this.password != null;
		}

		public void setPasswordIsSet(boolean value) {
			if (!value) {
				this.password = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUserProfile getProfile() {
			return this.profile;
		}

		public createUser_args setProfile(@org.apache.thrift.annotation.Nullable ArgUserProfile profile) {
			this.profile = profile;
			return this;
		}

		public void unsetProfile() {
			this.profile = null;
		}

		/**
		 * Returns true if field profile is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetProfile() {
			return this.profile != null;
		}

		public void setProfileIsSet(boolean value) {
			if (!value) {
				this.profile = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case NAME:
				if (value == null) {
					unsetName();
				}
				else {
					setName((ArgUser) value);
				}
				break;

			case PASSWORD:
				if (value == null) {
					unsetPassword();
				}
				else {
					setPassword((ArgPassword) value);
				}
				break;

			case PROFILE:
				if (value == null) {
					unsetProfile();
				}
				else {
					setProfile((ArgUserProfile) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case NAME:
				return getName();

			case PASSWORD:
				return getPassword();

			case PROFILE:
				return getProfile();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case NAME:
				return isSetName();
			case PASSWORD:
				return isSetPassword();
			case PROFILE:
				return isSetProfile();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createUser_args)
				return this.equals((createUser_args) that);
			return false;
		}

		public boolean equals(createUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			boolean this_present_password = true && this.isSetPassword();
			boolean that_present_password = true && that.isSetPassword();
			if (this_present_password || that_present_password) {
				if (!(this_present_password && that_present_password))
					return false;
				if (!this.password.equals(that.password))
					return false;
			}

			boolean this_present_profile = true && this.isSetProfile();
			boolean that_present_profile = true && that.isSetProfile();
			if (this_present_profile || that_present_profile) {
				if (!(this_present_profile && that_present_profile))
					return false;
				if (!this.profile.equals(that.profile))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
			if (isSetName())
				hashCode = hashCode * 8191 + name.hashCode();

			hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
			if (isSetPassword())
				hashCode = hashCode * 8191 + password.hashCode();

			hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
			if (isSetProfile())
				hashCode = hashCode * 8191 + profile.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPassword()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetProfile()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createUser_args(");
			boolean first = true;

			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			}
			else {
				sb.append(this.name);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("password:");
			if (this.password == null) {
				sb.append("null");
			}
			else {
				sb.append(this.password);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("profile:");
			if (this.profile == null) {
				sb.append("null");
			}
			else {
				sb.append(this.profile);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createUser_argsStandardScheme getScheme() {
				return new createUser_argsStandardScheme();
			}

		}

		private static class createUser_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.name = new ArgUser();
							struct.name.read(iprot);
							struct.setNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // PASSWORD
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.password = new ArgPassword();
							struct.password.read(iprot);
							struct.setPasswordIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // PROFILE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.profile = new ArgUserProfile();
							struct.profile.read(iprot);
							struct.setProfileIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					struct.name.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.password != null) {
					oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
					struct.password.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.profile != null) {
					oprot.writeFieldBegin(PROFILE_FIELD_DESC);
					struct.profile.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createUser_argsTupleScheme getScheme() {
				return new createUser_argsTupleScheme();
			}

		}

		private static class createUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetName()) {
					optionals.set(0);
				}
				if (struct.isSetPassword()) {
					optionals.set(1);
				}
				if (struct.isSetProfile()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetName()) {
					struct.name.write(oprot);
				}
				if (struct.isSetPassword()) {
					struct.password.write(oprot);
				}
				if (struct.isSetProfile()) {
					struct.profile.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.name = new ArgUser();
					struct.name.read(iprot);
					struct.setNameIsSet(true);
				}
				if (incoming.get(1)) {
					struct.password = new ArgPassword();
					struct.password.read(iprot);
					struct.setPasswordIsSet(true);
				}
				if (incoming.get(2)) {
					struct.profile = new ArgUserProfile();
					struct.profile.read(iprot);
					struct.setProfileIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createUser_result
			implements org.apache.thrift.TBase<createUser_result, createUser_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<createUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createUser_result.class, metaDataMap);
		}

		public createUser_result() {
		}

		public createUser_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createUser_result(createUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public createUser_result deepCopy() {
			return new createUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public createUser_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public createUser_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createUser_result)
				return this.equals((createUser_result) that);
			return false;
		}

		public boolean equals(createUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createUser_resultStandardScheme getScheme() {
				return new createUser_resultStandardScheme();
			}

		}

		private static class createUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createUser_resultTupleScheme getScheme() {
				return new createUser_resultTupleScheme();
			}

		}

		private static class createUser_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<createUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class ensureUser_args implements org.apache.thrift.TBase<ensureUser_args, ensureUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<ensureUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ensureUser_args");

		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"name", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"password", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"profile", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUser name; // required

		public @org.apache.thrift.annotation.Nullable ArgPassword password; // required

		public @org.apache.thrift.annotation.Nullable ArgUserProfile profile; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			NAME((short) 1, "name"), PASSWORD((short) 2, "password"), PROFILE((short) 3, "profile");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // NAME
					return NAME;
				case 2: // PASSWORD
					return PASSWORD;
				case 3: // PROFILE
					return PROFILE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.NAME,
					new org.apache.thrift.meta_data.FieldMetaData("name",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			tmpMap.put(_Fields.PASSWORD,
					new org.apache.thrift.meta_data.FieldMetaData("password",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgPassword")));
			tmpMap.put(_Fields.PROFILE,
					new org.apache.thrift.meta_data.FieldMetaData("profile",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUserProfile")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureUser_args.class, metaDataMap);
		}

		public ensureUser_args() {
		}

		public ensureUser_args(ArgUser name, ArgPassword password, ArgUserProfile profile) {
			this();
			this.name = name;
			this.password = password;
			this.profile = profile;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ensureUser_args(ensureUser_args other) {
			if (other.isSetName()) {
				this.name = new ArgUser(other.name);
			}
			if (other.isSetPassword()) {
				this.password = new ArgPassword(other.password);
			}
			if (other.isSetProfile()) {
				this.profile = new ArgUserProfile(other.profile);
			}
		}

		public ensureUser_args deepCopy() {
			return new ensureUser_args(this);
		}

		@Override
		public void clear() {
			this.name = null;
			this.password = null;
			this.profile = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getName() {
			return this.name;
		}

		public ensureUser_args setName(@org.apache.thrift.annotation.Nullable ArgUser name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/**
		 * Returns true if field name is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgPassword getPassword() {
			return this.password;
		}

		public ensureUser_args setPassword(@org.apache.thrift.annotation.Nullable ArgPassword password) {
			this.password = password;
			return this;
		}

		public void unsetPassword() {
			this.password = null;
		}

		/**
		 * Returns true if field password is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPassword() {
			return this.password != null;
		}

		public void setPasswordIsSet(boolean value) {
			if (!value) {
				this.password = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUserProfile getProfile() {
			return this.profile;
		}

		public ensureUser_args setProfile(@org.apache.thrift.annotation.Nullable ArgUserProfile profile) {
			this.profile = profile;
			return this;
		}

		public void unsetProfile() {
			this.profile = null;
		}

		/**
		 * Returns true if field profile is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetProfile() {
			return this.profile != null;
		}

		public void setProfileIsSet(boolean value) {
			if (!value) {
				this.profile = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case NAME:
				if (value == null) {
					unsetName();
				}
				else {
					setName((ArgUser) value);
				}
				break;

			case PASSWORD:
				if (value == null) {
					unsetPassword();
				}
				else {
					setPassword((ArgPassword) value);
				}
				break;

			case PROFILE:
				if (value == null) {
					unsetProfile();
				}
				else {
					setProfile((ArgUserProfile) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case NAME:
				return getName();

			case PASSWORD:
				return getPassword();

			case PROFILE:
				return getProfile();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case NAME:
				return isSetName();
			case PASSWORD:
				return isSetPassword();
			case PROFILE:
				return isSetProfile();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof ensureUser_args)
				return this.equals((ensureUser_args) that);
			return false;
		}

		public boolean equals(ensureUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			boolean this_present_password = true && this.isSetPassword();
			boolean that_present_password = true && that.isSetPassword();
			if (this_present_password || that_present_password) {
				if (!(this_present_password && that_present_password))
					return false;
				if (!this.password.equals(that.password))
					return false;
			}

			boolean this_present_profile = true && this.isSetProfile();
			boolean that_present_profile = true && that.isSetProfile();
			if (this_present_profile || that_present_profile) {
				if (!(this_present_profile && that_present_profile))
					return false;
				if (!this.profile.equals(that.profile))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
			if (isSetName())
				hashCode = hashCode * 8191 + name.hashCode();

			hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
			if (isSetPassword())
				hashCode = hashCode * 8191 + password.hashCode();

			hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
			if (isSetProfile())
				hashCode = hashCode * 8191 + profile.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(ensureUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPassword()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetProfile()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureUser_args(");
			boolean first = true;

			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			}
			else {
				sb.append(this.name);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("password:");
			if (this.password == null) {
				sb.append("null");
			}
			else {
				sb.append(this.password);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("profile:");
			if (this.profile == null) {
				sb.append("null");
			}
			else {
				sb.append(this.profile);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ensureUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureUser_argsStandardScheme getScheme() {
				return new ensureUser_argsStandardScheme();
			}

		}

		private static class ensureUser_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<ensureUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ensureUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.name = new ArgUser();
							struct.name.read(iprot);
							struct.setNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // PASSWORD
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.password = new ArgPassword();
							struct.password.read(iprot);
							struct.setPasswordIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // PROFILE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.profile = new ArgUserProfile();
							struct.profile.read(iprot);
							struct.setProfileIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ensureUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					struct.name.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.password != null) {
					oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
					struct.password.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.profile != null) {
					oprot.writeFieldBegin(PROFILE_FIELD_DESC);
					struct.profile.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ensureUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureUser_argsTupleScheme getScheme() {
				return new ensureUser_argsTupleScheme();
			}

		}

		private static class ensureUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ensureUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ensureUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetName()) {
					optionals.set(0);
				}
				if (struct.isSetPassword()) {
					optionals.set(1);
				}
				if (struct.isSetProfile()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetName()) {
					struct.name.write(oprot);
				}
				if (struct.isSetPassword()) {
					struct.password.write(oprot);
				}
				if (struct.isSetProfile()) {
					struct.profile.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ensureUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.name = new ArgUser();
					struct.name.read(iprot);
					struct.setNameIsSet(true);
				}
				if (incoming.get(1)) {
					struct.password = new ArgPassword();
					struct.password.read(iprot);
					struct.setPasswordIsSet(true);
				}
				if (incoming.get(2)) {
					struct.profile = new ArgUserProfile();
					struct.profile.read(iprot);
					struct.setProfileIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class ensureUser_result
			implements org.apache.thrift.TBase<ensureUser_result, ensureUser_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<ensureUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ensureUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureUser_result.class, metaDataMap);
		}

		public ensureUser_result() {
		}

		public ensureUser_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ensureUser_result(ensureUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public ensureUser_result deepCopy() {
			return new ensureUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public ensureUser_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public ensureUser_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof ensureUser_result)
				return this.equals((ensureUser_result) that);
			return false;
		}

		public boolean equals(ensureUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(ensureUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ensureUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureUser_resultStandardScheme getScheme() {
				return new ensureUser_resultStandardScheme();
			}

		}

		private static class ensureUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<ensureUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ensureUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ensureUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ensureUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureUser_resultTupleScheme getScheme() {
				return new ensureUser_resultTupleScheme();
			}

		}

		private static class ensureUser_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<ensureUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ensureUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ensureUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createAdmin_args implements org.apache.thrift.TBase<createAdmin_args, createAdmin_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<createAdmin_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createAdmin_args");

		private static final org.apache.thrift.protocol.TField ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"admin", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"password", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

		private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"profile", org.apache.thrift.protocol.TType.STRUCT, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAdmin_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAdmin_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgAdmin admin; // required

		public @org.apache.thrift.annotation.Nullable ArgUser user; // required

		public @org.apache.thrift.annotation.Nullable ArgPassword password; // required

		public @org.apache.thrift.annotation.Nullable ArgUserProfile profile; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			ADMIN((short) 1, "admin"), USER((short) 2, "user"), PASSWORD((short) 3, "password"), PROFILE((short) 4,
					"profile");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ADMIN
					return ADMIN;
				case 2: // USER
					return USER;
				case 3: // PASSWORD
					return PASSWORD;
				case 4: // PROFILE
					return PROFILE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ADMIN,
					new org.apache.thrift.meta_data.FieldMetaData("admin",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgAdmin")));
			tmpMap.put(_Fields.USER,
					new org.apache.thrift.meta_data.FieldMetaData("user",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			tmpMap.put(_Fields.PASSWORD,
					new org.apache.thrift.meta_data.FieldMetaData("password",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgPassword")));
			tmpMap.put(_Fields.PROFILE,
					new org.apache.thrift.meta_data.FieldMetaData("profile",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUserProfile")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAdmin_args.class, metaDataMap);
		}

		public createAdmin_args() {
		}

		public createAdmin_args(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile) {
			this();
			this.admin = admin;
			this.user = user;
			this.password = password;
			this.profile = profile;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createAdmin_args(createAdmin_args other) {
			if (other.isSetAdmin()) {
				this.admin = new ArgAdmin(other.admin);
			}
			if (other.isSetUser()) {
				this.user = new ArgUser(other.user);
			}
			if (other.isSetPassword()) {
				this.password = new ArgPassword(other.password);
			}
			if (other.isSetProfile()) {
				this.profile = new ArgUserProfile(other.profile);
			}
		}

		public createAdmin_args deepCopy() {
			return new createAdmin_args(this);
		}

		@Override
		public void clear() {
			this.admin = null;
			this.user = null;
			this.password = null;
			this.profile = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgAdmin getAdmin() {
			return this.admin;
		}

		public createAdmin_args setAdmin(@org.apache.thrift.annotation.Nullable ArgAdmin admin) {
			this.admin = admin;
			return this;
		}

		public void unsetAdmin() {
			this.admin = null;
		}

		/**
		 * Returns true if field admin is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetAdmin() {
			return this.admin != null;
		}

		public void setAdminIsSet(boolean value) {
			if (!value) {
				this.admin = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getUser() {
			return this.user;
		}

		public createAdmin_args setUser(@org.apache.thrift.annotation.Nullable ArgUser user) {
			this.user = user;
			return this;
		}

		public void unsetUser() {
			this.user = null;
		}

		/**
		 * Returns true if field user is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUser() {
			return this.user != null;
		}

		public void setUserIsSet(boolean value) {
			if (!value) {
				this.user = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgPassword getPassword() {
			return this.password;
		}

		public createAdmin_args setPassword(@org.apache.thrift.annotation.Nullable ArgPassword password) {
			this.password = password;
			return this;
		}

		public void unsetPassword() {
			this.password = null;
		}

		/**
		 * Returns true if field password is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPassword() {
			return this.password != null;
		}

		public void setPasswordIsSet(boolean value) {
			if (!value) {
				this.password = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUserProfile getProfile() {
			return this.profile;
		}

		public createAdmin_args setProfile(@org.apache.thrift.annotation.Nullable ArgUserProfile profile) {
			this.profile = profile;
			return this;
		}

		public void unsetProfile() {
			this.profile = null;
		}

		/**
		 * Returns true if field profile is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetProfile() {
			return this.profile != null;
		}

		public void setProfileIsSet(boolean value) {
			if (!value) {
				this.profile = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case ADMIN:
				if (value == null) {
					unsetAdmin();
				}
				else {
					setAdmin((ArgAdmin) value);
				}
				break;

			case USER:
				if (value == null) {
					unsetUser();
				}
				else {
					setUser((ArgUser) value);
				}
				break;

			case PASSWORD:
				if (value == null) {
					unsetPassword();
				}
				else {
					setPassword((ArgPassword) value);
				}
				break;

			case PROFILE:
				if (value == null) {
					unsetProfile();
				}
				else {
					setProfile((ArgUserProfile) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ADMIN:
				return getAdmin();

			case USER:
				return getUser();

			case PASSWORD:
				return getPassword();

			case PROFILE:
				return getProfile();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ADMIN:
				return isSetAdmin();
			case USER:
				return isSetUser();
			case PASSWORD:
				return isSetPassword();
			case PROFILE:
				return isSetProfile();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createAdmin_args)
				return this.equals((createAdmin_args) that);
			return false;
		}

		public boolean equals(createAdmin_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_admin = true && this.isSetAdmin();
			boolean that_present_admin = true && that.isSetAdmin();
			if (this_present_admin || that_present_admin) {
				if (!(this_present_admin && that_present_admin))
					return false;
				if (!this.admin.equals(that.admin))
					return false;
			}

			boolean this_present_user = true && this.isSetUser();
			boolean that_present_user = true && that.isSetUser();
			if (this_present_user || that_present_user) {
				if (!(this_present_user && that_present_user))
					return false;
				if (!this.user.equals(that.user))
					return false;
			}

			boolean this_present_password = true && this.isSetPassword();
			boolean that_present_password = true && that.isSetPassword();
			if (this_present_password || that_present_password) {
				if (!(this_present_password && that_present_password))
					return false;
				if (!this.password.equals(that.password))
					return false;
			}

			boolean this_present_profile = true && this.isSetProfile();
			boolean that_present_profile = true && that.isSetProfile();
			if (this_present_profile || that_present_profile) {
				if (!(this_present_profile && that_present_profile))
					return false;
				if (!this.profile.equals(that.profile))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetAdmin()) ? 131071 : 524287);
			if (isSetAdmin())
				hashCode = hashCode * 8191 + admin.hashCode();

			hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
			if (isSetUser())
				hashCode = hashCode * 8191 + user.hashCode();

			hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
			if (isSetPassword())
				hashCode = hashCode * 8191 + password.hashCode();

			hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
			if (isSetProfile())
				hashCode = hashCode * 8191 + profile.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createAdmin_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetAdmin()).compareTo(other.isSetAdmin());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAdmin()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admin, other.admin);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPassword()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetProfile()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createAdmin_args(");
			boolean first = true;

			sb.append("admin:");
			if (this.admin == null) {
				sb.append("null");
			}
			else {
				sb.append(this.admin);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user:");
			if (this.user == null) {
				sb.append("null");
			}
			else {
				sb.append(this.user);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("password:");
			if (this.password == null) {
				sb.append("null");
			}
			else {
				sb.append(this.password);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("profile:");
			if (this.profile == null) {
				sb.append("null");
			}
			else {
				sb.append(this.profile);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createAdmin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createAdmin_argsStandardScheme getScheme() {
				return new createAdmin_argsStandardScheme();
			}

		}

		private static class createAdmin_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createAdmin_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createAdmin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ADMIN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.admin = new ArgAdmin();
							struct.admin.read(iprot);
							struct.setAdminIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // USER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user = new ArgUser();
							struct.user.read(iprot);
							struct.setUserIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // PASSWORD
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.password = new ArgPassword();
							struct.password.read(iprot);
							struct.setPasswordIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // PROFILE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.profile = new ArgUserProfile();
							struct.profile.read(iprot);
							struct.setProfileIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createAdmin_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.admin != null) {
					oprot.writeFieldBegin(ADMIN_FIELD_DESC);
					struct.admin.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.user != null) {
					oprot.writeFieldBegin(USER_FIELD_DESC);
					struct.user.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.password != null) {
					oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
					struct.password.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.profile != null) {
					oprot.writeFieldBegin(PROFILE_FIELD_DESC);
					struct.profile.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createAdmin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createAdmin_argsTupleScheme getScheme() {
				return new createAdmin_argsTupleScheme();
			}

		}

		private static class createAdmin_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<createAdmin_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createAdmin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetAdmin()) {
					optionals.set(0);
				}
				if (struct.isSetUser()) {
					optionals.set(1);
				}
				if (struct.isSetPassword()) {
					optionals.set(2);
				}
				if (struct.isSetProfile()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetAdmin()) {
					struct.admin.write(oprot);
				}
				if (struct.isSetUser()) {
					struct.user.write(oprot);
				}
				if (struct.isSetPassword()) {
					struct.password.write(oprot);
				}
				if (struct.isSetProfile()) {
					struct.profile.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createAdmin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.admin = new ArgAdmin();
					struct.admin.read(iprot);
					struct.setAdminIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user = new ArgUser();
					struct.user.read(iprot);
					struct.setUserIsSet(true);
				}
				if (incoming.get(2)) {
					struct.password = new ArgPassword();
					struct.password.read(iprot);
					struct.setPasswordIsSet(true);
				}
				if (incoming.get(3)) {
					struct.profile = new ArgUserProfile();
					struct.profile.read(iprot);
					struct.setProfileIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createAdmin_result
			implements org.apache.thrift.TBase<createAdmin_result, createAdmin_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<createAdmin_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createAdmin_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAdmin_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAdmin_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Admin success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Admin.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAdmin_result.class, metaDataMap);
		}

		public createAdmin_result() {
		}

		public createAdmin_result(Admin success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createAdmin_result(createAdmin_result other) {
			if (other.isSetSuccess()) {
				this.success = new Admin(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public createAdmin_result deepCopy() {
			return new createAdmin_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Admin getSuccess() {
			return this.success;
		}

		public createAdmin_result setSuccess(@org.apache.thrift.annotation.Nullable Admin success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public createAdmin_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Admin) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createAdmin_result)
				return this.equals((createAdmin_result) that);
			return false;
		}

		public boolean equals(createAdmin_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createAdmin_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createAdmin_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createAdmin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createAdmin_resultStandardScheme getScheme() {
				return new createAdmin_resultStandardScheme();
			}

		}

		private static class createAdmin_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createAdmin_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createAdmin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Admin();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createAdmin_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createAdmin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createAdmin_resultTupleScheme getScheme() {
				return new createAdmin_resultTupleScheme();
			}

		}

		private static class createAdmin_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<createAdmin_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createAdmin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createAdmin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Admin();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class ensureAdmin_args implements org.apache.thrift.TBase<ensureAdmin_args, ensureAdmin_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<ensureAdmin_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ensureAdmin_args");

		private static final org.apache.thrift.protocol.TField ADMIN_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"admin", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"user", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"password", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

		private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"profile", org.apache.thrift.protocol.TType.STRUCT, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureAdmin_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureAdmin_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgAdmin admin; // required

		public @org.apache.thrift.annotation.Nullable ArgUser user; // required

		public @org.apache.thrift.annotation.Nullable ArgPassword password; // required

		public @org.apache.thrift.annotation.Nullable ArgUserProfile profile; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			ADMIN((short) 1, "admin"), USER((short) 2, "user"), PASSWORD((short) 3, "password"), PROFILE((short) 4,
					"profile");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ADMIN
					return ADMIN;
				case 2: // USER
					return USER;
				case 3: // PASSWORD
					return PASSWORD;
				case 4: // PROFILE
					return PROFILE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ADMIN,
					new org.apache.thrift.meta_data.FieldMetaData("admin",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgAdmin")));
			tmpMap.put(_Fields.USER,
					new org.apache.thrift.meta_data.FieldMetaData("user",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			tmpMap.put(_Fields.PASSWORD,
					new org.apache.thrift.meta_data.FieldMetaData("password",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgPassword")));
			tmpMap.put(_Fields.PROFILE,
					new org.apache.thrift.meta_data.FieldMetaData("profile",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUserProfile")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureAdmin_args.class, metaDataMap);
		}

		public ensureAdmin_args() {
		}

		public ensureAdmin_args(ArgAdmin admin, ArgUser user, ArgPassword password, ArgUserProfile profile) {
			this();
			this.admin = admin;
			this.user = user;
			this.password = password;
			this.profile = profile;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ensureAdmin_args(ensureAdmin_args other) {
			if (other.isSetAdmin()) {
				this.admin = new ArgAdmin(other.admin);
			}
			if (other.isSetUser()) {
				this.user = new ArgUser(other.user);
			}
			if (other.isSetPassword()) {
				this.password = new ArgPassword(other.password);
			}
			if (other.isSetProfile()) {
				this.profile = new ArgUserProfile(other.profile);
			}
		}

		public ensureAdmin_args deepCopy() {
			return new ensureAdmin_args(this);
		}

		@Override
		public void clear() {
			this.admin = null;
			this.user = null;
			this.password = null;
			this.profile = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgAdmin getAdmin() {
			return this.admin;
		}

		public ensureAdmin_args setAdmin(@org.apache.thrift.annotation.Nullable ArgAdmin admin) {
			this.admin = admin;
			return this;
		}

		public void unsetAdmin() {
			this.admin = null;
		}

		/**
		 * Returns true if field admin is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetAdmin() {
			return this.admin != null;
		}

		public void setAdminIsSet(boolean value) {
			if (!value) {
				this.admin = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getUser() {
			return this.user;
		}

		public ensureAdmin_args setUser(@org.apache.thrift.annotation.Nullable ArgUser user) {
			this.user = user;
			return this;
		}

		public void unsetUser() {
			this.user = null;
		}

		/**
		 * Returns true if field user is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUser() {
			return this.user != null;
		}

		public void setUserIsSet(boolean value) {
			if (!value) {
				this.user = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgPassword getPassword() {
			return this.password;
		}

		public ensureAdmin_args setPassword(@org.apache.thrift.annotation.Nullable ArgPassword password) {
			this.password = password;
			return this;
		}

		public void unsetPassword() {
			this.password = null;
		}

		/**
		 * Returns true if field password is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPassword() {
			return this.password != null;
		}

		public void setPasswordIsSet(boolean value) {
			if (!value) {
				this.password = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUserProfile getProfile() {
			return this.profile;
		}

		public ensureAdmin_args setProfile(@org.apache.thrift.annotation.Nullable ArgUserProfile profile) {
			this.profile = profile;
			return this;
		}

		public void unsetProfile() {
			this.profile = null;
		}

		/**
		 * Returns true if field profile is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetProfile() {
			return this.profile != null;
		}

		public void setProfileIsSet(boolean value) {
			if (!value) {
				this.profile = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case ADMIN:
				if (value == null) {
					unsetAdmin();
				}
				else {
					setAdmin((ArgAdmin) value);
				}
				break;

			case USER:
				if (value == null) {
					unsetUser();
				}
				else {
					setUser((ArgUser) value);
				}
				break;

			case PASSWORD:
				if (value == null) {
					unsetPassword();
				}
				else {
					setPassword((ArgPassword) value);
				}
				break;

			case PROFILE:
				if (value == null) {
					unsetProfile();
				}
				else {
					setProfile((ArgUserProfile) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ADMIN:
				return getAdmin();

			case USER:
				return getUser();

			case PASSWORD:
				return getPassword();

			case PROFILE:
				return getProfile();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ADMIN:
				return isSetAdmin();
			case USER:
				return isSetUser();
			case PASSWORD:
				return isSetPassword();
			case PROFILE:
				return isSetProfile();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof ensureAdmin_args)
				return this.equals((ensureAdmin_args) that);
			return false;
		}

		public boolean equals(ensureAdmin_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_admin = true && this.isSetAdmin();
			boolean that_present_admin = true && that.isSetAdmin();
			if (this_present_admin || that_present_admin) {
				if (!(this_present_admin && that_present_admin))
					return false;
				if (!this.admin.equals(that.admin))
					return false;
			}

			boolean this_present_user = true && this.isSetUser();
			boolean that_present_user = true && that.isSetUser();
			if (this_present_user || that_present_user) {
				if (!(this_present_user && that_present_user))
					return false;
				if (!this.user.equals(that.user))
					return false;
			}

			boolean this_present_password = true && this.isSetPassword();
			boolean that_present_password = true && that.isSetPassword();
			if (this_present_password || that_present_password) {
				if (!(this_present_password && that_present_password))
					return false;
				if (!this.password.equals(that.password))
					return false;
			}

			boolean this_present_profile = true && this.isSetProfile();
			boolean that_present_profile = true && that.isSetProfile();
			if (this_present_profile || that_present_profile) {
				if (!(this_present_profile && that_present_profile))
					return false;
				if (!this.profile.equals(that.profile))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetAdmin()) ? 131071 : 524287);
			if (isSetAdmin())
				hashCode = hashCode * 8191 + admin.hashCode();

			hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
			if (isSetUser())
				hashCode = hashCode * 8191 + user.hashCode();

			hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
			if (isSetPassword())
				hashCode = hashCode * 8191 + password.hashCode();

			hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
			if (isSetProfile())
				hashCode = hashCode * 8191 + profile.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(ensureAdmin_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetAdmin()).compareTo(other.isSetAdmin());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAdmin()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.admin, other.admin);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUser()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPassword()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetProfile()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureAdmin_args(");
			boolean first = true;

			sb.append("admin:");
			if (this.admin == null) {
				sb.append("null");
			}
			else {
				sb.append(this.admin);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("user:");
			if (this.user == null) {
				sb.append("null");
			}
			else {
				sb.append(this.user);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("password:");
			if (this.password == null) {
				sb.append("null");
			}
			else {
				sb.append(this.password);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("profile:");
			if (this.profile == null) {
				sb.append("null");
			}
			else {
				sb.append(this.profile);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ensureAdmin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureAdmin_argsStandardScheme getScheme() {
				return new ensureAdmin_argsStandardScheme();
			}

		}

		private static class ensureAdmin_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<ensureAdmin_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ensureAdmin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ADMIN
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.admin = new ArgAdmin();
							struct.admin.read(iprot);
							struct.setAdminIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // USER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.user = new ArgUser();
							struct.user.read(iprot);
							struct.setUserIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // PASSWORD
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.password = new ArgPassword();
							struct.password.read(iprot);
							struct.setPasswordIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // PROFILE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.profile = new ArgUserProfile();
							struct.profile.read(iprot);
							struct.setProfileIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ensureAdmin_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.admin != null) {
					oprot.writeFieldBegin(ADMIN_FIELD_DESC);
					struct.admin.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.user != null) {
					oprot.writeFieldBegin(USER_FIELD_DESC);
					struct.user.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.password != null) {
					oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
					struct.password.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.profile != null) {
					oprot.writeFieldBegin(PROFILE_FIELD_DESC);
					struct.profile.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ensureAdmin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureAdmin_argsTupleScheme getScheme() {
				return new ensureAdmin_argsTupleScheme();
			}

		}

		private static class ensureAdmin_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<ensureAdmin_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ensureAdmin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetAdmin()) {
					optionals.set(0);
				}
				if (struct.isSetUser()) {
					optionals.set(1);
				}
				if (struct.isSetPassword()) {
					optionals.set(2);
				}
				if (struct.isSetProfile()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetAdmin()) {
					struct.admin.write(oprot);
				}
				if (struct.isSetUser()) {
					struct.user.write(oprot);
				}
				if (struct.isSetPassword()) {
					struct.password.write(oprot);
				}
				if (struct.isSetProfile()) {
					struct.profile.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ensureAdmin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.admin = new ArgAdmin();
					struct.admin.read(iprot);
					struct.setAdminIsSet(true);
				}
				if (incoming.get(1)) {
					struct.user = new ArgUser();
					struct.user.read(iprot);
					struct.setUserIsSet(true);
				}
				if (incoming.get(2)) {
					struct.password = new ArgPassword();
					struct.password.read(iprot);
					struct.setPasswordIsSet(true);
				}
				if (incoming.get(3)) {
					struct.profile = new ArgUserProfile();
					struct.profile.read(iprot);
					struct.setProfileIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class ensureAdmin_result
			implements org.apache.thrift.TBase<ensureAdmin_result, ensureAdmin_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<ensureAdmin_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ensureAdmin_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureAdmin_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureAdmin_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Admin success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Admin.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureAdmin_result.class, metaDataMap);
		}

		public ensureAdmin_result() {
		}

		public ensureAdmin_result(Admin success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ensureAdmin_result(ensureAdmin_result other) {
			if (other.isSetSuccess()) {
				this.success = new Admin(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public ensureAdmin_result deepCopy() {
			return new ensureAdmin_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Admin getSuccess() {
			return this.success;
		}

		public ensureAdmin_result setSuccess(@org.apache.thrift.annotation.Nullable Admin success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public ensureAdmin_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Admin) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof ensureAdmin_result)
				return this.equals((ensureAdmin_result) that);
			return false;
		}

		public boolean equals(ensureAdmin_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(ensureAdmin_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureAdmin_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ensureAdmin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureAdmin_resultStandardScheme getScheme() {
				return new ensureAdmin_resultStandardScheme();
			}

		}

		private static class ensureAdmin_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<ensureAdmin_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ensureAdmin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Admin();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ensureAdmin_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ensureAdmin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureAdmin_resultTupleScheme getScheme() {
				return new ensureAdmin_resultTupleScheme();
			}

		}

		private static class ensureAdmin_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<ensureAdmin_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ensureAdmin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ensureAdmin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Admin();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class deleteByUid_args implements org.apache.thrift.TBase<deleteByUid_args, deleteByUid_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<deleteByUid_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteByUid_args");

		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"name", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteByUid_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteByUid_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUser name; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			NAME((short) 1, "name");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // NAME
					return NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.NAME,
					new org.apache.thrift.meta_data.FieldMetaData("name",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteByUid_args.class, metaDataMap);
		}

		public deleteByUid_args() {
		}

		public deleteByUid_args(ArgUser name) {
			this();
			this.name = name;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteByUid_args(deleteByUid_args other) {
			if (other.isSetName()) {
				this.name = new ArgUser(other.name);
			}
		}

		public deleteByUid_args deepCopy() {
			return new deleteByUid_args(this);
		}

		@Override
		public void clear() {
			this.name = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getName() {
			return this.name;
		}

		public deleteByUid_args setName(@org.apache.thrift.annotation.Nullable ArgUser name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/**
		 * Returns true if field name is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case NAME:
				if (value == null) {
					unsetName();
				}
				else {
					setName((ArgUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case NAME:
				return getName();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case NAME:
				return isSetName();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteByUid_args)
				return this.equals((deleteByUid_args) that);
			return false;
		}

		public boolean equals(deleteByUid_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
			if (isSetName())
				hashCode = hashCode * 8191 + name.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(deleteByUid_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteByUid_args(");
			boolean first = true;

			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			}
			else {
				sb.append(this.name);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteByUid_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public deleteByUid_argsStandardScheme getScheme() {
				return new deleteByUid_argsStandardScheme();
			}

		}

		private static class deleteByUid_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<deleteByUid_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, deleteByUid_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.name = new ArgUser();
							struct.name.read(iprot);
							struct.setNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, deleteByUid_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					struct.name.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteByUid_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public deleteByUid_argsTupleScheme getScheme() {
				return new deleteByUid_argsTupleScheme();
			}

		}

		private static class deleteByUid_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<deleteByUid_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, deleteByUid_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetName()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetName()) {
					struct.name.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, deleteByUid_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.name = new ArgUser();
					struct.name.read(iprot);
					struct.setNameIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class deleteByUid_result
			implements org.apache.thrift.TBase<deleteByUid_result, deleteByUid_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<deleteByUid_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"deleteByUid_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteByUid_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteByUid_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteByUid_result.class, metaDataMap);
		}

		public deleteByUid_result() {
		}

		public deleteByUid_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public deleteByUid_result(deleteByUid_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public deleteByUid_result deepCopy() {
			return new deleteByUid_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public deleteByUid_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public deleteByUid_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof deleteByUid_result)
				return this.equals((deleteByUid_result) that);
			return false;
		}

		public boolean equals(deleteByUid_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(deleteByUid_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteByUid_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class deleteByUid_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public deleteByUid_resultStandardScheme getScheme() {
				return new deleteByUid_resultStandardScheme();
			}

		}

		private static class deleteByUid_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<deleteByUid_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, deleteByUid_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, deleteByUid_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class deleteByUid_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public deleteByUid_resultTupleScheme getScheme() {
				return new deleteByUid_resultTupleScheme();
			}

		}

		private static class deleteByUid_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<deleteByUid_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, deleteByUid_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, deleteByUid_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserToken_args
			implements org.apache.thrift.TBase<getUserToken_args, getUserToken_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserToken_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserToken_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserToken_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserToken_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgLogin form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgLogin")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserToken_args.class, metaDataMap);
		}

		public getUserToken_args() {
		}

		public getUserToken_args(ArgLogin form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserToken_args(getUserToken_args other) {
			if (other.isSetForm()) {
				this.form = new ArgLogin(other.form);
			}
		}

		public getUserToken_args deepCopy() {
			return new getUserToken_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgLogin getForm() {
			return this.form;
		}

		public getUserToken_args setForm(@org.apache.thrift.annotation.Nullable ArgLogin form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgLogin) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserToken_args)
				return this.equals((getUserToken_args) that);
			return false;
		}

		public boolean equals(getUserToken_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserToken_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserToken_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserToken_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserToken_argsStandardScheme getScheme() {
				return new getUserToken_argsStandardScheme();
			}

		}

		private static class getUserToken_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserToken_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserToken_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgLogin();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserToken_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserToken_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserToken_argsTupleScheme getScheme() {
				return new getUserToken_argsTupleScheme();
			}

		}

		private static class getUserToken_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserToken_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserToken_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserToken_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgLogin();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserToken_result
			implements org.apache.thrift.TBase<getUserToken_result, getUserToken_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserToken_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserToken_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserToken_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserToken_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserToken success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserToken.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserToken_result.class, metaDataMap);
		}

		public getUserToken_result() {
		}

		public getUserToken_result(UserToken success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserToken_result(getUserToken_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserToken(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserToken_result deepCopy() {
			return new getUserToken_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserToken getSuccess() {
			return this.success;
		}

		public getUserToken_result setSuccess(@org.apache.thrift.annotation.Nullable UserToken success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserToken_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserToken) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserToken_result)
				return this.equals((getUserToken_result) that);
			return false;
		}

		public boolean equals(getUserToken_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserToken_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserToken_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserToken_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserToken_resultStandardScheme getScheme() {
				return new getUserToken_resultStandardScheme();
			}

		}

		private static class getUserToken_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserToken_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserToken_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserToken();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserToken_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserToken_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserToken_resultTupleScheme getScheme() {
				return new getUserToken_resultTupleScheme();
			}

		}

		private static class getUserToken_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserToken_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserToken_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserToken_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserToken();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getAdminToken_args
			implements org.apache.thrift.TBase<getAdminToken_args, getAdminToken_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getAdminToken_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAdminToken_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdminToken_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdminToken_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgLogin form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgLogin")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminToken_args.class, metaDataMap);
		}

		public getAdminToken_args() {
		}

		public getAdminToken_args(ArgLogin form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAdminToken_args(getAdminToken_args other) {
			if (other.isSetForm()) {
				this.form = new ArgLogin(other.form);
			}
		}

		public getAdminToken_args deepCopy() {
			return new getAdminToken_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgLogin getForm() {
			return this.form;
		}

		public getAdminToken_args setForm(@org.apache.thrift.annotation.Nullable ArgLogin form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgLogin) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAdminToken_args)
				return this.equals((getAdminToken_args) that);
			return false;
		}

		public boolean equals(getAdminToken_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAdminToken_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdminToken_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAdminToken_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminToken_argsStandardScheme getScheme() {
				return new getAdminToken_argsStandardScheme();
			}

		}

		private static class getAdminToken_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAdminToken_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminToken_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgLogin();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminToken_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAdminToken_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminToken_argsTupleScheme getScheme() {
				return new getAdminToken_argsTupleScheme();
			}

		}

		private static class getAdminToken_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getAdminToken_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAdminToken_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAdminToken_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgLogin();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getAdminToken_result
			implements org.apache.thrift.TBase<getAdminToken_result, getAdminToken_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getAdminToken_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getAdminToken_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdminToken_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdminToken_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserToken success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserToken.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdminToken_result.class, metaDataMap);
		}

		public getAdminToken_result() {
		}

		public getAdminToken_result(UserToken success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getAdminToken_result(getAdminToken_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserToken(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getAdminToken_result deepCopy() {
			return new getAdminToken_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserToken getSuccess() {
			return this.success;
		}

		public getAdminToken_result setSuccess(@org.apache.thrift.annotation.Nullable UserToken success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getAdminToken_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserToken) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getAdminToken_result)
				return this.equals((getAdminToken_result) that);
			return false;
		}

		public boolean equals(getAdminToken_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getAdminToken_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdminToken_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getAdminToken_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminToken_resultStandardScheme getScheme() {
				return new getAdminToken_resultStandardScheme();
			}

		}

		private static class getAdminToken_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getAdminToken_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getAdminToken_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserToken();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getAdminToken_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getAdminToken_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getAdminToken_resultTupleScheme getScheme() {
				return new getAdminToken_resultTupleScheme();
			}

		}

		private static class getAdminToken_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getAdminToken_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getAdminToken_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getAdminToken_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserToken();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUser_args implements org.apache.thrift.TBase<setUser_args, setUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUser_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"name", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"password", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

		private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"profile", org.apache.thrift.protocol.TType.STRUCT, (short) 4);

		private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"status", org.apache.thrift.protocol.TType.STRUCT, (short) 5);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable ArgUser name; // required

		public @org.apache.thrift.annotation.Nullable ArgPassword password; // required

		public @org.apache.thrift.annotation.Nullable ArgUserProfile profile; // required

		public @org.apache.thrift.annotation.Nullable ArgStatus status; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), NAME((short) 2, "name"), PASSWORD((short) 3, "password"), PROFILE((short) 4,
					"profile"), STATUS((short) 5, "status");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // NAME
					return NAME;
				case 3: // PASSWORD
					return PASSWORD;
				case 4: // PROFILE
					return PROFILE;
				case 5: // STATUS
					return STATUS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.NAME,
					new org.apache.thrift.meta_data.FieldMetaData("name",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			tmpMap.put(_Fields.PASSWORD,
					new org.apache.thrift.meta_data.FieldMetaData("password",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgPassword")));
			tmpMap.put(_Fields.PROFILE,
					new org.apache.thrift.meta_data.FieldMetaData("profile",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUserProfile")));
			tmpMap.put(_Fields.STATUS,
					new org.apache.thrift.meta_data.FieldMetaData("status",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgStatus")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUser_args.class, metaDataMap);
		}

		public setUser_args() {
		}

		public setUser_args(java.lang.String uid, ArgUser name, ArgPassword password, ArgUserProfile profile,
				ArgStatus status) {
			this();
			this.uid = uid;
			this.name = name;
			this.password = password;
			this.profile = profile;
			this.status = status;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUser_args(setUser_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetName()) {
				this.name = new ArgUser(other.name);
			}
			if (other.isSetPassword()) {
				this.password = new ArgPassword(other.password);
			}
			if (other.isSetProfile()) {
				this.profile = new ArgUserProfile(other.profile);
			}
			if (other.isSetStatus()) {
				this.status = new ArgStatus(other.status);
			}
		}

		public setUser_args deepCopy() {
			return new setUser_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.name = null;
			this.password = null;
			this.profile = null;
			this.status = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public setUser_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getName() {
			return this.name;
		}

		public setUser_args setName(@org.apache.thrift.annotation.Nullable ArgUser name) {
			this.name = name;
			return this;
		}

		public void unsetName() {
			this.name = null;
		}

		/**
		 * Returns true if field name is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetName() {
			return this.name != null;
		}

		public void setNameIsSet(boolean value) {
			if (!value) {
				this.name = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgPassword getPassword() {
			return this.password;
		}

		public setUser_args setPassword(@org.apache.thrift.annotation.Nullable ArgPassword password) {
			this.password = password;
			return this;
		}

		public void unsetPassword() {
			this.password = null;
		}

		/**
		 * Returns true if field password is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPassword() {
			return this.password != null;
		}

		public void setPasswordIsSet(boolean value) {
			if (!value) {
				this.password = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUserProfile getProfile() {
			return this.profile;
		}

		public setUser_args setProfile(@org.apache.thrift.annotation.Nullable ArgUserProfile profile) {
			this.profile = profile;
			return this;
		}

		public void unsetProfile() {
			this.profile = null;
		}

		/**
		 * Returns true if field profile is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetProfile() {
			return this.profile != null;
		}

		public void setProfileIsSet(boolean value) {
			if (!value) {
				this.profile = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgStatus getStatus() {
			return this.status;
		}

		public setUser_args setStatus(@org.apache.thrift.annotation.Nullable ArgStatus status) {
			this.status = status;
			return this;
		}

		public void unsetStatus() {
			this.status = null;
		}

		/**
		 * Returns true if field status is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetStatus() {
			return this.status != null;
		}

		public void setStatusIsSet(boolean value) {
			if (!value) {
				this.status = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case NAME:
				if (value == null) {
					unsetName();
				}
				else {
					setName((ArgUser) value);
				}
				break;

			case PASSWORD:
				if (value == null) {
					unsetPassword();
				}
				else {
					setPassword((ArgPassword) value);
				}
				break;

			case PROFILE:
				if (value == null) {
					unsetProfile();
				}
				else {
					setProfile((ArgUserProfile) value);
				}
				break;

			case STATUS:
				if (value == null) {
					unsetStatus();
				}
				else {
					setStatus((ArgStatus) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case NAME:
				return getName();

			case PASSWORD:
				return getPassword();

			case PROFILE:
				return getProfile();

			case STATUS:
				return getStatus();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case NAME:
				return isSetName();
			case PASSWORD:
				return isSetPassword();
			case PROFILE:
				return isSetProfile();
			case STATUS:
				return isSetStatus();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUser_args)
				return this.equals((setUser_args) that);
			return false;
		}

		public boolean equals(setUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_name = true && this.isSetName();
			boolean that_present_name = true && that.isSetName();
			if (this_present_name || that_present_name) {
				if (!(this_present_name && that_present_name))
					return false;
				if (!this.name.equals(that.name))
					return false;
			}

			boolean this_present_password = true && this.isSetPassword();
			boolean that_present_password = true && that.isSetPassword();
			if (this_present_password || that_present_password) {
				if (!(this_present_password && that_present_password))
					return false;
				if (!this.password.equals(that.password))
					return false;
			}

			boolean this_present_profile = true && this.isSetProfile();
			boolean that_present_profile = true && that.isSetProfile();
			if (this_present_profile || that_present_profile) {
				if (!(this_present_profile && that_present_profile))
					return false;
				if (!this.profile.equals(that.profile))
					return false;
			}

			boolean this_present_status = true && this.isSetStatus();
			boolean that_present_status = true && that.isSetStatus();
			if (this_present_status || that_present_status) {
				if (!(this_present_status && that_present_status))
					return false;
				if (!this.status.equals(that.status))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
			if (isSetName())
				hashCode = hashCode * 8191 + name.hashCode();

			hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
			if (isSetPassword())
				hashCode = hashCode * 8191 + password.hashCode();

			hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
			if (isSetProfile())
				hashCode = hashCode * 8191 + profile.hashCode();

			hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
			if (isSetStatus())
				hashCode = hashCode * 8191 + status.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPassword()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetProfile()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetStatus()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUser_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			}
			else {
				sb.append(this.name);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("password:");
			if (this.password == null) {
				sb.append("null");
			}
			else {
				sb.append(this.password);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("profile:");
			if (this.profile == null) {
				sb.append("null");
			}
			else {
				sb.append(this.profile);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("status:");
			if (this.status == null) {
				sb.append("null");
			}
			else {
				sb.append(this.status);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUser_argsStandardScheme getScheme() {
				return new setUser_argsStandardScheme();
			}

		}

		private static class setUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.name = new ArgUser();
							struct.name.read(iprot);
							struct.setNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // PASSWORD
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.password = new ArgPassword();
							struct.password.read(iprot);
							struct.setPasswordIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // PROFILE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.profile = new ArgUserProfile();
							struct.profile.read(iprot);
							struct.setProfileIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // STATUS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.status = new ArgStatus();
							struct.status.read(iprot);
							struct.setStatusIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.name != null) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					struct.name.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.password != null) {
					oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
					struct.password.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.profile != null) {
					oprot.writeFieldBegin(PROFILE_FIELD_DESC);
					struct.profile.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.status != null) {
					oprot.writeFieldBegin(STATUS_FIELD_DESC);
					struct.status.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUser_argsTupleScheme getScheme() {
				return new setUser_argsTupleScheme();
			}

		}

		private static class setUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetName()) {
					optionals.set(1);
				}
				if (struct.isSetPassword()) {
					optionals.set(2);
				}
				if (struct.isSetProfile()) {
					optionals.set(3);
				}
				if (struct.isSetStatus()) {
					optionals.set(4);
				}
				oprot.writeBitSet(optionals, 5);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetName()) {
					struct.name.write(oprot);
				}
				if (struct.isSetPassword()) {
					struct.password.write(oprot);
				}
				if (struct.isSetProfile()) {
					struct.profile.write(oprot);
				}
				if (struct.isSetStatus()) {
					struct.status.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(5);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.name = new ArgUser();
					struct.name.read(iprot);
					struct.setNameIsSet(true);
				}
				if (incoming.get(2)) {
					struct.password = new ArgPassword();
					struct.password.read(iprot);
					struct.setPasswordIsSet(true);
				}
				if (incoming.get(3)) {
					struct.profile = new ArgUserProfile();
					struct.profile.read(iprot);
					struct.setProfileIsSet(true);
				}
				if (incoming.get(4)) {
					struct.status = new ArgStatus();
					struct.status.read(iprot);
					struct.setStatusIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUser_result implements org.apache.thrift.TBase<setUser_result, setUser_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUser_result.class, metaDataMap);
		}

		public setUser_result() {
		}

		public setUser_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUser_result(setUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setUser_result deepCopy() {
			return new setUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public setUser_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setUser_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUser_result)
				return this.equals((setUser_result) that);
			return false;
		}

		public boolean equals(setUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUser_resultStandardScheme getScheme() {
				return new setUser_resultStandardScheme();
			}

		}

		private static class setUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUser_resultTupleScheme getScheme() {
				return new setUser_resultTupleScheme();
			}

		}

		private static class setUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserBind_args implements org.apache.thrift.TBase<setUserBind_args, setUserBind_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUserBind_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserBind_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField BIND_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"bind", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

		private static final org.apache.thrift.protocol.TField IS_REMOVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"isRemove", org.apache.thrift.protocol.TType.BOOL, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserBind_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserBind_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable ArgBind bind; // required

		public boolean isRemove; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), BIND((short) 2, "bind"), IS_REMOVE((short) 3, "isRemove");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // BIND
					return BIND;
				case 3: // IS_REMOVE
					return IS_REMOVE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __ISREMOVE_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.BIND,
					new org.apache.thrift.meta_data.FieldMetaData("bind",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgBind")));
			tmpMap.put(_Fields.IS_REMOVE,
					new org.apache.thrift.meta_data.FieldMetaData("isRemove",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserBind_args.class, metaDataMap);
		}

		public setUserBind_args() {
		}

		public setUserBind_args(java.lang.String uid, ArgBind bind, boolean isRemove) {
			this();
			this.uid = uid;
			this.bind = bind;
			this.isRemove = isRemove;
			setIsRemoveIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserBind_args(setUserBind_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetBind()) {
				this.bind = new ArgBind(other.bind);
			}
			this.isRemove = other.isRemove;
		}

		public setUserBind_args deepCopy() {
			return new setUserBind_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.bind = null;
			setIsRemoveIsSet(false);
			this.isRemove = false;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public setUserBind_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public ArgBind getBind() {
			return this.bind;
		}

		public setUserBind_args setBind(@org.apache.thrift.annotation.Nullable ArgBind bind) {
			this.bind = bind;
			return this;
		}

		public void unsetBind() {
			this.bind = null;
		}

		/**
		 * Returns true if field bind is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetBind() {
			return this.bind != null;
		}

		public void setBindIsSet(boolean value) {
			if (!value) {
				this.bind = null;
			}
		}

		public boolean isIsRemove() {
			return this.isRemove;
		}

		public setUserBind_args setIsRemove(boolean isRemove) {
			this.isRemove = isRemove;
			setIsRemoveIsSet(true);
			return this;
		}

		public void unsetIsRemove() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREMOVE_ISSET_ID);
		}

		/**
		 * Returns true if field isRemove is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetIsRemove() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREMOVE_ISSET_ID);
		}

		public void setIsRemoveIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREMOVE_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case BIND:
				if (value == null) {
					unsetBind();
				}
				else {
					setBind((ArgBind) value);
				}
				break;

			case IS_REMOVE:
				if (value == null) {
					unsetIsRemove();
				}
				else {
					setIsRemove((java.lang.Boolean) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case BIND:
				return getBind();

			case IS_REMOVE:
				return isIsRemove();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case BIND:
				return isSetBind();
			case IS_REMOVE:
				return isSetIsRemove();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserBind_args)
				return this.equals((setUserBind_args) that);
			return false;
		}

		public boolean equals(setUserBind_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_bind = true && this.isSetBind();
			boolean that_present_bind = true && that.isSetBind();
			if (this_present_bind || that_present_bind) {
				if (!(this_present_bind && that_present_bind))
					return false;
				if (!this.bind.equals(that.bind))
					return false;
			}

			boolean this_present_isRemove = true;
			boolean that_present_isRemove = true;
			if (this_present_isRemove || that_present_isRemove) {
				if (!(this_present_isRemove && that_present_isRemove))
					return false;
				if (this.isRemove != that.isRemove)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetBind()) ? 131071 : 524287);
			if (isSetBind())
				hashCode = hashCode * 8191 + bind.hashCode();

			hashCode = hashCode * 8191 + ((isRemove) ? 131071 : 524287);

			return hashCode;
		}

		@Override
		public int compareTo(setUserBind_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetBind()).compareTo(other.isSetBind());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetBind()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bind, other.bind);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetIsRemove()).compareTo(other.isSetIsRemove());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetIsRemove()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRemove, other.isRemove);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserBind_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("bind:");
			if (this.bind == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bind);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("isRemove:");
			sb.append(this.isRemove);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserBind_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserBind_argsStandardScheme getScheme() {
				return new setUserBind_argsStandardScheme();
			}

		}

		private static class setUserBind_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserBind_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserBind_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // BIND
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.bind = new ArgBind();
							struct.bind.read(iprot);
							struct.setBindIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // IS_REMOVE
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.isRemove = iprot.readBool();
							struct.setIsRemoveIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserBind_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.bind != null) {
					oprot.writeFieldBegin(BIND_FIELD_DESC);
					struct.bind.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(IS_REMOVE_FIELD_DESC);
				oprot.writeBool(struct.isRemove);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserBind_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserBind_argsTupleScheme getScheme() {
				return new setUserBind_argsTupleScheme();
			}

		}

		private static class setUserBind_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setUserBind_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserBind_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetBind()) {
					optionals.set(1);
				}
				if (struct.isSetIsRemove()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetBind()) {
					struct.bind.write(oprot);
				}
				if (struct.isSetIsRemove()) {
					oprot.writeBool(struct.isRemove);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserBind_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.bind = new ArgBind();
					struct.bind.read(iprot);
					struct.setBindIsSet(true);
				}
				if (incoming.get(2)) {
					struct.isRemove = iprot.readBool();
					struct.setIsRemoveIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserBind_result
			implements org.apache.thrift.TBase<setUserBind_result, setUserBind_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<setUserBind_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserBind_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserBind_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserBind_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserBind_result.class, metaDataMap);
		}

		public setUserBind_result() {
		}

		public setUserBind_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserBind_result(setUserBind_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setUserBind_result deepCopy() {
			return new setUserBind_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public setUserBind_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setUserBind_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserBind_result)
				return this.equals((setUserBind_result) that);
			return false;
		}

		public boolean equals(setUserBind_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUserBind_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserBind_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserBind_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserBind_resultStandardScheme getScheme() {
				return new setUserBind_resultStandardScheme();
			}

		}

		private static class setUserBind_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserBind_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserBind_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserBind_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserBind_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserBind_resultTupleScheme getScheme() {
				return new setUserBind_resultTupleScheme();
			}

		}

		private static class setUserBind_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setUserBind_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserBind_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserBind_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserCreateTime_args
			implements org.apache.thrift.TBase<setUserCreateTime_args, setUserCreateTime_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUserCreateTime_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserCreateTime_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"createTime", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserCreateTime_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserCreateTime_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CREATE_TIME((short) 2, "createTime");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CREATE_TIME
					return CREATE_TIME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CREATE_TIME,
					new org.apache.thrift.meta_data.FieldMetaData("createTime",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING,
									"Time")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserCreateTime_args.class, metaDataMap);
		}

		public setUserCreateTime_args() {
		}

		public setUserCreateTime_args(java.lang.String uid, java.lang.String createTime) {
			this();
			this.uid = uid;
			this.createTime = createTime;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserCreateTime_args(setUserCreateTime_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetCreateTime()) {
				this.createTime = other.createTime;
			}
		}

		public setUserCreateTime_args deepCopy() {
			return new setUserCreateTime_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.createTime = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public setUserCreateTime_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getCreateTime() {
			return this.createTime;
		}

		public setUserCreateTime_args setCreateTime(
				@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
			this.createTime = createTime;
			return this;
		}

		public void unsetCreateTime() {
			this.createTime = null;
		}

		/**
		 * Returns true if field createTime is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetCreateTime() {
			return this.createTime != null;
		}

		public void setCreateTimeIsSet(boolean value) {
			if (!value) {
				this.createTime = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CREATE_TIME:
				if (value == null) {
					unsetCreateTime();
				}
				else {
					setCreateTime((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CREATE_TIME:
				return getCreateTime();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CREATE_TIME:
				return isSetCreateTime();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserCreateTime_args)
				return this.equals((setUserCreateTime_args) that);
			return false;
		}

		public boolean equals(setUserCreateTime_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_createTime = true && this.isSetCreateTime();
			boolean that_present_createTime = true && that.isSetCreateTime();
			if (this_present_createTime || that_present_createTime) {
				if (!(this_present_createTime && that_present_createTime))
					return false;
				if (!this.createTime.equals(that.createTime))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
			if (isSetCreateTime())
				hashCode = hashCode * 8191 + createTime.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUserCreateTime_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCreateTime()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserCreateTime_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("createTime:");
			if (this.createTime == null) {
				sb.append("null");
			}
			else {
				sb.append(this.createTime);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserCreateTime_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserCreateTime_argsStandardScheme getScheme() {
				return new setUserCreateTime_argsStandardScheme();
			}

		}

		private static class setUserCreateTime_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserCreateTime_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserCreateTime_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CREATE_TIME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.createTime = iprot.readString();
							struct.setCreateTimeIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserCreateTime_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.createTime != null) {
					oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
					oprot.writeString(struct.createTime);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserCreateTime_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserCreateTime_argsTupleScheme getScheme() {
				return new setUserCreateTime_argsTupleScheme();
			}

		}

		private static class setUserCreateTime_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setUserCreateTime_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserCreateTime_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetCreateTime()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetCreateTime()) {
					oprot.writeString(struct.createTime);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserCreateTime_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.createTime = iprot.readString();
					struct.setCreateTimeIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserCreateTime_result
			implements org.apache.thrift.TBase<setUserCreateTime_result, setUserCreateTime_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUserCreateTime_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserCreateTime_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserCreateTime_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserCreateTime_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserCreateTime_result.class, metaDataMap);
		}

		public setUserCreateTime_result() {
		}

		public setUserCreateTime_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserCreateTime_result(setUserCreateTime_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setUserCreateTime_result deepCopy() {
			return new setUserCreateTime_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public setUserCreateTime_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setUserCreateTime_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserCreateTime_result)
				return this.equals((setUserCreateTime_result) that);
			return false;
		}

		public boolean equals(setUserCreateTime_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUserCreateTime_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserCreateTime_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserCreateTime_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserCreateTime_resultStandardScheme getScheme() {
				return new setUserCreateTime_resultStandardScheme();
			}

		}

		private static class setUserCreateTime_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserCreateTime_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserCreateTime_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserCreateTime_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserCreateTime_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserCreateTime_resultTupleScheme getScheme() {
				return new setUserCreateTime_resultTupleScheme();
			}

		}

		private static class setUserCreateTime_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setUserCreateTime_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserCreateTime_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserCreateTime_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserRolesAdd_args
			implements org.apache.thrift.TBase<setUserRolesAdd_args, setUserRolesAdd_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUserRolesAdd_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserRolesAdd_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField ROLE_LIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"roleLis", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserRolesAdd_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserRolesAdd_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roleLis; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), ROLE_LIS((short) 2, "roleLis");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // ROLE_LIS
					return ROLE_LIS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.ROLE_LIS,
					new org.apache.thrift.meta_data.FieldMetaData("roleLis",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserRolesAdd_args.class, metaDataMap);
		}

		public setUserRolesAdd_args() {
		}

		public setUserRolesAdd_args(java.lang.String uid, java.util.List<java.lang.String> roleLis) {
			this();
			this.uid = uid;
			this.roleLis = roleLis;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserRolesAdd_args(setUserRolesAdd_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetRoleLis()) {
				java.util.List<java.lang.String> __this__roleLis = new java.util.ArrayList<java.lang.String>(
						other.roleLis);
				this.roleLis = __this__roleLis;
			}
		}

		public setUserRolesAdd_args deepCopy() {
			return new setUserRolesAdd_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.roleLis = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public setUserRolesAdd_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public int getRoleLisSize() {
			return (this.roleLis == null) ? 0 : this.roleLis.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getRoleLisIterator() {
			return (this.roleLis == null) ? null : this.roleLis.iterator();
		}

		public void addToRoleLis(java.lang.String elem) {
			if (this.roleLis == null) {
				this.roleLis = new java.util.ArrayList<java.lang.String>();
			}
			this.roleLis.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getRoleLis() {
			return this.roleLis;
		}

		public setUserRolesAdd_args setRoleLis(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roleLis) {
			this.roleLis = roleLis;
			return this;
		}

		public void unsetRoleLis() {
			this.roleLis = null;
		}

		/**
		 * Returns true if field roleLis is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRoleLis() {
			return this.roleLis != null;
		}

		public void setRoleLisIsSet(boolean value) {
			if (!value) {
				this.roleLis = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case ROLE_LIS:
				if (value == null) {
					unsetRoleLis();
				}
				else {
					setRoleLis((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case ROLE_LIS:
				return getRoleLis();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case ROLE_LIS:
				return isSetRoleLis();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserRolesAdd_args)
				return this.equals((setUserRolesAdd_args) that);
			return false;
		}

		public boolean equals(setUserRolesAdd_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_roleLis = true && this.isSetRoleLis();
			boolean that_present_roleLis = true && that.isSetRoleLis();
			if (this_present_roleLis || that_present_roleLis) {
				if (!(this_present_roleLis && that_present_roleLis))
					return false;
				if (!this.roleLis.equals(that.roleLis))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetRoleLis()) ? 131071 : 524287);
			if (isSetRoleLis())
				hashCode = hashCode * 8191 + roleLis.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUserRolesAdd_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRoleLis()).compareTo(other.isSetRoleLis());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRoleLis()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleLis, other.roleLis);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserRolesAdd_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("roleLis:");
			if (this.roleLis == null) {
				sb.append("null");
			}
			else {
				sb.append(this.roleLis);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserRolesAdd_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserRolesAdd_argsStandardScheme getScheme() {
				return new setUserRolesAdd_argsStandardScheme();
			}

		}

		private static class setUserRolesAdd_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserRolesAdd_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserRolesAdd_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // ROLE_LIS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
								struct.roleLis = new java.util.ArrayList<java.lang.String>(_list172.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem173;
								for (int _i174 = 0; _i174 < _list172.size; ++_i174) {
									_elem173 = iprot.readString();
									struct.roleLis.add(_elem173);
								}
								iprot.readListEnd();
							}
							struct.setRoleLisIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserRolesAdd_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.roleLis != null) {
					oprot.writeFieldBegin(ROLE_LIS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.roleLis.size()));
						for (java.lang.String _iter175 : struct.roleLis) {
							oprot.writeString(_iter175);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserRolesAdd_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserRolesAdd_argsTupleScheme getScheme() {
				return new setUserRolesAdd_argsTupleScheme();
			}

		}

		private static class setUserRolesAdd_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setUserRolesAdd_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserRolesAdd_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetRoleLis()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetRoleLis()) {
					{
						oprot.writeI32(struct.roleLis.size());
						for (java.lang.String _iter176 : struct.roleLis) {
							oprot.writeString(_iter176);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserRolesAdd_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list177 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.roleLis = new java.util.ArrayList<java.lang.String>(_list177.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem178;
						for (int _i179 = 0; _i179 < _list177.size; ++_i179) {
							_elem178 = iprot.readString();
							struct.roleLis.add(_elem178);
						}
					}
					struct.setRoleLisIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserRolesAdd_result
			implements org.apache.thrift.TBase<setUserRolesAdd_result, setUserRolesAdd_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUserRolesAdd_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserRolesAdd_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserRolesAdd_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserRolesAdd_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserRolesAdd_result.class, metaDataMap);
		}

		public setUserRolesAdd_result() {
		}

		public setUserRolesAdd_result(java.util.List<java.lang.String> success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserRolesAdd_result(setUserRolesAdd_result other) {
			if (other.isSetSuccess()) {
				java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(
						other.success);
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setUserRolesAdd_result deepCopy() {
			return new setUserRolesAdd_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(java.lang.String elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<java.lang.String>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getSuccess() {
			return this.success;
		}

		public setUserRolesAdd_result setSuccess(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setUserRolesAdd_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<java.lang.String>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserRolesAdd_result)
				return this.equals((setUserRolesAdd_result) that);
			return false;
		}

		public boolean equals(setUserRolesAdd_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUserRolesAdd_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserRolesAdd_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserRolesAdd_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserRolesAdd_resultStandardScheme getScheme() {
				return new setUserRolesAdd_resultStandardScheme();
			}

		}

		private static class setUserRolesAdd_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserRolesAdd_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserRolesAdd_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list180 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<java.lang.String>(_list180.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem181;
								for (int _i182 = 0; _i182 < _list180.size; ++_i182) {
									_elem181 = iprot.readString();
									struct.success.add(_elem181);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserRolesAdd_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.success.size()));
						for (java.lang.String _iter183 : struct.success) {
							oprot.writeString(_iter183);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserRolesAdd_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserRolesAdd_resultTupleScheme getScheme() {
				return new setUserRolesAdd_resultTupleScheme();
			}

		}

		private static class setUserRolesAdd_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setUserRolesAdd_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserRolesAdd_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (java.lang.String _iter184 : struct.success) {
							oprot.writeString(_iter184);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserRolesAdd_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list185 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.success = new java.util.ArrayList<java.lang.String>(_list185.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem186;
						for (int _i187 = 0; _i187 < _list185.size; ++_i187) {
							_elem186 = iprot.readString();
							struct.success.add(_elem186);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserRolesDel_args
			implements org.apache.thrift.TBase<setUserRolesDel_args, setUserRolesDel_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUserRolesDel_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserRolesDel_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField ROLE_LIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"roleLis", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserRolesDel_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserRolesDel_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roleLis; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), ROLE_LIS((short) 2, "roleLis");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // ROLE_LIS
					return ROLE_LIS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.ROLE_LIS,
					new org.apache.thrift.meta_data.FieldMetaData("roleLis",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserRolesDel_args.class, metaDataMap);
		}

		public setUserRolesDel_args() {
		}

		public setUserRolesDel_args(java.lang.String uid, java.util.List<java.lang.String> roleLis) {
			this();
			this.uid = uid;
			this.roleLis = roleLis;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserRolesDel_args(setUserRolesDel_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetRoleLis()) {
				java.util.List<java.lang.String> __this__roleLis = new java.util.ArrayList<java.lang.String>(
						other.roleLis);
				this.roleLis = __this__roleLis;
			}
		}

		public setUserRolesDel_args deepCopy() {
			return new setUserRolesDel_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.roleLis = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public setUserRolesDel_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public int getRoleLisSize() {
			return (this.roleLis == null) ? 0 : this.roleLis.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getRoleLisIterator() {
			return (this.roleLis == null) ? null : this.roleLis.iterator();
		}

		public void addToRoleLis(java.lang.String elem) {
			if (this.roleLis == null) {
				this.roleLis = new java.util.ArrayList<java.lang.String>();
			}
			this.roleLis.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getRoleLis() {
			return this.roleLis;
		}

		public setUserRolesDel_args setRoleLis(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roleLis) {
			this.roleLis = roleLis;
			return this;
		}

		public void unsetRoleLis() {
			this.roleLis = null;
		}

		/**
		 * Returns true if field roleLis is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRoleLis() {
			return this.roleLis != null;
		}

		public void setRoleLisIsSet(boolean value) {
			if (!value) {
				this.roleLis = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case ROLE_LIS:
				if (value == null) {
					unsetRoleLis();
				}
				else {
					setRoleLis((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case ROLE_LIS:
				return getRoleLis();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case ROLE_LIS:
				return isSetRoleLis();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserRolesDel_args)
				return this.equals((setUserRolesDel_args) that);
			return false;
		}

		public boolean equals(setUserRolesDel_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_roleLis = true && this.isSetRoleLis();
			boolean that_present_roleLis = true && that.isSetRoleLis();
			if (this_present_roleLis || that_present_roleLis) {
				if (!(this_present_roleLis && that_present_roleLis))
					return false;
				if (!this.roleLis.equals(that.roleLis))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetRoleLis()) ? 131071 : 524287);
			if (isSetRoleLis())
				hashCode = hashCode * 8191 + roleLis.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUserRolesDel_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRoleLis()).compareTo(other.isSetRoleLis());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRoleLis()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleLis, other.roleLis);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserRolesDel_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("roleLis:");
			if (this.roleLis == null) {
				sb.append("null");
			}
			else {
				sb.append(this.roleLis);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserRolesDel_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserRolesDel_argsStandardScheme getScheme() {
				return new setUserRolesDel_argsStandardScheme();
			}

		}

		private static class setUserRolesDel_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserRolesDel_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserRolesDel_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // ROLE_LIS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list188 = iprot.readListBegin();
								struct.roleLis = new java.util.ArrayList<java.lang.String>(_list188.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem189;
								for (int _i190 = 0; _i190 < _list188.size; ++_i190) {
									_elem189 = iprot.readString();
									struct.roleLis.add(_elem189);
								}
								iprot.readListEnd();
							}
							struct.setRoleLisIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserRolesDel_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.roleLis != null) {
					oprot.writeFieldBegin(ROLE_LIS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.roleLis.size()));
						for (java.lang.String _iter191 : struct.roleLis) {
							oprot.writeString(_iter191);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserRolesDel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserRolesDel_argsTupleScheme getScheme() {
				return new setUserRolesDel_argsTupleScheme();
			}

		}

		private static class setUserRolesDel_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setUserRolesDel_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserRolesDel_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetRoleLis()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetRoleLis()) {
					{
						oprot.writeI32(struct.roleLis.size());
						for (java.lang.String _iter192 : struct.roleLis) {
							oprot.writeString(_iter192);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserRolesDel_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list193 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.roleLis = new java.util.ArrayList<java.lang.String>(_list193.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem194;
						for (int _i195 = 0; _i195 < _list193.size; ++_i195) {
							_elem194 = iprot.readString();
							struct.roleLis.add(_elem194);
						}
					}
					struct.setRoleLisIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserRolesDel_result
			implements org.apache.thrift.TBase<setUserRolesDel_result, setUserRolesDel_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUserRolesDel_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserRolesDel_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserRolesDel_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserRolesDel_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserRolesDel_result.class, metaDataMap);
		}

		public setUserRolesDel_result() {
		}

		public setUserRolesDel_result(java.util.List<java.lang.String> success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserRolesDel_result(setUserRolesDel_result other) {
			if (other.isSetSuccess()) {
				java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(
						other.success);
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setUserRolesDel_result deepCopy() {
			return new setUserRolesDel_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(java.lang.String elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<java.lang.String>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getSuccess() {
			return this.success;
		}

		public setUserRolesDel_result setSuccess(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setUserRolesDel_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<java.lang.String>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserRolesDel_result)
				return this.equals((setUserRolesDel_result) that);
			return false;
		}

		public boolean equals(setUserRolesDel_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUserRolesDel_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserRolesDel_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserRolesDel_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserRolesDel_resultStandardScheme getScheme() {
				return new setUserRolesDel_resultStandardScheme();
			}

		}

		private static class setUserRolesDel_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserRolesDel_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserRolesDel_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list196 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<java.lang.String>(_list196.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem197;
								for (int _i198 = 0; _i198 < _list196.size; ++_i198) {
									_elem197 = iprot.readString();
									struct.success.add(_elem197);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserRolesDel_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.success.size()));
						for (java.lang.String _iter199 : struct.success) {
							oprot.writeString(_iter199);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserRolesDel_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setUserRolesDel_resultTupleScheme getScheme() {
				return new setUserRolesDel_resultTupleScheme();
			}

		}

		private static class setUserRolesDel_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setUserRolesDel_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserRolesDel_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (java.lang.String _iter200 : struct.success) {
							oprot.writeString(_iter200);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserRolesDel_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list201 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.success = new java.util.ArrayList<java.lang.String>(_list201.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem202;
						for (int _i203 = 0; _i203 < _list201.size; ++_i203) {
							_elem202 = iprot.readString();
							struct.success.add(_elem202);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserExt_args implements org.apache.thrift.TBase<getUserExt_args, getUserExt_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserExt_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserExt_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserExt_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserExt_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserExt_args.class, metaDataMap);
		}

		public getUserExt_args() {
		}

		public getUserExt_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserExt_args(getUserExt_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserExt_args deepCopy() {
			return new getUserExt_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserExt_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserExt_args)
				return this.equals((getUserExt_args) that);
			return false;
		}

		public boolean equals(getUserExt_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserExt_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserExt_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserExt_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserExt_argsStandardScheme getScheme() {
				return new getUserExt_argsStandardScheme();
			}

		}

		private static class getUserExt_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserExt_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserExt_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserExt_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserExt_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserExt_argsTupleScheme getScheme() {
				return new getUserExt_argsTupleScheme();
			}

		}

		private static class getUserExt_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserExt_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserExt_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserExt_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserExt_result
			implements org.apache.thrift.TBase<getUserExt_result, getUserExt_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserExt_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserExt_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserExt_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserExt_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUserExt success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUserExt")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserExt_result.class, metaDataMap);
		}

		public getUserExt_result() {
		}

		public getUserExt_result(ResultUserExt success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserExt_result(getUserExt_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUserExt(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserExt_result deepCopy() {
			return new getUserExt_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUserExt getSuccess() {
			return this.success;
		}

		public getUserExt_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUserExt success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserExt_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUserExt) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserExt_result)
				return this.equals((getUserExt_result) that);
			return false;
		}

		public boolean equals(getUserExt_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserExt_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserExt_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserExt_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserExt_resultStandardScheme getScheme() {
				return new getUserExt_resultStandardScheme();
			}

		}

		private static class getUserExt_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserExt_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserExt_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUserExt();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserExt_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserExt_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserExt_resultTupleScheme getScheme() {
				return new getUserExt_resultTupleScheme();
			}

		}

		private static class getUserExt_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserExt_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserExt_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserExt_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUserExt();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserExtPub_args
			implements org.apache.thrift.TBase<getUserExtPub_args, getUserExtPub_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserExtPub_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserExtPub_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserExtPub_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserExtPub_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserExtPub_args.class, metaDataMap);
		}

		public getUserExtPub_args() {
		}

		public getUserExtPub_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserExtPub_args(getUserExtPub_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserExtPub_args deepCopy() {
			return new getUserExtPub_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserExtPub_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserExtPub_args)
				return this.equals((getUserExtPub_args) that);
			return false;
		}

		public boolean equals(getUserExtPub_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserExtPub_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserExtPub_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserExtPub_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserExtPub_argsStandardScheme getScheme() {
				return new getUserExtPub_argsStandardScheme();
			}

		}

		private static class getUserExtPub_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserExtPub_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserExtPub_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserExtPub_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserExtPub_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserExtPub_argsTupleScheme getScheme() {
				return new getUserExtPub_argsTupleScheme();
			}

		}

		private static class getUserExtPub_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserExtPub_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserExtPub_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserExtPub_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserExtPub_result
			implements org.apache.thrift.TBase<getUserExtPub_result, getUserExtPub_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserExtPub_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserExtPub_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserExtPub_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserExtPub_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUserExtPub success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUserExtPub")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserExtPub_result.class, metaDataMap);
		}

		public getUserExtPub_result() {
		}

		public getUserExtPub_result(ResultUserExtPub success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserExtPub_result(getUserExtPub_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUserExtPub(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserExtPub_result deepCopy() {
			return new getUserExtPub_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUserExtPub getSuccess() {
			return this.success;
		}

		public getUserExtPub_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUserExtPub success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserExtPub_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUserExtPub) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserExtPub_result)
				return this.equals((getUserExtPub_result) that);
			return false;
		}

		public boolean equals(getUserExtPub_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserExtPub_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserExtPub_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserExtPub_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserExtPub_resultStandardScheme getScheme() {
				return new getUserExtPub_resultStandardScheme();
			}

		}

		private static class getUserExtPub_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserExtPub_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserExtPub_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUserExtPub();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserExtPub_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserExtPub_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserExtPub_resultTupleScheme getScheme() {
				return new getUserExtPub_resultTupleScheme();
			}

		}

		private static class getUserExtPub_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserExtPub_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserExtPub_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserExtPub_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUserExtPub();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBankCardList_args
			implements org.apache.thrift.TBase<getUserBankCardList_args, getUserBankCardList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserBankCardList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBankCardList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBankCardList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBankCardList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBankCardList_args.class, metaDataMap);
		}

		public getUserBankCardList_args() {
		}

		public getUserBankCardList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBankCardList_args(getUserBankCardList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserBankCardList_args deepCopy() {
			return new getUserBankCardList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserBankCardList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBankCardList_args)
				return this.equals((getUserBankCardList_args) that);
			return false;
		}

		public boolean equals(getUserBankCardList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBankCardList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBankCardList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBankCardList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBankCardList_argsStandardScheme getScheme() {
				return new getUserBankCardList_argsStandardScheme();
			}

		}

		private static class getUserBankCardList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBankCardList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBankCardList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBankCardList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBankCardList_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBankCardList_argsTupleScheme getScheme() {
				return new getUserBankCardList_argsTupleScheme();
			}

		}

		private static class getUserBankCardList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserBankCardList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBankCardList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBankCardList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBankCardList_result
			implements org.apache.thrift.TBase<getUserBankCardList_result, getUserBankCardList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserBankCardList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBankCardList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBankCardList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBankCardList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUserBankCard success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUserBankCard")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBankCardList_result.class,
					metaDataMap);
		}

		public getUserBankCardList_result() {
		}

		public getUserBankCardList_result(ResultUserBankCard success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBankCardList_result(getUserBankCardList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUserBankCard(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserBankCardList_result deepCopy() {
			return new getUserBankCardList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUserBankCard getSuccess() {
			return this.success;
		}

		public getUserBankCardList_result setSuccess(
				@org.apache.thrift.annotation.Nullable ResultUserBankCard success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserBankCardList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUserBankCard) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBankCardList_result)
				return this.equals((getUserBankCardList_result) that);
			return false;
		}

		public boolean equals(getUserBankCardList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBankCardList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBankCardList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBankCardList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBankCardList_resultStandardScheme getScheme() {
				return new getUserBankCardList_resultStandardScheme();
			}

		}

		private static class getUserBankCardList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBankCardList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBankCardList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUserBankCard();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBankCardList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBankCardList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBankCardList_resultTupleScheme getScheme() {
				return new getUserBankCardList_resultTupleScheme();
			}

		}

		private static class getUserBankCardList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserBankCardList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBankCardList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBankCardList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUserBankCard();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserActionList_args
			implements org.apache.thrift.TBase<getUserActionList_args, getUserActionList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserActionList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserActionList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserActionList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserActionList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserActionList_args.class, metaDataMap);
		}

		public getUserActionList_args() {
		}

		public getUserActionList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserActionList_args(getUserActionList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserActionList_args deepCopy() {
			return new getUserActionList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserActionList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserActionList_args)
				return this.equals((getUserActionList_args) that);
			return false;
		}

		public boolean equals(getUserActionList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserActionList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserActionList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserActionList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserActionList_argsStandardScheme getScheme() {
				return new getUserActionList_argsStandardScheme();
			}

		}

		private static class getUserActionList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserActionList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserActionList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserActionList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserActionList_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserActionList_argsTupleScheme getScheme() {
				return new getUserActionList_argsTupleScheme();
			}

		}

		private static class getUserActionList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserActionList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserActionList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserActionList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserActionList_result
			implements org.apache.thrift.TBase<getUserActionList_result, getUserActionList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserActionList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserActionList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserActionList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserActionList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUserAction success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUserAction")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserActionList_result.class, metaDataMap);
		}

		public getUserActionList_result() {
		}

		public getUserActionList_result(ResultUserAction success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserActionList_result(getUserActionList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUserAction(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserActionList_result deepCopy() {
			return new getUserActionList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUserAction getSuccess() {
			return this.success;
		}

		public getUserActionList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUserAction success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserActionList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUserAction) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserActionList_result)
				return this.equals((getUserActionList_result) that);
			return false;
		}

		public boolean equals(getUserActionList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserActionList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserActionList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserActionList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserActionList_resultStandardScheme getScheme() {
				return new getUserActionList_resultStandardScheme();
			}

		}

		private static class getUserActionList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserActionList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserActionList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUserAction();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserActionList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserActionList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserActionList_resultTupleScheme getScheme() {
				return new getUserActionList_resultTupleScheme();
			}

		}

		private static class getUserActionList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserActionList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserActionList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserActionList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUserAction();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getRBAC_args implements org.apache.thrift.TBase<getRBAC_args, getRBAC_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getRBAC_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRBAC_args");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRBAC_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRBAC_argsTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRBAC_args.class, metaDataMap);
		}

		public getRBAC_args() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRBAC_args(getRBAC_args other) {
		}

		public getRBAC_args deepCopy() {
			return new getRBAC_args(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRBAC_args)
				return this.equals((getRBAC_args) that);
			return false;
		}

		public boolean equals(getRBAC_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(getRBAC_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRBAC_args(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRBAC_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getRBAC_argsStandardScheme getScheme() {
				return new getRBAC_argsStandardScheme();
			}

		}

		private static class getRBAC_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRBAC_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRBAC_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRBAC_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRBAC_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getRBAC_argsTupleScheme getScheme() {
				return new getRBAC_argsTupleScheme();
			}

		}

		private static class getRBAC_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRBAC_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRBAC_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRBAC_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getRBAC_result implements org.apache.thrift.TBase<getRBAC_result, getRBAC_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getRBAC_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRBAC_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRBAC_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRBAC_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserRBAC success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserRBAC.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRBAC_result.class, metaDataMap);
		}

		public getRBAC_result() {
		}

		public getRBAC_result(UserRBAC success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRBAC_result(getRBAC_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserRBAC(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getRBAC_result deepCopy() {
			return new getRBAC_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserRBAC getSuccess() {
			return this.success;
		}

		public getRBAC_result setSuccess(@org.apache.thrift.annotation.Nullable UserRBAC success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getRBAC_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserRBAC) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRBAC_result)
				return this.equals((getRBAC_result) that);
			return false;
		}

		public boolean equals(getRBAC_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getRBAC_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRBAC_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRBAC_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getRBAC_resultStandardScheme getScheme() {
				return new getRBAC_resultStandardScheme();
			}

		}

		private static class getRBAC_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRBAC_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRBAC_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserRBAC();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRBAC_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRBAC_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getRBAC_resultTupleScheme getScheme() {
				return new getRBAC_resultTupleScheme();
			}

		}

		private static class getRBAC_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRBAC_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRBAC_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRBAC_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserRBAC();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setRBAC_args implements org.apache.thrift.TBase<setRBAC_args, setRBAC_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setRBAC_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRBAC_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRBAC_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRBAC_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserRBAC form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserRBAC.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRBAC_args.class, metaDataMap);
		}

		public setRBAC_args() {
		}

		public setRBAC_args(UserRBAC form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRBAC_args(setRBAC_args other) {
			if (other.isSetForm()) {
				this.form = new UserRBAC(other.form);
			}
		}

		public setRBAC_args deepCopy() {
			return new setRBAC_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserRBAC getForm() {
			return this.form;
		}

		public setRBAC_args setForm(@org.apache.thrift.annotation.Nullable UserRBAC form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((UserRBAC) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setRBAC_args)
				return this.equals((setRBAC_args) that);
			return false;
		}

		public boolean equals(setRBAC_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setRBAC_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setRBAC_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (form != null) {
				form.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRBAC_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setRBAC_argsStandardScheme getScheme() {
				return new setRBAC_argsStandardScheme();
			}

		}

		private static class setRBAC_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setRBAC_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRBAC_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new UserRBAC();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRBAC_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRBAC_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setRBAC_argsTupleScheme getScheme() {
				return new setRBAC_argsTupleScheme();
			}

		}

		private static class setRBAC_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setRBAC_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRBAC_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRBAC_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new UserRBAC();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setRBAC_result implements org.apache.thrift.TBase<setRBAC_result, setRBAC_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setRBAC_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRBAC_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRBAC_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRBAC_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserRBAC success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserRBAC.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRBAC_result.class, metaDataMap);
		}

		public setRBAC_result() {
		}

		public setRBAC_result(UserRBAC success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRBAC_result(setRBAC_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserRBAC(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setRBAC_result deepCopy() {
			return new setRBAC_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserRBAC getSuccess() {
			return this.success;
		}

		public setRBAC_result setSuccess(@org.apache.thrift.annotation.Nullable UserRBAC success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setRBAC_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserRBAC) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setRBAC_result)
				return this.equals((setRBAC_result) that);
			return false;
		}

		public boolean equals(setRBAC_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setRBAC_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setRBAC_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRBAC_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setRBAC_resultStandardScheme getScheme() {
				return new setRBAC_resultStandardScheme();
			}

		}

		private static class setRBAC_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setRBAC_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRBAC_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserRBAC();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRBAC_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRBAC_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setRBAC_resultTupleScheme getScheme() {
				return new setRBAC_resultTupleScheme();
			}

		}

		private static class setRBAC_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setRBAC_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRBAC_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRBAC_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserRBAC();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class ensurePerm_args implements org.apache.thrift.TBase<ensurePerm_args, ensurePerm_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<ensurePerm_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ensurePerm_args");

		private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"perm", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensurePerm_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensurePerm_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable RbacPerm perm; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			PERM((short) 1, "perm");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // PERM
					return PERM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.PERM,
					new org.apache.thrift.meta_data.FieldMetaData("perm",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									RbacPerm.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensurePerm_args.class, metaDataMap);
		}

		public ensurePerm_args() {
		}

		public ensurePerm_args(RbacPerm perm) {
			this();
			this.perm = perm;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ensurePerm_args(ensurePerm_args other) {
			if (other.isSetPerm()) {
				this.perm = new RbacPerm(other.perm);
			}
		}

		public ensurePerm_args deepCopy() {
			return new ensurePerm_args(this);
		}

		@Override
		public void clear() {
			this.perm = null;
		}

		@org.apache.thrift.annotation.Nullable
		public RbacPerm getPerm() {
			return this.perm;
		}

		public ensurePerm_args setPerm(@org.apache.thrift.annotation.Nullable RbacPerm perm) {
			this.perm = perm;
			return this;
		}

		public void unsetPerm() {
			this.perm = null;
		}

		/**
		 * Returns true if field perm is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPerm() {
			return this.perm != null;
		}

		public void setPermIsSet(boolean value) {
			if (!value) {
				this.perm = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case PERM:
				if (value == null) {
					unsetPerm();
				}
				else {
					setPerm((RbacPerm) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case PERM:
				return getPerm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case PERM:
				return isSetPerm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof ensurePerm_args)
				return this.equals((ensurePerm_args) that);
			return false;
		}

		public boolean equals(ensurePerm_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_perm = true && this.isSetPerm();
			boolean that_present_perm = true && that.isSetPerm();
			if (this_present_perm || that_present_perm) {
				if (!(this_present_perm && that_present_perm))
					return false;
				if (!this.perm.equals(that.perm))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetPerm()) ? 131071 : 524287);
			if (isSetPerm())
				hashCode = hashCode * 8191 + perm.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(ensurePerm_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetPerm()).compareTo(other.isSetPerm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPerm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, other.perm);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("ensurePerm_args(");
			boolean first = true;

			sb.append("perm:");
			if (this.perm == null) {
				sb.append("null");
			}
			else {
				sb.append(this.perm);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (perm != null) {
				perm.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ensurePerm_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensurePerm_argsStandardScheme getScheme() {
				return new ensurePerm_argsStandardScheme();
			}

		}

		private static class ensurePerm_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<ensurePerm_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ensurePerm_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // PERM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.perm = new RbacPerm();
							struct.perm.read(iprot);
							struct.setPermIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ensurePerm_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.perm != null) {
					oprot.writeFieldBegin(PERM_FIELD_DESC);
					struct.perm.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ensurePerm_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensurePerm_argsTupleScheme getScheme() {
				return new ensurePerm_argsTupleScheme();
			}

		}

		private static class ensurePerm_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ensurePerm_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ensurePerm_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetPerm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetPerm()) {
					struct.perm.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ensurePerm_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.perm = new RbacPerm();
					struct.perm.read(iprot);
					struct.setPermIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class ensurePerm_result
			implements org.apache.thrift.TBase<ensurePerm_result, ensurePerm_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<ensurePerm_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ensurePerm_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensurePerm_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensurePerm_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable RbacPerm success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									RbacPerm.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensurePerm_result.class, metaDataMap);
		}

		public ensurePerm_result() {
		}

		public ensurePerm_result(RbacPerm success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ensurePerm_result(ensurePerm_result other) {
			if (other.isSetSuccess()) {
				this.success = new RbacPerm(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public ensurePerm_result deepCopy() {
			return new ensurePerm_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public RbacPerm getSuccess() {
			return this.success;
		}

		public ensurePerm_result setSuccess(@org.apache.thrift.annotation.Nullable RbacPerm success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public ensurePerm_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((RbacPerm) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof ensurePerm_result)
				return this.equals((ensurePerm_result) that);
			return false;
		}

		public boolean equals(ensurePerm_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(ensurePerm_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("ensurePerm_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ensurePerm_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensurePerm_resultStandardScheme getScheme() {
				return new ensurePerm_resultStandardScheme();
			}

		}

		private static class ensurePerm_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<ensurePerm_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ensurePerm_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new RbacPerm();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ensurePerm_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ensurePerm_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensurePerm_resultTupleScheme getScheme() {
				return new ensurePerm_resultTupleScheme();
			}

		}

		private static class ensurePerm_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<ensurePerm_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ensurePerm_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ensurePerm_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new RbacPerm();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkPassword_args
			implements org.apache.thrift.TBase<checkPassword_args, checkPassword_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<checkPassword_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkPassword_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"cate", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.protocol.TField PSW_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"psw", org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkPassword_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkPassword_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String cate; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String psw; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CATE((short) 2, "cate"), PSW((short) 3, "psw");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CATE
					return CATE;
				case 3: // PSW
					return PSW;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CATE, new org.apache.thrift.meta_data.FieldMetaData("cate",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PSW, new org.apache.thrift.meta_data.FieldMetaData("psw",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkPassword_args.class, metaDataMap);
		}

		public checkPassword_args() {
		}

		public checkPassword_args(java.lang.String uid, java.lang.String cate, java.lang.String psw) {
			this();
			this.uid = uid;
			this.cate = cate;
			this.psw = psw;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkPassword_args(checkPassword_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetCate()) {
				this.cate = other.cate;
			}
			if (other.isSetPsw()) {
				this.psw = other.psw;
			}
		}

		public checkPassword_args deepCopy() {
			return new checkPassword_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.cate = null;
			this.psw = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public checkPassword_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getCate() {
			return this.cate;
		}

		public checkPassword_args setCate(@org.apache.thrift.annotation.Nullable java.lang.String cate) {
			this.cate = cate;
			return this;
		}

		public void unsetCate() {
			this.cate = null;
		}

		/**
		 * Returns true if field cate is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetCate() {
			return this.cate != null;
		}

		public void setCateIsSet(boolean value) {
			if (!value) {
				this.cate = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getPsw() {
			return this.psw;
		}

		public checkPassword_args setPsw(@org.apache.thrift.annotation.Nullable java.lang.String psw) {
			this.psw = psw;
			return this;
		}

		public void unsetPsw() {
			this.psw = null;
		}

		/**
		 * Returns true if field psw is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPsw() {
			return this.psw != null;
		}

		public void setPswIsSet(boolean value) {
			if (!value) {
				this.psw = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CATE:
				if (value == null) {
					unsetCate();
				}
				else {
					setCate((java.lang.String) value);
				}
				break;

			case PSW:
				if (value == null) {
					unsetPsw();
				}
				else {
					setPsw((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CATE:
				return getCate();

			case PSW:
				return getPsw();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CATE:
				return isSetCate();
			case PSW:
				return isSetPsw();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkPassword_args)
				return this.equals((checkPassword_args) that);
			return false;
		}

		public boolean equals(checkPassword_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_cate = true && this.isSetCate();
			boolean that_present_cate = true && that.isSetCate();
			if (this_present_cate || that_present_cate) {
				if (!(this_present_cate && that_present_cate))
					return false;
				if (!this.cate.equals(that.cate))
					return false;
			}

			boolean this_present_psw = true && this.isSetPsw();
			boolean that_present_psw = true && that.isSetPsw();
			if (this_present_psw || that_present_psw) {
				if (!(this_present_psw && that_present_psw))
					return false;
				if (!this.psw.equals(that.psw))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetCate()) ? 131071 : 524287);
			if (isSetCate())
				hashCode = hashCode * 8191 + cate.hashCode();

			hashCode = hashCode * 8191 + ((isSetPsw()) ? 131071 : 524287);
			if (isSetPsw())
				hashCode = hashCode * 8191 + psw.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkPassword_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetCate()).compareTo(other.isSetCate());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCate()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cate, other.cate);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPsw()).compareTo(other.isSetPsw());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPsw()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psw, other.psw);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkPassword_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("cate:");
			if (this.cate == null) {
				sb.append("null");
			}
			else {
				sb.append(this.cate);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("psw:");
			if (this.psw == null) {
				sb.append("null");
			}
			else {
				sb.append(this.psw);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkPassword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkPassword_argsStandardScheme getScheme() {
				return new checkPassword_argsStandardScheme();
			}

		}

		private static class checkPassword_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkPassword_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkPassword_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CATE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.cate = iprot.readString();
							struct.setCateIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // PSW
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.psw = iprot.readString();
							struct.setPswIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkPassword_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.cate != null) {
					oprot.writeFieldBegin(CATE_FIELD_DESC);
					oprot.writeString(struct.cate);
					oprot.writeFieldEnd();
				}
				if (struct.psw != null) {
					oprot.writeFieldBegin(PSW_FIELD_DESC);
					oprot.writeString(struct.psw);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkPassword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkPassword_argsTupleScheme getScheme() {
				return new checkPassword_argsTupleScheme();
			}

		}

		private static class checkPassword_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkPassword_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkPassword_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetCate()) {
					optionals.set(1);
				}
				if (struct.isSetPsw()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetCate()) {
					oprot.writeString(struct.cate);
				}
				if (struct.isSetPsw()) {
					oprot.writeString(struct.psw);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkPassword_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.cate = iprot.readString();
					struct.setCateIsSet(true);
				}
				if (incoming.get(2)) {
					struct.psw = iprot.readString();
					struct.setPswIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkPassword_result
			implements org.apache.thrift.TBase<checkPassword_result, checkPassword_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<checkPassword_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkPassword_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkPassword_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkPassword_resultTupleSchemeFactory();

		public boolean success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkPassword_result.class, metaDataMap);
		}

		public checkPassword_result() {
		}

		public checkPassword_result(boolean success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkPassword_result(checkPassword_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public checkPassword_result deepCopy() {
			return new checkPassword_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.err = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public checkPassword_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public checkPassword_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.lang.Boolean) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkPassword_result)
				return this.equals((checkPassword_result) that);
			return false;
		}

		public boolean equals(checkPassword_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkPassword_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkPassword_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkPassword_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public checkPassword_resultStandardScheme getScheme() {
				return new checkPassword_resultStandardScheme();
			}

		}

		private static class checkPassword_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkPassword_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkPassword_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkPassword_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkPassword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkPassword_resultTupleScheme getScheme() {
				return new checkPassword_resultTupleScheme();
			}

		}

		private static class checkPassword_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkPassword_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkPassword_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkPassword_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkCaptcha_args
			implements org.apache.thrift.TBase<checkCaptcha_args, checkCaptcha_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<checkCaptcha_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkCaptcha_args");

		private static final org.apache.thrift.protocol.TField QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"question", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"answer", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkCaptcha_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkCaptcha_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String question; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String answer; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUESTION((short) 1, "question"), ANSWER((short) 2, "answer");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUESTION
					return QUESTION;
				case 2: // ANSWER
					return ANSWER;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUESTION, new org.apache.thrift.meta_data.FieldMetaData("question",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.ANSWER, new org.apache.thrift.meta_data.FieldMetaData("answer",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkCaptcha_args.class, metaDataMap);
		}

		public checkCaptcha_args() {
		}

		public checkCaptcha_args(java.lang.String question, java.lang.String answer) {
			this();
			this.question = question;
			this.answer = answer;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkCaptcha_args(checkCaptcha_args other) {
			if (other.isSetQuestion()) {
				this.question = other.question;
			}
			if (other.isSetAnswer()) {
				this.answer = other.answer;
			}
		}

		public checkCaptcha_args deepCopy() {
			return new checkCaptcha_args(this);
		}

		@Override
		public void clear() {
			this.question = null;
			this.answer = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getQuestion() {
			return this.question;
		}

		public checkCaptcha_args setQuestion(@org.apache.thrift.annotation.Nullable java.lang.String question) {
			this.question = question;
			return this;
		}

		public void unsetQuestion() {
			this.question = null;
		}

		/**
		 * Returns true if field question is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuestion() {
			return this.question != null;
		}

		public void setQuestionIsSet(boolean value) {
			if (!value) {
				this.question = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getAnswer() {
			return this.answer;
		}

		public checkCaptcha_args setAnswer(@org.apache.thrift.annotation.Nullable java.lang.String answer) {
			this.answer = answer;
			return this;
		}

		public void unsetAnswer() {
			this.answer = null;
		}

		/**
		 * Returns true if field answer is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetAnswer() {
			return this.answer != null;
		}

		public void setAnswerIsSet(boolean value) {
			if (!value) {
				this.answer = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUESTION:
				if (value == null) {
					unsetQuestion();
				}
				else {
					setQuestion((java.lang.String) value);
				}
				break;

			case ANSWER:
				if (value == null) {
					unsetAnswer();
				}
				else {
					setAnswer((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUESTION:
				return getQuestion();

			case ANSWER:
				return getAnswer();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUESTION:
				return isSetQuestion();
			case ANSWER:
				return isSetAnswer();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkCaptcha_args)
				return this.equals((checkCaptcha_args) that);
			return false;
		}

		public boolean equals(checkCaptcha_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_question = true && this.isSetQuestion();
			boolean that_present_question = true && that.isSetQuestion();
			if (this_present_question || that_present_question) {
				if (!(this_present_question && that_present_question))
					return false;
				if (!this.question.equals(that.question))
					return false;
			}

			boolean this_present_answer = true && this.isSetAnswer();
			boolean that_present_answer = true && that.isSetAnswer();
			if (this_present_answer || that_present_answer) {
				if (!(this_present_answer && that_present_answer))
					return false;
				if (!this.answer.equals(that.answer))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuestion()) ? 131071 : 524287);
			if (isSetQuestion())
				hashCode = hashCode * 8191 + question.hashCode();

			hashCode = hashCode * 8191 + ((isSetAnswer()) ? 131071 : 524287);
			if (isSetAnswer())
				hashCode = hashCode * 8191 + answer.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkCaptcha_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuestion()).compareTo(other.isSetQuestion());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuestion()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.question, other.question);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetAnswer()).compareTo(other.isSetAnswer());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAnswer()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answer, other.answer);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkCaptcha_args(");
			boolean first = true;

			sb.append("question:");
			if (this.question == null) {
				sb.append("null");
			}
			else {
				sb.append(this.question);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("answer:");
			if (this.answer == null) {
				sb.append("null");
			}
			else {
				sb.append(this.answer);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkCaptcha_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkCaptcha_argsStandardScheme getScheme() {
				return new checkCaptcha_argsStandardScheme();
			}

		}

		private static class checkCaptcha_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkCaptcha_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkCaptcha_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUESTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.question = iprot.readString();
							struct.setQuestionIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // ANSWER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.answer = iprot.readString();
							struct.setAnswerIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkCaptcha_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.question != null) {
					oprot.writeFieldBegin(QUESTION_FIELD_DESC);
					oprot.writeString(struct.question);
					oprot.writeFieldEnd();
				}
				if (struct.answer != null) {
					oprot.writeFieldBegin(ANSWER_FIELD_DESC);
					oprot.writeString(struct.answer);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkCaptcha_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkCaptcha_argsTupleScheme getScheme() {
				return new checkCaptcha_argsTupleScheme();
			}

		}

		private static class checkCaptcha_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkCaptcha_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkCaptcha_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuestion()) {
					optionals.set(0);
				}
				if (struct.isSetAnswer()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetQuestion()) {
					oprot.writeString(struct.question);
				}
				if (struct.isSetAnswer()) {
					oprot.writeString(struct.answer);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkCaptcha_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.question = iprot.readString();
					struct.setQuestionIsSet(true);
				}
				if (incoming.get(1)) {
					struct.answer = iprot.readString();
					struct.setAnswerIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkCaptcha_result
			implements org.apache.thrift.TBase<checkCaptcha_result, checkCaptcha_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<checkCaptcha_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkCaptcha_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkCaptcha_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkCaptcha_resultTupleSchemeFactory();

		public boolean success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkCaptcha_result.class, metaDataMap);
		}

		public checkCaptcha_result() {
		}

		public checkCaptcha_result(boolean success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkCaptcha_result(checkCaptcha_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public checkCaptcha_result deepCopy() {
			return new checkCaptcha_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.err = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public checkCaptcha_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public checkCaptcha_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.lang.Boolean) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkCaptcha_result)
				return this.equals((checkCaptcha_result) that);
			return false;
		}

		public boolean equals(checkCaptcha_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkCaptcha_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkCaptcha_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkCaptcha_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public checkCaptcha_resultStandardScheme getScheme() {
				return new checkCaptcha_resultStandardScheme();
			}

		}

		private static class checkCaptcha_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkCaptcha_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkCaptcha_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkCaptcha_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkCaptcha_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkCaptcha_resultTupleScheme getScheme() {
				return new checkCaptcha_resultTupleScheme();
			}

		}

		private static class checkCaptcha_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkCaptcha_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkCaptcha_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkCaptcha_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkVerify_args implements org.apache.thrift.TBase<checkVerify_args, checkVerify_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<checkVerify_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkVerify_args");

		private static final org.apache.thrift.protocol.TField QUESTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"question", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"answer", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkVerify_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkVerify_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String question; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String answer; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUESTION((short) 1, "question"), ANSWER((short) 2, "answer");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUESTION
					return QUESTION;
				case 2: // ANSWER
					return ANSWER;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUESTION, new org.apache.thrift.meta_data.FieldMetaData("question",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.ANSWER, new org.apache.thrift.meta_data.FieldMetaData("answer",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkVerify_args.class, metaDataMap);
		}

		public checkVerify_args() {
		}

		public checkVerify_args(java.lang.String question, java.lang.String answer) {
			this();
			this.question = question;
			this.answer = answer;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkVerify_args(checkVerify_args other) {
			if (other.isSetQuestion()) {
				this.question = other.question;
			}
			if (other.isSetAnswer()) {
				this.answer = other.answer;
			}
		}

		public checkVerify_args deepCopy() {
			return new checkVerify_args(this);
		}

		@Override
		public void clear() {
			this.question = null;
			this.answer = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getQuestion() {
			return this.question;
		}

		public checkVerify_args setQuestion(@org.apache.thrift.annotation.Nullable java.lang.String question) {
			this.question = question;
			return this;
		}

		public void unsetQuestion() {
			this.question = null;
		}

		/**
		 * Returns true if field question is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuestion() {
			return this.question != null;
		}

		public void setQuestionIsSet(boolean value) {
			if (!value) {
				this.question = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getAnswer() {
			return this.answer;
		}

		public checkVerify_args setAnswer(@org.apache.thrift.annotation.Nullable java.lang.String answer) {
			this.answer = answer;
			return this;
		}

		public void unsetAnswer() {
			this.answer = null;
		}

		/**
		 * Returns true if field answer is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetAnswer() {
			return this.answer != null;
		}

		public void setAnswerIsSet(boolean value) {
			if (!value) {
				this.answer = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUESTION:
				if (value == null) {
					unsetQuestion();
				}
				else {
					setQuestion((java.lang.String) value);
				}
				break;

			case ANSWER:
				if (value == null) {
					unsetAnswer();
				}
				else {
					setAnswer((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUESTION:
				return getQuestion();

			case ANSWER:
				return getAnswer();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUESTION:
				return isSetQuestion();
			case ANSWER:
				return isSetAnswer();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkVerify_args)
				return this.equals((checkVerify_args) that);
			return false;
		}

		public boolean equals(checkVerify_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_question = true && this.isSetQuestion();
			boolean that_present_question = true && that.isSetQuestion();
			if (this_present_question || that_present_question) {
				if (!(this_present_question && that_present_question))
					return false;
				if (!this.question.equals(that.question))
					return false;
			}

			boolean this_present_answer = true && this.isSetAnswer();
			boolean that_present_answer = true && that.isSetAnswer();
			if (this_present_answer || that_present_answer) {
				if (!(this_present_answer && that_present_answer))
					return false;
				if (!this.answer.equals(that.answer))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuestion()) ? 131071 : 524287);
			if (isSetQuestion())
				hashCode = hashCode * 8191 + question.hashCode();

			hashCode = hashCode * 8191 + ((isSetAnswer()) ? 131071 : 524287);
			if (isSetAnswer())
				hashCode = hashCode * 8191 + answer.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkVerify_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuestion()).compareTo(other.isSetQuestion());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuestion()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.question, other.question);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetAnswer()).compareTo(other.isSetAnswer());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAnswer()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answer, other.answer);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkVerify_args(");
			boolean first = true;

			sb.append("question:");
			if (this.question == null) {
				sb.append("null");
			}
			else {
				sb.append(this.question);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("answer:");
			if (this.answer == null) {
				sb.append("null");
			}
			else {
				sb.append(this.answer);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkVerify_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkVerify_argsStandardScheme getScheme() {
				return new checkVerify_argsStandardScheme();
			}

		}

		private static class checkVerify_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkVerify_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkVerify_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUESTION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.question = iprot.readString();
							struct.setQuestionIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // ANSWER
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.answer = iprot.readString();
							struct.setAnswerIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkVerify_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.question != null) {
					oprot.writeFieldBegin(QUESTION_FIELD_DESC);
					oprot.writeString(struct.question);
					oprot.writeFieldEnd();
				}
				if (struct.answer != null) {
					oprot.writeFieldBegin(ANSWER_FIELD_DESC);
					oprot.writeString(struct.answer);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkVerify_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkVerify_argsTupleScheme getScheme() {
				return new checkVerify_argsTupleScheme();
			}

		}

		private static class checkVerify_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkVerify_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkVerify_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuestion()) {
					optionals.set(0);
				}
				if (struct.isSetAnswer()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetQuestion()) {
					oprot.writeString(struct.question);
				}
				if (struct.isSetAnswer()) {
					oprot.writeString(struct.answer);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkVerify_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.question = iprot.readString();
					struct.setQuestionIsSet(true);
				}
				if (incoming.get(1)) {
					struct.answer = iprot.readString();
					struct.setAnswerIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkVerify_result
			implements org.apache.thrift.TBase<checkVerify_result, checkVerify_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<checkVerify_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkVerify_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkVerify_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkVerify_resultTupleSchemeFactory();

		public boolean success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkVerify_result.class, metaDataMap);
		}

		public checkVerify_result() {
		}

		public checkVerify_result(boolean success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkVerify_result(checkVerify_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public checkVerify_result deepCopy() {
			return new checkVerify_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.err = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public checkVerify_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public checkVerify_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.lang.Boolean) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkVerify_result)
				return this.equals((checkVerify_result) that);
			return false;
		}

		public boolean equals(checkVerify_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkVerify_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkVerify_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkVerify_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkVerify_resultStandardScheme getScheme() {
				return new checkVerify_resultStandardScheme();
			}

		}

		private static class checkVerify_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkVerify_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkVerify_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkVerify_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkVerify_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkVerify_resultTupleScheme getScheme() {
				return new checkVerify_resultTupleScheme();
			}

		}

		private static class checkVerify_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkVerify_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkVerify_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkVerify_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkGranted_args
			implements org.apache.thrift.TBase<checkGranted_args, checkGranted_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<checkGranted_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkGranted_args");

		private static final org.apache.thrift.protocol.TField ROLE_LIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"roleLis", org.apache.thrift.protocol.TType.LIST, (short) 1);

		private static final org.apache.thrift.protocol.TField PERM_LIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"permLis", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkGranted_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkGranted_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roleLis; // required

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> permLis; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			ROLE_LIS((short) 1, "roleLis"), PERM_LIS((short) 2, "permLis");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ROLE_LIS
					return ROLE_LIS;
				case 2: // PERM_LIS
					return PERM_LIS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ROLE_LIS,
					new org.apache.thrift.meta_data.FieldMetaData("roleLis",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			tmpMap.put(_Fields.PERM_LIS,
					new org.apache.thrift.meta_data.FieldMetaData("permLis",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkGranted_args.class, metaDataMap);
		}

		public checkGranted_args() {
		}

		public checkGranted_args(java.util.List<java.lang.String> roleLis, java.util.List<java.lang.String> permLis) {
			this();
			this.roleLis = roleLis;
			this.permLis = permLis;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkGranted_args(checkGranted_args other) {
			if (other.isSetRoleLis()) {
				java.util.List<java.lang.String> __this__roleLis = new java.util.ArrayList<java.lang.String>(
						other.roleLis);
				this.roleLis = __this__roleLis;
			}
			if (other.isSetPermLis()) {
				java.util.List<java.lang.String> __this__permLis = new java.util.ArrayList<java.lang.String>(
						other.permLis);
				this.permLis = __this__permLis;
			}
		}

		public checkGranted_args deepCopy() {
			return new checkGranted_args(this);
		}

		@Override
		public void clear() {
			this.roleLis = null;
			this.permLis = null;
		}

		public int getRoleLisSize() {
			return (this.roleLis == null) ? 0 : this.roleLis.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getRoleLisIterator() {
			return (this.roleLis == null) ? null : this.roleLis.iterator();
		}

		public void addToRoleLis(java.lang.String elem) {
			if (this.roleLis == null) {
				this.roleLis = new java.util.ArrayList<java.lang.String>();
			}
			this.roleLis.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getRoleLis() {
			return this.roleLis;
		}

		public checkGranted_args setRoleLis(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roleLis) {
			this.roleLis = roleLis;
			return this;
		}

		public void unsetRoleLis() {
			this.roleLis = null;
		}

		/**
		 * Returns true if field roleLis is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRoleLis() {
			return this.roleLis != null;
		}

		public void setRoleLisIsSet(boolean value) {
			if (!value) {
				this.roleLis = null;
			}
		}

		public int getPermLisSize() {
			return (this.permLis == null) ? 0 : this.permLis.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getPermLisIterator() {
			return (this.permLis == null) ? null : this.permLis.iterator();
		}

		public void addToPermLis(java.lang.String elem) {
			if (this.permLis == null) {
				this.permLis = new java.util.ArrayList<java.lang.String>();
			}
			this.permLis.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getPermLis() {
			return this.permLis;
		}

		public checkGranted_args setPermLis(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> permLis) {
			this.permLis = permLis;
			return this;
		}

		public void unsetPermLis() {
			this.permLis = null;
		}

		/**
		 * Returns true if field permLis is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPermLis() {
			return this.permLis != null;
		}

		public void setPermLisIsSet(boolean value) {
			if (!value) {
				this.permLis = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case ROLE_LIS:
				if (value == null) {
					unsetRoleLis();
				}
				else {
					setRoleLis((java.util.List<java.lang.String>) value);
				}
				break;

			case PERM_LIS:
				if (value == null) {
					unsetPermLis();
				}
				else {
					setPermLis((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ROLE_LIS:
				return getRoleLis();

			case PERM_LIS:
				return getPermLis();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ROLE_LIS:
				return isSetRoleLis();
			case PERM_LIS:
				return isSetPermLis();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkGranted_args)
				return this.equals((checkGranted_args) that);
			return false;
		}

		public boolean equals(checkGranted_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_roleLis = true && this.isSetRoleLis();
			boolean that_present_roleLis = true && that.isSetRoleLis();
			if (this_present_roleLis || that_present_roleLis) {
				if (!(this_present_roleLis && that_present_roleLis))
					return false;
				if (!this.roleLis.equals(that.roleLis))
					return false;
			}

			boolean this_present_permLis = true && this.isSetPermLis();
			boolean that_present_permLis = true && that.isSetPermLis();
			if (this_present_permLis || that_present_permLis) {
				if (!(this_present_permLis && that_present_permLis))
					return false;
				if (!this.permLis.equals(that.permLis))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetRoleLis()) ? 131071 : 524287);
			if (isSetRoleLis())
				hashCode = hashCode * 8191 + roleLis.hashCode();

			hashCode = hashCode * 8191 + ((isSetPermLis()) ? 131071 : 524287);
			if (isSetPermLis())
				hashCode = hashCode * 8191 + permLis.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkGranted_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetRoleLis()).compareTo(other.isSetRoleLis());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRoleLis()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleLis, other.roleLis);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPermLis()).compareTo(other.isSetPermLis());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPermLis()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permLis, other.permLis);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkGranted_args(");
			boolean first = true;

			sb.append("roleLis:");
			if (this.roleLis == null) {
				sb.append("null");
			}
			else {
				sb.append(this.roleLis);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("permLis:");
			if (this.permLis == null) {
				sb.append("null");
			}
			else {
				sb.append(this.permLis);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkGranted_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkGranted_argsStandardScheme getScheme() {
				return new checkGranted_argsStandardScheme();
			}

		}

		private static class checkGranted_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkGranted_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkGranted_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ROLE_LIS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
								struct.roleLis = new java.util.ArrayList<java.lang.String>(_list204.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem205;
								for (int _i206 = 0; _i206 < _list204.size; ++_i206) {
									_elem205 = iprot.readString();
									struct.roleLis.add(_elem205);
								}
								iprot.readListEnd();
							}
							struct.setRoleLisIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // PERM_LIS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list207 = iprot.readListBegin();
								struct.permLis = new java.util.ArrayList<java.lang.String>(_list207.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem208;
								for (int _i209 = 0; _i209 < _list207.size; ++_i209) {
									_elem208 = iprot.readString();
									struct.permLis.add(_elem208);
								}
								iprot.readListEnd();
							}
							struct.setPermLisIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkGranted_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.roleLis != null) {
					oprot.writeFieldBegin(ROLE_LIS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.roleLis.size()));
						for (java.lang.String _iter210 : struct.roleLis) {
							oprot.writeString(_iter210);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.permLis != null) {
					oprot.writeFieldBegin(PERM_LIS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.permLis.size()));
						for (java.lang.String _iter211 : struct.permLis) {
							oprot.writeString(_iter211);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkGranted_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkGranted_argsTupleScheme getScheme() {
				return new checkGranted_argsTupleScheme();
			}

		}

		private static class checkGranted_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkGranted_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkGranted_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetRoleLis()) {
					optionals.set(0);
				}
				if (struct.isSetPermLis()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetRoleLis()) {
					{
						oprot.writeI32(struct.roleLis.size());
						for (java.lang.String _iter212 : struct.roleLis) {
							oprot.writeString(_iter212);
						}
					}
				}
				if (struct.isSetPermLis()) {
					{
						oprot.writeI32(struct.permLis.size());
						for (java.lang.String _iter213 : struct.permLis) {
							oprot.writeString(_iter213);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkGranted_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list214 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.roleLis = new java.util.ArrayList<java.lang.String>(_list214.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem215;
						for (int _i216 = 0; _i216 < _list214.size; ++_i216) {
							_elem215 = iprot.readString();
							struct.roleLis.add(_elem215);
						}
					}
					struct.setRoleLisIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list217 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.permLis = new java.util.ArrayList<java.lang.String>(_list217.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem218;
						for (int _i219 = 0; _i219 < _list217.size; ++_i219) {
							_elem218 = iprot.readString();
							struct.permLis.add(_elem218);
						}
					}
					struct.setPermLisIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkGranted_result
			implements org.apache.thrift.TBase<checkGranted_result, checkGranted_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<checkGranted_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkGranted_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkGranted_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkGranted_resultTupleSchemeFactory();

		public boolean success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkGranted_result.class, metaDataMap);
		}

		public checkGranted_result() {
		}

		public checkGranted_result(boolean success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkGranted_result(checkGranted_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public checkGranted_result deepCopy() {
			return new checkGranted_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.err = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public checkGranted_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public checkGranted_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.lang.Boolean) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkGranted_result)
				return this.equals((checkGranted_result) that);
			return false;
		}

		public boolean equals(checkGranted_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkGranted_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkGranted_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkGranted_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public checkGranted_resultStandardScheme getScheme() {
				return new checkGranted_resultStandardScheme();
			}

		}

		private static class checkGranted_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkGranted_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkGranted_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkGranted_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkGranted_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkGranted_resultTupleScheme getScheme() {
				return new checkGranted_resultTupleScheme();
			}

		}

		private static class checkGranted_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkGranted_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkGranted_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkGranted_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkPerms_args implements org.apache.thrift.TBase<checkPerms_args, checkPerms_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<checkPerms_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkPerms_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField PERM_LIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"permLis", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkPerms_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkPerms_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> permLis; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), PERM_LIS((short) 2, "permLis");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // PERM_LIS
					return PERM_LIS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PERM_LIS,
					new org.apache.thrift.meta_data.FieldMetaData("permLis",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkPerms_args.class, metaDataMap);
		}

		public checkPerms_args() {
		}

		public checkPerms_args(java.lang.String uid, java.util.List<java.lang.String> permLis) {
			this();
			this.uid = uid;
			this.permLis = permLis;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkPerms_args(checkPerms_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetPermLis()) {
				java.util.List<java.lang.String> __this__permLis = new java.util.ArrayList<java.lang.String>(
						other.permLis);
				this.permLis = __this__permLis;
			}
		}

		public checkPerms_args deepCopy() {
			return new checkPerms_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.permLis = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public checkPerms_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public int getPermLisSize() {
			return (this.permLis == null) ? 0 : this.permLis.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getPermLisIterator() {
			return (this.permLis == null) ? null : this.permLis.iterator();
		}

		public void addToPermLis(java.lang.String elem) {
			if (this.permLis == null) {
				this.permLis = new java.util.ArrayList<java.lang.String>();
			}
			this.permLis.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getPermLis() {
			return this.permLis;
		}

		public checkPerms_args setPermLis(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> permLis) {
			this.permLis = permLis;
			return this;
		}

		public void unsetPermLis() {
			this.permLis = null;
		}

		/**
		 * Returns true if field permLis is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPermLis() {
			return this.permLis != null;
		}

		public void setPermLisIsSet(boolean value) {
			if (!value) {
				this.permLis = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case PERM_LIS:
				if (value == null) {
					unsetPermLis();
				}
				else {
					setPermLis((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case PERM_LIS:
				return getPermLis();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case PERM_LIS:
				return isSetPermLis();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkPerms_args)
				return this.equals((checkPerms_args) that);
			return false;
		}

		public boolean equals(checkPerms_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_permLis = true && this.isSetPermLis();
			boolean that_present_permLis = true && that.isSetPermLis();
			if (this_present_permLis || that_present_permLis) {
				if (!(this_present_permLis && that_present_permLis))
					return false;
				if (!this.permLis.equals(that.permLis))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetPermLis()) ? 131071 : 524287);
			if (isSetPermLis())
				hashCode = hashCode * 8191 + permLis.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkPerms_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPermLis()).compareTo(other.isSetPermLis());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPermLis()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permLis, other.permLis);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkPerms_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("permLis:");
			if (this.permLis == null) {
				sb.append("null");
			}
			else {
				sb.append(this.permLis);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkPerms_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkPerms_argsStandardScheme getScheme() {
				return new checkPerms_argsStandardScheme();
			}

		}

		private static class checkPerms_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkPerms_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkPerms_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // PERM_LIS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list220 = iprot.readListBegin();
								struct.permLis = new java.util.ArrayList<java.lang.String>(_list220.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem221;
								for (int _i222 = 0; _i222 < _list220.size; ++_i222) {
									_elem221 = iprot.readString();
									struct.permLis.add(_elem221);
								}
								iprot.readListEnd();
							}
							struct.setPermLisIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkPerms_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.permLis != null) {
					oprot.writeFieldBegin(PERM_LIS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.permLis.size()));
						for (java.lang.String _iter223 : struct.permLis) {
							oprot.writeString(_iter223);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkPerms_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkPerms_argsTupleScheme getScheme() {
				return new checkPerms_argsTupleScheme();
			}

		}

		private static class checkPerms_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkPerms_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkPerms_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetPermLis()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetPermLis()) {
					{
						oprot.writeI32(struct.permLis.size());
						for (java.lang.String _iter224 : struct.permLis) {
							oprot.writeString(_iter224);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkPerms_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list225 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.permLis = new java.util.ArrayList<java.lang.String>(_list225.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem226;
						for (int _i227 = 0; _i227 < _list225.size; ++_i227) {
							_elem226 = iprot.readString();
							struct.permLis.add(_elem226);
						}
					}
					struct.setPermLisIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkPerms_result
			implements org.apache.thrift.TBase<checkPerms_result, checkPerms_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<checkPerms_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkPerms_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkPerms_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkPerms_resultTupleSchemeFactory();

		public boolean success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkPerms_result.class, metaDataMap);
		}

		public checkPerms_result() {
		}

		public checkPerms_result(boolean success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkPerms_result(checkPerms_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public checkPerms_result deepCopy() {
			return new checkPerms_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.err = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public checkPerms_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public checkPerms_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.lang.Boolean) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkPerms_result)
				return this.equals((checkPerms_result) that);
			return false;
		}

		public boolean equals(checkPerms_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkPerms_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkPerms_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkPerms_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkPerms_resultStandardScheme getScheme() {
				return new checkPerms_resultStandardScheme();
			}

		}

		private static class checkPerms_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkPerms_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkPerms_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkPerms_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkPerms_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkPerms_resultTupleScheme getScheme() {
				return new checkPerms_resultTupleScheme();
			}

		}

		private static class checkPerms_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkPerms_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkPerms_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkPerms_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkRoles_args implements org.apache.thrift.TBase<checkRoles_args, checkRoles_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<checkRoles_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkRoles_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField ROLE_LIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"roleLis", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkRoles_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkRoles_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roleLis; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), ROLE_LIS((short) 2, "roleLis");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // ROLE_LIS
					return ROLE_LIS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.ROLE_LIS,
					new org.apache.thrift.meta_data.FieldMetaData("roleLis",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRoles_args.class, metaDataMap);
		}

		public checkRoles_args() {
		}

		public checkRoles_args(java.lang.String uid, java.util.List<java.lang.String> roleLis) {
			this();
			this.uid = uid;
			this.roleLis = roleLis;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkRoles_args(checkRoles_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetRoleLis()) {
				java.util.List<java.lang.String> __this__roleLis = new java.util.ArrayList<java.lang.String>(
						other.roleLis);
				this.roleLis = __this__roleLis;
			}
		}

		public checkRoles_args deepCopy() {
			return new checkRoles_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.roleLis = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public checkRoles_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public int getRoleLisSize() {
			return (this.roleLis == null) ? 0 : this.roleLis.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getRoleLisIterator() {
			return (this.roleLis == null) ? null : this.roleLis.iterator();
		}

		public void addToRoleLis(java.lang.String elem) {
			if (this.roleLis == null) {
				this.roleLis = new java.util.ArrayList<java.lang.String>();
			}
			this.roleLis.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getRoleLis() {
			return this.roleLis;
		}

		public checkRoles_args setRoleLis(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roleLis) {
			this.roleLis = roleLis;
			return this;
		}

		public void unsetRoleLis() {
			this.roleLis = null;
		}

		/**
		 * Returns true if field roleLis is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRoleLis() {
			return this.roleLis != null;
		}

		public void setRoleLisIsSet(boolean value) {
			if (!value) {
				this.roleLis = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case ROLE_LIS:
				if (value == null) {
					unsetRoleLis();
				}
				else {
					setRoleLis((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case ROLE_LIS:
				return getRoleLis();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case ROLE_LIS:
				return isSetRoleLis();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkRoles_args)
				return this.equals((checkRoles_args) that);
			return false;
		}

		public boolean equals(checkRoles_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_roleLis = true && this.isSetRoleLis();
			boolean that_present_roleLis = true && that.isSetRoleLis();
			if (this_present_roleLis || that_present_roleLis) {
				if (!(this_present_roleLis && that_present_roleLis))
					return false;
				if (!this.roleLis.equals(that.roleLis))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetRoleLis()) ? 131071 : 524287);
			if (isSetRoleLis())
				hashCode = hashCode * 8191 + roleLis.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkRoles_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRoleLis()).compareTo(other.isSetRoleLis());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRoleLis()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleLis, other.roleLis);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkRoles_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("roleLis:");
			if (this.roleLis == null) {
				sb.append("null");
			}
			else {
				sb.append(this.roleLis);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkRoles_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkRoles_argsStandardScheme getScheme() {
				return new checkRoles_argsStandardScheme();
			}

		}

		private static class checkRoles_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkRoles_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkRoles_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // ROLE_LIS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list228 = iprot.readListBegin();
								struct.roleLis = new java.util.ArrayList<java.lang.String>(_list228.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem229;
								for (int _i230 = 0; _i230 < _list228.size; ++_i230) {
									_elem229 = iprot.readString();
									struct.roleLis.add(_elem229);
								}
								iprot.readListEnd();
							}
							struct.setRoleLisIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkRoles_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.roleLis != null) {
					oprot.writeFieldBegin(ROLE_LIS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.roleLis.size()));
						for (java.lang.String _iter231 : struct.roleLis) {
							oprot.writeString(_iter231);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkRoles_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkRoles_argsTupleScheme getScheme() {
				return new checkRoles_argsTupleScheme();
			}

		}

		private static class checkRoles_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkRoles_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkRoles_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetRoleLis()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetRoleLis()) {
					{
						oprot.writeI32(struct.roleLis.size());
						for (java.lang.String _iter232 : struct.roleLis) {
							oprot.writeString(_iter232);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkRoles_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list233 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.roleLis = new java.util.ArrayList<java.lang.String>(_list233.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem234;
						for (int _i235 = 0; _i235 < _list233.size; ++_i235) {
							_elem234 = iprot.readString();
							struct.roleLis.add(_elem234);
						}
					}
					struct.setRoleLisIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkRoles_result
			implements org.apache.thrift.TBase<checkRoles_result, checkRoles_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<checkRoles_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkRoles_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkRoles_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkRoles_resultTupleSchemeFactory();

		public boolean success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRoles_result.class, metaDataMap);
		}

		public checkRoles_result() {
		}

		public checkRoles_result(boolean success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkRoles_result(checkRoles_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public checkRoles_result deepCopy() {
			return new checkRoles_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.err = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public checkRoles_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public checkRoles_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.lang.Boolean) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkRoles_result)
				return this.equals((checkRoles_result) that);
			return false;
		}

		public boolean equals(checkRoles_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkRoles_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkRoles_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkRoles_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkRoles_resultStandardScheme getScheme() {
				return new checkRoles_resultStandardScheme();
			}

		}

		private static class checkRoles_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkRoles_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkRoles_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkRoles_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkRoles_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkRoles_resultTupleScheme getScheme() {
				return new checkRoles_resultTupleScheme();
			}

		}

		private static class checkRoles_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkRoles_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkRoles_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkRoles_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkAreas_args implements org.apache.thrift.TBase<checkAreas_args, checkAreas_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<checkAreas_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkAreas_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField AREA_LIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"areaLis", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkAreas_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkAreas_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> areaLis; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), AREA_LIS((short) 2, "areaLis");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // AREA_LIS
					return AREA_LIS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.AREA_LIS,
					new org.apache.thrift.meta_data.FieldMetaData("areaLis",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAreas_args.class, metaDataMap);
		}

		public checkAreas_args() {
		}

		public checkAreas_args(java.lang.String uid, java.util.List<java.lang.String> areaLis) {
			this();
			this.uid = uid;
			this.areaLis = areaLis;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkAreas_args(checkAreas_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetAreaLis()) {
				java.util.List<java.lang.String> __this__areaLis = new java.util.ArrayList<java.lang.String>(
						other.areaLis);
				this.areaLis = __this__areaLis;
			}
		}

		public checkAreas_args deepCopy() {
			return new checkAreas_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.areaLis = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public checkAreas_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public int getAreaLisSize() {
			return (this.areaLis == null) ? 0 : this.areaLis.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getAreaLisIterator() {
			return (this.areaLis == null) ? null : this.areaLis.iterator();
		}

		public void addToAreaLis(java.lang.String elem) {
			if (this.areaLis == null) {
				this.areaLis = new java.util.ArrayList<java.lang.String>();
			}
			this.areaLis.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getAreaLis() {
			return this.areaLis;
		}

		public checkAreas_args setAreaLis(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> areaLis) {
			this.areaLis = areaLis;
			return this;
		}

		public void unsetAreaLis() {
			this.areaLis = null;
		}

		/**
		 * Returns true if field areaLis is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetAreaLis() {
			return this.areaLis != null;
		}

		public void setAreaLisIsSet(boolean value) {
			if (!value) {
				this.areaLis = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case AREA_LIS:
				if (value == null) {
					unsetAreaLis();
				}
				else {
					setAreaLis((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case AREA_LIS:
				return getAreaLis();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case AREA_LIS:
				return isSetAreaLis();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkAreas_args)
				return this.equals((checkAreas_args) that);
			return false;
		}

		public boolean equals(checkAreas_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_areaLis = true && this.isSetAreaLis();
			boolean that_present_areaLis = true && that.isSetAreaLis();
			if (this_present_areaLis || that_present_areaLis) {
				if (!(this_present_areaLis && that_present_areaLis))
					return false;
				if (!this.areaLis.equals(that.areaLis))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetAreaLis()) ? 131071 : 524287);
			if (isSetAreaLis())
				hashCode = hashCode * 8191 + areaLis.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkAreas_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetAreaLis()).compareTo(other.isSetAreaLis());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetAreaLis()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaLis, other.areaLis);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkAreas_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("areaLis:");
			if (this.areaLis == null) {
				sb.append("null");
			}
			else {
				sb.append(this.areaLis);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkAreas_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkAreas_argsStandardScheme getScheme() {
				return new checkAreas_argsStandardScheme();
			}

		}

		private static class checkAreas_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkAreas_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkAreas_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // AREA_LIS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list236 = iprot.readListBegin();
								struct.areaLis = new java.util.ArrayList<java.lang.String>(_list236.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem237;
								for (int _i238 = 0; _i238 < _list236.size; ++_i238) {
									_elem237 = iprot.readString();
									struct.areaLis.add(_elem237);
								}
								iprot.readListEnd();
							}
							struct.setAreaLisIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkAreas_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.areaLis != null) {
					oprot.writeFieldBegin(AREA_LIS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.areaLis.size()));
						for (java.lang.String _iter239 : struct.areaLis) {
							oprot.writeString(_iter239);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkAreas_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkAreas_argsTupleScheme getScheme() {
				return new checkAreas_argsTupleScheme();
			}

		}

		private static class checkAreas_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkAreas_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkAreas_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetAreaLis()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetAreaLis()) {
					{
						oprot.writeI32(struct.areaLis.size());
						for (java.lang.String _iter240 : struct.areaLis) {
							oprot.writeString(_iter240);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkAreas_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list241 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.areaLis = new java.util.ArrayList<java.lang.String>(_list241.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem242;
						for (int _i243 = 0; _i243 < _list241.size; ++_i243) {
							_elem242 = iprot.readString();
							struct.areaLis.add(_elem242);
						}
					}
					struct.setAreaLisIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class checkAreas_result
			implements org.apache.thrift.TBase<checkAreas_result, checkAreas_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<checkAreas_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"checkAreas_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkAreas_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkAreas_resultTupleSchemeFactory();

		public boolean success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkAreas_result.class, metaDataMap);
		}

		public checkAreas_result() {
		}

		public checkAreas_result(boolean success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public checkAreas_result(checkAreas_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public checkAreas_result deepCopy() {
			return new checkAreas_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
			this.err = null;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public checkAreas_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public checkAreas_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.lang.Boolean) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return isSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof checkAreas_result)
				return this.equals((checkAreas_result) that);
			return false;
		}

		public boolean equals(checkAreas_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(checkAreas_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("checkAreas_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class checkAreas_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkAreas_resultStandardScheme getScheme() {
				return new checkAreas_resultStandardScheme();
			}

		}

		private static class checkAreas_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<checkAreas_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, checkAreas_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, checkAreas_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class checkAreas_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public checkAreas_resultTupleScheme getScheme() {
				return new checkAreas_resultTupleScheme();
			}

		}

		private static class checkAreas_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<checkAreas_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, checkAreas_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, checkAreas_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class findPerms_args implements org.apache.thrift.TBase<findPerms_args, findPerms_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<findPerms_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"findPerms_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField PERM_REG_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"permReg", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPerms_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPerms_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String permReg; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), PERM_REG((short) 2, "permReg");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // PERM_REG
					return PERM_REG;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PERM_REG, new org.apache.thrift.meta_data.FieldMetaData("permReg",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPerms_args.class, metaDataMap);
		}

		public findPerms_args() {
		}

		public findPerms_args(java.lang.String uid, java.lang.String permReg) {
			this();
			this.uid = uid;
			this.permReg = permReg;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public findPerms_args(findPerms_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetPermReg()) {
				this.permReg = other.permReg;
			}
		}

		public findPerms_args deepCopy() {
			return new findPerms_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.permReg = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public findPerms_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getPermReg() {
			return this.permReg;
		}

		public findPerms_args setPermReg(@org.apache.thrift.annotation.Nullable java.lang.String permReg) {
			this.permReg = permReg;
			return this;
		}

		public void unsetPermReg() {
			this.permReg = null;
		}

		/**
		 * Returns true if field permReg is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPermReg() {
			return this.permReg != null;
		}

		public void setPermRegIsSet(boolean value) {
			if (!value) {
				this.permReg = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case PERM_REG:
				if (value == null) {
					unsetPermReg();
				}
				else {
					setPermReg((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case PERM_REG:
				return getPermReg();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case PERM_REG:
				return isSetPermReg();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof findPerms_args)
				return this.equals((findPerms_args) that);
			return false;
		}

		public boolean equals(findPerms_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_permReg = true && this.isSetPermReg();
			boolean that_present_permReg = true && that.isSetPermReg();
			if (this_present_permReg || that_present_permReg) {
				if (!(this_present_permReg && that_present_permReg))
					return false;
				if (!this.permReg.equals(that.permReg))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetPermReg()) ? 131071 : 524287);
			if (isSetPermReg())
				hashCode = hashCode * 8191 + permReg.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(findPerms_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPermReg()).compareTo(other.isSetPermReg());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPermReg()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.permReg, other.permReg);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("findPerms_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("permReg:");
			if (this.permReg == null) {
				sb.append("null");
			}
			else {
				sb.append(this.permReg);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class findPerms_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public findPerms_argsStandardScheme getScheme() {
				return new findPerms_argsStandardScheme();
			}

		}

		private static class findPerms_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<findPerms_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, findPerms_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // PERM_REG
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.permReg = iprot.readString();
							struct.setPermRegIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, findPerms_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.permReg != null) {
					oprot.writeFieldBegin(PERM_REG_FIELD_DESC);
					oprot.writeString(struct.permReg);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class findPerms_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public findPerms_argsTupleScheme getScheme() {
				return new findPerms_argsTupleScheme();
			}

		}

		private static class findPerms_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findPerms_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, findPerms_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetPermReg()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetPermReg()) {
					oprot.writeString(struct.permReg);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, findPerms_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.permReg = iprot.readString();
					struct.setPermRegIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class findPerms_result implements org.apache.thrift.TBase<findPerms_result, findPerms_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<findPerms_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"findPerms_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findPerms_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findPerms_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<RbacPerm> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									RbacPerm.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPerms_result.class, metaDataMap);
		}

		public findPerms_result() {
		}

		public findPerms_result(java.util.List<RbacPerm> success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public findPerms_result(findPerms_result other) {
			if (other.isSetSuccess()) {
				java.util.List<RbacPerm> __this__success = new java.util.ArrayList<RbacPerm>(other.success.size());
				for (RbacPerm other_element : other.success) {
					__this__success.add(new RbacPerm(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public findPerms_result deepCopy() {
			return new findPerms_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<RbacPerm> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(RbacPerm elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<RbacPerm>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<RbacPerm> getSuccess() {
			return this.success;
		}

		public findPerms_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<RbacPerm> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public findPerms_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<RbacPerm>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof findPerms_result)
				return this.equals((findPerms_result) that);
			return false;
		}

		public boolean equals(findPerms_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(findPerms_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("findPerms_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class findPerms_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public findPerms_resultStandardScheme getScheme() {
				return new findPerms_resultStandardScheme();
			}

		}

		private static class findPerms_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<findPerms_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, findPerms_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list244 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<RbacPerm>(_list244.size);
								@org.apache.thrift.annotation.Nullable
								RbacPerm _elem245;
								for (int _i246 = 0; _i246 < _list244.size; ++_i246) {
									_elem245 = new RbacPerm();
									_elem245.read(iprot);
									struct.success.add(_elem245);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, findPerms_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (RbacPerm _iter247 : struct.success) {
							_iter247.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class findPerms_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public findPerms_resultTupleScheme getScheme() {
				return new findPerms_resultTupleScheme();
			}

		}

		private static class findPerms_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<findPerms_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, findPerms_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (RbacPerm _iter248 : struct.success) {
							_iter248.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, findPerms_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list249 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<RbacPerm>(_list249.size);
						@org.apache.thrift.annotation.Nullable
						RbacPerm _elem250;
						for (int _i251 = 0; _i251 < _list249.size; ++_i251) {
							_elem250 = new RbacPerm();
							_elem250.read(iprot);
							struct.success.add(_elem250);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addAction_args implements org.apache.thrift.TBase<addAction_args, addAction_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<addAction_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addAction_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAction_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAction_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgAction form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgAction")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAction_args.class, metaDataMap);
		}

		public addAction_args() {
		}

		public addAction_args(ArgAction form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addAction_args(addAction_args other) {
			if (other.isSetForm()) {
				this.form = new ArgAction(other.form);
			}
		}

		public addAction_args deepCopy() {
			return new addAction_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgAction getForm() {
			return this.form;
		}

		public addAction_args setForm(@org.apache.thrift.annotation.Nullable ArgAction form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgAction) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addAction_args)
				return this.equals((addAction_args) that);
			return false;
		}

		public boolean equals(addAction_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addAction_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addAction_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addAction_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addAction_argsStandardScheme getScheme() {
				return new addAction_argsStandardScheme();
			}

		}

		private static class addAction_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addAction_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addAction_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgAction();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addAction_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addAction_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addAction_argsTupleScheme getScheme() {
				return new addAction_argsTupleScheme();
			}

		}

		private static class addAction_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addAction_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addAction_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addAction_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgAction();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addAction_result implements org.apache.thrift.TBase<addAction_result, addAction_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<addAction_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addAction_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addAction_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addAction_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserAction success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserAction.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAction_result.class, metaDataMap);
		}

		public addAction_result() {
		}

		public addAction_result(UserAction success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addAction_result(addAction_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserAction(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public addAction_result deepCopy() {
			return new addAction_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserAction getSuccess() {
			return this.success;
		}

		public addAction_result setSuccess(@org.apache.thrift.annotation.Nullable UserAction success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public addAction_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserAction) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addAction_result)
				return this.equals((addAction_result) that);
			return false;
		}

		public boolean equals(addAction_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addAction_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addAction_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addAction_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addAction_resultStandardScheme getScheme() {
				return new addAction_resultStandardScheme();
			}

		}

		private static class addAction_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addAction_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addAction_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserAction();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addAction_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addAction_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addAction_resultTupleScheme getScheme() {
				return new addAction_resultTupleScheme();
			}

		}

		private static class addAction_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<addAction_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addAction_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addAction_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserAction();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBinds_args
			implements org.apache.thrift.TBase<getUserBinds_args, getUserBinds_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserBinds_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBinds_args");

		private static final org.apache.thrift.protocol.TField BIND_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"bind", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBinds_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBinds_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgBind bind; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			BIND((short) 1, "bind");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // BIND
					return BIND;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.BIND,
					new org.apache.thrift.meta_data.FieldMetaData("bind",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgBind")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBinds_args.class, metaDataMap);
		}

		public getUserBinds_args() {
		}

		public getUserBinds_args(ArgBind bind) {
			this();
			this.bind = bind;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBinds_args(getUserBinds_args other) {
			if (other.isSetBind()) {
				this.bind = new ArgBind(other.bind);
			}
		}

		public getUserBinds_args deepCopy() {
			return new getUserBinds_args(this);
		}

		@Override
		public void clear() {
			this.bind = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgBind getBind() {
			return this.bind;
		}

		public getUserBinds_args setBind(@org.apache.thrift.annotation.Nullable ArgBind bind) {
			this.bind = bind;
			return this;
		}

		public void unsetBind() {
			this.bind = null;
		}

		/**
		 * Returns true if field bind is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetBind() {
			return this.bind != null;
		}

		public void setBindIsSet(boolean value) {
			if (!value) {
				this.bind = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case BIND:
				if (value == null) {
					unsetBind();
				}
				else {
					setBind((ArgBind) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case BIND:
				return getBind();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case BIND:
				return isSetBind();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBinds_args)
				return this.equals((getUserBinds_args) that);
			return false;
		}

		public boolean equals(getUserBinds_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_bind = true && this.isSetBind();
			boolean that_present_bind = true && that.isSetBind();
			if (this_present_bind || that_present_bind) {
				if (!(this_present_bind && that_present_bind))
					return false;
				if (!this.bind.equals(that.bind))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetBind()) ? 131071 : 524287);
			if (isSetBind())
				hashCode = hashCode * 8191 + bind.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBinds_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetBind()).compareTo(other.isSetBind());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetBind()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bind, other.bind);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBinds_args(");
			boolean first = true;

			sb.append("bind:");
			if (this.bind == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bind);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBinds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBinds_argsStandardScheme getScheme() {
				return new getUserBinds_argsStandardScheme();
			}

		}

		private static class getUserBinds_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBinds_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBinds_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // BIND
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.bind = new ArgBind();
							struct.bind.read(iprot);
							struct.setBindIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBinds_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.bind != null) {
					oprot.writeFieldBegin(BIND_FIELD_DESC);
					struct.bind.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBinds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBinds_argsTupleScheme getScheme() {
				return new getUserBinds_argsTupleScheme();
			}

		}

		private static class getUserBinds_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserBinds_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBinds_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetBind()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetBind()) {
					struct.bind.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBinds_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.bind = new ArgBind();
					struct.bind.read(iprot);
					struct.setBindIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBinds_result
			implements org.apache.thrift.TBase<getUserBinds_result, getUserBinds_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserBinds_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBinds_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBinds_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBinds_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<User> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBinds_result.class, metaDataMap);
		}

		public getUserBinds_result() {
		}

		public getUserBinds_result(java.util.List<User> success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBinds_result(getUserBinds_result other) {
			if (other.isSetSuccess()) {
				java.util.List<User> __this__success = new java.util.ArrayList<User>(other.success.size());
				for (User other_element : other.success) {
					__this__success.add(new User(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserBinds_result deepCopy() {
			return new getUserBinds_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<User> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(User elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<User>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<User> getSuccess() {
			return this.success;
		}

		public getUserBinds_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<User> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserBinds_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<User>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBinds_result)
				return this.equals((getUserBinds_result) that);
			return false;
		}

		public boolean equals(getUserBinds_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBinds_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBinds_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBinds_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBinds_resultStandardScheme getScheme() {
				return new getUserBinds_resultStandardScheme();
			}

		}

		private static class getUserBinds_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBinds_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBinds_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list252 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<User>(_list252.size);
								@org.apache.thrift.annotation.Nullable
								User _elem253;
								for (int _i254 = 0; _i254 < _list252.size; ++_i254) {
									_elem253 = new User();
									_elem253.read(iprot);
									struct.success.add(_elem253);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBinds_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (User _iter255 : struct.success) {
							_iter255.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBinds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBinds_resultTupleScheme getScheme() {
				return new getUserBinds_resultTupleScheme();
			}

		}

		private static class getUserBinds_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserBinds_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBinds_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (User _iter256 : struct.success) {
							_iter256.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBinds_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list257 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<User>(_list257.size);
						@org.apache.thrift.annotation.Nullable
						User _elem258;
						for (int _i259 = 0; _i259 < _list257.size; ++_i259) {
							_elem258 = new User();
							_elem258.read(iprot);
							struct.success.add(_elem258);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserWeixin_args
			implements org.apache.thrift.TBase<getUserWeixin_args, getUserWeixin_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserWeixin_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserWeixin_args");

		private static final org.apache.thrift.protocol.TField BIND_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"bind", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserWeixin_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserWeixin_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgBind bind; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			BIND((short) 1, "bind");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // BIND
					return BIND;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.BIND,
					new org.apache.thrift.meta_data.FieldMetaData("bind",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgBind")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserWeixin_args.class, metaDataMap);
		}

		public getUserWeixin_args() {
		}

		public getUserWeixin_args(ArgBind bind) {
			this();
			this.bind = bind;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserWeixin_args(getUserWeixin_args other) {
			if (other.isSetBind()) {
				this.bind = new ArgBind(other.bind);
			}
		}

		public getUserWeixin_args deepCopy() {
			return new getUserWeixin_args(this);
		}

		@Override
		public void clear() {
			this.bind = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgBind getBind() {
			return this.bind;
		}

		public getUserWeixin_args setBind(@org.apache.thrift.annotation.Nullable ArgBind bind) {
			this.bind = bind;
			return this;
		}

		public void unsetBind() {
			this.bind = null;
		}

		/**
		 * Returns true if field bind is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetBind() {
			return this.bind != null;
		}

		public void setBindIsSet(boolean value) {
			if (!value) {
				this.bind = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case BIND:
				if (value == null) {
					unsetBind();
				}
				else {
					setBind((ArgBind) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case BIND:
				return getBind();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case BIND:
				return isSetBind();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserWeixin_args)
				return this.equals((getUserWeixin_args) that);
			return false;
		}

		public boolean equals(getUserWeixin_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_bind = true && this.isSetBind();
			boolean that_present_bind = true && that.isSetBind();
			if (this_present_bind || that_present_bind) {
				if (!(this_present_bind && that_present_bind))
					return false;
				if (!this.bind.equals(that.bind))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetBind()) ? 131071 : 524287);
			if (isSetBind())
				hashCode = hashCode * 8191 + bind.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserWeixin_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetBind()).compareTo(other.isSetBind());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetBind()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bind, other.bind);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserWeixin_args(");
			boolean first = true;

			sb.append("bind:");
			if (this.bind == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bind);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserWeixin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserWeixin_argsStandardScheme getScheme() {
				return new getUserWeixin_argsStandardScheme();
			}

		}

		private static class getUserWeixin_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserWeixin_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserWeixin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // BIND
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.bind = new ArgBind();
							struct.bind.read(iprot);
							struct.setBindIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserWeixin_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.bind != null) {
					oprot.writeFieldBegin(BIND_FIELD_DESC);
					struct.bind.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserWeixin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserWeixin_argsTupleScheme getScheme() {
				return new getUserWeixin_argsTupleScheme();
			}

		}

		private static class getUserWeixin_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserWeixin_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserWeixin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetBind()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetBind()) {
					struct.bind.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserWeixin_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.bind = new ArgBind();
					struct.bind.read(iprot);
					struct.setBindIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserWeixin_result
			implements org.apache.thrift.TBase<getUserWeixin_result, getUserWeixin_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserWeixin_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserWeixin_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserWeixin_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserWeixin_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserWeixin success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserWeixin.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserWeixin_result.class, metaDataMap);
		}

		public getUserWeixin_result() {
		}

		public getUserWeixin_result(UserWeixin success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserWeixin_result(getUserWeixin_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserWeixin(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserWeixin_result deepCopy() {
			return new getUserWeixin_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserWeixin getSuccess() {
			return this.success;
		}

		public getUserWeixin_result setSuccess(@org.apache.thrift.annotation.Nullable UserWeixin success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserWeixin_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserWeixin) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserWeixin_result)
				return this.equals((getUserWeixin_result) that);
			return false;
		}

		public boolean equals(getUserWeixin_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserWeixin_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserWeixin_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserWeixin_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserWeixin_resultStandardScheme getScheme() {
				return new getUserWeixin_resultStandardScheme();
			}

		}

		private static class getUserWeixin_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserWeixin_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserWeixin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserWeixin();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserWeixin_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserWeixin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserWeixin_resultTupleScheme getScheme() {
				return new getUserWeixin_resultTupleScheme();
			}

		}

		private static class getUserWeixin_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserWeixin_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserWeixin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserWeixin_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserWeixin();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserAlipay_args
			implements org.apache.thrift.TBase<getUserAlipay_args, getUserAlipay_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserAlipay_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserAlipay_args");

		private static final org.apache.thrift.protocol.TField BIND_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"bind", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserAlipay_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserAlipay_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgBind bind; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			BIND((short) 1, "bind");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // BIND
					return BIND;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.BIND,
					new org.apache.thrift.meta_data.FieldMetaData("bind",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgBind")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserAlipay_args.class, metaDataMap);
		}

		public getUserAlipay_args() {
		}

		public getUserAlipay_args(ArgBind bind) {
			this();
			this.bind = bind;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserAlipay_args(getUserAlipay_args other) {
			if (other.isSetBind()) {
				this.bind = new ArgBind(other.bind);
			}
		}

		public getUserAlipay_args deepCopy() {
			return new getUserAlipay_args(this);
		}

		@Override
		public void clear() {
			this.bind = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgBind getBind() {
			return this.bind;
		}

		public getUserAlipay_args setBind(@org.apache.thrift.annotation.Nullable ArgBind bind) {
			this.bind = bind;
			return this;
		}

		public void unsetBind() {
			this.bind = null;
		}

		/**
		 * Returns true if field bind is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetBind() {
			return this.bind != null;
		}

		public void setBindIsSet(boolean value) {
			if (!value) {
				this.bind = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case BIND:
				if (value == null) {
					unsetBind();
				}
				else {
					setBind((ArgBind) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case BIND:
				return getBind();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case BIND:
				return isSetBind();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserAlipay_args)
				return this.equals((getUserAlipay_args) that);
			return false;
		}

		public boolean equals(getUserAlipay_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_bind = true && this.isSetBind();
			boolean that_present_bind = true && that.isSetBind();
			if (this_present_bind || that_present_bind) {
				if (!(this_present_bind && that_present_bind))
					return false;
				if (!this.bind.equals(that.bind))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetBind()) ? 131071 : 524287);
			if (isSetBind())
				hashCode = hashCode * 8191 + bind.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserAlipay_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetBind()).compareTo(other.isSetBind());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetBind()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bind, other.bind);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserAlipay_args(");
			boolean first = true;

			sb.append("bind:");
			if (this.bind == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bind);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserAlipay_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserAlipay_argsStandardScheme getScheme() {
				return new getUserAlipay_argsStandardScheme();
			}

		}

		private static class getUserAlipay_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserAlipay_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserAlipay_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // BIND
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.bind = new ArgBind();
							struct.bind.read(iprot);
							struct.setBindIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserAlipay_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.bind != null) {
					oprot.writeFieldBegin(BIND_FIELD_DESC);
					struct.bind.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserAlipay_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserAlipay_argsTupleScheme getScheme() {
				return new getUserAlipay_argsTupleScheme();
			}

		}

		private static class getUserAlipay_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserAlipay_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserAlipay_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetBind()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetBind()) {
					struct.bind.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserAlipay_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.bind = new ArgBind();
					struct.bind.read(iprot);
					struct.setBindIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserAlipay_result
			implements org.apache.thrift.TBase<getUserAlipay_result, getUserAlipay_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserAlipay_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserAlipay_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserAlipay_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserAlipay_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserAlipay success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserAlipay.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserAlipay_result.class, metaDataMap);
		}

		public getUserAlipay_result() {
		}

		public getUserAlipay_result(UserAlipay success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserAlipay_result(getUserAlipay_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserAlipay(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserAlipay_result deepCopy() {
			return new getUserAlipay_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserAlipay getSuccess() {
			return this.success;
		}

		public getUserAlipay_result setSuccess(@org.apache.thrift.annotation.Nullable UserAlipay success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserAlipay_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserAlipay) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserAlipay_result)
				return this.equals((getUserAlipay_result) that);
			return false;
		}

		public boolean equals(getUserAlipay_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserAlipay_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserAlipay_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserAlipay_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserAlipay_resultStandardScheme getScheme() {
				return new getUserAlipay_resultStandardScheme();
			}

		}

		private static class getUserAlipay_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserAlipay_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserAlipay_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserAlipay();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserAlipay_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserAlipay_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserAlipay_resultTupleScheme getScheme() {
				return new getUserAlipay_resultTupleScheme();
			}

		}

		private static class getUserAlipay_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserAlipay_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserAlipay_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserAlipay_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserAlipay();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserProfile_args
			implements org.apache.thrift.TBase<getUserProfile_args, getUserProfile_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserProfile_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserProfile_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserProfile_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserProfile_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_args.class, metaDataMap);
		}

		public getUserProfile_args() {
		}

		public getUserProfile_args(java.lang.String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserProfile_args(getUserProfile_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public getUserProfile_args deepCopy() {
			return new getUserProfile_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getUserProfile_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserProfile_args)
				return this.equals((getUserProfile_args) that);
			return false;
		}

		public boolean equals(getUserProfile_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserProfile_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserProfile_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserProfile_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserProfile_argsStandardScheme getScheme() {
				return new getUserProfile_argsStandardScheme();
			}

		}

		private static class getUserProfile_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserProfile_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserProfile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserProfile_argsTupleScheme getScheme() {
				return new getUserProfile_argsTupleScheme();
			}

		}

		private static class getUserProfile_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserProfile_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserProfile_result
			implements org.apache.thrift.TBase<getUserProfile_result, getUserProfile_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserProfile_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserProfile_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserProfile_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserProfile_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserProfile success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserProfile.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_result.class, metaDataMap);
		}

		public getUserProfile_result() {
		}

		public getUserProfile_result(UserProfile success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserProfile_result(getUserProfile_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserProfile(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserProfile_result deepCopy() {
			return new getUserProfile_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserProfile getSuccess() {
			return this.success;
		}

		public getUserProfile_result setSuccess(@org.apache.thrift.annotation.Nullable UserProfile success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserProfile_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserProfile) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserProfile_result)
				return this.equals((getUserProfile_result) that);
			return false;
		}

		public boolean equals(getUserProfile_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserProfile_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserProfile_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserProfile_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserProfile_resultStandardScheme getScheme() {
				return new getUserProfile_resultStandardScheme();
			}

		}

		private static class getUserProfile_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserProfile_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserProfile();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserProfile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserProfile_resultTupleScheme getScheme() {
				return new getUserProfile_resultTupleScheme();
			}

		}

		private static class getUserProfile_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserProfile_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserProfile();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserSessions_args
			implements org.apache.thrift.TBase<getUserSessions_args, getUserSessions_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserSessions_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserSessions_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserSessions_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserSessions_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSessions_args.class, metaDataMap);
		}

		public getUserSessions_args() {
		}

		public getUserSessions_args(java.lang.String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserSessions_args(getUserSessions_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public getUserSessions_args deepCopy() {
			return new getUserSessions_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getUserSessions_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserSessions_args)
				return this.equals((getUserSessions_args) that);
			return false;
		}

		public boolean equals(getUserSessions_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserSessions_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserSessions_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserSessions_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserSessions_argsStandardScheme getScheme() {
				return new getUserSessions_argsStandardScheme();
			}

		}

		private static class getUserSessions_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserSessions_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSessions_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSessions_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserSessions_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserSessions_argsTupleScheme getScheme() {
				return new getUserSessions_argsTupleScheme();
			}

		}

		private static class getUserSessions_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserSessions_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserSessions_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserSessions_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserSessions_result
			implements org.apache.thrift.TBase<getUserSessions_result, getUserSessions_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserSessions_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserSessions_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserSessions_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserSessions_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<UserSession> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserSession.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserSessions_result.class, metaDataMap);
		}

		public getUserSessions_result() {
		}

		public getUserSessions_result(java.util.List<UserSession> success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserSessions_result(getUserSessions_result other) {
			if (other.isSetSuccess()) {
				java.util.List<UserSession> __this__success = new java.util.ArrayList<UserSession>(
						other.success.size());
				for (UserSession other_element : other.success) {
					__this__success.add(new UserSession(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserSessions_result deepCopy() {
			return new getUserSessions_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<UserSession> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(UserSession elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<UserSession>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<UserSession> getSuccess() {
			return this.success;
		}

		public getUserSessions_result setSuccess(
				@org.apache.thrift.annotation.Nullable java.util.List<UserSession> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserSessions_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<UserSession>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserSessions_result)
				return this.equals((getUserSessions_result) that);
			return false;
		}

		public boolean equals(getUserSessions_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserSessions_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserSessions_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserSessions_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserSessions_resultStandardScheme getScheme() {
				return new getUserSessions_resultStandardScheme();
			}

		}

		private static class getUserSessions_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserSessions_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserSessions_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list260 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<UserSession>(_list260.size);
								@org.apache.thrift.annotation.Nullable
								UserSession _elem261;
								for (int _i262 = 0; _i262 < _list260.size; ++_i262) {
									_elem261 = new UserSession();
									_elem261.read(iprot);
									struct.success.add(_elem261);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserSessions_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (UserSession _iter263 : struct.success) {
							_iter263.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserSessions_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserSessions_resultTupleScheme getScheme() {
				return new getUserSessions_resultTupleScheme();
			}

		}

		private static class getUserSessions_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserSessions_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserSessions_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (UserSession _iter264 : struct.success) {
							_iter264.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserSessions_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list265 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<UserSession>(_list265.size);
						@org.apache.thrift.annotation.Nullable
						UserSession _elem266;
						for (int _i267 = 0; _i267 < _list265.size; ++_i267) {
							_elem266 = new UserSession();
							_elem266.read(iprot);
							struct.success.add(_elem266);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBankCards_args
			implements org.apache.thrift.TBase<getUserBankCards_args, getUserBankCards_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserBankCards_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBankCards_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBankCards_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBankCards_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBankCards_args.class, metaDataMap);
		}

		public getUserBankCards_args() {
		}

		public getUserBankCards_args(java.lang.String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBankCards_args(getUserBankCards_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public getUserBankCards_args deepCopy() {
			return new getUserBankCards_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getUserBankCards_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBankCards_args)
				return this.equals((getUserBankCards_args) that);
			return false;
		}

		public boolean equals(getUserBankCards_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBankCards_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBankCards_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBankCards_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBankCards_argsStandardScheme getScheme() {
				return new getUserBankCards_argsStandardScheme();
			}

		}

		private static class getUserBankCards_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBankCards_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBankCards_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBankCards_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBankCards_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBankCards_argsTupleScheme getScheme() {
				return new getUserBankCards_argsTupleScheme();
			}

		}

		private static class getUserBankCards_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserBankCards_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBankCards_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBankCards_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBankCards_result
			implements org.apache.thrift.TBase<getUserBankCards_result, getUserBankCards_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserBankCards_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBankCards_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBankCards_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBankCards_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.util.List<UserBankCard> success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserBankCard.class))));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBankCards_result.class, metaDataMap);
		}

		public getUserBankCards_result() {
		}

		public getUserBankCards_result(java.util.List<UserBankCard> success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBankCards_result(getUserBankCards_result other) {
			if (other.isSetSuccess()) {
				java.util.List<UserBankCard> __this__success = new java.util.ArrayList<UserBankCard>(
						other.success.size());
				for (UserBankCard other_element : other.success) {
					__this__success.add(new UserBankCard(other_element));
				}
				this.success = __this__success;
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserBankCards_result deepCopy() {
			return new getUserBankCards_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<UserBankCard> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(UserBankCard elem) {
			if (this.success == null) {
				this.success = new java.util.ArrayList<UserBankCard>();
			}
			this.success.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<UserBankCard> getSuccess() {
			return this.success;
		}

		public getUserBankCards_result setSuccess(
				@org.apache.thrift.annotation.Nullable java.util.List<UserBankCard> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserBankCards_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.util.List<UserBankCard>) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBankCards_result)
				return this.equals((getUserBankCards_result) that);
			return false;
		}

		public boolean equals(getUserBankCards_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBankCards_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBankCards_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBankCards_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBankCards_resultStandardScheme getScheme() {
				return new getUserBankCards_resultStandardScheme();
			}

		}

		private static class getUserBankCards_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBankCards_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBankCards_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list268 = iprot.readListBegin();
								struct.success = new java.util.ArrayList<UserBankCard>(_list268.size);
								@org.apache.thrift.annotation.Nullable
								UserBankCard _elem269;
								for (int _i270 = 0; _i270 < _list268.size; ++_i270) {
									_elem269 = new UserBankCard();
									_elem269.read(iprot);
									struct.success.add(_elem269);
								}
								iprot.readListEnd();
							}
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBankCards_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
						for (UserBankCard _iter271 : struct.success) {
							_iter271.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBankCards_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBankCards_resultTupleScheme getScheme() {
				return new getUserBankCards_resultTupleScheme();
			}

		}

		private static class getUserBankCards_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserBankCards_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBankCards_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (UserBankCard _iter272 : struct.success) {
							_iter272.write(oprot);
						}
					}
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBankCards_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list273 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
						struct.success = new java.util.ArrayList<UserBankCard>(_list273.size);
						@org.apache.thrift.annotation.Nullable
						UserBankCard _elem274;
						for (int _i275 = 0; _i275 < _list273.size; ++_i275) {
							_elem274 = new UserBankCard();
							_elem274.read(iprot);
							struct.success.add(_elem274);
						}
					}
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

}
