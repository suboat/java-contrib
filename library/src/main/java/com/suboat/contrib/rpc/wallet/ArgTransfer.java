/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 实现一个即时的内部转账 有效条件: 必填项必填 注: isIncome=false的情景下, 用户实际被扣金额=amount+fee 产生流水的action预判:
 * if (uidFrom==uidTo) {action=exchange} else {action=transfer} 产生流水的action覆盖: 填写action字段
 */
public class ArgTransfer implements org.apache.thrift.TBase<ArgTransfer, ArgTransfer._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgTransfer> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgTransfer");

	private static final org.apache.thrift.protocol.TField UID_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidFrom", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_TO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidTo", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField WALLET_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"walletFrom", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField WALLET_TO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"walletTo", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField AMOUNT_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amountFrom", org.apache.thrift.protocol.TType.DOUBLE, (short) 5);

	private static final org.apache.thrift.protocol.TField AMOUNT_TO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amountTo", org.apache.thrift.protocol.TType.DOUBLE, (short) 6);

	private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee",
			org.apache.thrift.protocol.TType.DOUBLE, (short) 7);

	private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"rate", org.apache.thrift.protocol.TType.DOUBLE, (short) 8);

	private static final org.apache.thrift.protocol.TField COMMENT_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"commentTag", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField COMMENT_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"commentJson", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField AMOUNT_FROM_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amountFromInt", org.apache.thrift.protocol.TType.I64, (short) 11);

	private static final org.apache.thrift.protocol.TField AMOUNT_TO_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amountToInt", org.apache.thrift.protocol.TType.I64, (short) 12);

	private static final org.apache.thrift.protocol.TField FEE_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"feeInt", org.apache.thrift.protocol.TType.I64, (short) 13);

	private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"action", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"taskId", org.apache.thrift.protocol.TType.STRING, (short) 15);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgTransferStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgTransferTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uidFrom; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uidTo; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String walletFrom; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String walletTo; // required

	public double amountFrom; // required

	public double amountTo; // required

	public double fee; // optional

	public double rate; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String commentTag; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String commentJson; // optional

	public long amountFromInt; // optional

	public long amountToInt; // optional

	public long feeInt; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String action; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String taskId; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID_FROM((short) 1, "uidFrom"), UID_TO((short) 2, "uidTo"), WALLET_FROM((short) 3, "walletFrom"), WALLET_TO(
				(short) 4, "walletTo"), AMOUNT_FROM((short) 5, "amountFrom"), AMOUNT_TO((short) 6,
						"amountTo"), FEE((short) 7, "fee"), RATE((short) 8, "rate"), COMMENT_TAG((short) 9,
								"commentTag"), COMMENT_JSON((short) 10, "commentJson"), AMOUNT_FROM_INT((short) 11,
										"amountFromInt"), AMOUNT_TO_INT((short) 12, "amountToInt"), FEE_INT((short) 13,
												"feeInt"), ACTION((short) 14, "action"), TASK_ID((short) 15, "taskId");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID_FROM
				return UID_FROM;
			case 2: // UID_TO
				return UID_TO;
			case 3: // WALLET_FROM
				return WALLET_FROM;
			case 4: // WALLET_TO
				return WALLET_TO;
			case 5: // AMOUNT_FROM
				return AMOUNT_FROM;
			case 6: // AMOUNT_TO
				return AMOUNT_TO;
			case 7: // FEE
				return FEE;
			case 8: // RATE
				return RATE;
			case 9: // COMMENT_TAG
				return COMMENT_TAG;
			case 10: // COMMENT_JSON
				return COMMENT_JSON;
			case 11: // AMOUNT_FROM_INT
				return AMOUNT_FROM_INT;
			case 12: // AMOUNT_TO_INT
				return AMOUNT_TO_INT;
			case 13: // FEE_INT
				return FEE_INT;
			case 14: // ACTION
				return ACTION;
			case 15: // TASK_ID
				return TASK_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __AMOUNTFROM_ISSET_ID = 0;

	private static final int __AMOUNTTO_ISSET_ID = 1;

	private static final int __FEE_ISSET_ID = 2;

	private static final int __RATE_ISSET_ID = 3;

	private static final int __AMOUNTFROMINT_ISSET_ID = 4;

	private static final int __AMOUNTTOINT_ISSET_ID = 5;

	private static final int __FEEINT_ISSET_ID = 6;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.FEE, _Fields.RATE, _Fields.COMMENT_TAG, _Fields.COMMENT_JSON,
			_Fields.AMOUNT_FROM_INT, _Fields.AMOUNT_TO_INT, _Fields.FEE_INT, _Fields.ACTION, _Fields.TASK_ID };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID_FROM,
				new org.apache.thrift.meta_data.FieldMetaData("uidFrom",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID_TO,
				new org.apache.thrift.meta_data.FieldMetaData("uidTo", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WALLET_FROM,
				new org.apache.thrift.meta_data.FieldMetaData("walletFrom",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WALLET_TO,
				new org.apache.thrift.meta_data.FieldMetaData("walletTo",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AMOUNT_FROM,
				new org.apache.thrift.meta_data.FieldMetaData("amountFrom",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.AMOUNT_TO,
				new org.apache.thrift.meta_data.FieldMetaData("amountTo",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.FEE,
				new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.RATE,
				new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COMMENT_TAG,
				new org.apache.thrift.meta_data.FieldMetaData("commentTag",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMMENT_JSON,
				new org.apache.thrift.meta_data.FieldMetaData("commentJson",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AMOUNT_FROM_INT,
				new org.apache.thrift.meta_data.FieldMetaData("amountFromInt",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.AMOUNT_TO_INT,
				new org.apache.thrift.meta_data.FieldMetaData("amountToInt",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.FEE_INT,
				new org.apache.thrift.meta_data.FieldMetaData("feeInt",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.ACTION,
				new org.apache.thrift.meta_data.FieldMetaData("action",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TASK_ID,
				new org.apache.thrift.meta_data.FieldMetaData("taskId",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgTransfer.class, metaDataMap);
	}

	public ArgTransfer() {
	}

	public ArgTransfer(java.lang.String uidFrom, java.lang.String uidTo, java.lang.String walletFrom,
			java.lang.String walletTo, double amountFrom, double amountTo) {
		this();
		this.uidFrom = uidFrom;
		this.uidTo = uidTo;
		this.walletFrom = walletFrom;
		this.walletTo = walletTo;
		this.amountFrom = amountFrom;
		setAmountFromIsSet(true);
		this.amountTo = amountTo;
		setAmountToIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgTransfer(ArgTransfer other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetUidFrom()) {
			this.uidFrom = other.uidFrom;
		}
		if (other.isSetUidTo()) {
			this.uidTo = other.uidTo;
		}
		if (other.isSetWalletFrom()) {
			this.walletFrom = other.walletFrom;
		}
		if (other.isSetWalletTo()) {
			this.walletTo = other.walletTo;
		}
		this.amountFrom = other.amountFrom;
		this.amountTo = other.amountTo;
		this.fee = other.fee;
		this.rate = other.rate;
		if (other.isSetCommentTag()) {
			this.commentTag = other.commentTag;
		}
		if (other.isSetCommentJson()) {
			this.commentJson = other.commentJson;
		}
		this.amountFromInt = other.amountFromInt;
		this.amountToInt = other.amountToInt;
		this.feeInt = other.feeInt;
		if (other.isSetAction()) {
			this.action = other.action;
		}
		if (other.isSetTaskId()) {
			this.taskId = other.taskId;
		}
	}

	public ArgTransfer deepCopy() {
		return new ArgTransfer(this);
	}

	@Override
	public void clear() {
		this.uidFrom = null;
		this.uidTo = null;
		this.walletFrom = null;
		this.walletTo = null;
		setAmountFromIsSet(false);
		this.amountFrom = 0.0;
		setAmountToIsSet(false);
		this.amountTo = 0.0;
		setFeeIsSet(false);
		this.fee = 0.0;
		setRateIsSet(false);
		this.rate = 0.0;
		this.commentTag = null;
		this.commentJson = null;
		setAmountFromIntIsSet(false);
		this.amountFromInt = 0;
		setAmountToIntIsSet(false);
		this.amountToInt = 0;
		setFeeIntIsSet(false);
		this.feeInt = 0;
		this.action = null;
		this.taskId = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidFrom() {
		return this.uidFrom;
	}

	public ArgTransfer setUidFrom(@org.apache.thrift.annotation.Nullable java.lang.String uidFrom) {
		this.uidFrom = uidFrom;
		return this;
	}

	public void unsetUidFrom() {
		this.uidFrom = null;
	}

	/**
	 * Returns true if field uidFrom is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUidFrom() {
		return this.uidFrom != null;
	}

	public void setUidFromIsSet(boolean value) {
		if (!value) {
			this.uidFrom = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidTo() {
		return this.uidTo;
	}

	public ArgTransfer setUidTo(@org.apache.thrift.annotation.Nullable java.lang.String uidTo) {
		this.uidTo = uidTo;
		return this;
	}

	public void unsetUidTo() {
		this.uidTo = null;
	}

	/**
	 * Returns true if field uidTo is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUidTo() {
		return this.uidTo != null;
	}

	public void setUidToIsSet(boolean value) {
		if (!value) {
			this.uidTo = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWalletFrom() {
		return this.walletFrom;
	}

	public ArgTransfer setWalletFrom(@org.apache.thrift.annotation.Nullable java.lang.String walletFrom) {
		this.walletFrom = walletFrom;
		return this;
	}

	public void unsetWalletFrom() {
		this.walletFrom = null;
	}

	/**
	 * Returns true if field walletFrom is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetWalletFrom() {
		return this.walletFrom != null;
	}

	public void setWalletFromIsSet(boolean value) {
		if (!value) {
			this.walletFrom = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWalletTo() {
		return this.walletTo;
	}

	public ArgTransfer setWalletTo(@org.apache.thrift.annotation.Nullable java.lang.String walletTo) {
		this.walletTo = walletTo;
		return this;
	}

	public void unsetWalletTo() {
		this.walletTo = null;
	}

	/**
	 * Returns true if field walletTo is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetWalletTo() {
		return this.walletTo != null;
	}

	public void setWalletToIsSet(boolean value) {
		if (!value) {
			this.walletTo = null;
		}
	}

	public double getAmountFrom() {
		return this.amountFrom;
	}

	public ArgTransfer setAmountFrom(double amountFrom) {
		this.amountFrom = amountFrom;
		setAmountFromIsSet(true);
		return this;
	}

	public void unsetAmountFrom() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNTFROM_ISSET_ID);
	}

	/**
	 * Returns true if field amountFrom is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAmountFrom() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNTFROM_ISSET_ID);
	}

	public void setAmountFromIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNTFROM_ISSET_ID, value);
	}

	public double getAmountTo() {
		return this.amountTo;
	}

	public ArgTransfer setAmountTo(double amountTo) {
		this.amountTo = amountTo;
		setAmountToIsSet(true);
		return this;
	}

	public void unsetAmountTo() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNTTO_ISSET_ID);
	}

	/**
	 * Returns true if field amountTo is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAmountTo() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNTTO_ISSET_ID);
	}

	public void setAmountToIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNTTO_ISSET_ID, value);
	}

	public double getFee() {
		return this.fee;
	}

	public ArgTransfer setFee(double fee) {
		this.fee = fee;
		setFeeIsSet(true);
		return this;
	}

	public void unsetFee() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEE_ISSET_ID);
	}

	/**
	 * Returns true if field fee is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetFee() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEE_ISSET_ID);
	}

	public void setFeeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEE_ISSET_ID, value);
	}

	public double getRate() {
		return this.rate;
	}

	public ArgTransfer setRate(double rate) {
		this.rate = rate;
		setRateIsSet(true);
		return this;
	}

	public void unsetRate() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
	}

	/**
	 * Returns true if field rate is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRate() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
	}

	public void setRateIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCommentTag() {
		return this.commentTag;
	}

	public ArgTransfer setCommentTag(@org.apache.thrift.annotation.Nullable java.lang.String commentTag) {
		this.commentTag = commentTag;
		return this;
	}

	public void unsetCommentTag() {
		this.commentTag = null;
	}

	/**
	 * Returns true if field commentTag is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCommentTag() {
		return this.commentTag != null;
	}

	public void setCommentTagIsSet(boolean value) {
		if (!value) {
			this.commentTag = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCommentJson() {
		return this.commentJson;
	}

	public ArgTransfer setCommentJson(@org.apache.thrift.annotation.Nullable java.lang.String commentJson) {
		this.commentJson = commentJson;
		return this;
	}

	public void unsetCommentJson() {
		this.commentJson = null;
	}

	/**
	 * Returns true if field commentJson is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCommentJson() {
		return this.commentJson != null;
	}

	public void setCommentJsonIsSet(boolean value) {
		if (!value) {
			this.commentJson = null;
		}
	}

	public long getAmountFromInt() {
		return this.amountFromInt;
	}

	public ArgTransfer setAmountFromInt(long amountFromInt) {
		this.amountFromInt = amountFromInt;
		setAmountFromIntIsSet(true);
		return this;
	}

	public void unsetAmountFromInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNTFROMINT_ISSET_ID);
	}

	/**
	 * Returns true if field amountFromInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAmountFromInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNTFROMINT_ISSET_ID);
	}

	public void setAmountFromIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNTFROMINT_ISSET_ID, value);
	}

	public long getAmountToInt() {
		return this.amountToInt;
	}

	public ArgTransfer setAmountToInt(long amountToInt) {
		this.amountToInt = amountToInt;
		setAmountToIntIsSet(true);
		return this;
	}

	public void unsetAmountToInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNTTOINT_ISSET_ID);
	}

	/**
	 * Returns true if field amountToInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAmountToInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNTTOINT_ISSET_ID);
	}

	public void setAmountToIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNTTOINT_ISSET_ID, value);
	}

	public long getFeeInt() {
		return this.feeInt;
	}

	public ArgTransfer setFeeInt(long feeInt) {
		this.feeInt = feeInt;
		setFeeIntIsSet(true);
		return this;
	}

	public void unsetFeeInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEEINT_ISSET_ID);
	}

	/**
	 * Returns true if field feeInt is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetFeeInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEEINT_ISSET_ID);
	}

	public void setFeeIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEEINT_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAction() {
		return this.action;
	}

	public ArgTransfer setAction(@org.apache.thrift.annotation.Nullable java.lang.String action) {
		this.action = action;
		return this;
	}

	public void unsetAction() {
		this.action = null;
	}

	/**
	 * Returns true if field action is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAction() {
		return this.action != null;
	}

	public void setActionIsSet(boolean value) {
		if (!value) {
			this.action = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTaskId() {
		return this.taskId;
	}

	public ArgTransfer setTaskId(@org.apache.thrift.annotation.Nullable java.lang.String taskId) {
		this.taskId = taskId;
		return this;
	}

	public void unsetTaskId() {
		this.taskId = null;
	}

	/**
	 * Returns true if field taskId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTaskId() {
		return this.taskId != null;
	}

	public void setTaskIdIsSet(boolean value) {
		if (!value) {
			this.taskId = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID_FROM:
			if (value == null) {
				unsetUidFrom();
			}
			else {
				setUidFrom((java.lang.String) value);
			}
			break;

		case UID_TO:
			if (value == null) {
				unsetUidTo();
			}
			else {
				setUidTo((java.lang.String) value);
			}
			break;

		case WALLET_FROM:
			if (value == null) {
				unsetWalletFrom();
			}
			else {
				setWalletFrom((java.lang.String) value);
			}
			break;

		case WALLET_TO:
			if (value == null) {
				unsetWalletTo();
			}
			else {
				setWalletTo((java.lang.String) value);
			}
			break;

		case AMOUNT_FROM:
			if (value == null) {
				unsetAmountFrom();
			}
			else {
				setAmountFrom((java.lang.Double) value);
			}
			break;

		case AMOUNT_TO:
			if (value == null) {
				unsetAmountTo();
			}
			else {
				setAmountTo((java.lang.Double) value);
			}
			break;

		case FEE:
			if (value == null) {
				unsetFee();
			}
			else {
				setFee((java.lang.Double) value);
			}
			break;

		case RATE:
			if (value == null) {
				unsetRate();
			}
			else {
				setRate((java.lang.Double) value);
			}
			break;

		case COMMENT_TAG:
			if (value == null) {
				unsetCommentTag();
			}
			else {
				setCommentTag((java.lang.String) value);
			}
			break;

		case COMMENT_JSON:
			if (value == null) {
				unsetCommentJson();
			}
			else {
				setCommentJson((java.lang.String) value);
			}
			break;

		case AMOUNT_FROM_INT:
			if (value == null) {
				unsetAmountFromInt();
			}
			else {
				setAmountFromInt((java.lang.Long) value);
			}
			break;

		case AMOUNT_TO_INT:
			if (value == null) {
				unsetAmountToInt();
			}
			else {
				setAmountToInt((java.lang.Long) value);
			}
			break;

		case FEE_INT:
			if (value == null) {
				unsetFeeInt();
			}
			else {
				setFeeInt((java.lang.Long) value);
			}
			break;

		case ACTION:
			if (value == null) {
				unsetAction();
			}
			else {
				setAction((java.lang.String) value);
			}
			break;

		case TASK_ID:
			if (value == null) {
				unsetTaskId();
			}
			else {
				setTaskId((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID_FROM:
			return getUidFrom();

		case UID_TO:
			return getUidTo();

		case WALLET_FROM:
			return getWalletFrom();

		case WALLET_TO:
			return getWalletTo();

		case AMOUNT_FROM:
			return getAmountFrom();

		case AMOUNT_TO:
			return getAmountTo();

		case FEE:
			return getFee();

		case RATE:
			return getRate();

		case COMMENT_TAG:
			return getCommentTag();

		case COMMENT_JSON:
			return getCommentJson();

		case AMOUNT_FROM_INT:
			return getAmountFromInt();

		case AMOUNT_TO_INT:
			return getAmountToInt();

		case FEE_INT:
			return getFeeInt();

		case ACTION:
			return getAction();

		case TASK_ID:
			return getTaskId();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID_FROM:
			return isSetUidFrom();
		case UID_TO:
			return isSetUidTo();
		case WALLET_FROM:
			return isSetWalletFrom();
		case WALLET_TO:
			return isSetWalletTo();
		case AMOUNT_FROM:
			return isSetAmountFrom();
		case AMOUNT_TO:
			return isSetAmountTo();
		case FEE:
			return isSetFee();
		case RATE:
			return isSetRate();
		case COMMENT_TAG:
			return isSetCommentTag();
		case COMMENT_JSON:
			return isSetCommentJson();
		case AMOUNT_FROM_INT:
			return isSetAmountFromInt();
		case AMOUNT_TO_INT:
			return isSetAmountToInt();
		case FEE_INT:
			return isSetFeeInt();
		case ACTION:
			return isSetAction();
		case TASK_ID:
			return isSetTaskId();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgTransfer)
			return this.equals((ArgTransfer) that);
		return false;
	}

	public boolean equals(ArgTransfer that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uidFrom = true && this.isSetUidFrom();
		boolean that_present_uidFrom = true && that.isSetUidFrom();
		if (this_present_uidFrom || that_present_uidFrom) {
			if (!(this_present_uidFrom && that_present_uidFrom))
				return false;
			if (!this.uidFrom.equals(that.uidFrom))
				return false;
		}

		boolean this_present_uidTo = true && this.isSetUidTo();
		boolean that_present_uidTo = true && that.isSetUidTo();
		if (this_present_uidTo || that_present_uidTo) {
			if (!(this_present_uidTo && that_present_uidTo))
				return false;
			if (!this.uidTo.equals(that.uidTo))
				return false;
		}

		boolean this_present_walletFrom = true && this.isSetWalletFrom();
		boolean that_present_walletFrom = true && that.isSetWalletFrom();
		if (this_present_walletFrom || that_present_walletFrom) {
			if (!(this_present_walletFrom && that_present_walletFrom))
				return false;
			if (!this.walletFrom.equals(that.walletFrom))
				return false;
		}

		boolean this_present_walletTo = true && this.isSetWalletTo();
		boolean that_present_walletTo = true && that.isSetWalletTo();
		if (this_present_walletTo || that_present_walletTo) {
			if (!(this_present_walletTo && that_present_walletTo))
				return false;
			if (!this.walletTo.equals(that.walletTo))
				return false;
		}

		boolean this_present_amountFrom = true;
		boolean that_present_amountFrom = true;
		if (this_present_amountFrom || that_present_amountFrom) {
			if (!(this_present_amountFrom && that_present_amountFrom))
				return false;
			if (this.amountFrom != that.amountFrom)
				return false;
		}

		boolean this_present_amountTo = true;
		boolean that_present_amountTo = true;
		if (this_present_amountTo || that_present_amountTo) {
			if (!(this_present_amountTo && that_present_amountTo))
				return false;
			if (this.amountTo != that.amountTo)
				return false;
		}

		boolean this_present_fee = true && this.isSetFee();
		boolean that_present_fee = true && that.isSetFee();
		if (this_present_fee || that_present_fee) {
			if (!(this_present_fee && that_present_fee))
				return false;
			if (this.fee != that.fee)
				return false;
		}

		boolean this_present_rate = true && this.isSetRate();
		boolean that_present_rate = true && that.isSetRate();
		if (this_present_rate || that_present_rate) {
			if (!(this_present_rate && that_present_rate))
				return false;
			if (this.rate != that.rate)
				return false;
		}

		boolean this_present_commentTag = true && this.isSetCommentTag();
		boolean that_present_commentTag = true && that.isSetCommentTag();
		if (this_present_commentTag || that_present_commentTag) {
			if (!(this_present_commentTag && that_present_commentTag))
				return false;
			if (!this.commentTag.equals(that.commentTag))
				return false;
		}

		boolean this_present_commentJson = true && this.isSetCommentJson();
		boolean that_present_commentJson = true && that.isSetCommentJson();
		if (this_present_commentJson || that_present_commentJson) {
			if (!(this_present_commentJson && that_present_commentJson))
				return false;
			if (!this.commentJson.equals(that.commentJson))
				return false;
		}

		boolean this_present_amountFromInt = true && this.isSetAmountFromInt();
		boolean that_present_amountFromInt = true && that.isSetAmountFromInt();
		if (this_present_amountFromInt || that_present_amountFromInt) {
			if (!(this_present_amountFromInt && that_present_amountFromInt))
				return false;
			if (this.amountFromInt != that.amountFromInt)
				return false;
		}

		boolean this_present_amountToInt = true && this.isSetAmountToInt();
		boolean that_present_amountToInt = true && that.isSetAmountToInt();
		if (this_present_amountToInt || that_present_amountToInt) {
			if (!(this_present_amountToInt && that_present_amountToInt))
				return false;
			if (this.amountToInt != that.amountToInt)
				return false;
		}

		boolean this_present_feeInt = true && this.isSetFeeInt();
		boolean that_present_feeInt = true && that.isSetFeeInt();
		if (this_present_feeInt || that_present_feeInt) {
			if (!(this_present_feeInt && that_present_feeInt))
				return false;
			if (this.feeInt != that.feeInt)
				return false;
		}

		boolean this_present_action = true && this.isSetAction();
		boolean that_present_action = true && that.isSetAction();
		if (this_present_action || that_present_action) {
			if (!(this_present_action && that_present_action))
				return false;
			if (!this.action.equals(that.action))
				return false;
		}

		boolean this_present_taskId = true && this.isSetTaskId();
		boolean that_present_taskId = true && that.isSetTaskId();
		if (this_present_taskId || that_present_taskId) {
			if (!(this_present_taskId && that_present_taskId))
				return false;
			if (!this.taskId.equals(that.taskId))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUidFrom()) ? 131071 : 524287);
		if (isSetUidFrom())
			hashCode = hashCode * 8191 + uidFrom.hashCode();

		hashCode = hashCode * 8191 + ((isSetUidTo()) ? 131071 : 524287);
		if (isSetUidTo())
			hashCode = hashCode * 8191 + uidTo.hashCode();

		hashCode = hashCode * 8191 + ((isSetWalletFrom()) ? 131071 : 524287);
		if (isSetWalletFrom())
			hashCode = hashCode * 8191 + walletFrom.hashCode();

		hashCode = hashCode * 8191 + ((isSetWalletTo()) ? 131071 : 524287);
		if (isSetWalletTo())
			hashCode = hashCode * 8191 + walletTo.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amountFrom);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amountTo);

		hashCode = hashCode * 8191 + ((isSetFee()) ? 131071 : 524287);
		if (isSetFee())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fee);

		hashCode = hashCode * 8191 + ((isSetRate()) ? 131071 : 524287);
		if (isSetRate())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rate);

		hashCode = hashCode * 8191 + ((isSetCommentTag()) ? 131071 : 524287);
		if (isSetCommentTag())
			hashCode = hashCode * 8191 + commentTag.hashCode();

		hashCode = hashCode * 8191 + ((isSetCommentJson()) ? 131071 : 524287);
		if (isSetCommentJson())
			hashCode = hashCode * 8191 + commentJson.hashCode();

		hashCode = hashCode * 8191 + ((isSetAmountFromInt()) ? 131071 : 524287);
		if (isSetAmountFromInt())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amountFromInt);

		hashCode = hashCode * 8191 + ((isSetAmountToInt()) ? 131071 : 524287);
		if (isSetAmountToInt())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amountToInt);

		hashCode = hashCode * 8191 + ((isSetFeeInt()) ? 131071 : 524287);
		if (isSetFeeInt())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(feeInt);

		hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
		if (isSetAction())
			hashCode = hashCode * 8191 + action.hashCode();

		hashCode = hashCode * 8191 + ((isSetTaskId()) ? 131071 : 524287);
		if (isSetTaskId())
			hashCode = hashCode * 8191 + taskId.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgTransfer other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUidFrom()).compareTo(other.isSetUidFrom());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidFrom()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidFrom, other.uidFrom);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidTo()).compareTo(other.isSetUidTo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidTo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidTo, other.uidTo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWalletFrom()).compareTo(other.isSetWalletFrom());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWalletFrom()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletFrom, other.walletFrom);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWalletTo()).compareTo(other.isSetWalletTo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWalletTo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walletTo, other.walletTo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmountFrom()).compareTo(other.isSetAmountFrom());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmountFrom()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountFrom, other.amountFrom);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmountTo()).compareTo(other.isSetAmountTo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmountTo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountTo, other.amountTo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFee()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRate()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCommentTag()).compareTo(other.isSetCommentTag());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCommentTag()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentTag, other.commentTag);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCommentJson()).compareTo(other.isSetCommentJson());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCommentJson()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentJson, other.commentJson);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmountFromInt()).compareTo(other.isSetAmountFromInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmountFromInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountFromInt, other.amountFromInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmountToInt()).compareTo(other.isSetAmountToInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmountToInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountToInt, other.amountToInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFeeInt()).compareTo(other.isSetFeeInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFeeInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeInt, other.feeInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAction()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTaskId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgTransfer(");
		boolean first = true;

		sb.append("uidFrom:");
		if (this.uidFrom == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uidFrom);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uidTo:");
		if (this.uidTo == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uidTo);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("walletFrom:");
		if (this.walletFrom == null) {
			sb.append("null");
		}
		else {
			sb.append(this.walletFrom);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("walletTo:");
		if (this.walletTo == null) {
			sb.append("null");
		}
		else {
			sb.append(this.walletTo);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amountFrom:");
		sb.append(this.amountFrom);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amountTo:");
		sb.append(this.amountTo);
		first = false;
		if (isSetFee()) {
			if (!first)
				sb.append(", ");
			sb.append("fee:");
			sb.append(this.fee);
			first = false;
		}
		if (isSetRate()) {
			if (!first)
				sb.append(", ");
			sb.append("rate:");
			sb.append(this.rate);
			first = false;
		}
		if (isSetCommentTag()) {
			if (!first)
				sb.append(", ");
			sb.append("commentTag:");
			if (this.commentTag == null) {
				sb.append("null");
			}
			else {
				sb.append(this.commentTag);
			}
			first = false;
		}
		if (isSetCommentJson()) {
			if (!first)
				sb.append(", ");
			sb.append("commentJson:");
			if (this.commentJson == null) {
				sb.append("null");
			}
			else {
				sb.append(this.commentJson);
			}
			first = false;
		}
		if (isSetAmountFromInt()) {
			if (!first)
				sb.append(", ");
			sb.append("amountFromInt:");
			sb.append(this.amountFromInt);
			first = false;
		}
		if (isSetAmountToInt()) {
			if (!first)
				sb.append(", ");
			sb.append("amountToInt:");
			sb.append(this.amountToInt);
			first = false;
		}
		if (isSetFeeInt()) {
			if (!first)
				sb.append(", ");
			sb.append("feeInt:");
			sb.append(this.feeInt);
			first = false;
		}
		if (isSetAction()) {
			if (!first)
				sb.append(", ");
			sb.append("action:");
			if (this.action == null) {
				sb.append("null");
			}
			else {
				sb.append(this.action);
			}
			first = false;
		}
		if (isSetTaskId()) {
			if (!first)
				sb.append(", ");
			sb.append("taskId:");
			if (this.taskId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.taskId);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgTransferStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgTransferStandardScheme getScheme() {
			return new ArgTransferStandardScheme();
		}

	}

	private static class ArgTransferStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgTransfer> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgTransfer struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID_FROM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidFrom = iprot.readString();
						struct.setUidFromIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID_TO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidTo = iprot.readString();
						struct.setUidToIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // WALLET_FROM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.walletFrom = iprot.readString();
						struct.setWalletFromIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // WALLET_TO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.walletTo = iprot.readString();
						struct.setWalletToIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // AMOUNT_FROM
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amountFrom = iprot.readDouble();
						struct.setAmountFromIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // AMOUNT_TO
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amountTo = iprot.readDouble();
						struct.setAmountToIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // FEE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.fee = iprot.readDouble();
						struct.setFeeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // RATE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.rate = iprot.readDouble();
						struct.setRateIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // COMMENT_TAG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.commentTag = iprot.readString();
						struct.setCommentTagIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // COMMENT_JSON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.commentJson = iprot.readString();
						struct.setCommentJsonIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // AMOUNT_FROM_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.amountFromInt = iprot.readI64();
						struct.setAmountFromIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // AMOUNT_TO_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.amountToInt = iprot.readI64();
						struct.setAmountToIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // FEE_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.feeInt = iprot.readI64();
						struct.setFeeIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // ACTION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.action = iprot.readString();
						struct.setActionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // TASK_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.taskId = iprot.readString();
						struct.setTaskIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgTransfer struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uidFrom != null) {
				oprot.writeFieldBegin(UID_FROM_FIELD_DESC);
				oprot.writeString(struct.uidFrom);
				oprot.writeFieldEnd();
			}
			if (struct.uidTo != null) {
				oprot.writeFieldBegin(UID_TO_FIELD_DESC);
				oprot.writeString(struct.uidTo);
				oprot.writeFieldEnd();
			}
			if (struct.walletFrom != null) {
				oprot.writeFieldBegin(WALLET_FROM_FIELD_DESC);
				oprot.writeString(struct.walletFrom);
				oprot.writeFieldEnd();
			}
			if (struct.walletTo != null) {
				oprot.writeFieldBegin(WALLET_TO_FIELD_DESC);
				oprot.writeString(struct.walletTo);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(AMOUNT_FROM_FIELD_DESC);
			oprot.writeDouble(struct.amountFrom);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(AMOUNT_TO_FIELD_DESC);
			oprot.writeDouble(struct.amountTo);
			oprot.writeFieldEnd();
			if (struct.isSetFee()) {
				oprot.writeFieldBegin(FEE_FIELD_DESC);
				oprot.writeDouble(struct.fee);
				oprot.writeFieldEnd();
			}
			if (struct.isSetRate()) {
				oprot.writeFieldBegin(RATE_FIELD_DESC);
				oprot.writeDouble(struct.rate);
				oprot.writeFieldEnd();
			}
			if (struct.commentTag != null) {
				if (struct.isSetCommentTag()) {
					oprot.writeFieldBegin(COMMENT_TAG_FIELD_DESC);
					oprot.writeString(struct.commentTag);
					oprot.writeFieldEnd();
				}
			}
			if (struct.commentJson != null) {
				if (struct.isSetCommentJson()) {
					oprot.writeFieldBegin(COMMENT_JSON_FIELD_DESC);
					oprot.writeString(struct.commentJson);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetAmountFromInt()) {
				oprot.writeFieldBegin(AMOUNT_FROM_INT_FIELD_DESC);
				oprot.writeI64(struct.amountFromInt);
				oprot.writeFieldEnd();
			}
			if (struct.isSetAmountToInt()) {
				oprot.writeFieldBegin(AMOUNT_TO_INT_FIELD_DESC);
				oprot.writeI64(struct.amountToInt);
				oprot.writeFieldEnd();
			}
			if (struct.isSetFeeInt()) {
				oprot.writeFieldBegin(FEE_INT_FIELD_DESC);
				oprot.writeI64(struct.feeInt);
				oprot.writeFieldEnd();
			}
			if (struct.action != null) {
				if (struct.isSetAction()) {
					oprot.writeFieldBegin(ACTION_FIELD_DESC);
					oprot.writeString(struct.action);
					oprot.writeFieldEnd();
				}
			}
			if (struct.taskId != null) {
				if (struct.isSetTaskId()) {
					oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
					oprot.writeString(struct.taskId);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgTransferTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgTransferTupleScheme getScheme() {
			return new ArgTransferTupleScheme();
		}

	}

	private static class ArgTransferTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgTransfer> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgTransfer struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUidFrom()) {
				optionals.set(0);
			}
			if (struct.isSetUidTo()) {
				optionals.set(1);
			}
			if (struct.isSetWalletFrom()) {
				optionals.set(2);
			}
			if (struct.isSetWalletTo()) {
				optionals.set(3);
			}
			if (struct.isSetAmountFrom()) {
				optionals.set(4);
			}
			if (struct.isSetAmountTo()) {
				optionals.set(5);
			}
			if (struct.isSetFee()) {
				optionals.set(6);
			}
			if (struct.isSetRate()) {
				optionals.set(7);
			}
			if (struct.isSetCommentTag()) {
				optionals.set(8);
			}
			if (struct.isSetCommentJson()) {
				optionals.set(9);
			}
			if (struct.isSetAmountFromInt()) {
				optionals.set(10);
			}
			if (struct.isSetAmountToInt()) {
				optionals.set(11);
			}
			if (struct.isSetFeeInt()) {
				optionals.set(12);
			}
			if (struct.isSetAction()) {
				optionals.set(13);
			}
			if (struct.isSetTaskId()) {
				optionals.set(14);
			}
			oprot.writeBitSet(optionals, 15);
			if (struct.isSetUidFrom()) {
				oprot.writeString(struct.uidFrom);
			}
			if (struct.isSetUidTo()) {
				oprot.writeString(struct.uidTo);
			}
			if (struct.isSetWalletFrom()) {
				oprot.writeString(struct.walletFrom);
			}
			if (struct.isSetWalletTo()) {
				oprot.writeString(struct.walletTo);
			}
			if (struct.isSetAmountFrom()) {
				oprot.writeDouble(struct.amountFrom);
			}
			if (struct.isSetAmountTo()) {
				oprot.writeDouble(struct.amountTo);
			}
			if (struct.isSetFee()) {
				oprot.writeDouble(struct.fee);
			}
			if (struct.isSetRate()) {
				oprot.writeDouble(struct.rate);
			}
			if (struct.isSetCommentTag()) {
				oprot.writeString(struct.commentTag);
			}
			if (struct.isSetCommentJson()) {
				oprot.writeString(struct.commentJson);
			}
			if (struct.isSetAmountFromInt()) {
				oprot.writeI64(struct.amountFromInt);
			}
			if (struct.isSetAmountToInt()) {
				oprot.writeI64(struct.amountToInt);
			}
			if (struct.isSetFeeInt()) {
				oprot.writeI64(struct.feeInt);
			}
			if (struct.isSetAction()) {
				oprot.writeString(struct.action);
			}
			if (struct.isSetTaskId()) {
				oprot.writeString(struct.taskId);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgTransfer struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(15);
			if (incoming.get(0)) {
				struct.uidFrom = iprot.readString();
				struct.setUidFromIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uidTo = iprot.readString();
				struct.setUidToIsSet(true);
			}
			if (incoming.get(2)) {
				struct.walletFrom = iprot.readString();
				struct.setWalletFromIsSet(true);
			}
			if (incoming.get(3)) {
				struct.walletTo = iprot.readString();
				struct.setWalletToIsSet(true);
			}
			if (incoming.get(4)) {
				struct.amountFrom = iprot.readDouble();
				struct.setAmountFromIsSet(true);
			}
			if (incoming.get(5)) {
				struct.amountTo = iprot.readDouble();
				struct.setAmountToIsSet(true);
			}
			if (incoming.get(6)) {
				struct.fee = iprot.readDouble();
				struct.setFeeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.rate = iprot.readDouble();
				struct.setRateIsSet(true);
			}
			if (incoming.get(8)) {
				struct.commentTag = iprot.readString();
				struct.setCommentTagIsSet(true);
			}
			if (incoming.get(9)) {
				struct.commentJson = iprot.readString();
				struct.setCommentJsonIsSet(true);
			}
			if (incoming.get(10)) {
				struct.amountFromInt = iprot.readI64();
				struct.setAmountFromIntIsSet(true);
			}
			if (incoming.get(11)) {
				struct.amountToInt = iprot.readI64();
				struct.setAmountToIntIsSet(true);
			}
			if (incoming.get(12)) {
				struct.feeInt = iprot.readI64();
				struct.setFeeIntIsSet(true);
			}
			if (incoming.get(13)) {
				struct.action = iprot.readString();
				struct.setActionIsSet(true);
			}
			if (incoming.get(14)) {
				struct.taskId = iprot.readString();
				struct.setTaskIdIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
