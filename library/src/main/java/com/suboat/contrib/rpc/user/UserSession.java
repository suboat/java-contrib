/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 用户会话
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-14")
public class UserSession implements org.apache.thrift.TBase<UserSession, UserSession._Fields>, java.io.Serializable,
		Cloneable, Comparable<UserSession> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"UserSession");

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField IS_STAFF_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isStaff", org.apache.thrift.protocol.TType.BOOL, (short) 2);

	private static final org.apache.thrift.protocol.TField AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"agent", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField IS_WEB_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isWeb", org.apache.thrift.protocol.TType.BOOL, (short) 4);

	private static final org.apache.thrift.protocol.TField EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("exp",
			org.apache.thrift.protocol.TType.I64, (short) 5);

	private static final org.apache.thrift.protocol.TField CRE_FIELD_DESC = new org.apache.thrift.protocol.TField("cre",
			org.apache.thrift.protocol.TType.I64, (short) 6);

	private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"level", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip",
			org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField DEV_FIELD_DESC = new org.apache.thrift.protocol.TField("dev",
			org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserSessionStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserSessionTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public boolean isStaff; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String agent; // required

	public boolean isWeb; // required

	public long exp; // required

	public long cre; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String level; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String ip; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String dev; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID((short) 1, "uid"), IS_STAFF((short) 2, "isStaff"), AGENT((short) 3, "agent"), IS_WEB((short) 4,
				"isWeb"), EXP((short) 5, "exp"), CRE((short) 6,
						"cre"), LEVEL((short) 7, "level"), IP((short) 8, "ip"), DEV((short) 9, "dev");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID
				return UID;
			case 2: // IS_STAFF
				return IS_STAFF;
			case 3: // AGENT
				return AGENT;
			case 4: // IS_WEB
				return IS_WEB;
			case 5: // EXP
				return EXP;
			case 6: // CRE
				return CRE;
			case 7: // LEVEL
				return LEVEL;
			case 8: // IP
				return IP;
			case 9: // DEV
				return DEV;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISSTAFF_ISSET_ID = 0;

	private static final int __ISWEB_ISSET_ID = 1;

	private static final int __EXP_ISSET_ID = 2;

	private static final int __CRE_ISSET_ID = 3;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_STAFF,
				new org.apache.thrift.meta_data.FieldMetaData("isStaff",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.AGENT,
				new org.apache.thrift.meta_data.FieldMetaData("agent", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_WEB,
				new org.apache.thrift.meta_data.FieldMetaData("isWeb", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.EXP,
				new org.apache.thrift.meta_data.FieldMetaData("exp", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.CRE,
				new org.apache.thrift.meta_data.FieldMetaData("cre", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.LEVEL,
				new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IP,
				new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DEV,
				new org.apache.thrift.meta_data.FieldMetaData("dev", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserSession.class, metaDataMap);
	}

	public UserSession() {
	}

	public UserSession(java.lang.String uid, boolean isStaff, java.lang.String agent, boolean isWeb, long exp, long cre,
			java.lang.String level, java.lang.String ip, java.lang.String dev) {
		this();
		this.uid = uid;
		this.isStaff = isStaff;
		setIsStaffIsSet(true);
		this.agent = agent;
		this.isWeb = isWeb;
		setIsWebIsSet(true);
		this.exp = exp;
		setExpIsSet(true);
		this.cre = cre;
		setCreIsSet(true);
		this.level = level;
		this.ip = ip;
		this.dev = dev;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public UserSession(UserSession other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		this.isStaff = other.isStaff;
		if (other.isSetAgent()) {
			this.agent = other.agent;
		}
		this.isWeb = other.isWeb;
		this.exp = other.exp;
		this.cre = other.cre;
		if (other.isSetLevel()) {
			this.level = other.level;
		}
		if (other.isSetIp()) {
			this.ip = other.ip;
		}
		if (other.isSetDev()) {
			this.dev = other.dev;
		}
	}

	public UserSession deepCopy() {
		return new UserSession(this);
	}

	@Override
	public void clear() {
		this.uid = null;
		setIsStaffIsSet(false);
		this.isStaff = false;
		this.agent = null;
		setIsWebIsSet(false);
		this.isWeb = false;
		setExpIsSet(false);
		this.exp = 0;
		setCreIsSet(false);
		this.cre = 0;
		this.level = null;
		this.ip = null;
		this.dev = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public UserSession setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	public boolean isIsStaff() {
		return this.isStaff;
	}

	public UserSession setIsStaff(boolean isStaff) {
		this.isStaff = isStaff;
		setIsStaffIsSet(true);
		return this;
	}

	public void unsetIsStaff() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTAFF_ISSET_ID);
	}

	/**
	 * Returns true if field isStaff is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsStaff() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTAFF_ISSET_ID);
	}

	public void setIsStaffIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSTAFF_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAgent() {
		return this.agent;
	}

	public UserSession setAgent(@org.apache.thrift.annotation.Nullable java.lang.String agent) {
		this.agent = agent;
		return this;
	}

	public void unsetAgent() {
		this.agent = null;
	}

	/**
	 * Returns true if field agent is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAgent() {
		return this.agent != null;
	}

	public void setAgentIsSet(boolean value) {
		if (!value) {
			this.agent = null;
		}
	}

	public boolean isIsWeb() {
		return this.isWeb;
	}

	public UserSession setIsWeb(boolean isWeb) {
		this.isWeb = isWeb;
		setIsWebIsSet(true);
		return this;
	}

	public void unsetIsWeb() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISWEB_ISSET_ID);
	}

	/**
	 * Returns true if field isWeb is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsWeb() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISWEB_ISSET_ID);
	}

	public void setIsWebIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISWEB_ISSET_ID, value);
	}

	public long getExp() {
		return this.exp;
	}

	public UserSession setExp(long exp) {
		this.exp = exp;
		setExpIsSet(true);
		return this;
	}

	public void unsetExp() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXP_ISSET_ID);
	}

	/**
	 * Returns true if field exp is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetExp() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXP_ISSET_ID);
	}

	public void setExpIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXP_ISSET_ID, value);
	}

	public long getCre() {
		return this.cre;
	}

	public UserSession setCre(long cre) {
		this.cre = cre;
		setCreIsSet(true);
		return this;
	}

	public void unsetCre() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CRE_ISSET_ID);
	}

	/**
	 * Returns true if field cre is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCre() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CRE_ISSET_ID);
	}

	public void setCreIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CRE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLevel() {
		return this.level;
	}

	public UserSession setLevel(@org.apache.thrift.annotation.Nullable java.lang.String level) {
		this.level = level;
		return this;
	}

	public void unsetLevel() {
		this.level = null;
	}

	/**
	 * Returns true if field level is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLevel() {
		return this.level != null;
	}

	public void setLevelIsSet(boolean value) {
		if (!value) {
			this.level = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIp() {
		return this.ip;
	}

	public UserSession setIp(@org.apache.thrift.annotation.Nullable java.lang.String ip) {
		this.ip = ip;
		return this;
	}

	public void unsetIp() {
		this.ip = null;
	}

	/** Returns true if field ip is set (has been assigned a value) and false otherwise */
	public boolean isSetIp() {
		return this.ip != null;
	}

	public void setIpIsSet(boolean value) {
		if (!value) {
			this.ip = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDev() {
		return this.dev;
	}

	public UserSession setDev(@org.apache.thrift.annotation.Nullable java.lang.String dev) {
		this.dev = dev;
		return this;
	}

	public void unsetDev() {
		this.dev = null;
	}

	/**
	 * Returns true if field dev is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetDev() {
		return this.dev != null;
	}

	public void setDevIsSet(boolean value) {
		if (!value) {
			this.dev = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case IS_STAFF:
			if (value == null) {
				unsetIsStaff();
			}
			else {
				setIsStaff((java.lang.Boolean) value);
			}
			break;

		case AGENT:
			if (value == null) {
				unsetAgent();
			}
			else {
				setAgent((java.lang.String) value);
			}
			break;

		case IS_WEB:
			if (value == null) {
				unsetIsWeb();
			}
			else {
				setIsWeb((java.lang.Boolean) value);
			}
			break;

		case EXP:
			if (value == null) {
				unsetExp();
			}
			else {
				setExp((java.lang.Long) value);
			}
			break;

		case CRE:
			if (value == null) {
				unsetCre();
			}
			else {
				setCre((java.lang.Long) value);
			}
			break;

		case LEVEL:
			if (value == null) {
				unsetLevel();
			}
			else {
				setLevel((java.lang.String) value);
			}
			break;

		case IP:
			if (value == null) {
				unsetIp();
			}
			else {
				setIp((java.lang.String) value);
			}
			break;

		case DEV:
			if (value == null) {
				unsetDev();
			}
			else {
				setDev((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID:
			return getUid();

		case IS_STAFF:
			return isIsStaff();

		case AGENT:
			return getAgent();

		case IS_WEB:
			return isIsWeb();

		case EXP:
			return getExp();

		case CRE:
			return getCre();

		case LEVEL:
			return getLevel();

		case IP:
			return getIp();

		case DEV:
			return getDev();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID:
			return isSetUid();
		case IS_STAFF:
			return isSetIsStaff();
		case AGENT:
			return isSetAgent();
		case IS_WEB:
			return isSetIsWeb();
		case EXP:
			return isSetExp();
		case CRE:
			return isSetCre();
		case LEVEL:
			return isSetLevel();
		case IP:
			return isSetIp();
		case DEV:
			return isSetDev();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof UserSession)
			return this.equals((UserSession) that);
		return false;
	}

	public boolean equals(UserSession that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_isStaff = true;
		boolean that_present_isStaff = true;
		if (this_present_isStaff || that_present_isStaff) {
			if (!(this_present_isStaff && that_present_isStaff))
				return false;
			if (this.isStaff != that.isStaff)
				return false;
		}

		boolean this_present_agent = true && this.isSetAgent();
		boolean that_present_agent = true && that.isSetAgent();
		if (this_present_agent || that_present_agent) {
			if (!(this_present_agent && that_present_agent))
				return false;
			if (!this.agent.equals(that.agent))
				return false;
		}

		boolean this_present_isWeb = true;
		boolean that_present_isWeb = true;
		if (this_present_isWeb || that_present_isWeb) {
			if (!(this_present_isWeb && that_present_isWeb))
				return false;
			if (this.isWeb != that.isWeb)
				return false;
		}

		boolean this_present_exp = true;
		boolean that_present_exp = true;
		if (this_present_exp || that_present_exp) {
			if (!(this_present_exp && that_present_exp))
				return false;
			if (this.exp != that.exp)
				return false;
		}

		boolean this_present_cre = true;
		boolean that_present_cre = true;
		if (this_present_cre || that_present_cre) {
			if (!(this_present_cre && that_present_cre))
				return false;
			if (this.cre != that.cre)
				return false;
		}

		boolean this_present_level = true && this.isSetLevel();
		boolean that_present_level = true && that.isSetLevel();
		if (this_present_level || that_present_level) {
			if (!(this_present_level && that_present_level))
				return false;
			if (!this.level.equals(that.level))
				return false;
		}

		boolean this_present_ip = true && this.isSetIp();
		boolean that_present_ip = true && that.isSetIp();
		if (this_present_ip || that_present_ip) {
			if (!(this_present_ip && that_present_ip))
				return false;
			if (!this.ip.equals(that.ip))
				return false;
		}

		boolean this_present_dev = true && this.isSetDev();
		boolean that_present_dev = true && that.isSetDev();
		if (this_present_dev || that_present_dev) {
			if (!(this_present_dev && that_present_dev))
				return false;
			if (!this.dev.equals(that.dev))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isStaff) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetAgent()) ? 131071 : 524287);
		if (isSetAgent())
			hashCode = hashCode * 8191 + agent.hashCode();

		hashCode = hashCode * 8191 + ((isWeb) ? 131071 : 524287);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(exp);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cre);

		hashCode = hashCode * 8191 + ((isSetLevel()) ? 131071 : 524287);
		if (isSetLevel())
			hashCode = hashCode * 8191 + level.hashCode();

		hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
		if (isSetIp())
			hashCode = hashCode * 8191 + ip.hashCode();

		hashCode = hashCode * 8191 + ((isSetDev()) ? 131071 : 524287);
		if (isSetDev())
			hashCode = hashCode * 8191 + dev.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(UserSession other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsStaff()).compareTo(other.isSetIsStaff());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsStaff()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStaff, other.isStaff);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAgent()).compareTo(other.isSetAgent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAgent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agent, other.agent);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsWeb()).compareTo(other.isSetIsWeb());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsWeb()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isWeb, other.isWeb);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExp()).compareTo(other.isSetExp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exp, other.exp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCre()).compareTo(other.isSetCre());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCre()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cre, other.cre);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLevel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDev()).compareTo(other.isSetDev());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDev()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dev, other.dev);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("UserSession(");
		boolean first = true;

		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isStaff:");
		sb.append(this.isStaff);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("agent:");
		if (this.agent == null) {
			sb.append("null");
		}
		else {
			sb.append(this.agent);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isWeb:");
		sb.append(this.isWeb);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("exp:");
		sb.append(this.exp);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("cre:");
		sb.append(this.cre);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("level:");
		if (this.level == null) {
			sb.append("null");
		}
		else {
			sb.append(this.level);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("ip:");
		if (this.ip == null) {
			sb.append("null");
		}
		else {
			sb.append(this.ip);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dev:");
		if (this.dev == null) {
			sb.append("null");
		}
		else {
			sb.append(this.dev);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class UserSessionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserSessionStandardScheme getScheme() {
			return new UserSessionStandardScheme();
		}

	}

	private static class UserSessionStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserSession> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, UserSession struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // IS_STAFF
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isStaff = iprot.readBool();
						struct.setIsStaffIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // AGENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.agent = iprot.readString();
						struct.setAgentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // IS_WEB
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isWeb = iprot.readBool();
						struct.setIsWebIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // EXP
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.exp = iprot.readI64();
						struct.setExpIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // CRE
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.cre = iprot.readI64();
						struct.setCreIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // LEVEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.level = iprot.readString();
						struct.setLevelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // IP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ip = iprot.readString();
						struct.setIpIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // DEV
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dev = iprot.readString();
						struct.setDevIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, UserSession struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_STAFF_FIELD_DESC);
			oprot.writeBool(struct.isStaff);
			oprot.writeFieldEnd();
			if (struct.agent != null) {
				oprot.writeFieldBegin(AGENT_FIELD_DESC);
				oprot.writeString(struct.agent);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_WEB_FIELD_DESC);
			oprot.writeBool(struct.isWeb);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(EXP_FIELD_DESC);
			oprot.writeI64(struct.exp);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CRE_FIELD_DESC);
			oprot.writeI64(struct.cre);
			oprot.writeFieldEnd();
			if (struct.level != null) {
				oprot.writeFieldBegin(LEVEL_FIELD_DESC);
				oprot.writeString(struct.level);
				oprot.writeFieldEnd();
			}
			if (struct.ip != null) {
				oprot.writeFieldBegin(IP_FIELD_DESC);
				oprot.writeString(struct.ip);
				oprot.writeFieldEnd();
			}
			if (struct.dev != null) {
				oprot.writeFieldBegin(DEV_FIELD_DESC);
				oprot.writeString(struct.dev);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class UserSessionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserSessionTupleScheme getScheme() {
			return new UserSessionTupleScheme();
		}

	}

	private static class UserSessionTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserSession> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, UserSession struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUid()) {
				optionals.set(0);
			}
			if (struct.isSetIsStaff()) {
				optionals.set(1);
			}
			if (struct.isSetAgent()) {
				optionals.set(2);
			}
			if (struct.isSetIsWeb()) {
				optionals.set(3);
			}
			if (struct.isSetExp()) {
				optionals.set(4);
			}
			if (struct.isSetCre()) {
				optionals.set(5);
			}
			if (struct.isSetLevel()) {
				optionals.set(6);
			}
			if (struct.isSetIp()) {
				optionals.set(7);
			}
			if (struct.isSetDev()) {
				optionals.set(8);
			}
			oprot.writeBitSet(optionals, 9);
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetIsStaff()) {
				oprot.writeBool(struct.isStaff);
			}
			if (struct.isSetAgent()) {
				oprot.writeString(struct.agent);
			}
			if (struct.isSetIsWeb()) {
				oprot.writeBool(struct.isWeb);
			}
			if (struct.isSetExp()) {
				oprot.writeI64(struct.exp);
			}
			if (struct.isSetCre()) {
				oprot.writeI64(struct.cre);
			}
			if (struct.isSetLevel()) {
				oprot.writeString(struct.level);
			}
			if (struct.isSetIp()) {
				oprot.writeString(struct.ip);
			}
			if (struct.isSetDev()) {
				oprot.writeString(struct.dev);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, UserSession struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(9);
			if (incoming.get(0)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.isStaff = iprot.readBool();
				struct.setIsStaffIsSet(true);
			}
			if (incoming.get(2)) {
				struct.agent = iprot.readString();
				struct.setAgentIsSet(true);
			}
			if (incoming.get(3)) {
				struct.isWeb = iprot.readBool();
				struct.setIsWebIsSet(true);
			}
			if (incoming.get(4)) {
				struct.exp = iprot.readI64();
				struct.setExpIsSet(true);
			}
			if (incoming.get(5)) {
				struct.cre = iprot.readI64();
				struct.setCreIsSet(true);
			}
			if (incoming.get(6)) {
				struct.level = iprot.readString();
				struct.setLevelIsSet(true);
			}
			if (incoming.get(7)) {
				struct.ip = iprot.readString();
				struct.setIpIsSet(true);
			}
			if (incoming.get(8)) {
				struct.dev = iprot.readString();
				struct.setDevIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
