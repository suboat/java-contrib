/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class CouponUser implements org.apache.thrift.TBase<CouponUser, CouponUser._Fields>, java.io.Serializable,
		Cloneable, Comparable<CouponUser> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"CouponUser");

	private static final org.apache.thrift.protocol.TField ACC_FIELD_DESC = new org.apache.thrift.protocol.TField("acc",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField CATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"cate", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"property", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 6);

	private static final org.apache.thrift.protocol.TField IS_AVL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isAvl", org.apache.thrift.protocol.TType.BOOL, (short) 7);

	private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"balance", org.apache.thrift.protocol.TType.DOUBLE, (short) 8);

	private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amount", org.apache.thrift.protocol.TType.DOUBLE, (short) 9);

	private static final org.apache.thrift.protocol.TField NUM_CAN_USE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numCanUse", org.apache.thrift.protocol.TType.I32, (short) 10);

	private static final org.apache.thrift.protocol.TField APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"applyTime", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTime", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CouponUserStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CouponUserTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String acc; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String cate; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String cid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String property; // required

	public int status; // required

	public boolean isAvl; // required

	public double balance; // required

	public double amount; // required

	public int numCanUse; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String applyTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		ACC((short) 1, "acc"), CATE((short) 2, "cate"), CID((short) 3, "cid"), UID((short) 4, "uid"), PROPERTY(
				(short) 5, "property"), STATUS((short) 6, "status"), IS_AVL((short) 7, "isAvl"), BALANCE((short) 8,
						"balance"), AMOUNT((short) 9, "amount"), NUM_CAN_USE((short) 10, "numCanUse"), APPLY_TIME(
								(short) 11, "applyTime"), EXPIRE_TIME((short) 12, "expireTime"), CREATE_TIME((short) 13,
										"createTime"), UPDATE_TIME((short) 14, "updateTime");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ACC
				return ACC;
			case 2: // CATE
				return CATE;
			case 3: // CID
				return CID;
			case 4: // UID
				return UID;
			case 5: // PROPERTY
				return PROPERTY;
			case 6: // STATUS
				return STATUS;
			case 7: // IS_AVL
				return IS_AVL;
			case 8: // BALANCE
				return BALANCE;
			case 9: // AMOUNT
				return AMOUNT;
			case 10: // NUM_CAN_USE
				return NUM_CAN_USE;
			case 11: // APPLY_TIME
				return APPLY_TIME;
			case 12: // EXPIRE_TIME
				return EXPIRE_TIME;
			case 13: // CREATE_TIME
				return CREATE_TIME;
			case 14: // UPDATE_TIME
				return UPDATE_TIME;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;

	private static final int __ISAVL_ISSET_ID = 1;

	private static final int __BALANCE_ISSET_ID = 2;

	private static final int __AMOUNT_ISSET_ID = 3;

	private static final int __NUMCANUSE_ISSET_ID = 4;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ACC,
				new org.apache.thrift.meta_data.FieldMetaData("acc", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CATE,
				new org.apache.thrift.meta_data.FieldMetaData("cate", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CID,
				new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PROPERTY,
				new org.apache.thrift.meta_data.FieldMetaData("property",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_AVL,
				new org.apache.thrift.meta_data.FieldMetaData("isAvl", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.BALANCE,
				new org.apache.thrift.meta_data.FieldMetaData("balance",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.AMOUNT,
				new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.NUM_CAN_USE,
				new org.apache.thrift.meta_data.FieldMetaData("numCanUse",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("applyTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CouponUser.class, metaDataMap);
	}

	public CouponUser() {
	}

	public CouponUser(java.lang.String acc, java.lang.String cate, java.lang.String cid, java.lang.String uid,
			java.lang.String property, int status, boolean isAvl, double balance, double amount, int numCanUse,
			java.lang.String applyTime, java.lang.String expireTime, java.lang.String createTime,
			java.lang.String updateTime) {
		this();
		this.acc = acc;
		this.cate = cate;
		this.cid = cid;
		this.uid = uid;
		this.property = property;
		this.status = status;
		setStatusIsSet(true);
		this.isAvl = isAvl;
		setIsAvlIsSet(true);
		this.balance = balance;
		setBalanceIsSet(true);
		this.amount = amount;
		setAmountIsSet(true);
		this.numCanUse = numCanUse;
		setNumCanUseIsSet(true);
		this.applyTime = applyTime;
		this.expireTime = expireTime;
		this.createTime = createTime;
		this.updateTime = updateTime;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public CouponUser(CouponUser other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetAcc()) {
			this.acc = other.acc;
		}
		if (other.isSetCate()) {
			this.cate = other.cate;
		}
		if (other.isSetCid()) {
			this.cid = other.cid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetProperty()) {
			this.property = other.property;
		}
		this.status = other.status;
		this.isAvl = other.isAvl;
		this.balance = other.balance;
		this.amount = other.amount;
		this.numCanUse = other.numCanUse;
		if (other.isSetApplyTime()) {
			this.applyTime = other.applyTime;
		}
		if (other.isSetExpireTime()) {
			this.expireTime = other.expireTime;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
	}

	public CouponUser deepCopy() {
		return new CouponUser(this);
	}

	@Override
	public void clear() {
		this.acc = null;
		this.cate = null;
		this.cid = null;
		this.uid = null;
		this.property = null;
		setStatusIsSet(false);
		this.status = 0;
		setIsAvlIsSet(false);
		this.isAvl = false;
		setBalanceIsSet(false);
		this.balance = 0.0;
		setAmountIsSet(false);
		this.amount = 0.0;
		setNumCanUseIsSet(false);
		this.numCanUse = 0;
		this.applyTime = null;
		this.expireTime = null;
		this.createTime = null;
		this.updateTime = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAcc() {
		return this.acc;
	}

	public CouponUser setAcc(@org.apache.thrift.annotation.Nullable java.lang.String acc) {
		this.acc = acc;
		return this;
	}

	public void unsetAcc() {
		this.acc = null;
	}

	/**
	 * Returns true if field acc is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAcc() {
		return this.acc != null;
	}

	public void setAccIsSet(boolean value) {
		if (!value) {
			this.acc = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCate() {
		return this.cate;
	}

	public CouponUser setCate(@org.apache.thrift.annotation.Nullable java.lang.String cate) {
		this.cate = cate;
		return this;
	}

	public void unsetCate() {
		this.cate = null;
	}

	/**
	 * Returns true if field cate is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCate() {
		return this.cate != null;
	}

	public void setCateIsSet(boolean value) {
		if (!value) {
			this.cate = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCid() {
		return this.cid;
	}

	public CouponUser setCid(@org.apache.thrift.annotation.Nullable java.lang.String cid) {
		this.cid = cid;
		return this;
	}

	public void unsetCid() {
		this.cid = null;
	}

	/**
	 * Returns true if field cid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCid() {
		return this.cid != null;
	}

	public void setCidIsSet(boolean value) {
		if (!value) {
			this.cid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public CouponUser setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProperty() {
		return this.property;
	}

	public CouponUser setProperty(@org.apache.thrift.annotation.Nullable java.lang.String property) {
		this.property = property;
		return this;
	}

	public void unsetProperty() {
		this.property = null;
	}

	/**
	 * Returns true if field property is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProperty() {
		return this.property != null;
	}

	public void setPropertyIsSet(boolean value) {
		if (!value) {
			this.property = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public CouponUser setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public boolean isIsAvl() {
		return this.isAvl;
	}

	public CouponUser setIsAvl(boolean isAvl) {
		this.isAvl = isAvl;
		setIsAvlIsSet(true);
		return this;
	}

	public void unsetIsAvl() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISAVL_ISSET_ID);
	}

	/**
	 * Returns true if field isAvl is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsAvl() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISAVL_ISSET_ID);
	}

	public void setIsAvlIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISAVL_ISSET_ID, value);
	}

	public double getBalance() {
		return this.balance;
	}

	public CouponUser setBalance(double balance) {
		this.balance = balance;
		setBalanceIsSet(true);
		return this;
	}

	public void unsetBalance() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
	}

	/**
	 * Returns true if field balance is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBalance() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
	}

	public void setBalanceIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
	}

	public double getAmount() {
		return this.amount;
	}

	public CouponUser setAmount(double amount) {
		this.amount = amount;
		setAmountIsSet(true);
		return this;
	}

	public void unsetAmount() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field amount is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAmount() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	public void setAmountIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
	}

	public int getNumCanUse() {
		return this.numCanUse;
	}

	public CouponUser setNumCanUse(int numCanUse) {
		this.numCanUse = numCanUse;
		setNumCanUseIsSet(true);
		return this;
	}

	public void unsetNumCanUse() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMCANUSE_ISSET_ID);
	}

	/**
	 * Returns true if field numCanUse is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumCanUse() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMCANUSE_ISSET_ID);
	}

	public void setNumCanUseIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMCANUSE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getApplyTime() {
		return this.applyTime;
	}

	public CouponUser setApplyTime(@org.apache.thrift.annotation.Nullable java.lang.String applyTime) {
		this.applyTime = applyTime;
		return this;
	}

	public void unsetApplyTime() {
		this.applyTime = null;
	}

	/**
	 * Returns true if field applyTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetApplyTime() {
		return this.applyTime != null;
	}

	public void setApplyTimeIsSet(boolean value) {
		if (!value) {
			this.applyTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTime() {
		return this.expireTime;
	}

	public CouponUser setExpireTime(@org.apache.thrift.annotation.Nullable java.lang.String expireTime) {
		this.expireTime = expireTime;
		return this;
	}

	public void unsetExpireTime() {
		this.expireTime = null;
	}

	/**
	 * Returns true if field expireTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTime() {
		return this.expireTime != null;
	}

	public void setExpireTimeIsSet(boolean value) {
		if (!value) {
			this.expireTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public CouponUser setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public CouponUser setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case ACC:
			if (value == null) {
				unsetAcc();
			}
			else {
				setAcc((java.lang.String) value);
			}
			break;

		case CATE:
			if (value == null) {
				unsetCate();
			}
			else {
				setCate((java.lang.String) value);
			}
			break;

		case CID:
			if (value == null) {
				unsetCid();
			}
			else {
				setCid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case PROPERTY:
			if (value == null) {
				unsetProperty();
			}
			else {
				setProperty((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case IS_AVL:
			if (value == null) {
				unsetIsAvl();
			}
			else {
				setIsAvl((java.lang.Boolean) value);
			}
			break;

		case BALANCE:
			if (value == null) {
				unsetBalance();
			}
			else {
				setBalance((java.lang.Double) value);
			}
			break;

		case AMOUNT:
			if (value == null) {
				unsetAmount();
			}
			else {
				setAmount((java.lang.Double) value);
			}
			break;

		case NUM_CAN_USE:
			if (value == null) {
				unsetNumCanUse();
			}
			else {
				setNumCanUse((java.lang.Integer) value);
			}
			break;

		case APPLY_TIME:
			if (value == null) {
				unsetApplyTime();
			}
			else {
				setApplyTime((java.lang.String) value);
			}
			break;

		case EXPIRE_TIME:
			if (value == null) {
				unsetExpireTime();
			}
			else {
				setExpireTime((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ACC:
			return getAcc();

		case CATE:
			return getCate();

		case CID:
			return getCid();

		case UID:
			return getUid();

		case PROPERTY:
			return getProperty();

		case STATUS:
			return getStatus();

		case IS_AVL:
			return isIsAvl();

		case BALANCE:
			return getBalance();

		case AMOUNT:
			return getAmount();

		case NUM_CAN_USE:
			return getNumCanUse();

		case APPLY_TIME:
			return getApplyTime();

		case EXPIRE_TIME:
			return getExpireTime();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ACC:
			return isSetAcc();
		case CATE:
			return isSetCate();
		case CID:
			return isSetCid();
		case UID:
			return isSetUid();
		case PROPERTY:
			return isSetProperty();
		case STATUS:
			return isSetStatus();
		case IS_AVL:
			return isSetIsAvl();
		case BALANCE:
			return isSetBalance();
		case AMOUNT:
			return isSetAmount();
		case NUM_CAN_USE:
			return isSetNumCanUse();
		case APPLY_TIME:
			return isSetApplyTime();
		case EXPIRE_TIME:
			return isSetExpireTime();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof CouponUser)
			return this.equals((CouponUser) that);
		return false;
	}

	public boolean equals(CouponUser that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_acc = true && this.isSetAcc();
		boolean that_present_acc = true && that.isSetAcc();
		if (this_present_acc || that_present_acc) {
			if (!(this_present_acc && that_present_acc))
				return false;
			if (!this.acc.equals(that.acc))
				return false;
		}

		boolean this_present_cate = true && this.isSetCate();
		boolean that_present_cate = true && that.isSetCate();
		if (this_present_cate || that_present_cate) {
			if (!(this_present_cate && that_present_cate))
				return false;
			if (!this.cate.equals(that.cate))
				return false;
		}

		boolean this_present_cid = true && this.isSetCid();
		boolean that_present_cid = true && that.isSetCid();
		if (this_present_cid || that_present_cid) {
			if (!(this_present_cid && that_present_cid))
				return false;
			if (!this.cid.equals(that.cid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_property = true && this.isSetProperty();
		boolean that_present_property = true && that.isSetProperty();
		if (this_present_property || that_present_property) {
			if (!(this_present_property && that_present_property))
				return false;
			if (!this.property.equals(that.property))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_isAvl = true;
		boolean that_present_isAvl = true;
		if (this_present_isAvl || that_present_isAvl) {
			if (!(this_present_isAvl && that_present_isAvl))
				return false;
			if (this.isAvl != that.isAvl)
				return false;
		}

		boolean this_present_balance = true;
		boolean that_present_balance = true;
		if (this_present_balance || that_present_balance) {
			if (!(this_present_balance && that_present_balance))
				return false;
			if (this.balance != that.balance)
				return false;
		}

		boolean this_present_amount = true;
		boolean that_present_amount = true;
		if (this_present_amount || that_present_amount) {
			if (!(this_present_amount && that_present_amount))
				return false;
			if (this.amount != that.amount)
				return false;
		}

		boolean this_present_numCanUse = true;
		boolean that_present_numCanUse = true;
		if (this_present_numCanUse || that_present_numCanUse) {
			if (!(this_present_numCanUse && that_present_numCanUse))
				return false;
			if (this.numCanUse != that.numCanUse)
				return false;
		}

		boolean this_present_applyTime = true && this.isSetApplyTime();
		boolean that_present_applyTime = true && that.isSetApplyTime();
		if (this_present_applyTime || that_present_applyTime) {
			if (!(this_present_applyTime && that_present_applyTime))
				return false;
			if (!this.applyTime.equals(that.applyTime))
				return false;
		}

		boolean this_present_expireTime = true && this.isSetExpireTime();
		boolean that_present_expireTime = true && that.isSetExpireTime();
		if (this_present_expireTime || that_present_expireTime) {
			if (!(this_present_expireTime && that_present_expireTime))
				return false;
			if (!this.expireTime.equals(that.expireTime))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetAcc()) ? 131071 : 524287);
		if (isSetAcc())
			hashCode = hashCode * 8191 + acc.hashCode();

		hashCode = hashCode * 8191 + ((isSetCate()) ? 131071 : 524287);
		if (isSetCate())
			hashCode = hashCode * 8191 + cate.hashCode();

		hashCode = hashCode * 8191 + ((isSetCid()) ? 131071 : 524287);
		if (isSetCid())
			hashCode = hashCode * 8191 + cid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetProperty()) ? 131071 : 524287);
		if (isSetProperty())
			hashCode = hashCode * 8191 + property.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isAvl) ? 131071 : 524287);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(balance);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

		hashCode = hashCode * 8191 + numCanUse;

		hashCode = hashCode * 8191 + ((isSetApplyTime()) ? 131071 : 524287);
		if (isSetApplyTime())
			hashCode = hashCode * 8191 + applyTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTime()) ? 131071 : 524287);
		if (isSetExpireTime())
			hashCode = hashCode * 8191 + expireTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(CouponUser other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetAcc()).compareTo(other.isSetAcc());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAcc()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acc, other.acc);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCate()).compareTo(other.isSetCate());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCate()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cate, other.cate);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProperty()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsAvl()).compareTo(other.isSetIsAvl());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsAvl()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAvl, other.isAvl);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBalance()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumCanUse()).compareTo(other.isSetNumCanUse());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumCanUse()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numCanUse, other.numCanUse);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetApplyTime()).compareTo(other.isSetApplyTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApplyTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTime, other.applyTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("CouponUser(");
		boolean first = true;

		sb.append("acc:");
		if (this.acc == null) {
			sb.append("null");
		}
		else {
			sb.append(this.acc);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("cate:");
		if (this.cate == null) {
			sb.append("null");
		}
		else {
			sb.append(this.cate);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("cid:");
		if (this.cid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.cid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("property:");
		if (this.property == null) {
			sb.append("null");
		}
		else {
			sb.append(this.property);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isAvl:");
		sb.append(this.isAvl);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("balance:");
		sb.append(this.balance);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amount:");
		sb.append(this.amount);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numCanUse:");
		sb.append(this.numCanUse);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("applyTime:");
		if (this.applyTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.applyTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("expireTime:");
		if (this.expireTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.expireTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class CouponUserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public CouponUserStandardScheme getScheme() {
			return new CouponUserStandardScheme();
		}

	}

	private static class CouponUserStandardScheme extends org.apache.thrift.scheme.StandardScheme<CouponUser> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, CouponUser struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ACC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.acc = iprot.readString();
						struct.setAccIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // CATE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.cate = iprot.readString();
						struct.setCateIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // CID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.cid = iprot.readString();
						struct.setCidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // PROPERTY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.property = iprot.readString();
						struct.setPropertyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // IS_AVL
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isAvl = iprot.readBool();
						struct.setIsAvlIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // BALANCE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.balance = iprot.readDouble();
						struct.setBalanceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // AMOUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amount = iprot.readDouble();
						struct.setAmountIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // NUM_CAN_USE
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numCanUse = iprot.readI32();
						struct.setNumCanUseIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // APPLY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.applyTime = iprot.readString();
						struct.setApplyTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // EXPIRE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTime = iprot.readString();
						struct.setExpireTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, CouponUser struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.acc != null) {
				oprot.writeFieldBegin(ACC_FIELD_DESC);
				oprot.writeString(struct.acc);
				oprot.writeFieldEnd();
			}
			if (struct.cate != null) {
				oprot.writeFieldBegin(CATE_FIELD_DESC);
				oprot.writeString(struct.cate);
				oprot.writeFieldEnd();
			}
			if (struct.cid != null) {
				oprot.writeFieldBegin(CID_FIELD_DESC);
				oprot.writeString(struct.cid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.property != null) {
				oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
				oprot.writeString(struct.property);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_AVL_FIELD_DESC);
			oprot.writeBool(struct.isAvl);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(BALANCE_FIELD_DESC);
			oprot.writeDouble(struct.balance);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
			oprot.writeDouble(struct.amount);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_CAN_USE_FIELD_DESC);
			oprot.writeI32(struct.numCanUse);
			oprot.writeFieldEnd();
			if (struct.applyTime != null) {
				oprot.writeFieldBegin(APPLY_TIME_FIELD_DESC);
				oprot.writeString(struct.applyTime);
				oprot.writeFieldEnd();
			}
			if (struct.expireTime != null) {
				oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
				oprot.writeString(struct.expireTime);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class CouponUserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public CouponUserTupleScheme getScheme() {
			return new CouponUserTupleScheme();
		}

	}

	private static class CouponUserTupleScheme extends org.apache.thrift.scheme.TupleScheme<CouponUser> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, CouponUser struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetAcc()) {
				optionals.set(0);
			}
			if (struct.isSetCate()) {
				optionals.set(1);
			}
			if (struct.isSetCid()) {
				optionals.set(2);
			}
			if (struct.isSetUid()) {
				optionals.set(3);
			}
			if (struct.isSetProperty()) {
				optionals.set(4);
			}
			if (struct.isSetStatus()) {
				optionals.set(5);
			}
			if (struct.isSetIsAvl()) {
				optionals.set(6);
			}
			if (struct.isSetBalance()) {
				optionals.set(7);
			}
			if (struct.isSetAmount()) {
				optionals.set(8);
			}
			if (struct.isSetNumCanUse()) {
				optionals.set(9);
			}
			if (struct.isSetApplyTime()) {
				optionals.set(10);
			}
			if (struct.isSetExpireTime()) {
				optionals.set(11);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(12);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(13);
			}
			oprot.writeBitSet(optionals, 14);
			if (struct.isSetAcc()) {
				oprot.writeString(struct.acc);
			}
			if (struct.isSetCate()) {
				oprot.writeString(struct.cate);
			}
			if (struct.isSetCid()) {
				oprot.writeString(struct.cid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetProperty()) {
				oprot.writeString(struct.property);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetIsAvl()) {
				oprot.writeBool(struct.isAvl);
			}
			if (struct.isSetBalance()) {
				oprot.writeDouble(struct.balance);
			}
			if (struct.isSetAmount()) {
				oprot.writeDouble(struct.amount);
			}
			if (struct.isSetNumCanUse()) {
				oprot.writeI32(struct.numCanUse);
			}
			if (struct.isSetApplyTime()) {
				oprot.writeString(struct.applyTime);
			}
			if (struct.isSetExpireTime()) {
				oprot.writeString(struct.expireTime);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, CouponUser struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(14);
			if (incoming.get(0)) {
				struct.acc = iprot.readString();
				struct.setAccIsSet(true);
			}
			if (incoming.get(1)) {
				struct.cate = iprot.readString();
				struct.setCateIsSet(true);
			}
			if (incoming.get(2)) {
				struct.cid = iprot.readString();
				struct.setCidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(4)) {
				struct.property = iprot.readString();
				struct.setPropertyIsSet(true);
			}
			if (incoming.get(5)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(6)) {
				struct.isAvl = iprot.readBool();
				struct.setIsAvlIsSet(true);
			}
			if (incoming.get(7)) {
				struct.balance = iprot.readDouble();
				struct.setBalanceIsSet(true);
			}
			if (incoming.get(8)) {
				struct.amount = iprot.readDouble();
				struct.setAmountIsSet(true);
			}
			if (incoming.get(9)) {
				struct.numCanUse = iprot.readI32();
				struct.setNumCanUseIsSet(true);
			}
			if (incoming.get(10)) {
				struct.applyTime = iprot.readString();
				struct.setApplyTimeIsSet(true);
			}
			if (incoming.get(11)) {
				struct.expireTime = iprot.readString();
				struct.setExpireTimeIsSet(true);
			}
			if (incoming.get(12)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(13)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
