/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 解冻一笔流水 有效条件: 必填项必填
 */
public class ArgUnfreeze implements org.apache.thrift.TBase<ArgUnfreeze, ArgUnfreeze._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgUnfreeze> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgUnfreeze");

	private static final org.apache.thrift.protocol.TField ACCESSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"accession", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField IS_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isSuccess", org.apache.thrift.protocol.TType.BOOL, (short) 2);

	private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comment", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"trigger", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField REL_UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"relUid", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField TX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"txId", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"taskId", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgUnfreezeStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgUnfreezeTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String accession; // required

	public boolean isSuccess; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String comment; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String trigger; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String relUid; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String txId; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String taskId; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		ACCESSION((short) 1, "accession"), IS_SUCCESS((short) 2, "isSuccess"), COMMENT((short) 3, "comment"), TRIGGER(
				(short) 4,
				"trigger"), REL_UID((short) 5, "relUid"), TX_ID((short) 6, "txId"), TASK_ID((short) 7, "taskId");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ACCESSION
				return ACCESSION;
			case 2: // IS_SUCCESS
				return IS_SUCCESS;
			case 3: // COMMENT
				return COMMENT;
			case 4: // TRIGGER
				return TRIGGER;
			case 5: // REL_UID
				return REL_UID;
			case 6: // TX_ID
				return TX_ID;
			case 7: // TASK_ID
				return TASK_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISSUCCESS_ISSET_ID = 0;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.COMMENT, _Fields.TRIGGER, _Fields.REL_UID, _Fields.TX_ID,
			_Fields.TASK_ID };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ACCESSION,
				new org.apache.thrift.meta_data.FieldMetaData("accession",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_SUCCESS,
				new org.apache.thrift.meta_data.FieldMetaData("isSuccess",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("comment",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TRIGGER,
				new org.apache.thrift.meta_data.FieldMetaData("trigger",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REL_UID,
				new org.apache.thrift.meta_data.FieldMetaData("relUid",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TX_ID,
				new org.apache.thrift.meta_data.FieldMetaData("txId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TASK_ID,
				new org.apache.thrift.meta_data.FieldMetaData("taskId",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgUnfreeze.class, metaDataMap);
	}

	public ArgUnfreeze() {
	}

	public ArgUnfreeze(java.lang.String accession, boolean isSuccess) {
		this();
		this.accession = accession;
		this.isSuccess = isSuccess;
		setIsSuccessIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgUnfreeze(ArgUnfreeze other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetAccession()) {
			this.accession = other.accession;
		}
		this.isSuccess = other.isSuccess;
		if (other.isSetComment()) {
			this.comment = other.comment;
		}
		if (other.isSetTrigger()) {
			this.trigger = other.trigger;
		}
		if (other.isSetRelUid()) {
			this.relUid = other.relUid;
		}
		if (other.isSetTxId()) {
			this.txId = other.txId;
		}
		if (other.isSetTaskId()) {
			this.taskId = other.taskId;
		}
	}

	public ArgUnfreeze deepCopy() {
		return new ArgUnfreeze(this);
	}

	@Override
	public void clear() {
		this.accession = null;
		setIsSuccessIsSet(false);
		this.isSuccess = false;
		this.comment = null;
		this.trigger = null;
		this.relUid = null;
		this.txId = null;
		this.taskId = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAccession() {
		return this.accession;
	}

	public ArgUnfreeze setAccession(@org.apache.thrift.annotation.Nullable java.lang.String accession) {
		this.accession = accession;
		return this;
	}

	public void unsetAccession() {
		this.accession = null;
	}

	/**
	 * Returns true if field accession is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAccession() {
		return this.accession != null;
	}

	public void setAccessionIsSet(boolean value) {
		if (!value) {
			this.accession = null;
		}
	}

	public boolean isIsSuccess() {
		return this.isSuccess;
	}

	public ArgUnfreeze setIsSuccess(boolean isSuccess) {
		this.isSuccess = isSuccess;
		setIsSuccessIsSet(true);
		return this;
	}

	public void unsetIsSuccess() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSUCCESS_ISSET_ID);
	}

	/**
	 * Returns true if field isSuccess is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsSuccess() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSUCCESS_ISSET_ID);
	}

	public void setIsSuccessIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSUCCESS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getComment() {
		return this.comment;
	}

	public ArgUnfreeze setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
		this.comment = comment;
		return this;
	}

	public void unsetComment() {
		this.comment = null;
	}

	/**
	 * Returns true if field comment is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComment() {
		return this.comment != null;
	}

	public void setCommentIsSet(boolean value) {
		if (!value) {
			this.comment = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTrigger() {
		return this.trigger;
	}

	public ArgUnfreeze setTrigger(@org.apache.thrift.annotation.Nullable java.lang.String trigger) {
		this.trigger = trigger;
		return this;
	}

	public void unsetTrigger() {
		this.trigger = null;
	}

	/**
	 * Returns true if field trigger is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTrigger() {
		return this.trigger != null;
	}

	public void setTriggerIsSet(boolean value) {
		if (!value) {
			this.trigger = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRelUid() {
		return this.relUid;
	}

	public ArgUnfreeze setRelUid(@org.apache.thrift.annotation.Nullable java.lang.String relUid) {
		this.relUid = relUid;
		return this;
	}

	public void unsetRelUid() {
		this.relUid = null;
	}

	/**
	 * Returns true if field relUid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRelUid() {
		return this.relUid != null;
	}

	public void setRelUidIsSet(boolean value) {
		if (!value) {
			this.relUid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTxId() {
		return this.txId;
	}

	public ArgUnfreeze setTxId(@org.apache.thrift.annotation.Nullable java.lang.String txId) {
		this.txId = txId;
		return this;
	}

	public void unsetTxId() {
		this.txId = null;
	}

	/**
	 * Returns true if field txId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTxId() {
		return this.txId != null;
	}

	public void setTxIdIsSet(boolean value) {
		if (!value) {
			this.txId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTaskId() {
		return this.taskId;
	}

	public ArgUnfreeze setTaskId(@org.apache.thrift.annotation.Nullable java.lang.String taskId) {
		this.taskId = taskId;
		return this;
	}

	public void unsetTaskId() {
		this.taskId = null;
	}

	/**
	 * Returns true if field taskId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTaskId() {
		return this.taskId != null;
	}

	public void setTaskIdIsSet(boolean value) {
		if (!value) {
			this.taskId = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case ACCESSION:
			if (value == null) {
				unsetAccession();
			}
			else {
				setAccession((java.lang.String) value);
			}
			break;

		case IS_SUCCESS:
			if (value == null) {
				unsetIsSuccess();
			}
			else {
				setIsSuccess((java.lang.Boolean) value);
			}
			break;

		case COMMENT:
			if (value == null) {
				unsetComment();
			}
			else {
				setComment((java.lang.String) value);
			}
			break;

		case TRIGGER:
			if (value == null) {
				unsetTrigger();
			}
			else {
				setTrigger((java.lang.String) value);
			}
			break;

		case REL_UID:
			if (value == null) {
				unsetRelUid();
			}
			else {
				setRelUid((java.lang.String) value);
			}
			break;

		case TX_ID:
			if (value == null) {
				unsetTxId();
			}
			else {
				setTxId((java.lang.String) value);
			}
			break;

		case TASK_ID:
			if (value == null) {
				unsetTaskId();
			}
			else {
				setTaskId((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ACCESSION:
			return getAccession();

		case IS_SUCCESS:
			return isIsSuccess();

		case COMMENT:
			return getComment();

		case TRIGGER:
			return getTrigger();

		case REL_UID:
			return getRelUid();

		case TX_ID:
			return getTxId();

		case TASK_ID:
			return getTaskId();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ACCESSION:
			return isSetAccession();
		case IS_SUCCESS:
			return isSetIsSuccess();
		case COMMENT:
			return isSetComment();
		case TRIGGER:
			return isSetTrigger();
		case REL_UID:
			return isSetRelUid();
		case TX_ID:
			return isSetTxId();
		case TASK_ID:
			return isSetTaskId();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgUnfreeze)
			return this.equals((ArgUnfreeze) that);
		return false;
	}

	public boolean equals(ArgUnfreeze that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_accession = true && this.isSetAccession();
		boolean that_present_accession = true && that.isSetAccession();
		if (this_present_accession || that_present_accession) {
			if (!(this_present_accession && that_present_accession))
				return false;
			if (!this.accession.equals(that.accession))
				return false;
		}

		boolean this_present_isSuccess = true;
		boolean that_present_isSuccess = true;
		if (this_present_isSuccess || that_present_isSuccess) {
			if (!(this_present_isSuccess && that_present_isSuccess))
				return false;
			if (this.isSuccess != that.isSuccess)
				return false;
		}

		boolean this_present_comment = true && this.isSetComment();
		boolean that_present_comment = true && that.isSetComment();
		if (this_present_comment || that_present_comment) {
			if (!(this_present_comment && that_present_comment))
				return false;
			if (!this.comment.equals(that.comment))
				return false;
		}

		boolean this_present_trigger = true && this.isSetTrigger();
		boolean that_present_trigger = true && that.isSetTrigger();
		if (this_present_trigger || that_present_trigger) {
			if (!(this_present_trigger && that_present_trigger))
				return false;
			if (!this.trigger.equals(that.trigger))
				return false;
		}

		boolean this_present_relUid = true && this.isSetRelUid();
		boolean that_present_relUid = true && that.isSetRelUid();
		if (this_present_relUid || that_present_relUid) {
			if (!(this_present_relUid && that_present_relUid))
				return false;
			if (!this.relUid.equals(that.relUid))
				return false;
		}

		boolean this_present_txId = true && this.isSetTxId();
		boolean that_present_txId = true && that.isSetTxId();
		if (this_present_txId || that_present_txId) {
			if (!(this_present_txId && that_present_txId))
				return false;
			if (!this.txId.equals(that.txId))
				return false;
		}

		boolean this_present_taskId = true && this.isSetTaskId();
		boolean that_present_taskId = true && that.isSetTaskId();
		if (this_present_taskId || that_present_taskId) {
			if (!(this_present_taskId && that_present_taskId))
				return false;
			if (!this.taskId.equals(that.taskId))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetAccession()) ? 131071 : 524287);
		if (isSetAccession())
			hashCode = hashCode * 8191 + accession.hashCode();

		hashCode = hashCode * 8191 + ((isSuccess) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
		if (isSetComment())
			hashCode = hashCode * 8191 + comment.hashCode();

		hashCode = hashCode * 8191 + ((isSetTrigger()) ? 131071 : 524287);
		if (isSetTrigger())
			hashCode = hashCode * 8191 + trigger.hashCode();

		hashCode = hashCode * 8191 + ((isSetRelUid()) ? 131071 : 524287);
		if (isSetRelUid())
			hashCode = hashCode * 8191 + relUid.hashCode();

		hashCode = hashCode * 8191 + ((isSetTxId()) ? 131071 : 524287);
		if (isSetTxId())
			hashCode = hashCode * 8191 + txId.hashCode();

		hashCode = hashCode * 8191 + ((isSetTaskId()) ? 131071 : 524287);
		if (isSetTaskId())
			hashCode = hashCode * 8191 + taskId.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgUnfreeze other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetAccession()).compareTo(other.isSetAccession());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAccession()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accession, other.accession);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsSuccess()).compareTo(other.isSetIsSuccess());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsSuccess()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSuccess, other.isSuccess);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTrigger()).compareTo(other.isSetTrigger());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTrigger()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trigger, other.trigger);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRelUid()).compareTo(other.isSetRelUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRelUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relUid, other.relUid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTxId()).compareTo(other.isSetTxId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTxId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txId, other.txId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTaskId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgUnfreeze(");
		boolean first = true;

		sb.append("accession:");
		if (this.accession == null) {
			sb.append("null");
		}
		else {
			sb.append(this.accession);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isSuccess:");
		sb.append(this.isSuccess);
		first = false;
		if (isSetComment()) {
			if (!first)
				sb.append(", ");
			sb.append("comment:");
			if (this.comment == null) {
				sb.append("null");
			}
			else {
				sb.append(this.comment);
			}
			first = false;
		}
		if (isSetTrigger()) {
			if (!first)
				sb.append(", ");
			sb.append("trigger:");
			if (this.trigger == null) {
				sb.append("null");
			}
			else {
				sb.append(this.trigger);
			}
			first = false;
		}
		if (isSetRelUid()) {
			if (!first)
				sb.append(", ");
			sb.append("relUid:");
			if (this.relUid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.relUid);
			}
			first = false;
		}
		if (isSetTxId()) {
			if (!first)
				sb.append(", ");
			sb.append("txId:");
			if (this.txId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.txId);
			}
			first = false;
		}
		if (isSetTaskId()) {
			if (!first)
				sb.append(", ");
			sb.append("taskId:");
			if (this.taskId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.taskId);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgUnfreezeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgUnfreezeStandardScheme getScheme() {
			return new ArgUnfreezeStandardScheme();
		}

	}

	private static class ArgUnfreezeStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgUnfreeze> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgUnfreeze struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ACCESSION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.accession = iprot.readString();
						struct.setAccessionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // IS_SUCCESS
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isSuccess = iprot.readBool();
						struct.setIsSuccessIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.comment = iprot.readString();
						struct.setCommentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // TRIGGER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.trigger = iprot.readString();
						struct.setTriggerIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // REL_UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.relUid = iprot.readString();
						struct.setRelUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // TX_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.txId = iprot.readString();
						struct.setTxIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // TASK_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.taskId = iprot.readString();
						struct.setTaskIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgUnfreeze struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.accession != null) {
				oprot.writeFieldBegin(ACCESSION_FIELD_DESC);
				oprot.writeString(struct.accession);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_SUCCESS_FIELD_DESC);
			oprot.writeBool(struct.isSuccess);
			oprot.writeFieldEnd();
			if (struct.comment != null) {
				if (struct.isSetComment()) {
					oprot.writeFieldBegin(COMMENT_FIELD_DESC);
					oprot.writeString(struct.comment);
					oprot.writeFieldEnd();
				}
			}
			if (struct.trigger != null) {
				if (struct.isSetTrigger()) {
					oprot.writeFieldBegin(TRIGGER_FIELD_DESC);
					oprot.writeString(struct.trigger);
					oprot.writeFieldEnd();
				}
			}
			if (struct.relUid != null) {
				if (struct.isSetRelUid()) {
					oprot.writeFieldBegin(REL_UID_FIELD_DESC);
					oprot.writeString(struct.relUid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.txId != null) {
				if (struct.isSetTxId()) {
					oprot.writeFieldBegin(TX_ID_FIELD_DESC);
					oprot.writeString(struct.txId);
					oprot.writeFieldEnd();
				}
			}
			if (struct.taskId != null) {
				if (struct.isSetTaskId()) {
					oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
					oprot.writeString(struct.taskId);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgUnfreezeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgUnfreezeTupleScheme getScheme() {
			return new ArgUnfreezeTupleScheme();
		}

	}

	private static class ArgUnfreezeTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgUnfreeze> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgUnfreeze struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetAccession()) {
				optionals.set(0);
			}
			if (struct.isSetIsSuccess()) {
				optionals.set(1);
			}
			if (struct.isSetComment()) {
				optionals.set(2);
			}
			if (struct.isSetTrigger()) {
				optionals.set(3);
			}
			if (struct.isSetRelUid()) {
				optionals.set(4);
			}
			if (struct.isSetTxId()) {
				optionals.set(5);
			}
			if (struct.isSetTaskId()) {
				optionals.set(6);
			}
			oprot.writeBitSet(optionals, 7);
			if (struct.isSetAccession()) {
				oprot.writeString(struct.accession);
			}
			if (struct.isSetIsSuccess()) {
				oprot.writeBool(struct.isSuccess);
			}
			if (struct.isSetComment()) {
				oprot.writeString(struct.comment);
			}
			if (struct.isSetTrigger()) {
				oprot.writeString(struct.trigger);
			}
			if (struct.isSetRelUid()) {
				oprot.writeString(struct.relUid);
			}
			if (struct.isSetTxId()) {
				oprot.writeString(struct.txId);
			}
			if (struct.isSetTaskId()) {
				oprot.writeString(struct.taskId);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgUnfreeze struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(7);
			if (incoming.get(0)) {
				struct.accession = iprot.readString();
				struct.setAccessionIsSet(true);
			}
			if (incoming.get(1)) {
				struct.isSuccess = iprot.readBool();
				struct.setIsSuccessIsSet(true);
			}
			if (incoming.get(2)) {
				struct.comment = iprot.readString();
				struct.setCommentIsSet(true);
			}
			if (incoming.get(3)) {
				struct.trigger = iprot.readString();
				struct.setTriggerIsSet(true);
			}
			if (incoming.get(4)) {
				struct.relUid = iprot.readString();
				struct.setRelUidIsSet(true);
			}
			if (incoming.get(5)) {
				struct.txId = iprot.readString();
				struct.setTxIdIsSet(true);
			}
			if (incoming.get(6)) {
				struct.taskId = iprot.readString();
				struct.setTaskIdIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
