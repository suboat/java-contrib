/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 记录用户操作 有效条件：uid必填
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-10")
public class ArgAction implements org.apache.thrift.TBase<ArgAction, ArgAction._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgAction> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgAction");

	private static final org.apache.thrift.protocol.TField IS_STAFF_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isStaff", org.apache.thrift.protocol.TType.BOOL, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"action", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"desc", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField UID_DO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidDo", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField IS_STAFF_DO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isStaffDo", org.apache.thrift.protocol.TType.BOOL, (short) 6);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"host", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip",
			org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"time", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField AGENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"agent", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"taskId", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgActionStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgActionTupleSchemeFactory();

	public boolean isStaff; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String action; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String desc; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uidDo; // optional

	public boolean isStaffDo; // optional

	public int status; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String host; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String ip; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String time; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String agent; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String taskId; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		IS_STAFF((short) 1, "isStaff"), UID((short) 2, "uid"), ACTION((short) 3, "action"), DESC((short) 4,
				"desc"), UID_DO((short) 5, "uidDo"), IS_STAFF_DO((short) 6, "isStaffDo"), STATUS((short) 7,
						"status"), HOST((short) 8, "host"), IP((short) 9, "ip"), TIME((short) 10,
								"time"), AGENT((short) 11, "agent"), TASK_ID((short) 12, "taskId");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // IS_STAFF
				return IS_STAFF;
			case 2: // UID
				return UID;
			case 3: // ACTION
				return ACTION;
			case 4: // DESC
				return DESC;
			case 5: // UID_DO
				return UID_DO;
			case 6: // IS_STAFF_DO
				return IS_STAFF_DO;
			case 7: // STATUS
				return STATUS;
			case 8: // HOST
				return HOST;
			case 9: // IP
				return IP;
			case 10: // TIME
				return TIME;
			case 11: // AGENT
				return AGENT;
			case 12: // TASK_ID
				return TASK_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISSTAFF_ISSET_ID = 0;

	private static final int __ISSTAFFDO_ISSET_ID = 1;

	private static final int __STATUS_ISSET_ID = 2;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.UID_DO, _Fields.IS_STAFF_DO, _Fields.STATUS, _Fields.HOST,
			_Fields.IP, _Fields.TIME, _Fields.AGENT, _Fields.TASK_ID };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.IS_STAFF,
				new org.apache.thrift.meta_data.FieldMetaData("isStaff",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ACTION,
				new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESC,
				new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID_DO,
				new org.apache.thrift.meta_data.FieldMetaData("uidDo", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_STAFF_DO,
				new org.apache.thrift.meta_data.FieldMetaData("isStaffDo",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.HOST,
				new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IP,
				new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.AGENT,
				new org.apache.thrift.meta_data.FieldMetaData("agent", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TASK_ID,
				new org.apache.thrift.meta_data.FieldMetaData("taskId",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgAction.class, metaDataMap);
	}

	public ArgAction() {
	}

	public ArgAction(boolean isStaff, java.lang.String uid, java.lang.String action, java.lang.String desc) {
		this();
		this.isStaff = isStaff;
		setIsStaffIsSet(true);
		this.uid = uid;
		this.action = action;
		this.desc = desc;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgAction(ArgAction other) {
		__isset_bitfield = other.__isset_bitfield;
		this.isStaff = other.isStaff;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetAction()) {
			this.action = other.action;
		}
		if (other.isSetDesc()) {
			this.desc = other.desc;
		}
		if (other.isSetUidDo()) {
			this.uidDo = other.uidDo;
		}
		this.isStaffDo = other.isStaffDo;
		this.status = other.status;
		if (other.isSetHost()) {
			this.host = other.host;
		}
		if (other.isSetIp()) {
			this.ip = other.ip;
		}
		if (other.isSetTime()) {
			this.time = other.time;
		}
		if (other.isSetAgent()) {
			this.agent = other.agent;
		}
		if (other.isSetTaskId()) {
			this.taskId = other.taskId;
		}
	}

	public ArgAction deepCopy() {
		return new ArgAction(this);
	}

	@Override
	public void clear() {
		setIsStaffIsSet(false);
		this.isStaff = false;
		this.uid = null;
		this.action = null;
		this.desc = null;
		this.uidDo = null;
		setIsStaffDoIsSet(false);
		this.isStaffDo = false;
		setStatusIsSet(false);
		this.status = 0;
		this.host = null;
		this.ip = null;
		this.time = null;
		this.agent = null;
		this.taskId = null;
	}

	public boolean isIsStaff() {
		return this.isStaff;
	}

	public ArgAction setIsStaff(boolean isStaff) {
		this.isStaff = isStaff;
		setIsStaffIsSet(true);
		return this;
	}

	public void unsetIsStaff() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTAFF_ISSET_ID);
	}

	/**
	 * Returns true if field isStaff is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsStaff() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTAFF_ISSET_ID);
	}

	public void setIsStaffIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSTAFF_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public ArgAction setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAction() {
		return this.action;
	}

	public ArgAction setAction(@org.apache.thrift.annotation.Nullable java.lang.String action) {
		this.action = action;
		return this;
	}

	public void unsetAction() {
		this.action = null;
	}

	/**
	 * Returns true if field action is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAction() {
		return this.action != null;
	}

	public void setActionIsSet(boolean value) {
		if (!value) {
			this.action = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDesc() {
		return this.desc;
	}

	public ArgAction setDesc(@org.apache.thrift.annotation.Nullable java.lang.String desc) {
		this.desc = desc;
		return this;
	}

	public void unsetDesc() {
		this.desc = null;
	}

	/**
	 * Returns true if field desc is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetDesc() {
		return this.desc != null;
	}

	public void setDescIsSet(boolean value) {
		if (!value) {
			this.desc = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidDo() {
		return this.uidDo;
	}

	public ArgAction setUidDo(@org.apache.thrift.annotation.Nullable java.lang.String uidDo) {
		this.uidDo = uidDo;
		return this;
	}

	public void unsetUidDo() {
		this.uidDo = null;
	}

	/**
	 * Returns true if field uidDo is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUidDo() {
		return this.uidDo != null;
	}

	public void setUidDoIsSet(boolean value) {
		if (!value) {
			this.uidDo = null;
		}
	}

	public boolean isIsStaffDo() {
		return this.isStaffDo;
	}

	public ArgAction setIsStaffDo(boolean isStaffDo) {
		this.isStaffDo = isStaffDo;
		setIsStaffDoIsSet(true);
		return this;
	}

	public void unsetIsStaffDo() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSTAFFDO_ISSET_ID);
	}

	/**
	 * Returns true if field isStaffDo is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsStaffDo() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSTAFFDO_ISSET_ID);
	}

	public void setIsStaffDoIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSTAFFDO_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public ArgAction setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getHost() {
		return this.host;
	}

	public ArgAction setHost(@org.apache.thrift.annotation.Nullable java.lang.String host) {
		this.host = host;
		return this;
	}

	public void unsetHost() {
		this.host = null;
	}

	/**
	 * Returns true if field host is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetHost() {
		return this.host != null;
	}

	public void setHostIsSet(boolean value) {
		if (!value) {
			this.host = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIp() {
		return this.ip;
	}

	public ArgAction setIp(@org.apache.thrift.annotation.Nullable java.lang.String ip) {
		this.ip = ip;
		return this;
	}

	public void unsetIp() {
		this.ip = null;
	}

	/** Returns true if field ip is set (has been assigned a value) and false otherwise */
	public boolean isSetIp() {
		return this.ip != null;
	}

	public void setIpIsSet(boolean value) {
		if (!value) {
			this.ip = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTime() {
		return this.time;
	}

	public ArgAction setTime(@org.apache.thrift.annotation.Nullable java.lang.String time) {
		this.time = time;
		return this;
	}

	public void unsetTime() {
		this.time = null;
	}

	/**
	 * Returns true if field time is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTime() {
		return this.time != null;
	}

	public void setTimeIsSet(boolean value) {
		if (!value) {
			this.time = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAgent() {
		return this.agent;
	}

	public ArgAction setAgent(@org.apache.thrift.annotation.Nullable java.lang.String agent) {
		this.agent = agent;
		return this;
	}

	public void unsetAgent() {
		this.agent = null;
	}

	/**
	 * Returns true if field agent is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAgent() {
		return this.agent != null;
	}

	public void setAgentIsSet(boolean value) {
		if (!value) {
			this.agent = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTaskId() {
		return this.taskId;
	}

	public ArgAction setTaskId(@org.apache.thrift.annotation.Nullable java.lang.String taskId) {
		this.taskId = taskId;
		return this;
	}

	public void unsetTaskId() {
		this.taskId = null;
	}

	/**
	 * Returns true if field taskId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTaskId() {
		return this.taskId != null;
	}

	public void setTaskIdIsSet(boolean value) {
		if (!value) {
			this.taskId = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case IS_STAFF:
			if (value == null) {
				unsetIsStaff();
			}
			else {
				setIsStaff((java.lang.Boolean) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case ACTION:
			if (value == null) {
				unsetAction();
			}
			else {
				setAction((java.lang.String) value);
			}
			break;

		case DESC:
			if (value == null) {
				unsetDesc();
			}
			else {
				setDesc((java.lang.String) value);
			}
			break;

		case UID_DO:
			if (value == null) {
				unsetUidDo();
			}
			else {
				setUidDo((java.lang.String) value);
			}
			break;

		case IS_STAFF_DO:
			if (value == null) {
				unsetIsStaffDo();
			}
			else {
				setIsStaffDo((java.lang.Boolean) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case HOST:
			if (value == null) {
				unsetHost();
			}
			else {
				setHost((java.lang.String) value);
			}
			break;

		case IP:
			if (value == null) {
				unsetIp();
			}
			else {
				setIp((java.lang.String) value);
			}
			break;

		case TIME:
			if (value == null) {
				unsetTime();
			}
			else {
				setTime((java.lang.String) value);
			}
			break;

		case AGENT:
			if (value == null) {
				unsetAgent();
			}
			else {
				setAgent((java.lang.String) value);
			}
			break;

		case TASK_ID:
			if (value == null) {
				unsetTaskId();
			}
			else {
				setTaskId((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case IS_STAFF:
			return isIsStaff();

		case UID:
			return getUid();

		case ACTION:
			return getAction();

		case DESC:
			return getDesc();

		case UID_DO:
			return getUidDo();

		case IS_STAFF_DO:
			return isIsStaffDo();

		case STATUS:
			return getStatus();

		case HOST:
			return getHost();

		case IP:
			return getIp();

		case TIME:
			return getTime();

		case AGENT:
			return getAgent();

		case TASK_ID:
			return getTaskId();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case IS_STAFF:
			return isSetIsStaff();
		case UID:
			return isSetUid();
		case ACTION:
			return isSetAction();
		case DESC:
			return isSetDesc();
		case UID_DO:
			return isSetUidDo();
		case IS_STAFF_DO:
			return isSetIsStaffDo();
		case STATUS:
			return isSetStatus();
		case HOST:
			return isSetHost();
		case IP:
			return isSetIp();
		case TIME:
			return isSetTime();
		case AGENT:
			return isSetAgent();
		case TASK_ID:
			return isSetTaskId();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgAction)
			return this.equals((ArgAction) that);
		return false;
	}

	public boolean equals(ArgAction that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_isStaff = true;
		boolean that_present_isStaff = true;
		if (this_present_isStaff || that_present_isStaff) {
			if (!(this_present_isStaff && that_present_isStaff))
				return false;
			if (this.isStaff != that.isStaff)
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_action = true && this.isSetAction();
		boolean that_present_action = true && that.isSetAction();
		if (this_present_action || that_present_action) {
			if (!(this_present_action && that_present_action))
				return false;
			if (!this.action.equals(that.action))
				return false;
		}

		boolean this_present_desc = true && this.isSetDesc();
		boolean that_present_desc = true && that.isSetDesc();
		if (this_present_desc || that_present_desc) {
			if (!(this_present_desc && that_present_desc))
				return false;
			if (!this.desc.equals(that.desc))
				return false;
		}

		boolean this_present_uidDo = true && this.isSetUidDo();
		boolean that_present_uidDo = true && that.isSetUidDo();
		if (this_present_uidDo || that_present_uidDo) {
			if (!(this_present_uidDo && that_present_uidDo))
				return false;
			if (!this.uidDo.equals(that.uidDo))
				return false;
		}

		boolean this_present_isStaffDo = true && this.isSetIsStaffDo();
		boolean that_present_isStaffDo = true && that.isSetIsStaffDo();
		if (this_present_isStaffDo || that_present_isStaffDo) {
			if (!(this_present_isStaffDo && that_present_isStaffDo))
				return false;
			if (this.isStaffDo != that.isStaffDo)
				return false;
		}

		boolean this_present_status = true && this.isSetStatus();
		boolean that_present_status = true && that.isSetStatus();
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_host = true && this.isSetHost();
		boolean that_present_host = true && that.isSetHost();
		if (this_present_host || that_present_host) {
			if (!(this_present_host && that_present_host))
				return false;
			if (!this.host.equals(that.host))
				return false;
		}

		boolean this_present_ip = true && this.isSetIp();
		boolean that_present_ip = true && that.isSetIp();
		if (this_present_ip || that_present_ip) {
			if (!(this_present_ip && that_present_ip))
				return false;
			if (!this.ip.equals(that.ip))
				return false;
		}

		boolean this_present_time = true && this.isSetTime();
		boolean that_present_time = true && that.isSetTime();
		if (this_present_time || that_present_time) {
			if (!(this_present_time && that_present_time))
				return false;
			if (!this.time.equals(that.time))
				return false;
		}

		boolean this_present_agent = true && this.isSetAgent();
		boolean that_present_agent = true && that.isSetAgent();
		if (this_present_agent || that_present_agent) {
			if (!(this_present_agent && that_present_agent))
				return false;
			if (!this.agent.equals(that.agent))
				return false;
		}

		boolean this_present_taskId = true && this.isSetTaskId();
		boolean that_present_taskId = true && that.isSetTaskId();
		if (this_present_taskId || that_present_taskId) {
			if (!(this_present_taskId && that_present_taskId))
				return false;
			if (!this.taskId.equals(that.taskId))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isStaff) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
		if (isSetAction())
			hashCode = hashCode * 8191 + action.hashCode();

		hashCode = hashCode * 8191 + ((isSetDesc()) ? 131071 : 524287);
		if (isSetDesc())
			hashCode = hashCode * 8191 + desc.hashCode();

		hashCode = hashCode * 8191 + ((isSetUidDo()) ? 131071 : 524287);
		if (isSetUidDo())
			hashCode = hashCode * 8191 + uidDo.hashCode();

		hashCode = hashCode * 8191 + ((isSetIsStaffDo()) ? 131071 : 524287);
		if (isSetIsStaffDo())
			hashCode = hashCode * 8191 + ((isStaffDo) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
		if (isSetStatus())
			hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
		if (isSetHost())
			hashCode = hashCode * 8191 + host.hashCode();

		hashCode = hashCode * 8191 + ((isSetIp()) ? 131071 : 524287);
		if (isSetIp())
			hashCode = hashCode * 8191 + ip.hashCode();

		hashCode = hashCode * 8191 + ((isSetTime()) ? 131071 : 524287);
		if (isSetTime())
			hashCode = hashCode * 8191 + time.hashCode();

		hashCode = hashCode * 8191 + ((isSetAgent()) ? 131071 : 524287);
		if (isSetAgent())
			hashCode = hashCode * 8191 + agent.hashCode();

		hashCode = hashCode * 8191 + ((isSetTaskId()) ? 131071 : 524287);
		if (isSetTaskId())
			hashCode = hashCode * 8191 + taskId.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgAction other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetIsStaff()).compareTo(other.isSetIsStaff());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsStaff()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStaff, other.isStaff);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAction()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDesc()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidDo()).compareTo(other.isSetUidDo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidDo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidDo, other.uidDo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsStaffDo()).compareTo(other.isSetIsStaffDo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsStaffDo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isStaffDo, other.isStaffDo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetHost()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAgent()).compareTo(other.isSetAgent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAgent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agent, other.agent);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTaskId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgAction(");
		boolean first = true;

		sb.append("isStaff:");
		sb.append(this.isStaff);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("action:");
		if (this.action == null) {
			sb.append("null");
		}
		else {
			sb.append(this.action);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("desc:");
		if (this.desc == null) {
			sb.append("null");
		}
		else {
			sb.append(this.desc);
		}
		first = false;
		if (isSetUidDo()) {
			if (!first)
				sb.append(", ");
			sb.append("uidDo:");
			if (this.uidDo == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uidDo);
			}
			first = false;
		}
		if (isSetIsStaffDo()) {
			if (!first)
				sb.append(", ");
			sb.append("isStaffDo:");
			sb.append(this.isStaffDo);
			first = false;
		}
		if (isSetStatus()) {
			if (!first)
				sb.append(", ");
			sb.append("status:");
			sb.append(this.status);
			first = false;
		}
		if (isSetHost()) {
			if (!first)
				sb.append(", ");
			sb.append("host:");
			if (this.host == null) {
				sb.append("null");
			}
			else {
				sb.append(this.host);
			}
			first = false;
		}
		if (isSetIp()) {
			if (!first)
				sb.append(", ");
			sb.append("ip:");
			if (this.ip == null) {
				sb.append("null");
			}
			else {
				sb.append(this.ip);
			}
			first = false;
		}
		if (isSetTime()) {
			if (!first)
				sb.append(", ");
			sb.append("time:");
			if (this.time == null) {
				sb.append("null");
			}
			else {
				sb.append(this.time);
			}
			first = false;
		}
		if (isSetAgent()) {
			if (!first)
				sb.append(", ");
			sb.append("agent:");
			if (this.agent == null) {
				sb.append("null");
			}
			else {
				sb.append(this.agent);
			}
			first = false;
		}
		if (isSetTaskId()) {
			if (!first)
				sb.append(", ");
			sb.append("taskId:");
			if (this.taskId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.taskId);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgActionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgActionStandardScheme getScheme() {
			return new ArgActionStandardScheme();
		}

	}

	private static class ArgActionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgAction> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgAction struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // IS_STAFF
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isStaff = iprot.readBool();
						struct.setIsStaffIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // ACTION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.action = iprot.readString();
						struct.setActionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // DESC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.desc = iprot.readString();
						struct.setDescIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // UID_DO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidDo = iprot.readString();
						struct.setUidDoIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // IS_STAFF_DO
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isStaffDo = iprot.readBool();
						struct.setIsStaffDoIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // HOST
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.host = iprot.readString();
						struct.setHostIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ip = iprot.readString();
						struct.setIpIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.time = iprot.readString();
						struct.setTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // AGENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.agent = iprot.readString();
						struct.setAgentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // TASK_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.taskId = iprot.readString();
						struct.setTaskIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgAction struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(IS_STAFF_FIELD_DESC);
			oprot.writeBool(struct.isStaff);
			oprot.writeFieldEnd();
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.action != null) {
				oprot.writeFieldBegin(ACTION_FIELD_DESC);
				oprot.writeString(struct.action);
				oprot.writeFieldEnd();
			}
			if (struct.desc != null) {
				oprot.writeFieldBegin(DESC_FIELD_DESC);
				oprot.writeString(struct.desc);
				oprot.writeFieldEnd();
			}
			if (struct.uidDo != null) {
				if (struct.isSetUidDo()) {
					oprot.writeFieldBegin(UID_DO_FIELD_DESC);
					oprot.writeString(struct.uidDo);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetIsStaffDo()) {
				oprot.writeFieldBegin(IS_STAFF_DO_FIELD_DESC);
				oprot.writeBool(struct.isStaffDo);
				oprot.writeFieldEnd();
			}
			if (struct.isSetStatus()) {
				oprot.writeFieldBegin(STATUS_FIELD_DESC);
				oprot.writeI32(struct.status);
				oprot.writeFieldEnd();
			}
			if (struct.host != null) {
				if (struct.isSetHost()) {
					oprot.writeFieldBegin(HOST_FIELD_DESC);
					oprot.writeString(struct.host);
					oprot.writeFieldEnd();
				}
			}
			if (struct.ip != null) {
				if (struct.isSetIp()) {
					oprot.writeFieldBegin(IP_FIELD_DESC);
					oprot.writeString(struct.ip);
					oprot.writeFieldEnd();
				}
			}
			if (struct.time != null) {
				if (struct.isSetTime()) {
					oprot.writeFieldBegin(TIME_FIELD_DESC);
					oprot.writeString(struct.time);
					oprot.writeFieldEnd();
				}
			}
			if (struct.agent != null) {
				if (struct.isSetAgent()) {
					oprot.writeFieldBegin(AGENT_FIELD_DESC);
					oprot.writeString(struct.agent);
					oprot.writeFieldEnd();
				}
			}
			if (struct.taskId != null) {
				if (struct.isSetTaskId()) {
					oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
					oprot.writeString(struct.taskId);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgActionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgActionTupleScheme getScheme() {
			return new ArgActionTupleScheme();
		}

	}

	private static class ArgActionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgAction> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgAction struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetIsStaff()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetAction()) {
				optionals.set(2);
			}
			if (struct.isSetDesc()) {
				optionals.set(3);
			}
			if (struct.isSetUidDo()) {
				optionals.set(4);
			}
			if (struct.isSetIsStaffDo()) {
				optionals.set(5);
			}
			if (struct.isSetStatus()) {
				optionals.set(6);
			}
			if (struct.isSetHost()) {
				optionals.set(7);
			}
			if (struct.isSetIp()) {
				optionals.set(8);
			}
			if (struct.isSetTime()) {
				optionals.set(9);
			}
			if (struct.isSetAgent()) {
				optionals.set(10);
			}
			if (struct.isSetTaskId()) {
				optionals.set(11);
			}
			oprot.writeBitSet(optionals, 12);
			if (struct.isSetIsStaff()) {
				oprot.writeBool(struct.isStaff);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetAction()) {
				oprot.writeString(struct.action);
			}
			if (struct.isSetDesc()) {
				oprot.writeString(struct.desc);
			}
			if (struct.isSetUidDo()) {
				oprot.writeString(struct.uidDo);
			}
			if (struct.isSetIsStaffDo()) {
				oprot.writeBool(struct.isStaffDo);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetHost()) {
				oprot.writeString(struct.host);
			}
			if (struct.isSetIp()) {
				oprot.writeString(struct.ip);
			}
			if (struct.isSetTime()) {
				oprot.writeString(struct.time);
			}
			if (struct.isSetAgent()) {
				oprot.writeString(struct.agent);
			}
			if (struct.isSetTaskId()) {
				oprot.writeString(struct.taskId);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgAction struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(12);
			if (incoming.get(0)) {
				struct.isStaff = iprot.readBool();
				struct.setIsStaffIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.action = iprot.readString();
				struct.setActionIsSet(true);
			}
			if (incoming.get(3)) {
				struct.desc = iprot.readString();
				struct.setDescIsSet(true);
			}
			if (incoming.get(4)) {
				struct.uidDo = iprot.readString();
				struct.setUidDoIsSet(true);
			}
			if (incoming.get(5)) {
				struct.isStaffDo = iprot.readBool();
				struct.setIsStaffDoIsSet(true);
			}
			if (incoming.get(6)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(7)) {
				struct.host = iprot.readString();
				struct.setHostIsSet(true);
			}
			if (incoming.get(8)) {
				struct.ip = iprot.readString();
				struct.setIpIsSet(true);
			}
			if (incoming.get(9)) {
				struct.time = iprot.readString();
				struct.setTimeIsSet(true);
			}
			if (incoming.get(10)) {
				struct.agent = iprot.readString();
				struct.setAgentIsSet(true);
			}
			if (incoming.get(11)) {
				struct.taskId = iprot.readString();
				struct.setTaskIdIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
