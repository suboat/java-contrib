/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Goods
		implements org.apache.thrift.TBase<Goods, Goods._Fields>, java.io.Serializable, Cloneable, Comparable<Goods> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Goods");

	private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField SPU_FIELD_DESC = new org.apache.thrift.protocol.TField("spu",
			org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"applyTime", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTime", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 10);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField IS_VIRTUAL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isVirtual", org.apache.thrift.protocol.TType.BOOL, (short) 12);

	private static final org.apache.thrift.protocol.TField IS_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isCurrency", org.apache.thrift.protocol.TType.BOOL, (short) 13);

	private static final org.apache.thrift.protocol.TField IS_BUNDLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isBundle", org.apache.thrift.protocol.TType.BOOL, (short) 14);

	private static final org.apache.thrift.protocol.TField IS_MIX_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isMix", org.apache.thrift.protocol.TType.BOOL, (short) 15);

	private static final org.apache.thrift.protocol.TField NUM_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numLabel", org.apache.thrift.protocol.TType.I32, (short) 16);

	private static final org.apache.thrift.protocol.TField NAME_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"nameSpu", org.apache.thrift.protocol.TType.STRING, (short) 17);

	private static final org.apache.thrift.protocol.TField ICON_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"iconSpu", org.apache.thrift.protocol.TType.STRING, (short) 18);

	private static final org.apache.thrift.protocol.TField DESC_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"descSpu", org.apache.thrift.protocol.TType.STRING, (short) 19);

	private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priority", org.apache.thrift.protocol.TType.I32, (short) 20);

	private static final org.apache.thrift.protocol.TField IS_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isSearch", org.apache.thrift.protocol.TType.BOOL, (short) 21);

	private static final org.apache.thrift.protocol.TField MAX_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"maxOrder", org.apache.thrift.protocol.TType.I32, (short) 22);

	private static final org.apache.thrift.protocol.TField MAX_USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"maxUser", org.apache.thrift.protocol.TType.I32, (short) 23);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GoodsStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GoodsTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String mid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String pid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String spu; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String applyTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTime; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public boolean isVirtual; // required

	public boolean isCurrency; // required

	public boolean isBundle; // required

	public boolean isMix; // required

	public int numLabel; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String nameSpu; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String iconSpu; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String descSpu; // required

	public int priority; // required

	public boolean isSearch; // required

	public int maxOrder; // required

	public int maxUser; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		MID((short) 1, "mid"), SID((short) 2, "sid"), UID((short) 3, "uid"), PID((short) 4, "pid"), SPU((short) 5,
				"spu"), CREATE_TIME((short) 6, "createTime"), UPDATE_TIME((short) 7, "updateTime"), APPLY_TIME(
						(short) 8,
						"applyTime"), EXPIRE_TIME((short) 9, "expireTime"), STATUS((short) 10, "status"), CATEGORY(
								(short) 11, "category"), IS_VIRTUAL((short) 12, "isVirtual"), IS_CURRENCY((short) 13,
										"isCurrency"), IS_BUNDLE((short) 14, "isBundle"), IS_MIX((short) 15,
												"isMix"), NUM_LABEL((short) 16, "numLabel"), NAME_SPU((short) 17,
														"nameSpu"), ICON_SPU((short) 18, "iconSpu"), DESC_SPU(
																(short) 19,
																"descSpu"), PRIORITY((short) 20, "priority"), IS_SEARCH(
																		(short) 21, "isSearch"), MAX_ORDER((short) 22,
																				"maxOrder"), MAX_USER((short) 23,
																						"maxUser");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // MID
				return MID;
			case 2: // SID
				return SID;
			case 3: // UID
				return UID;
			case 4: // PID
				return PID;
			case 5: // SPU
				return SPU;
			case 6: // CREATE_TIME
				return CREATE_TIME;
			case 7: // UPDATE_TIME
				return UPDATE_TIME;
			case 8: // APPLY_TIME
				return APPLY_TIME;
			case 9: // EXPIRE_TIME
				return EXPIRE_TIME;
			case 10: // STATUS
				return STATUS;
			case 11: // CATEGORY
				return CATEGORY;
			case 12: // IS_VIRTUAL
				return IS_VIRTUAL;
			case 13: // IS_CURRENCY
				return IS_CURRENCY;
			case 14: // IS_BUNDLE
				return IS_BUNDLE;
			case 15: // IS_MIX
				return IS_MIX;
			case 16: // NUM_LABEL
				return NUM_LABEL;
			case 17: // NAME_SPU
				return NAME_SPU;
			case 18: // ICON_SPU
				return ICON_SPU;
			case 19: // DESC_SPU
				return DESC_SPU;
			case 20: // PRIORITY
				return PRIORITY;
			case 21: // IS_SEARCH
				return IS_SEARCH;
			case 22: // MAX_ORDER
				return MAX_ORDER;
			case 23: // MAX_USER
				return MAX_USER;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;

	private static final int __ISVIRTUAL_ISSET_ID = 1;

	private static final int __ISCURRENCY_ISSET_ID = 2;

	private static final int __ISBUNDLE_ISSET_ID = 3;

	private static final int __ISMIX_ISSET_ID = 4;

	private static final int __NUMLABEL_ISSET_ID = 5;

	private static final int __PRIORITY_ISSET_ID = 6;

	private static final int __ISSEARCH_ISSET_ID = 7;

	private static final int __MAXORDER_ISSET_ID = 8;

	private static final int __MAXUSER_ISSET_ID = 9;

	private short __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.MID,
				new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PID,
				new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SPU,
				new org.apache.thrift.meta_data.FieldMetaData("spu", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("applyTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_VIRTUAL,
				new org.apache.thrift.meta_data.FieldMetaData("isVirtual",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_CURRENCY,
				new org.apache.thrift.meta_data.FieldMetaData("isCurrency",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_BUNDLE,
				new org.apache.thrift.meta_data.FieldMetaData("isBundle",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_MIX,
				new org.apache.thrift.meta_data.FieldMetaData("isMix", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.NUM_LABEL,
				new org.apache.thrift.meta_data.FieldMetaData("numLabel",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NAME_SPU,
				new org.apache.thrift.meta_data.FieldMetaData("nameSpu",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ICON_SPU,
				new org.apache.thrift.meta_data.FieldMetaData("iconSpu",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESC_SPU,
				new org.apache.thrift.meta_data.FieldMetaData("descSpu",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PRIORITY,
				new org.apache.thrift.meta_data.FieldMetaData("priority",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_SEARCH,
				new org.apache.thrift.meta_data.FieldMetaData("isSearch",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.MAX_ORDER,
				new org.apache.thrift.meta_data.FieldMetaData("maxOrder",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.MAX_USER,
				new org.apache.thrift.meta_data.FieldMetaData("maxUser",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Goods.class, metaDataMap);
	}

	public Goods() {
	}

	public Goods(java.lang.String mid, java.lang.String sid, java.lang.String uid, java.lang.String pid,
			java.lang.String spu, java.lang.String createTime, java.lang.String updateTime, java.lang.String applyTime,
			java.lang.String expireTime, int status, java.lang.String category, boolean isVirtual, boolean isCurrency,
			boolean isBundle, boolean isMix, int numLabel, java.lang.String nameSpu, java.lang.String iconSpu,
			java.lang.String descSpu, int priority, boolean isSearch, int maxOrder, int maxUser) {
		this();
		this.mid = mid;
		this.sid = sid;
		this.uid = uid;
		this.pid = pid;
		this.spu = spu;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.applyTime = applyTime;
		this.expireTime = expireTime;
		this.status = status;
		setStatusIsSet(true);
		this.category = category;
		this.isVirtual = isVirtual;
		setIsVirtualIsSet(true);
		this.isCurrency = isCurrency;
		setIsCurrencyIsSet(true);
		this.isBundle = isBundle;
		setIsBundleIsSet(true);
		this.isMix = isMix;
		setIsMixIsSet(true);
		this.numLabel = numLabel;
		setNumLabelIsSet(true);
		this.nameSpu = nameSpu;
		this.iconSpu = iconSpu;
		this.descSpu = descSpu;
		this.priority = priority;
		setPriorityIsSet(true);
		this.isSearch = isSearch;
		setIsSearchIsSet(true);
		this.maxOrder = maxOrder;
		setMaxOrderIsSet(true);
		this.maxUser = maxUser;
		setMaxUserIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Goods(Goods other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetMid()) {
			this.mid = other.mid;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetPid()) {
			this.pid = other.pid;
		}
		if (other.isSetSpu()) {
			this.spu = other.spu;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		if (other.isSetApplyTime()) {
			this.applyTime = other.applyTime;
		}
		if (other.isSetExpireTime()) {
			this.expireTime = other.expireTime;
		}
		this.status = other.status;
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		this.isVirtual = other.isVirtual;
		this.isCurrency = other.isCurrency;
		this.isBundle = other.isBundle;
		this.isMix = other.isMix;
		this.numLabel = other.numLabel;
		if (other.isSetNameSpu()) {
			this.nameSpu = other.nameSpu;
		}
		if (other.isSetIconSpu()) {
			this.iconSpu = other.iconSpu;
		}
		if (other.isSetDescSpu()) {
			this.descSpu = other.descSpu;
		}
		this.priority = other.priority;
		this.isSearch = other.isSearch;
		this.maxOrder = other.maxOrder;
		this.maxUser = other.maxUser;
	}

	public Goods deepCopy() {
		return new Goods(this);
	}

	@Override
	public void clear() {
		this.mid = null;
		this.sid = null;
		this.uid = null;
		this.pid = null;
		this.spu = null;
		this.createTime = null;
		this.updateTime = null;
		this.applyTime = null;
		this.expireTime = null;
		setStatusIsSet(false);
		this.status = 0;
		this.category = null;
		setIsVirtualIsSet(false);
		this.isVirtual = false;
		setIsCurrencyIsSet(false);
		this.isCurrency = false;
		setIsBundleIsSet(false);
		this.isBundle = false;
		setIsMixIsSet(false);
		this.isMix = false;
		setNumLabelIsSet(false);
		this.numLabel = 0;
		this.nameSpu = null;
		this.iconSpu = null;
		this.descSpu = null;
		setPriorityIsSet(false);
		this.priority = 0;
		setIsSearchIsSet(false);
		this.isSearch = false;
		setMaxOrderIsSet(false);
		this.maxOrder = 0;
		setMaxUserIsSet(false);
		this.maxUser = 0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMid() {
		return this.mid;
	}

	public Goods setMid(@org.apache.thrift.annotation.Nullable java.lang.String mid) {
		this.mid = mid;
		return this;
	}

	public void unsetMid() {
		this.mid = null;
	}

	/**
	 * Returns true if field mid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetMid() {
		return this.mid != null;
	}

	public void setMidIsSet(boolean value) {
		if (!value) {
			this.mid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public Goods setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public Goods setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPid() {
		return this.pid;
	}

	public Goods setPid(@org.apache.thrift.annotation.Nullable java.lang.String pid) {
		this.pid = pid;
		return this;
	}

	public void unsetPid() {
		this.pid = null;
	}

	/**
	 * Returns true if field pid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPid() {
		return this.pid != null;
	}

	public void setPidIsSet(boolean value) {
		if (!value) {
			this.pid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSpu() {
		return this.spu;
	}

	public Goods setSpu(@org.apache.thrift.annotation.Nullable java.lang.String spu) {
		this.spu = spu;
		return this;
	}

	public void unsetSpu() {
		this.spu = null;
	}

	/**
	 * Returns true if field spu is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSpu() {
		return this.spu != null;
	}

	public void setSpuIsSet(boolean value) {
		if (!value) {
			this.spu = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Goods setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Goods setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getApplyTime() {
		return this.applyTime;
	}

	public Goods setApplyTime(@org.apache.thrift.annotation.Nullable java.lang.String applyTime) {
		this.applyTime = applyTime;
		return this;
	}

	public void unsetApplyTime() {
		this.applyTime = null;
	}

	/**
	 * Returns true if field applyTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetApplyTime() {
		return this.applyTime != null;
	}

	public void setApplyTimeIsSet(boolean value) {
		if (!value) {
			this.applyTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTime() {
		return this.expireTime;
	}

	public Goods setExpireTime(@org.apache.thrift.annotation.Nullable java.lang.String expireTime) {
		this.expireTime = expireTime;
		return this;
	}

	public void unsetExpireTime() {
		this.expireTime = null;
	}

	/**
	 * Returns true if field expireTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTime() {
		return this.expireTime != null;
	}

	public void setExpireTimeIsSet(boolean value) {
		if (!value) {
			this.expireTime = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public Goods setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public Goods setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	public boolean isIsVirtual() {
		return this.isVirtual;
	}

	public Goods setIsVirtual(boolean isVirtual) {
		this.isVirtual = isVirtual;
		setIsVirtualIsSet(true);
		return this;
	}

	public void unsetIsVirtual() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISVIRTUAL_ISSET_ID);
	}

	/**
	 * Returns true if field isVirtual is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsVirtual() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISVIRTUAL_ISSET_ID);
	}

	public void setIsVirtualIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISVIRTUAL_ISSET_ID, value);
	}

	public boolean isIsCurrency() {
		return this.isCurrency;
	}

	public Goods setIsCurrency(boolean isCurrency) {
		this.isCurrency = isCurrency;
		setIsCurrencyIsSet(true);
		return this;
	}

	public void unsetIsCurrency() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCURRENCY_ISSET_ID);
	}

	/**
	 * Returns true if field isCurrency is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsCurrency() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCURRENCY_ISSET_ID);
	}

	public void setIsCurrencyIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCURRENCY_ISSET_ID, value);
	}

	public boolean isIsBundle() {
		return this.isBundle;
	}

	public Goods setIsBundle(boolean isBundle) {
		this.isBundle = isBundle;
		setIsBundleIsSet(true);
		return this;
	}

	public void unsetIsBundle() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISBUNDLE_ISSET_ID);
	}

	/**
	 * Returns true if field isBundle is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsBundle() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISBUNDLE_ISSET_ID);
	}

	public void setIsBundleIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISBUNDLE_ISSET_ID, value);
	}

	public boolean isIsMix() {
		return this.isMix;
	}

	public Goods setIsMix(boolean isMix) {
		this.isMix = isMix;
		setIsMixIsSet(true);
		return this;
	}

	public void unsetIsMix() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMIX_ISSET_ID);
	}

	/**
	 * Returns true if field isMix is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsMix() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMIX_ISSET_ID);
	}

	public void setIsMixIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMIX_ISSET_ID, value);
	}

	public int getNumLabel() {
		return this.numLabel;
	}

	public Goods setNumLabel(int numLabel) {
		this.numLabel = numLabel;
		setNumLabelIsSet(true);
		return this;
	}

	public void unsetNumLabel() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMLABEL_ISSET_ID);
	}

	/**
	 * Returns true if field numLabel is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumLabel() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMLABEL_ISSET_ID);
	}

	public void setNumLabelIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMLABEL_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNameSpu() {
		return this.nameSpu;
	}

	public Goods setNameSpu(@org.apache.thrift.annotation.Nullable java.lang.String nameSpu) {
		this.nameSpu = nameSpu;
		return this;
	}

	public void unsetNameSpu() {
		this.nameSpu = null;
	}

	/**
	 * Returns true if field nameSpu is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNameSpu() {
		return this.nameSpu != null;
	}

	public void setNameSpuIsSet(boolean value) {
		if (!value) {
			this.nameSpu = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIconSpu() {
		return this.iconSpu;
	}

	public Goods setIconSpu(@org.apache.thrift.annotation.Nullable java.lang.String iconSpu) {
		this.iconSpu = iconSpu;
		return this;
	}

	public void unsetIconSpu() {
		this.iconSpu = null;
	}

	/**
	 * Returns true if field iconSpu is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIconSpu() {
		return this.iconSpu != null;
	}

	public void setIconSpuIsSet(boolean value) {
		if (!value) {
			this.iconSpu = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDescSpu() {
		return this.descSpu;
	}

	public Goods setDescSpu(@org.apache.thrift.annotation.Nullable java.lang.String descSpu) {
		this.descSpu = descSpu;
		return this;
	}

	public void unsetDescSpu() {
		this.descSpu = null;
	}

	/**
	 * Returns true if field descSpu is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDescSpu() {
		return this.descSpu != null;
	}

	public void setDescSpuIsSet(boolean value) {
		if (!value) {
			this.descSpu = null;
		}
	}

	public int getPriority() {
		return this.priority;
	}

	public Goods setPriority(int priority) {
		this.priority = priority;
		setPriorityIsSet(true);
		return this;
	}

	public void unsetPriority() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
	}

	/**
	 * Returns true if field priority is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriority() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
	}

	public void setPriorityIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
	}

	public boolean isIsSearch() {
		return this.isSearch;
	}

	public Goods setIsSearch(boolean isSearch) {
		this.isSearch = isSearch;
		setIsSearchIsSet(true);
		return this;
	}

	public void unsetIsSearch() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSEARCH_ISSET_ID);
	}

	/**
	 * Returns true if field isSearch is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsSearch() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSEARCH_ISSET_ID);
	}

	public void setIsSearchIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSEARCH_ISSET_ID, value);
	}

	public int getMaxOrder() {
		return this.maxOrder;
	}

	public Goods setMaxOrder(int maxOrder) {
		this.maxOrder = maxOrder;
		setMaxOrderIsSet(true);
		return this;
	}

	public void unsetMaxOrder() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXORDER_ISSET_ID);
	}

	/**
	 * Returns true if field maxOrder is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMaxOrder() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXORDER_ISSET_ID);
	}

	public void setMaxOrderIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXORDER_ISSET_ID, value);
	}

	public int getMaxUser() {
		return this.maxUser;
	}

	public Goods setMaxUser(int maxUser) {
		this.maxUser = maxUser;
		setMaxUserIsSet(true);
		return this;
	}

	public void unsetMaxUser() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXUSER_ISSET_ID);
	}

	/**
	 * Returns true if field maxUser is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMaxUser() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXUSER_ISSET_ID);
	}

	public void setMaxUserIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXUSER_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case MID:
			if (value == null) {
				unsetMid();
			}
			else {
				setMid((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case PID:
			if (value == null) {
				unsetPid();
			}
			else {
				setPid((java.lang.String) value);
			}
			break;

		case SPU:
			if (value == null) {
				unsetSpu();
			}
			else {
				setSpu((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case APPLY_TIME:
			if (value == null) {
				unsetApplyTime();
			}
			else {
				setApplyTime((java.lang.String) value);
			}
			break;

		case EXPIRE_TIME:
			if (value == null) {
				unsetExpireTime();
			}
			else {
				setExpireTime((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case IS_VIRTUAL:
			if (value == null) {
				unsetIsVirtual();
			}
			else {
				setIsVirtual((java.lang.Boolean) value);
			}
			break;

		case IS_CURRENCY:
			if (value == null) {
				unsetIsCurrency();
			}
			else {
				setIsCurrency((java.lang.Boolean) value);
			}
			break;

		case IS_BUNDLE:
			if (value == null) {
				unsetIsBundle();
			}
			else {
				setIsBundle((java.lang.Boolean) value);
			}
			break;

		case IS_MIX:
			if (value == null) {
				unsetIsMix();
			}
			else {
				setIsMix((java.lang.Boolean) value);
			}
			break;

		case NUM_LABEL:
			if (value == null) {
				unsetNumLabel();
			}
			else {
				setNumLabel((java.lang.Integer) value);
			}
			break;

		case NAME_SPU:
			if (value == null) {
				unsetNameSpu();
			}
			else {
				setNameSpu((java.lang.String) value);
			}
			break;

		case ICON_SPU:
			if (value == null) {
				unsetIconSpu();
			}
			else {
				setIconSpu((java.lang.String) value);
			}
			break;

		case DESC_SPU:
			if (value == null) {
				unsetDescSpu();
			}
			else {
				setDescSpu((java.lang.String) value);
			}
			break;

		case PRIORITY:
			if (value == null) {
				unsetPriority();
			}
			else {
				setPriority((java.lang.Integer) value);
			}
			break;

		case IS_SEARCH:
			if (value == null) {
				unsetIsSearch();
			}
			else {
				setIsSearch((java.lang.Boolean) value);
			}
			break;

		case MAX_ORDER:
			if (value == null) {
				unsetMaxOrder();
			}
			else {
				setMaxOrder((java.lang.Integer) value);
			}
			break;

		case MAX_USER:
			if (value == null) {
				unsetMaxUser();
			}
			else {
				setMaxUser((java.lang.Integer) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case MID:
			return getMid();

		case SID:
			return getSid();

		case UID:
			return getUid();

		case PID:
			return getPid();

		case SPU:
			return getSpu();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case APPLY_TIME:
			return getApplyTime();

		case EXPIRE_TIME:
			return getExpireTime();

		case STATUS:
			return getStatus();

		case CATEGORY:
			return getCategory();

		case IS_VIRTUAL:
			return isIsVirtual();

		case IS_CURRENCY:
			return isIsCurrency();

		case IS_BUNDLE:
			return isIsBundle();

		case IS_MIX:
			return isIsMix();

		case NUM_LABEL:
			return getNumLabel();

		case NAME_SPU:
			return getNameSpu();

		case ICON_SPU:
			return getIconSpu();

		case DESC_SPU:
			return getDescSpu();

		case PRIORITY:
			return getPriority();

		case IS_SEARCH:
			return isIsSearch();

		case MAX_ORDER:
			return getMaxOrder();

		case MAX_USER:
			return getMaxUser();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case MID:
			return isSetMid();
		case SID:
			return isSetSid();
		case UID:
			return isSetUid();
		case PID:
			return isSetPid();
		case SPU:
			return isSetSpu();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case APPLY_TIME:
			return isSetApplyTime();
		case EXPIRE_TIME:
			return isSetExpireTime();
		case STATUS:
			return isSetStatus();
		case CATEGORY:
			return isSetCategory();
		case IS_VIRTUAL:
			return isSetIsVirtual();
		case IS_CURRENCY:
			return isSetIsCurrency();
		case IS_BUNDLE:
			return isSetIsBundle();
		case IS_MIX:
			return isSetIsMix();
		case NUM_LABEL:
			return isSetNumLabel();
		case NAME_SPU:
			return isSetNameSpu();
		case ICON_SPU:
			return isSetIconSpu();
		case DESC_SPU:
			return isSetDescSpu();
		case PRIORITY:
			return isSetPriority();
		case IS_SEARCH:
			return isSetIsSearch();
		case MAX_ORDER:
			return isSetMaxOrder();
		case MAX_USER:
			return isSetMaxUser();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Goods)
			return this.equals((Goods) that);
		return false;
	}

	public boolean equals(Goods that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_mid = true && this.isSetMid();
		boolean that_present_mid = true && that.isSetMid();
		if (this_present_mid || that_present_mid) {
			if (!(this_present_mid && that_present_mid))
				return false;
			if (!this.mid.equals(that.mid))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_pid = true && this.isSetPid();
		boolean that_present_pid = true && that.isSetPid();
		if (this_present_pid || that_present_pid) {
			if (!(this_present_pid && that_present_pid))
				return false;
			if (!this.pid.equals(that.pid))
				return false;
		}

		boolean this_present_spu = true && this.isSetSpu();
		boolean that_present_spu = true && that.isSetSpu();
		if (this_present_spu || that_present_spu) {
			if (!(this_present_spu && that_present_spu))
				return false;
			if (!this.spu.equals(that.spu))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_applyTime = true && this.isSetApplyTime();
		boolean that_present_applyTime = true && that.isSetApplyTime();
		if (this_present_applyTime || that_present_applyTime) {
			if (!(this_present_applyTime && that_present_applyTime))
				return false;
			if (!this.applyTime.equals(that.applyTime))
				return false;
		}

		boolean this_present_expireTime = true && this.isSetExpireTime();
		boolean that_present_expireTime = true && that.isSetExpireTime();
		if (this_present_expireTime || that_present_expireTime) {
			if (!(this_present_expireTime && that_present_expireTime))
				return false;
			if (!this.expireTime.equals(that.expireTime))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_isVirtual = true;
		boolean that_present_isVirtual = true;
		if (this_present_isVirtual || that_present_isVirtual) {
			if (!(this_present_isVirtual && that_present_isVirtual))
				return false;
			if (this.isVirtual != that.isVirtual)
				return false;
		}

		boolean this_present_isCurrency = true;
		boolean that_present_isCurrency = true;
		if (this_present_isCurrency || that_present_isCurrency) {
			if (!(this_present_isCurrency && that_present_isCurrency))
				return false;
			if (this.isCurrency != that.isCurrency)
				return false;
		}

		boolean this_present_isBundle = true;
		boolean that_present_isBundle = true;
		if (this_present_isBundle || that_present_isBundle) {
			if (!(this_present_isBundle && that_present_isBundle))
				return false;
			if (this.isBundle != that.isBundle)
				return false;
		}

		boolean this_present_isMix = true;
		boolean that_present_isMix = true;
		if (this_present_isMix || that_present_isMix) {
			if (!(this_present_isMix && that_present_isMix))
				return false;
			if (this.isMix != that.isMix)
				return false;
		}

		boolean this_present_numLabel = true;
		boolean that_present_numLabel = true;
		if (this_present_numLabel || that_present_numLabel) {
			if (!(this_present_numLabel && that_present_numLabel))
				return false;
			if (this.numLabel != that.numLabel)
				return false;
		}

		boolean this_present_nameSpu = true && this.isSetNameSpu();
		boolean that_present_nameSpu = true && that.isSetNameSpu();
		if (this_present_nameSpu || that_present_nameSpu) {
			if (!(this_present_nameSpu && that_present_nameSpu))
				return false;
			if (!this.nameSpu.equals(that.nameSpu))
				return false;
		}

		boolean this_present_iconSpu = true && this.isSetIconSpu();
		boolean that_present_iconSpu = true && that.isSetIconSpu();
		if (this_present_iconSpu || that_present_iconSpu) {
			if (!(this_present_iconSpu && that_present_iconSpu))
				return false;
			if (!this.iconSpu.equals(that.iconSpu))
				return false;
		}

		boolean this_present_descSpu = true && this.isSetDescSpu();
		boolean that_present_descSpu = true && that.isSetDescSpu();
		if (this_present_descSpu || that_present_descSpu) {
			if (!(this_present_descSpu && that_present_descSpu))
				return false;
			if (!this.descSpu.equals(that.descSpu))
				return false;
		}

		boolean this_present_priority = true;
		boolean that_present_priority = true;
		if (this_present_priority || that_present_priority) {
			if (!(this_present_priority && that_present_priority))
				return false;
			if (this.priority != that.priority)
				return false;
		}

		boolean this_present_isSearch = true;
		boolean that_present_isSearch = true;
		if (this_present_isSearch || that_present_isSearch) {
			if (!(this_present_isSearch && that_present_isSearch))
				return false;
			if (this.isSearch != that.isSearch)
				return false;
		}

		boolean this_present_maxOrder = true;
		boolean that_present_maxOrder = true;
		if (this_present_maxOrder || that_present_maxOrder) {
			if (!(this_present_maxOrder && that_present_maxOrder))
				return false;
			if (this.maxOrder != that.maxOrder)
				return false;
		}

		boolean this_present_maxUser = true;
		boolean that_present_maxUser = true;
		if (this_present_maxUser || that_present_maxUser) {
			if (!(this_present_maxUser && that_present_maxUser))
				return false;
			if (this.maxUser != that.maxUser)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
		if (isSetMid())
			hashCode = hashCode * 8191 + mid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetPid()) ? 131071 : 524287);
		if (isSetPid())
			hashCode = hashCode * 8191 + pid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSpu()) ? 131071 : 524287);
		if (isSetSpu())
			hashCode = hashCode * 8191 + spu.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetApplyTime()) ? 131071 : 524287);
		if (isSetApplyTime())
			hashCode = hashCode * 8191 + applyTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTime()) ? 131071 : 524287);
		if (isSetExpireTime())
			hashCode = hashCode * 8191 + expireTime.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + ((isVirtual) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isCurrency) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isBundle) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isMix) ? 131071 : 524287);

		hashCode = hashCode * 8191 + numLabel;

		hashCode = hashCode * 8191 + ((isSetNameSpu()) ? 131071 : 524287);
		if (isSetNameSpu())
			hashCode = hashCode * 8191 + nameSpu.hashCode();

		hashCode = hashCode * 8191 + ((isSetIconSpu()) ? 131071 : 524287);
		if (isSetIconSpu())
			hashCode = hashCode * 8191 + iconSpu.hashCode();

		hashCode = hashCode * 8191 + ((isSetDescSpu()) ? 131071 : 524287);
		if (isSetDescSpu())
			hashCode = hashCode * 8191 + descSpu.hashCode();

		hashCode = hashCode * 8191 + priority;

		hashCode = hashCode * 8191 + ((isSearch) ? 131071 : 524287);

		hashCode = hashCode * 8191 + maxOrder;

		hashCode = hashCode * 8191 + maxUser;

		return hashCode;
	}

	@Override
	public int compareTo(Goods other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSpu()).compareTo(other.isSetSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spu, other.spu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetApplyTime()).compareTo(other.isSetApplyTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApplyTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTime, other.applyTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsVirtual()).compareTo(other.isSetIsVirtual());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsVirtual()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVirtual, other.isVirtual);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsCurrency()).compareTo(other.isSetIsCurrency());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsCurrency()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCurrency, other.isCurrency);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsBundle()).compareTo(other.isSetIsBundle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsBundle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBundle, other.isBundle);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsMix()).compareTo(other.isSetIsMix());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsMix()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMix, other.isMix);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumLabel()).compareTo(other.isSetNumLabel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumLabel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLabel, other.numLabel);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNameSpu()).compareTo(other.isSetNameSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNameSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpu, other.nameSpu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIconSpu()).compareTo(other.isSetIconSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIconSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconSpu, other.iconSpu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDescSpu()).compareTo(other.isSetDescSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDescSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descSpu, other.descSpu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriority()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsSearch()).compareTo(other.isSetIsSearch());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsSearch()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSearch, other.isSearch);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMaxOrder()).compareTo(other.isSetMaxOrder());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMaxOrder()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxOrder, other.maxOrder);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMaxUser()).compareTo(other.isSetMaxUser());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMaxUser()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxUser, other.maxUser);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Goods(");
		boolean first = true;

		sb.append("mid:");
		if (this.mid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.mid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("pid:");
		if (this.pid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.pid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("spu:");
		if (this.spu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.spu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("applyTime:");
		if (this.applyTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.applyTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("expireTime:");
		if (this.expireTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.expireTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isVirtual:");
		sb.append(this.isVirtual);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isCurrency:");
		sb.append(this.isCurrency);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isBundle:");
		sb.append(this.isBundle);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isMix:");
		sb.append(this.isMix);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numLabel:");
		sb.append(this.numLabel);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("nameSpu:");
		if (this.nameSpu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.nameSpu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("iconSpu:");
		if (this.iconSpu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.iconSpu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("descSpu:");
		if (this.descSpu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.descSpu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priority:");
		sb.append(this.priority);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isSearch:");
		sb.append(this.isSearch);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("maxOrder:");
		sb.append(this.maxOrder);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("maxUser:");
		sb.append(this.maxUser);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class GoodsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public GoodsStandardScheme getScheme() {
			return new GoodsStandardScheme();
		}

	}

	private static class GoodsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Goods> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Goods struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // MID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mid = iprot.readString();
						struct.setMidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // PID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.pid = iprot.readString();
						struct.setPidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.spu = iprot.readString();
						struct.setSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // APPLY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.applyTime = iprot.readString();
						struct.setApplyTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // EXPIRE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTime = iprot.readString();
						struct.setExpireTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // IS_VIRTUAL
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isVirtual = iprot.readBool();
						struct.setIsVirtualIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // IS_CURRENCY
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isCurrency = iprot.readBool();
						struct.setIsCurrencyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // IS_BUNDLE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isBundle = iprot.readBool();
						struct.setIsBundleIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // IS_MIX
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isMix = iprot.readBool();
						struct.setIsMixIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // NUM_LABEL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numLabel = iprot.readI32();
						struct.setNumLabelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // NAME_SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nameSpu = iprot.readString();
						struct.setNameSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // ICON_SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.iconSpu = iprot.readString();
						struct.setIconSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // DESC_SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.descSpu = iprot.readString();
						struct.setDescSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // PRIORITY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.priority = iprot.readI32();
						struct.setPriorityIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // IS_SEARCH
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isSearch = iprot.readBool();
						struct.setIsSearchIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // MAX_ORDER
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.maxOrder = iprot.readI32();
						struct.setMaxOrderIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // MAX_USER
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.maxUser = iprot.readI32();
						struct.setMaxUserIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Goods struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.mid != null) {
				oprot.writeFieldBegin(MID_FIELD_DESC);
				oprot.writeString(struct.mid);
				oprot.writeFieldEnd();
			}
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.pid != null) {
				oprot.writeFieldBegin(PID_FIELD_DESC);
				oprot.writeString(struct.pid);
				oprot.writeFieldEnd();
			}
			if (struct.spu != null) {
				oprot.writeFieldBegin(SPU_FIELD_DESC);
				oprot.writeString(struct.spu);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			if (struct.applyTime != null) {
				oprot.writeFieldBegin(APPLY_TIME_FIELD_DESC);
				oprot.writeString(struct.applyTime);
				oprot.writeFieldEnd();
			}
			if (struct.expireTime != null) {
				oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
				oprot.writeString(struct.expireTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_VIRTUAL_FIELD_DESC);
			oprot.writeBool(struct.isVirtual);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_CURRENCY_FIELD_DESC);
			oprot.writeBool(struct.isCurrency);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_BUNDLE_FIELD_DESC);
			oprot.writeBool(struct.isBundle);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_MIX_FIELD_DESC);
			oprot.writeBool(struct.isMix);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_LABEL_FIELD_DESC);
			oprot.writeI32(struct.numLabel);
			oprot.writeFieldEnd();
			if (struct.nameSpu != null) {
				oprot.writeFieldBegin(NAME_SPU_FIELD_DESC);
				oprot.writeString(struct.nameSpu);
				oprot.writeFieldEnd();
			}
			if (struct.iconSpu != null) {
				oprot.writeFieldBegin(ICON_SPU_FIELD_DESC);
				oprot.writeString(struct.iconSpu);
				oprot.writeFieldEnd();
			}
			if (struct.descSpu != null) {
				oprot.writeFieldBegin(DESC_SPU_FIELD_DESC);
				oprot.writeString(struct.descSpu);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
			oprot.writeI32(struct.priority);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_SEARCH_FIELD_DESC);
			oprot.writeBool(struct.isSearch);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MAX_ORDER_FIELD_DESC);
			oprot.writeI32(struct.maxOrder);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MAX_USER_FIELD_DESC);
			oprot.writeI32(struct.maxUser);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class GoodsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public GoodsTupleScheme getScheme() {
			return new GoodsTupleScheme();
		}

	}

	private static class GoodsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Goods> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Goods struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetMid()) {
				optionals.set(0);
			}
			if (struct.isSetSid()) {
				optionals.set(1);
			}
			if (struct.isSetUid()) {
				optionals.set(2);
			}
			if (struct.isSetPid()) {
				optionals.set(3);
			}
			if (struct.isSetSpu()) {
				optionals.set(4);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(5);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(6);
			}
			if (struct.isSetApplyTime()) {
				optionals.set(7);
			}
			if (struct.isSetExpireTime()) {
				optionals.set(8);
			}
			if (struct.isSetStatus()) {
				optionals.set(9);
			}
			if (struct.isSetCategory()) {
				optionals.set(10);
			}
			if (struct.isSetIsVirtual()) {
				optionals.set(11);
			}
			if (struct.isSetIsCurrency()) {
				optionals.set(12);
			}
			if (struct.isSetIsBundle()) {
				optionals.set(13);
			}
			if (struct.isSetIsMix()) {
				optionals.set(14);
			}
			if (struct.isSetNumLabel()) {
				optionals.set(15);
			}
			if (struct.isSetNameSpu()) {
				optionals.set(16);
			}
			if (struct.isSetIconSpu()) {
				optionals.set(17);
			}
			if (struct.isSetDescSpu()) {
				optionals.set(18);
			}
			if (struct.isSetPriority()) {
				optionals.set(19);
			}
			if (struct.isSetIsSearch()) {
				optionals.set(20);
			}
			if (struct.isSetMaxOrder()) {
				optionals.set(21);
			}
			if (struct.isSetMaxUser()) {
				optionals.set(22);
			}
			oprot.writeBitSet(optionals, 23);
			if (struct.isSetMid()) {
				oprot.writeString(struct.mid);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetPid()) {
				oprot.writeString(struct.pid);
			}
			if (struct.isSetSpu()) {
				oprot.writeString(struct.spu);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetApplyTime()) {
				oprot.writeString(struct.applyTime);
			}
			if (struct.isSetExpireTime()) {
				oprot.writeString(struct.expireTime);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetIsVirtual()) {
				oprot.writeBool(struct.isVirtual);
			}
			if (struct.isSetIsCurrency()) {
				oprot.writeBool(struct.isCurrency);
			}
			if (struct.isSetIsBundle()) {
				oprot.writeBool(struct.isBundle);
			}
			if (struct.isSetIsMix()) {
				oprot.writeBool(struct.isMix);
			}
			if (struct.isSetNumLabel()) {
				oprot.writeI32(struct.numLabel);
			}
			if (struct.isSetNameSpu()) {
				oprot.writeString(struct.nameSpu);
			}
			if (struct.isSetIconSpu()) {
				oprot.writeString(struct.iconSpu);
			}
			if (struct.isSetDescSpu()) {
				oprot.writeString(struct.descSpu);
			}
			if (struct.isSetPriority()) {
				oprot.writeI32(struct.priority);
			}
			if (struct.isSetIsSearch()) {
				oprot.writeBool(struct.isSearch);
			}
			if (struct.isSetMaxOrder()) {
				oprot.writeI32(struct.maxOrder);
			}
			if (struct.isSetMaxUser()) {
				oprot.writeI32(struct.maxUser);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Goods struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(23);
			if (incoming.get(0)) {
				struct.mid = iprot.readString();
				struct.setMidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.pid = iprot.readString();
				struct.setPidIsSet(true);
			}
			if (incoming.get(4)) {
				struct.spu = iprot.readString();
				struct.setSpuIsSet(true);
			}
			if (incoming.get(5)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(6)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.applyTime = iprot.readString();
				struct.setApplyTimeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.expireTime = iprot.readString();
				struct.setExpireTimeIsSet(true);
			}
			if (incoming.get(9)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(10)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(11)) {
				struct.isVirtual = iprot.readBool();
				struct.setIsVirtualIsSet(true);
			}
			if (incoming.get(12)) {
				struct.isCurrency = iprot.readBool();
				struct.setIsCurrencyIsSet(true);
			}
			if (incoming.get(13)) {
				struct.isBundle = iprot.readBool();
				struct.setIsBundleIsSet(true);
			}
			if (incoming.get(14)) {
				struct.isMix = iprot.readBool();
				struct.setIsMixIsSet(true);
			}
			if (incoming.get(15)) {
				struct.numLabel = iprot.readI32();
				struct.setNumLabelIsSet(true);
			}
			if (incoming.get(16)) {
				struct.nameSpu = iprot.readString();
				struct.setNameSpuIsSet(true);
			}
			if (incoming.get(17)) {
				struct.iconSpu = iprot.readString();
				struct.setIconSpuIsSet(true);
			}
			if (incoming.get(18)) {
				struct.descSpu = iprot.readString();
				struct.setDescSpuIsSet(true);
			}
			if (incoming.get(19)) {
				struct.priority = iprot.readI32();
				struct.setPriorityIsSet(true);
			}
			if (incoming.get(20)) {
				struct.isSearch = iprot.readBool();
				struct.setIsSearchIsSet(true);
			}
			if (incoming.get(21)) {
				struct.maxOrder = iprot.readI32();
				struct.setMaxOrderIsSet(true);
			}
			if (incoming.get(22)) {
				struct.maxUser = iprot.readI32();
				struct.setMaxUserIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
