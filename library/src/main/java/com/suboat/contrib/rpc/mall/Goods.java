/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Goods
		implements org.apache.thrift.TBase<Goods, Goods._Fields>, java.io.Serializable, Cloneable, Comparable<Goods> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Goods");

	private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField SPU_FIELD_DESC = new org.apache.thrift.protocol.TField("spu",
			org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField KIND_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"kind", org.apache.thrift.protocol.TType.STRING, (short) 28);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"applyTime", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTime", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField SHOW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"showTime", org.apache.thrift.protocol.TType.STRING, (short) 31);

	private static final org.apache.thrift.protocol.TField HIDE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"hideTime", org.apache.thrift.protocol.TType.STRING, (short) 32);

	private static final org.apache.thrift.protocol.TField IS_AUTO_SHOW_HIDE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isAutoShowHide", org.apache.thrift.protocol.TType.BOOL, (short) 33);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 10);

	private static final org.apache.thrift.protocol.TField STATUS_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusOrder", org.apache.thrift.protocol.TType.I32, (short) 29);

	private static final org.apache.thrift.protocol.TField STORE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"storeStatus", org.apache.thrift.protocol.TType.I32, (short) 30);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField IS_VIRTUAL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isVirtual", org.apache.thrift.protocol.TType.BOOL, (short) 12);

	private static final org.apache.thrift.protocol.TField IS_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isCurrency", org.apache.thrift.protocol.TType.BOOL, (short) 13);

	private static final org.apache.thrift.protocol.TField IS_BUNDLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isBundle", org.apache.thrift.protocol.TType.BOOL, (short) 14);

	private static final org.apache.thrift.protocol.TField IS_MIX_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isMix", org.apache.thrift.protocol.TType.BOOL, (short) 15);

	private static final org.apache.thrift.protocol.TField NUM_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numLabel", org.apache.thrift.protocol.TType.I32, (short) 16);

	private static final org.apache.thrift.protocol.TField LABELS_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"labelsDesc", org.apache.thrift.protocol.TType.LIST, (short) 24);

	private static final org.apache.thrift.protocol.TField NAME_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"nameSpu", org.apache.thrift.protocol.TType.STRING, (short) 17);

	private static final org.apache.thrift.protocol.TField ICON_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"iconSpu", org.apache.thrift.protocol.TType.STRING, (short) 18);

	private static final org.apache.thrift.protocol.TField DESC_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"descSpu", org.apache.thrift.protocol.TType.STRING, (short) 19);

	private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priority", org.apache.thrift.protocol.TType.I32, (short) 20);

	private static final org.apache.thrift.protocol.TField IS_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isSearch", org.apache.thrift.protocol.TType.BOOL, (short) 21);

	private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comment", org.apache.thrift.protocol.TType.STRING, (short) 34);

	private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"longitude", org.apache.thrift.protocol.TType.DOUBLE, (short) 44);

	private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"latitude", org.apache.thrift.protocol.TType.DOUBLE, (short) 45);

	private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"location", org.apache.thrift.protocol.TType.STRING, (short) 46);

	private static final org.apache.thrift.protocol.TField AREA_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"areaKey", org.apache.thrift.protocol.TType.STRING, (short) 47);

	private static final org.apache.thrift.protocol.TField MAX_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"maxOrder", org.apache.thrift.protocol.TType.I32, (short) 22);

	private static final org.apache.thrift.protocol.TField MAX_USER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"maxUser", org.apache.thrift.protocol.TType.I32, (short) 23);

	private static final org.apache.thrift.protocol.TField MIN_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"minBuy", org.apache.thrift.protocol.TType.I32, (short) 35);

	private static final org.apache.thrift.protocol.TField MIN_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"minLevel", org.apache.thrift.protocol.TType.I32, (short) 36);

	private static final org.apache.thrift.protocol.TField IS_MEMBER_DIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isMemberDis", org.apache.thrift.protocol.TType.BOOL, (short) 37);

	private static final org.apache.thrift.protocol.TField IS_LIMIT_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isLimitBuy", org.apache.thrift.protocol.TType.BOOL, (short) 38);

	private static final org.apache.thrift.protocol.TField NOT_REFUND_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"notRefund", org.apache.thrift.protocol.TType.BOOL, (short) 39);

	private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"weight", org.apache.thrift.protocol.TType.DOUBLE, (short) 40);

	private static final org.apache.thrift.protocol.TField TRANSPORT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"transport", org.apache.thrift.protocol.TType.I32, (short) 41);

	private static final org.apache.thrift.protocol.TField TRANSPORT_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"transportFee", org.apache.thrift.protocol.TType.DOUBLE, (short) 42);

	private static final org.apache.thrift.protocol.TField FEE_BELONG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"feeBelong", org.apache.thrift.protocol.TType.STRING, (short) 43);

	private static final org.apache.thrift.protocol.TField SELL_SPU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"sellSpu", org.apache.thrift.protocol.TType.I32, (short) 25);

	private static final org.apache.thrift.protocol.TField SCORE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"scoreNum", org.apache.thrift.protocol.TType.I32, (short) 26);

	private static final org.apache.thrift.protocol.TField SCORE_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"scoreAvg", org.apache.thrift.protocol.TType.DOUBLE, (short) 27);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GoodsStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GoodsTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String mid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String pid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String spu; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String kind; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String applyTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String showTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String hideTime; // required

	public boolean isAutoShowHide; // required

	public int status; // required

	public int statusOrder; // required

	public int storeStatus; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public boolean isVirtual; // required

	public boolean isCurrency; // required

	public boolean isBundle; // required

	public boolean isMix; // required

	public int numLabel; // required

	public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> labelsDesc; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String nameSpu; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String iconSpu; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String descSpu; // required

	public int priority; // required

	public boolean isSearch; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String comment; // required

	public double longitude; // required

	public double latitude; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String location; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String areaKey; // required

	public int maxOrder; // required

	public int maxUser; // required

	public int minBuy; // required

	public int minLevel; // required

	public boolean isMemberDis; // required

	public boolean isLimitBuy; // required

	public boolean notRefund; // required

	public double weight; // required

	public int transport; // required

	public double transportFee; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String feeBelong; // required

	public int sellSpu; // required

	public int scoreNum; // required

	public double scoreAvg; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		MID((short) 1, "mid"), SID((short) 2, "sid"), UID((short) 3, "uid"), PID((short) 4, "pid"), SPU((short) 5,
				"spu"), KIND((short) 28, "kind"), CREATE_TIME((short) 6, "createTime"), UPDATE_TIME((short) 7,
						"updateTime"), APPLY_TIME((short) 8, "applyTime"), EXPIRE_TIME((short) 9,
								"expireTime"), SHOW_TIME((short) 31, "showTime"), HIDE_TIME((short) 32,
										"hideTime"), IS_AUTO_SHOW_HIDE((short) 33, "isAutoShowHide"), STATUS((short) 10,
												"status"), STATUS_ORDER((short) 29, "statusOrder"), STORE_STATUS(
														(short) 30,
														"storeStatus"), CATEGORY((short) 11, "category"), IS_VIRTUAL(
																(short) 12, "isVirtual"), IS_CURRENCY((short) 13,
																		"isCurrency"), IS_BUNDLE((short) 14,
																				"isBundle"), IS_MIX((short) 15,
																						"isMix"), NUM_LABEL((short) 16,
																								"numLabel"), LABELS_DESC(
																										(short) 24,
																										"labelsDesc"), NAME_SPU(
																												(short) 17,
																												"nameSpu"), ICON_SPU(
																														(short) 18,
																														"iconSpu"), DESC_SPU(
																																(short) 19,
																																"descSpu"), PRIORITY(
																																		(short) 20,
																																		"priority"), IS_SEARCH(
																																				(short) 21,
																																				"isSearch"), COMMENT(
																																						(short) 34,
																																						"comment"), LONGITUDE(
																																								(short) 44,
																																								"longitude"), LATITUDE(
																																										(short) 45,
																																										"latitude"), LOCATION(
																																												(short) 46,
																																												"location"), AREA_KEY(
																																														(short) 47,
																																														"areaKey"), MAX_ORDER(
																																																(short) 22,
																																																"maxOrder"), MAX_USER(
																																																		(short) 23,
																																																		"maxUser"), MIN_BUY(
																																																				(short) 35,
																																																				"minBuy"), MIN_LEVEL(
																																																						(short) 36,
																																																						"minLevel"), IS_MEMBER_DIS(
																																																								(short) 37,
																																																								"isMemberDis"), IS_LIMIT_BUY(
																																																										(short) 38,
																																																										"isLimitBuy"), NOT_REFUND(
																																																												(short) 39,
																																																												"notRefund"), WEIGHT(
																																																														(short) 40,
																																																														"weight"), TRANSPORT(
																																																																(short) 41,
																																																																"transport"), TRANSPORT_FEE(
																																																																		(short) 42,
																																																																		"transportFee"), FEE_BELONG(
																																																																				(short) 43,
																																																																				"feeBelong"), SELL_SPU(
																																																																						(short) 25,
																																																																						"sellSpu"), SCORE_NUM(
																																																																								(short) 26,
																																																																								"scoreNum"), SCORE_AVG(
																																																																										(short) 27,
																																																																										"scoreAvg");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // MID
				return MID;
			case 2: // SID
				return SID;
			case 3: // UID
				return UID;
			case 4: // PID
				return PID;
			case 5: // SPU
				return SPU;
			case 28: // KIND
				return KIND;
			case 6: // CREATE_TIME
				return CREATE_TIME;
			case 7: // UPDATE_TIME
				return UPDATE_TIME;
			case 8: // APPLY_TIME
				return APPLY_TIME;
			case 9: // EXPIRE_TIME
				return EXPIRE_TIME;
			case 31: // SHOW_TIME
				return SHOW_TIME;
			case 32: // HIDE_TIME
				return HIDE_TIME;
			case 33: // IS_AUTO_SHOW_HIDE
				return IS_AUTO_SHOW_HIDE;
			case 10: // STATUS
				return STATUS;
			case 29: // STATUS_ORDER
				return STATUS_ORDER;
			case 30: // STORE_STATUS
				return STORE_STATUS;
			case 11: // CATEGORY
				return CATEGORY;
			case 12: // IS_VIRTUAL
				return IS_VIRTUAL;
			case 13: // IS_CURRENCY
				return IS_CURRENCY;
			case 14: // IS_BUNDLE
				return IS_BUNDLE;
			case 15: // IS_MIX
				return IS_MIX;
			case 16: // NUM_LABEL
				return NUM_LABEL;
			case 24: // LABELS_DESC
				return LABELS_DESC;
			case 17: // NAME_SPU
				return NAME_SPU;
			case 18: // ICON_SPU
				return ICON_SPU;
			case 19: // DESC_SPU
				return DESC_SPU;
			case 20: // PRIORITY
				return PRIORITY;
			case 21: // IS_SEARCH
				return IS_SEARCH;
			case 34: // COMMENT
				return COMMENT;
			case 44: // LONGITUDE
				return LONGITUDE;
			case 45: // LATITUDE
				return LATITUDE;
			case 46: // LOCATION
				return LOCATION;
			case 47: // AREA_KEY
				return AREA_KEY;
			case 22: // MAX_ORDER
				return MAX_ORDER;
			case 23: // MAX_USER
				return MAX_USER;
			case 35: // MIN_BUY
				return MIN_BUY;
			case 36: // MIN_LEVEL
				return MIN_LEVEL;
			case 37: // IS_MEMBER_DIS
				return IS_MEMBER_DIS;
			case 38: // IS_LIMIT_BUY
				return IS_LIMIT_BUY;
			case 39: // NOT_REFUND
				return NOT_REFUND;
			case 40: // WEIGHT
				return WEIGHT;
			case 41: // TRANSPORT
				return TRANSPORT;
			case 42: // TRANSPORT_FEE
				return TRANSPORT_FEE;
			case 43: // FEE_BELONG
				return FEE_BELONG;
			case 25: // SELL_SPU
				return SELL_SPU;
			case 26: // SCORE_NUM
				return SCORE_NUM;
			case 27: // SCORE_AVG
				return SCORE_AVG;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISAUTOSHOWHIDE_ISSET_ID = 0;

	private static final int __STATUS_ISSET_ID = 1;

	private static final int __STATUSORDER_ISSET_ID = 2;

	private static final int __STORESTATUS_ISSET_ID = 3;

	private static final int __ISVIRTUAL_ISSET_ID = 4;

	private static final int __ISCURRENCY_ISSET_ID = 5;

	private static final int __ISBUNDLE_ISSET_ID = 6;

	private static final int __ISMIX_ISSET_ID = 7;

	private static final int __NUMLABEL_ISSET_ID = 8;

	private static final int __PRIORITY_ISSET_ID = 9;

	private static final int __ISSEARCH_ISSET_ID = 10;

	private static final int __LONGITUDE_ISSET_ID = 11;

	private static final int __LATITUDE_ISSET_ID = 12;

	private static final int __MAXORDER_ISSET_ID = 13;

	private static final int __MAXUSER_ISSET_ID = 14;

	private static final int __MINBUY_ISSET_ID = 15;

	private static final int __MINLEVEL_ISSET_ID = 16;

	private static final int __ISMEMBERDIS_ISSET_ID = 17;

	private static final int __ISLIMITBUY_ISSET_ID = 18;

	private static final int __NOTREFUND_ISSET_ID = 19;

	private static final int __WEIGHT_ISSET_ID = 20;

	private static final int __TRANSPORT_ISSET_ID = 21;

	private static final int __TRANSPORTFEE_ISSET_ID = 22;

	private static final int __SELLSPU_ISSET_ID = 23;

	private static final int __SCORENUM_ISSET_ID = 24;

	private static final int __SCOREAVG_ISSET_ID = 25;

	private int __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.MID,
				new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PID,
				new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SPU,
				new org.apache.thrift.meta_data.FieldMetaData("spu", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.KIND,
				new org.apache.thrift.meta_data.FieldMetaData("kind", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("applyTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.SHOW_TIME, new org.apache.thrift.meta_data.FieldMetaData("showTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.HIDE_TIME, new org.apache.thrift.meta_data.FieldMetaData("hideTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_AUTO_SHOW_HIDE,
				new org.apache.thrift.meta_data.FieldMetaData("isAutoShowHide",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_ORDER,
				new org.apache.thrift.meta_data.FieldMetaData("statusOrder",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STORE_STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("storeStatus",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_VIRTUAL,
				new org.apache.thrift.meta_data.FieldMetaData("isVirtual",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_CURRENCY,
				new org.apache.thrift.meta_data.FieldMetaData("isCurrency",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_BUNDLE,
				new org.apache.thrift.meta_data.FieldMetaData("isBundle",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_MIX,
				new org.apache.thrift.meta_data.FieldMetaData("isMix", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.NUM_LABEL,
				new org.apache.thrift.meta_data.FieldMetaData("numLabel",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.LABELS_DESC, new org.apache.thrift.meta_data.FieldMetaData("labelsDesc",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		tmpMap.put(_Fields.NAME_SPU,
				new org.apache.thrift.meta_data.FieldMetaData("nameSpu",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ICON_SPU,
				new org.apache.thrift.meta_data.FieldMetaData("iconSpu",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESC_SPU,
				new org.apache.thrift.meta_data.FieldMetaData("descSpu",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PRIORITY,
				new org.apache.thrift.meta_data.FieldMetaData("priority",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_SEARCH,
				new org.apache.thrift.meta_data.FieldMetaData("isSearch",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("comment",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LONGITUDE,
				new org.apache.thrift.meta_data.FieldMetaData("longitude",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.LATITUDE,
				new org.apache.thrift.meta_data.FieldMetaData("latitude",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.LOCATION,
				new org.apache.thrift.meta_data.FieldMetaData("location",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AREA_KEY,
				new org.apache.thrift.meta_data.FieldMetaData("areaKey",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MAX_ORDER,
				new org.apache.thrift.meta_data.FieldMetaData("maxOrder",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.MAX_USER,
				new org.apache.thrift.meta_data.FieldMetaData("maxUser",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.MIN_BUY,
				new org.apache.thrift.meta_data.FieldMetaData("minBuy", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.MIN_LEVEL,
				new org.apache.thrift.meta_data.FieldMetaData("minLevel",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.IS_MEMBER_DIS,
				new org.apache.thrift.meta_data.FieldMetaData("isMemberDis",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_LIMIT_BUY,
				new org.apache.thrift.meta_data.FieldMetaData("isLimitBuy",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.NOT_REFUND,
				new org.apache.thrift.meta_data.FieldMetaData("notRefund",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.WEIGHT,
				new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.TRANSPORT,
				new org.apache.thrift.meta_data.FieldMetaData("transport",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.TRANSPORT_FEE,
				new org.apache.thrift.meta_data.FieldMetaData("transportFee",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.FEE_BELONG,
				new org.apache.thrift.meta_data.FieldMetaData("feeBelong",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SELL_SPU,
				new org.apache.thrift.meta_data.FieldMetaData("sellSpu",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SCORE_NUM,
				new org.apache.thrift.meta_data.FieldMetaData("scoreNum",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SCORE_AVG,
				new org.apache.thrift.meta_data.FieldMetaData("scoreAvg",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Goods.class, metaDataMap);
	}

	public Goods() {
	}

	public Goods(java.lang.String mid, java.lang.String sid, java.lang.String uid, java.lang.String pid,
			java.lang.String spu, java.lang.String kind, java.lang.String createTime, java.lang.String updateTime,
			java.lang.String applyTime, java.lang.String expireTime, java.lang.String showTime,
			java.lang.String hideTime, boolean isAutoShowHide, int status, int statusOrder, int storeStatus,
			java.lang.String category, boolean isVirtual, boolean isCurrency, boolean isBundle, boolean isMix,
			int numLabel, java.util.List<java.lang.String> labelsDesc, java.lang.String nameSpu,
			java.lang.String iconSpu, java.lang.String descSpu, int priority, boolean isSearch,
			java.lang.String comment, double longitude, double latitude, java.lang.String location,
			java.lang.String areaKey, int maxOrder, int maxUser, int minBuy, int minLevel, boolean isMemberDis,
			boolean isLimitBuy, boolean notRefund, double weight, int transport, double transportFee,
			java.lang.String feeBelong, int sellSpu, int scoreNum, double scoreAvg) {
		this();
		this.mid = mid;
		this.sid = sid;
		this.uid = uid;
		this.pid = pid;
		this.spu = spu;
		this.kind = kind;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.applyTime = applyTime;
		this.expireTime = expireTime;
		this.showTime = showTime;
		this.hideTime = hideTime;
		this.isAutoShowHide = isAutoShowHide;
		setIsAutoShowHideIsSet(true);
		this.status = status;
		setStatusIsSet(true);
		this.statusOrder = statusOrder;
		setStatusOrderIsSet(true);
		this.storeStatus = storeStatus;
		setStoreStatusIsSet(true);
		this.category = category;
		this.isVirtual = isVirtual;
		setIsVirtualIsSet(true);
		this.isCurrency = isCurrency;
		setIsCurrencyIsSet(true);
		this.isBundle = isBundle;
		setIsBundleIsSet(true);
		this.isMix = isMix;
		setIsMixIsSet(true);
		this.numLabel = numLabel;
		setNumLabelIsSet(true);
		this.labelsDesc = labelsDesc;
		this.nameSpu = nameSpu;
		this.iconSpu = iconSpu;
		this.descSpu = descSpu;
		this.priority = priority;
		setPriorityIsSet(true);
		this.isSearch = isSearch;
		setIsSearchIsSet(true);
		this.comment = comment;
		this.longitude = longitude;
		setLongitudeIsSet(true);
		this.latitude = latitude;
		setLatitudeIsSet(true);
		this.location = location;
		this.areaKey = areaKey;
		this.maxOrder = maxOrder;
		setMaxOrderIsSet(true);
		this.maxUser = maxUser;
		setMaxUserIsSet(true);
		this.minBuy = minBuy;
		setMinBuyIsSet(true);
		this.minLevel = minLevel;
		setMinLevelIsSet(true);
		this.isMemberDis = isMemberDis;
		setIsMemberDisIsSet(true);
		this.isLimitBuy = isLimitBuy;
		setIsLimitBuyIsSet(true);
		this.notRefund = notRefund;
		setNotRefundIsSet(true);
		this.weight = weight;
		setWeightIsSet(true);
		this.transport = transport;
		setTransportIsSet(true);
		this.transportFee = transportFee;
		setTransportFeeIsSet(true);
		this.feeBelong = feeBelong;
		this.sellSpu = sellSpu;
		setSellSpuIsSet(true);
		this.scoreNum = scoreNum;
		setScoreNumIsSet(true);
		this.scoreAvg = scoreAvg;
		setScoreAvgIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Goods(Goods other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetMid()) {
			this.mid = other.mid;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetPid()) {
			this.pid = other.pid;
		}
		if (other.isSetSpu()) {
			this.spu = other.spu;
		}
		if (other.isSetKind()) {
			this.kind = other.kind;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		if (other.isSetApplyTime()) {
			this.applyTime = other.applyTime;
		}
		if (other.isSetExpireTime()) {
			this.expireTime = other.expireTime;
		}
		if (other.isSetShowTime()) {
			this.showTime = other.showTime;
		}
		if (other.isSetHideTime()) {
			this.hideTime = other.hideTime;
		}
		this.isAutoShowHide = other.isAutoShowHide;
		this.status = other.status;
		this.statusOrder = other.statusOrder;
		this.storeStatus = other.storeStatus;
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		this.isVirtual = other.isVirtual;
		this.isCurrency = other.isCurrency;
		this.isBundle = other.isBundle;
		this.isMix = other.isMix;
		this.numLabel = other.numLabel;
		if (other.isSetLabelsDesc()) {
			java.util.List<java.lang.String> __this__labelsDesc = new java.util.ArrayList<java.lang.String>(
					other.labelsDesc);
			this.labelsDesc = __this__labelsDesc;
		}
		if (other.isSetNameSpu()) {
			this.nameSpu = other.nameSpu;
		}
		if (other.isSetIconSpu()) {
			this.iconSpu = other.iconSpu;
		}
		if (other.isSetDescSpu()) {
			this.descSpu = other.descSpu;
		}
		this.priority = other.priority;
		this.isSearch = other.isSearch;
		if (other.isSetComment()) {
			this.comment = other.comment;
		}
		this.longitude = other.longitude;
		this.latitude = other.latitude;
		if (other.isSetLocation()) {
			this.location = other.location;
		}
		if (other.isSetAreaKey()) {
			this.areaKey = other.areaKey;
		}
		this.maxOrder = other.maxOrder;
		this.maxUser = other.maxUser;
		this.minBuy = other.minBuy;
		this.minLevel = other.minLevel;
		this.isMemberDis = other.isMemberDis;
		this.isLimitBuy = other.isLimitBuy;
		this.notRefund = other.notRefund;
		this.weight = other.weight;
		this.transport = other.transport;
		this.transportFee = other.transportFee;
		if (other.isSetFeeBelong()) {
			this.feeBelong = other.feeBelong;
		}
		this.sellSpu = other.sellSpu;
		this.scoreNum = other.scoreNum;
		this.scoreAvg = other.scoreAvg;
	}

	public Goods deepCopy() {
		return new Goods(this);
	}

	@Override
	public void clear() {
		this.mid = null;
		this.sid = null;
		this.uid = null;
		this.pid = null;
		this.spu = null;
		this.kind = null;
		this.createTime = null;
		this.updateTime = null;
		this.applyTime = null;
		this.expireTime = null;
		this.showTime = null;
		this.hideTime = null;
		setIsAutoShowHideIsSet(false);
		this.isAutoShowHide = false;
		setStatusIsSet(false);
		this.status = 0;
		setStatusOrderIsSet(false);
		this.statusOrder = 0;
		setStoreStatusIsSet(false);
		this.storeStatus = 0;
		this.category = null;
		setIsVirtualIsSet(false);
		this.isVirtual = false;
		setIsCurrencyIsSet(false);
		this.isCurrency = false;
		setIsBundleIsSet(false);
		this.isBundle = false;
		setIsMixIsSet(false);
		this.isMix = false;
		setNumLabelIsSet(false);
		this.numLabel = 0;
		this.labelsDesc = null;
		this.nameSpu = null;
		this.iconSpu = null;
		this.descSpu = null;
		setPriorityIsSet(false);
		this.priority = 0;
		setIsSearchIsSet(false);
		this.isSearch = false;
		this.comment = null;
		setLongitudeIsSet(false);
		this.longitude = 0.0;
		setLatitudeIsSet(false);
		this.latitude = 0.0;
		this.location = null;
		this.areaKey = null;
		setMaxOrderIsSet(false);
		this.maxOrder = 0;
		setMaxUserIsSet(false);
		this.maxUser = 0;
		setMinBuyIsSet(false);
		this.minBuy = 0;
		setMinLevelIsSet(false);
		this.minLevel = 0;
		setIsMemberDisIsSet(false);
		this.isMemberDis = false;
		setIsLimitBuyIsSet(false);
		this.isLimitBuy = false;
		setNotRefundIsSet(false);
		this.notRefund = false;
		setWeightIsSet(false);
		this.weight = 0.0;
		setTransportIsSet(false);
		this.transport = 0;
		setTransportFeeIsSet(false);
		this.transportFee = 0.0;
		this.feeBelong = null;
		setSellSpuIsSet(false);
		this.sellSpu = 0;
		setScoreNumIsSet(false);
		this.scoreNum = 0;
		setScoreAvgIsSet(false);
		this.scoreAvg = 0.0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMid() {
		return this.mid;
	}

	public Goods setMid(@org.apache.thrift.annotation.Nullable java.lang.String mid) {
		this.mid = mid;
		return this;
	}

	public void unsetMid() {
		this.mid = null;
	}

	/**
	 * Returns true if field mid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetMid() {
		return this.mid != null;
	}

	public void setMidIsSet(boolean value) {
		if (!value) {
			this.mid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public Goods setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public Goods setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPid() {
		return this.pid;
	}

	public Goods setPid(@org.apache.thrift.annotation.Nullable java.lang.String pid) {
		this.pid = pid;
		return this;
	}

	public void unsetPid() {
		this.pid = null;
	}

	/**
	 * Returns true if field pid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPid() {
		return this.pid != null;
	}

	public void setPidIsSet(boolean value) {
		if (!value) {
			this.pid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSpu() {
		return this.spu;
	}

	public Goods setSpu(@org.apache.thrift.annotation.Nullable java.lang.String spu) {
		this.spu = spu;
		return this;
	}

	public void unsetSpu() {
		this.spu = null;
	}

	/**
	 * Returns true if field spu is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSpu() {
		return this.spu != null;
	}

	public void setSpuIsSet(boolean value) {
		if (!value) {
			this.spu = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getKind() {
		return this.kind;
	}

	public Goods setKind(@org.apache.thrift.annotation.Nullable java.lang.String kind) {
		this.kind = kind;
		return this;
	}

	public void unsetKind() {
		this.kind = null;
	}

	/**
	 * Returns true if field kind is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetKind() {
		return this.kind != null;
	}

	public void setKindIsSet(boolean value) {
		if (!value) {
			this.kind = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Goods setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Goods setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getApplyTime() {
		return this.applyTime;
	}

	public Goods setApplyTime(@org.apache.thrift.annotation.Nullable java.lang.String applyTime) {
		this.applyTime = applyTime;
		return this;
	}

	public void unsetApplyTime() {
		this.applyTime = null;
	}

	/**
	 * Returns true if field applyTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetApplyTime() {
		return this.applyTime != null;
	}

	public void setApplyTimeIsSet(boolean value) {
		if (!value) {
			this.applyTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTime() {
		return this.expireTime;
	}

	public Goods setExpireTime(@org.apache.thrift.annotation.Nullable java.lang.String expireTime) {
		this.expireTime = expireTime;
		return this;
	}

	public void unsetExpireTime() {
		this.expireTime = null;
	}

	/**
	 * Returns true if field expireTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTime() {
		return this.expireTime != null;
	}

	public void setExpireTimeIsSet(boolean value) {
		if (!value) {
			this.expireTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getShowTime() {
		return this.showTime;
	}

	public Goods setShowTime(@org.apache.thrift.annotation.Nullable java.lang.String showTime) {
		this.showTime = showTime;
		return this;
	}

	public void unsetShowTime() {
		this.showTime = null;
	}

	/**
	 * Returns true if field showTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetShowTime() {
		return this.showTime != null;
	}

	public void setShowTimeIsSet(boolean value) {
		if (!value) {
			this.showTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getHideTime() {
		return this.hideTime;
	}

	public Goods setHideTime(@org.apache.thrift.annotation.Nullable java.lang.String hideTime) {
		this.hideTime = hideTime;
		return this;
	}

	public void unsetHideTime() {
		this.hideTime = null;
	}

	/**
	 * Returns true if field hideTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetHideTime() {
		return this.hideTime != null;
	}

	public void setHideTimeIsSet(boolean value) {
		if (!value) {
			this.hideTime = null;
		}
	}

	public boolean isIsAutoShowHide() {
		return this.isAutoShowHide;
	}

	public Goods setIsAutoShowHide(boolean isAutoShowHide) {
		this.isAutoShowHide = isAutoShowHide;
		setIsAutoShowHideIsSet(true);
		return this;
	}

	public void unsetIsAutoShowHide() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISAUTOSHOWHIDE_ISSET_ID);
	}

	/**
	 * Returns true if field isAutoShowHide is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsAutoShowHide() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISAUTOSHOWHIDE_ISSET_ID);
	}

	public void setIsAutoShowHideIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISAUTOSHOWHIDE_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public Goods setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public int getStatusOrder() {
		return this.statusOrder;
	}

	public Goods setStatusOrder(int statusOrder) {
		this.statusOrder = statusOrder;
		setStatusOrderIsSet(true);
		return this;
	}

	public void unsetStatusOrder() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSORDER_ISSET_ID);
	}

	/**
	 * Returns true if field statusOrder is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusOrder() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSORDER_ISSET_ID);
	}

	public void setStatusOrderIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSORDER_ISSET_ID, value);
	}

	public int getStoreStatus() {
		return this.storeStatus;
	}

	public Goods setStoreStatus(int storeStatus) {
		this.storeStatus = storeStatus;
		setStoreStatusIsSet(true);
		return this;
	}

	public void unsetStoreStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STORESTATUS_ISSET_ID);
	}

	/**
	 * Returns true if field storeStatus is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStoreStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STORESTATUS_ISSET_ID);
	}

	public void setStoreStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STORESTATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public Goods setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	public boolean isIsVirtual() {
		return this.isVirtual;
	}

	public Goods setIsVirtual(boolean isVirtual) {
		this.isVirtual = isVirtual;
		setIsVirtualIsSet(true);
		return this;
	}

	public void unsetIsVirtual() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISVIRTUAL_ISSET_ID);
	}

	/**
	 * Returns true if field isVirtual is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsVirtual() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISVIRTUAL_ISSET_ID);
	}

	public void setIsVirtualIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISVIRTUAL_ISSET_ID, value);
	}

	public boolean isIsCurrency() {
		return this.isCurrency;
	}

	public Goods setIsCurrency(boolean isCurrency) {
		this.isCurrency = isCurrency;
		setIsCurrencyIsSet(true);
		return this;
	}

	public void unsetIsCurrency() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCURRENCY_ISSET_ID);
	}

	/**
	 * Returns true if field isCurrency is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsCurrency() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCURRENCY_ISSET_ID);
	}

	public void setIsCurrencyIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCURRENCY_ISSET_ID, value);
	}

	public boolean isIsBundle() {
		return this.isBundle;
	}

	public Goods setIsBundle(boolean isBundle) {
		this.isBundle = isBundle;
		setIsBundleIsSet(true);
		return this;
	}

	public void unsetIsBundle() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISBUNDLE_ISSET_ID);
	}

	/**
	 * Returns true if field isBundle is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsBundle() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISBUNDLE_ISSET_ID);
	}

	public void setIsBundleIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISBUNDLE_ISSET_ID, value);
	}

	public boolean isIsMix() {
		return this.isMix;
	}

	public Goods setIsMix(boolean isMix) {
		this.isMix = isMix;
		setIsMixIsSet(true);
		return this;
	}

	public void unsetIsMix() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMIX_ISSET_ID);
	}

	/**
	 * Returns true if field isMix is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsMix() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMIX_ISSET_ID);
	}

	public void setIsMixIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMIX_ISSET_ID, value);
	}

	public int getNumLabel() {
		return this.numLabel;
	}

	public Goods setNumLabel(int numLabel) {
		this.numLabel = numLabel;
		setNumLabelIsSet(true);
		return this;
	}

	public void unsetNumLabel() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMLABEL_ISSET_ID);
	}

	/**
	 * Returns true if field numLabel is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumLabel() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMLABEL_ISSET_ID);
	}

	public void setNumLabelIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMLABEL_ISSET_ID, value);
	}

	public int getLabelsDescSize() {
		return (this.labelsDesc == null) ? 0 : this.labelsDesc.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<java.lang.String> getLabelsDescIterator() {
		return (this.labelsDesc == null) ? null : this.labelsDesc.iterator();
	}

	public void addToLabelsDesc(java.lang.String elem) {
		if (this.labelsDesc == null) {
			this.labelsDesc = new java.util.ArrayList<java.lang.String>();
		}
		this.labelsDesc.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<java.lang.String> getLabelsDesc() {
		return this.labelsDesc;
	}

	public Goods setLabelsDesc(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> labelsDesc) {
		this.labelsDesc = labelsDesc;
		return this;
	}

	public void unsetLabelsDesc() {
		this.labelsDesc = null;
	}

	/**
	 * Returns true if field labelsDesc is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLabelsDesc() {
		return this.labelsDesc != null;
	}

	public void setLabelsDescIsSet(boolean value) {
		if (!value) {
			this.labelsDesc = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNameSpu() {
		return this.nameSpu;
	}

	public Goods setNameSpu(@org.apache.thrift.annotation.Nullable java.lang.String nameSpu) {
		this.nameSpu = nameSpu;
		return this;
	}

	public void unsetNameSpu() {
		this.nameSpu = null;
	}

	/**
	 * Returns true if field nameSpu is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNameSpu() {
		return this.nameSpu != null;
	}

	public void setNameSpuIsSet(boolean value) {
		if (!value) {
			this.nameSpu = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIconSpu() {
		return this.iconSpu;
	}

	public Goods setIconSpu(@org.apache.thrift.annotation.Nullable java.lang.String iconSpu) {
		this.iconSpu = iconSpu;
		return this;
	}

	public void unsetIconSpu() {
		this.iconSpu = null;
	}

	/**
	 * Returns true if field iconSpu is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIconSpu() {
		return this.iconSpu != null;
	}

	public void setIconSpuIsSet(boolean value) {
		if (!value) {
			this.iconSpu = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDescSpu() {
		return this.descSpu;
	}

	public Goods setDescSpu(@org.apache.thrift.annotation.Nullable java.lang.String descSpu) {
		this.descSpu = descSpu;
		return this;
	}

	public void unsetDescSpu() {
		this.descSpu = null;
	}

	/**
	 * Returns true if field descSpu is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDescSpu() {
		return this.descSpu != null;
	}

	public void setDescSpuIsSet(boolean value) {
		if (!value) {
			this.descSpu = null;
		}
	}

	public int getPriority() {
		return this.priority;
	}

	public Goods setPriority(int priority) {
		this.priority = priority;
		setPriorityIsSet(true);
		return this;
	}

	public void unsetPriority() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
	}

	/**
	 * Returns true if field priority is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriority() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
	}

	public void setPriorityIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
	}

	public boolean isIsSearch() {
		return this.isSearch;
	}

	public Goods setIsSearch(boolean isSearch) {
		this.isSearch = isSearch;
		setIsSearchIsSet(true);
		return this;
	}

	public void unsetIsSearch() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSEARCH_ISSET_ID);
	}

	/**
	 * Returns true if field isSearch is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsSearch() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSEARCH_ISSET_ID);
	}

	public void setIsSearchIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSEARCH_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getComment() {
		return this.comment;
	}

	public Goods setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
		this.comment = comment;
		return this;
	}

	public void unsetComment() {
		this.comment = null;
	}

	/**
	 * Returns true if field comment is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComment() {
		return this.comment != null;
	}

	public void setCommentIsSet(boolean value) {
		if (!value) {
			this.comment = null;
		}
	}

	public double getLongitude() {
		return this.longitude;
	}

	public Goods setLongitude(double longitude) {
		this.longitude = longitude;
		setLongitudeIsSet(true);
		return this;
	}

	public void unsetLongitude() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
	}

	/**
	 * Returns true if field longitude is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLongitude() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
	}

	public void setLongitudeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
	}

	public double getLatitude() {
		return this.latitude;
	}

	public Goods setLatitude(double latitude) {
		this.latitude = latitude;
		setLatitudeIsSet(true);
		return this;
	}

	public void unsetLatitude() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
	}

	/**
	 * Returns true if field latitude is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLatitude() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
	}

	public void setLatitudeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLocation() {
		return this.location;
	}

	public Goods setLocation(@org.apache.thrift.annotation.Nullable java.lang.String location) {
		this.location = location;
		return this;
	}

	public void unsetLocation() {
		this.location = null;
	}

	/**
	 * Returns true if field location is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLocation() {
		return this.location != null;
	}

	public void setLocationIsSet(boolean value) {
		if (!value) {
			this.location = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAreaKey() {
		return this.areaKey;
	}

	public Goods setAreaKey(@org.apache.thrift.annotation.Nullable java.lang.String areaKey) {
		this.areaKey = areaKey;
		return this;
	}

	public void unsetAreaKey() {
		this.areaKey = null;
	}

	/**
	 * Returns true if field areaKey is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAreaKey() {
		return this.areaKey != null;
	}

	public void setAreaKeyIsSet(boolean value) {
		if (!value) {
			this.areaKey = null;
		}
	}

	public int getMaxOrder() {
		return this.maxOrder;
	}

	public Goods setMaxOrder(int maxOrder) {
		this.maxOrder = maxOrder;
		setMaxOrderIsSet(true);
		return this;
	}

	public void unsetMaxOrder() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXORDER_ISSET_ID);
	}

	/**
	 * Returns true if field maxOrder is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMaxOrder() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXORDER_ISSET_ID);
	}

	public void setMaxOrderIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXORDER_ISSET_ID, value);
	}

	public int getMaxUser() {
		return this.maxUser;
	}

	public Goods setMaxUser(int maxUser) {
		this.maxUser = maxUser;
		setMaxUserIsSet(true);
		return this;
	}

	public void unsetMaxUser() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXUSER_ISSET_ID);
	}

	/**
	 * Returns true if field maxUser is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMaxUser() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXUSER_ISSET_ID);
	}

	public void setMaxUserIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXUSER_ISSET_ID, value);
	}

	public int getMinBuy() {
		return this.minBuy;
	}

	public Goods setMinBuy(int minBuy) {
		this.minBuy = minBuy;
		setMinBuyIsSet(true);
		return this;
	}

	public void unsetMinBuy() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINBUY_ISSET_ID);
	}

	/**
	 * Returns true if field minBuy is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetMinBuy() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINBUY_ISSET_ID);
	}

	public void setMinBuyIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINBUY_ISSET_ID, value);
	}

	public int getMinLevel() {
		return this.minLevel;
	}

	public Goods setMinLevel(int minLevel) {
		this.minLevel = minLevel;
		setMinLevelIsSet(true);
		return this;
	}

	public void unsetMinLevel() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINLEVEL_ISSET_ID);
	}

	/**
	 * Returns true if field minLevel is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMinLevel() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINLEVEL_ISSET_ID);
	}

	public void setMinLevelIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINLEVEL_ISSET_ID, value);
	}

	public boolean isIsMemberDis() {
		return this.isMemberDis;
	}

	public Goods setIsMemberDis(boolean isMemberDis) {
		this.isMemberDis = isMemberDis;
		setIsMemberDisIsSet(true);
		return this;
	}

	public void unsetIsMemberDis() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMEMBERDIS_ISSET_ID);
	}

	/**
	 * Returns true if field isMemberDis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsMemberDis() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMEMBERDIS_ISSET_ID);
	}

	public void setIsMemberDisIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMEMBERDIS_ISSET_ID, value);
	}

	public boolean isIsLimitBuy() {
		return this.isLimitBuy;
	}

	public Goods setIsLimitBuy(boolean isLimitBuy) {
		this.isLimitBuy = isLimitBuy;
		setIsLimitBuyIsSet(true);
		return this;
	}

	public void unsetIsLimitBuy() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISLIMITBUY_ISSET_ID);
	}

	/**
	 * Returns true if field isLimitBuy is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsLimitBuy() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISLIMITBUY_ISSET_ID);
	}

	public void setIsLimitBuyIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISLIMITBUY_ISSET_ID, value);
	}

	public boolean isNotRefund() {
		return this.notRefund;
	}

	public Goods setNotRefund(boolean notRefund) {
		this.notRefund = notRefund;
		setNotRefundIsSet(true);
		return this;
	}

	public void unsetNotRefund() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTREFUND_ISSET_ID);
	}

	/**
	 * Returns true if field notRefund is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNotRefund() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTREFUND_ISSET_ID);
	}

	public void setNotRefundIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTREFUND_ISSET_ID, value);
	}

	public double getWeight() {
		return this.weight;
	}

	public Goods setWeight(double weight) {
		this.weight = weight;
		setWeightIsSet(true);
		return this;
	}

	public void unsetWeight() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
	}

	/**
	 * Returns true if field weight is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetWeight() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
	}

	public void setWeightIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
	}

	public int getTransport() {
		return this.transport;
	}

	public Goods setTransport(int transport) {
		this.transport = transport;
		setTransportIsSet(true);
		return this;
	}

	public void unsetTransport() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSPORT_ISSET_ID);
	}

	/**
	 * Returns true if field transport is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTransport() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSPORT_ISSET_ID);
	}

	public void setTransportIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSPORT_ISSET_ID, value);
	}

	public double getTransportFee() {
		return this.transportFee;
	}

	public Goods setTransportFee(double transportFee) {
		this.transportFee = transportFee;
		setTransportFeeIsSet(true);
		return this;
	}

	public void unsetTransportFee() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSPORTFEE_ISSET_ID);
	}

	/**
	 * Returns true if field transportFee is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTransportFee() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSPORTFEE_ISSET_ID);
	}

	public void setTransportFeeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSPORTFEE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getFeeBelong() {
		return this.feeBelong;
	}

	public Goods setFeeBelong(@org.apache.thrift.annotation.Nullable java.lang.String feeBelong) {
		this.feeBelong = feeBelong;
		return this;
	}

	public void unsetFeeBelong() {
		this.feeBelong = null;
	}

	/**
	 * Returns true if field feeBelong is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetFeeBelong() {
		return this.feeBelong != null;
	}

	public void setFeeBelongIsSet(boolean value) {
		if (!value) {
			this.feeBelong = null;
		}
	}

	public int getSellSpu() {
		return this.sellSpu;
	}

	public Goods setSellSpu(int sellSpu) {
		this.sellSpu = sellSpu;
		setSellSpuIsSet(true);
		return this;
	}

	public void unsetSellSpu() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SELLSPU_ISSET_ID);
	}

	/**
	 * Returns true if field sellSpu is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSellSpu() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SELLSPU_ISSET_ID);
	}

	public void setSellSpuIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SELLSPU_ISSET_ID, value);
	}

	public int getScoreNum() {
		return this.scoreNum;
	}

	public Goods setScoreNum(int scoreNum) {
		this.scoreNum = scoreNum;
		setScoreNumIsSet(true);
		return this;
	}

	public void unsetScoreNum() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCORENUM_ISSET_ID);
	}

	/**
	 * Returns true if field scoreNum is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetScoreNum() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCORENUM_ISSET_ID);
	}

	public void setScoreNumIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCORENUM_ISSET_ID, value);
	}

	public double getScoreAvg() {
		return this.scoreAvg;
	}

	public Goods setScoreAvg(double scoreAvg) {
		this.scoreAvg = scoreAvg;
		setScoreAvgIsSet(true);
		return this;
	}

	public void unsetScoreAvg() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCOREAVG_ISSET_ID);
	}

	/**
	 * Returns true if field scoreAvg is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetScoreAvg() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCOREAVG_ISSET_ID);
	}

	public void setScoreAvgIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCOREAVG_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case MID:
			if (value == null) {
				unsetMid();
			}
			else {
				setMid((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case PID:
			if (value == null) {
				unsetPid();
			}
			else {
				setPid((java.lang.String) value);
			}
			break;

		case SPU:
			if (value == null) {
				unsetSpu();
			}
			else {
				setSpu((java.lang.String) value);
			}
			break;

		case KIND:
			if (value == null) {
				unsetKind();
			}
			else {
				setKind((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case APPLY_TIME:
			if (value == null) {
				unsetApplyTime();
			}
			else {
				setApplyTime((java.lang.String) value);
			}
			break;

		case EXPIRE_TIME:
			if (value == null) {
				unsetExpireTime();
			}
			else {
				setExpireTime((java.lang.String) value);
			}
			break;

		case SHOW_TIME:
			if (value == null) {
				unsetShowTime();
			}
			else {
				setShowTime((java.lang.String) value);
			}
			break;

		case HIDE_TIME:
			if (value == null) {
				unsetHideTime();
			}
			else {
				setHideTime((java.lang.String) value);
			}
			break;

		case IS_AUTO_SHOW_HIDE:
			if (value == null) {
				unsetIsAutoShowHide();
			}
			else {
				setIsAutoShowHide((java.lang.Boolean) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case STATUS_ORDER:
			if (value == null) {
				unsetStatusOrder();
			}
			else {
				setStatusOrder((java.lang.Integer) value);
			}
			break;

		case STORE_STATUS:
			if (value == null) {
				unsetStoreStatus();
			}
			else {
				setStoreStatus((java.lang.Integer) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case IS_VIRTUAL:
			if (value == null) {
				unsetIsVirtual();
			}
			else {
				setIsVirtual((java.lang.Boolean) value);
			}
			break;

		case IS_CURRENCY:
			if (value == null) {
				unsetIsCurrency();
			}
			else {
				setIsCurrency((java.lang.Boolean) value);
			}
			break;

		case IS_BUNDLE:
			if (value == null) {
				unsetIsBundle();
			}
			else {
				setIsBundle((java.lang.Boolean) value);
			}
			break;

		case IS_MIX:
			if (value == null) {
				unsetIsMix();
			}
			else {
				setIsMix((java.lang.Boolean) value);
			}
			break;

		case NUM_LABEL:
			if (value == null) {
				unsetNumLabel();
			}
			else {
				setNumLabel((java.lang.Integer) value);
			}
			break;

		case LABELS_DESC:
			if (value == null) {
				unsetLabelsDesc();
			}
			else {
				setLabelsDesc((java.util.List<java.lang.String>) value);
			}
			break;

		case NAME_SPU:
			if (value == null) {
				unsetNameSpu();
			}
			else {
				setNameSpu((java.lang.String) value);
			}
			break;

		case ICON_SPU:
			if (value == null) {
				unsetIconSpu();
			}
			else {
				setIconSpu((java.lang.String) value);
			}
			break;

		case DESC_SPU:
			if (value == null) {
				unsetDescSpu();
			}
			else {
				setDescSpu((java.lang.String) value);
			}
			break;

		case PRIORITY:
			if (value == null) {
				unsetPriority();
			}
			else {
				setPriority((java.lang.Integer) value);
			}
			break;

		case IS_SEARCH:
			if (value == null) {
				unsetIsSearch();
			}
			else {
				setIsSearch((java.lang.Boolean) value);
			}
			break;

		case COMMENT:
			if (value == null) {
				unsetComment();
			}
			else {
				setComment((java.lang.String) value);
			}
			break;

		case LONGITUDE:
			if (value == null) {
				unsetLongitude();
			}
			else {
				setLongitude((java.lang.Double) value);
			}
			break;

		case LATITUDE:
			if (value == null) {
				unsetLatitude();
			}
			else {
				setLatitude((java.lang.Double) value);
			}
			break;

		case LOCATION:
			if (value == null) {
				unsetLocation();
			}
			else {
				setLocation((java.lang.String) value);
			}
			break;

		case AREA_KEY:
			if (value == null) {
				unsetAreaKey();
			}
			else {
				setAreaKey((java.lang.String) value);
			}
			break;

		case MAX_ORDER:
			if (value == null) {
				unsetMaxOrder();
			}
			else {
				setMaxOrder((java.lang.Integer) value);
			}
			break;

		case MAX_USER:
			if (value == null) {
				unsetMaxUser();
			}
			else {
				setMaxUser((java.lang.Integer) value);
			}
			break;

		case MIN_BUY:
			if (value == null) {
				unsetMinBuy();
			}
			else {
				setMinBuy((java.lang.Integer) value);
			}
			break;

		case MIN_LEVEL:
			if (value == null) {
				unsetMinLevel();
			}
			else {
				setMinLevel((java.lang.Integer) value);
			}
			break;

		case IS_MEMBER_DIS:
			if (value == null) {
				unsetIsMemberDis();
			}
			else {
				setIsMemberDis((java.lang.Boolean) value);
			}
			break;

		case IS_LIMIT_BUY:
			if (value == null) {
				unsetIsLimitBuy();
			}
			else {
				setIsLimitBuy((java.lang.Boolean) value);
			}
			break;

		case NOT_REFUND:
			if (value == null) {
				unsetNotRefund();
			}
			else {
				setNotRefund((java.lang.Boolean) value);
			}
			break;

		case WEIGHT:
			if (value == null) {
				unsetWeight();
			}
			else {
				setWeight((java.lang.Double) value);
			}
			break;

		case TRANSPORT:
			if (value == null) {
				unsetTransport();
			}
			else {
				setTransport((java.lang.Integer) value);
			}
			break;

		case TRANSPORT_FEE:
			if (value == null) {
				unsetTransportFee();
			}
			else {
				setTransportFee((java.lang.Double) value);
			}
			break;

		case FEE_BELONG:
			if (value == null) {
				unsetFeeBelong();
			}
			else {
				setFeeBelong((java.lang.String) value);
			}
			break;

		case SELL_SPU:
			if (value == null) {
				unsetSellSpu();
			}
			else {
				setSellSpu((java.lang.Integer) value);
			}
			break;

		case SCORE_NUM:
			if (value == null) {
				unsetScoreNum();
			}
			else {
				setScoreNum((java.lang.Integer) value);
			}
			break;

		case SCORE_AVG:
			if (value == null) {
				unsetScoreAvg();
			}
			else {
				setScoreAvg((java.lang.Double) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case MID:
			return getMid();

		case SID:
			return getSid();

		case UID:
			return getUid();

		case PID:
			return getPid();

		case SPU:
			return getSpu();

		case KIND:
			return getKind();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case APPLY_TIME:
			return getApplyTime();

		case EXPIRE_TIME:
			return getExpireTime();

		case SHOW_TIME:
			return getShowTime();

		case HIDE_TIME:
			return getHideTime();

		case IS_AUTO_SHOW_HIDE:
			return isIsAutoShowHide();

		case STATUS:
			return getStatus();

		case STATUS_ORDER:
			return getStatusOrder();

		case STORE_STATUS:
			return getStoreStatus();

		case CATEGORY:
			return getCategory();

		case IS_VIRTUAL:
			return isIsVirtual();

		case IS_CURRENCY:
			return isIsCurrency();

		case IS_BUNDLE:
			return isIsBundle();

		case IS_MIX:
			return isIsMix();

		case NUM_LABEL:
			return getNumLabel();

		case LABELS_DESC:
			return getLabelsDesc();

		case NAME_SPU:
			return getNameSpu();

		case ICON_SPU:
			return getIconSpu();

		case DESC_SPU:
			return getDescSpu();

		case PRIORITY:
			return getPriority();

		case IS_SEARCH:
			return isIsSearch();

		case COMMENT:
			return getComment();

		case LONGITUDE:
			return getLongitude();

		case LATITUDE:
			return getLatitude();

		case LOCATION:
			return getLocation();

		case AREA_KEY:
			return getAreaKey();

		case MAX_ORDER:
			return getMaxOrder();

		case MAX_USER:
			return getMaxUser();

		case MIN_BUY:
			return getMinBuy();

		case MIN_LEVEL:
			return getMinLevel();

		case IS_MEMBER_DIS:
			return isIsMemberDis();

		case IS_LIMIT_BUY:
			return isIsLimitBuy();

		case NOT_REFUND:
			return isNotRefund();

		case WEIGHT:
			return getWeight();

		case TRANSPORT:
			return getTransport();

		case TRANSPORT_FEE:
			return getTransportFee();

		case FEE_BELONG:
			return getFeeBelong();

		case SELL_SPU:
			return getSellSpu();

		case SCORE_NUM:
			return getScoreNum();

		case SCORE_AVG:
			return getScoreAvg();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case MID:
			return isSetMid();
		case SID:
			return isSetSid();
		case UID:
			return isSetUid();
		case PID:
			return isSetPid();
		case SPU:
			return isSetSpu();
		case KIND:
			return isSetKind();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case APPLY_TIME:
			return isSetApplyTime();
		case EXPIRE_TIME:
			return isSetExpireTime();
		case SHOW_TIME:
			return isSetShowTime();
		case HIDE_TIME:
			return isSetHideTime();
		case IS_AUTO_SHOW_HIDE:
			return isSetIsAutoShowHide();
		case STATUS:
			return isSetStatus();
		case STATUS_ORDER:
			return isSetStatusOrder();
		case STORE_STATUS:
			return isSetStoreStatus();
		case CATEGORY:
			return isSetCategory();
		case IS_VIRTUAL:
			return isSetIsVirtual();
		case IS_CURRENCY:
			return isSetIsCurrency();
		case IS_BUNDLE:
			return isSetIsBundle();
		case IS_MIX:
			return isSetIsMix();
		case NUM_LABEL:
			return isSetNumLabel();
		case LABELS_DESC:
			return isSetLabelsDesc();
		case NAME_SPU:
			return isSetNameSpu();
		case ICON_SPU:
			return isSetIconSpu();
		case DESC_SPU:
			return isSetDescSpu();
		case PRIORITY:
			return isSetPriority();
		case IS_SEARCH:
			return isSetIsSearch();
		case COMMENT:
			return isSetComment();
		case LONGITUDE:
			return isSetLongitude();
		case LATITUDE:
			return isSetLatitude();
		case LOCATION:
			return isSetLocation();
		case AREA_KEY:
			return isSetAreaKey();
		case MAX_ORDER:
			return isSetMaxOrder();
		case MAX_USER:
			return isSetMaxUser();
		case MIN_BUY:
			return isSetMinBuy();
		case MIN_LEVEL:
			return isSetMinLevel();
		case IS_MEMBER_DIS:
			return isSetIsMemberDis();
		case IS_LIMIT_BUY:
			return isSetIsLimitBuy();
		case NOT_REFUND:
			return isSetNotRefund();
		case WEIGHT:
			return isSetWeight();
		case TRANSPORT:
			return isSetTransport();
		case TRANSPORT_FEE:
			return isSetTransportFee();
		case FEE_BELONG:
			return isSetFeeBelong();
		case SELL_SPU:
			return isSetSellSpu();
		case SCORE_NUM:
			return isSetScoreNum();
		case SCORE_AVG:
			return isSetScoreAvg();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Goods)
			return this.equals((Goods) that);
		return false;
	}

	public boolean equals(Goods that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_mid = true && this.isSetMid();
		boolean that_present_mid = true && that.isSetMid();
		if (this_present_mid || that_present_mid) {
			if (!(this_present_mid && that_present_mid))
				return false;
			if (!this.mid.equals(that.mid))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_pid = true && this.isSetPid();
		boolean that_present_pid = true && that.isSetPid();
		if (this_present_pid || that_present_pid) {
			if (!(this_present_pid && that_present_pid))
				return false;
			if (!this.pid.equals(that.pid))
				return false;
		}

		boolean this_present_spu = true && this.isSetSpu();
		boolean that_present_spu = true && that.isSetSpu();
		if (this_present_spu || that_present_spu) {
			if (!(this_present_spu && that_present_spu))
				return false;
			if (!this.spu.equals(that.spu))
				return false;
		}

		boolean this_present_kind = true && this.isSetKind();
		boolean that_present_kind = true && that.isSetKind();
		if (this_present_kind || that_present_kind) {
			if (!(this_present_kind && that_present_kind))
				return false;
			if (!this.kind.equals(that.kind))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_applyTime = true && this.isSetApplyTime();
		boolean that_present_applyTime = true && that.isSetApplyTime();
		if (this_present_applyTime || that_present_applyTime) {
			if (!(this_present_applyTime && that_present_applyTime))
				return false;
			if (!this.applyTime.equals(that.applyTime))
				return false;
		}

		boolean this_present_expireTime = true && this.isSetExpireTime();
		boolean that_present_expireTime = true && that.isSetExpireTime();
		if (this_present_expireTime || that_present_expireTime) {
			if (!(this_present_expireTime && that_present_expireTime))
				return false;
			if (!this.expireTime.equals(that.expireTime))
				return false;
		}

		boolean this_present_showTime = true && this.isSetShowTime();
		boolean that_present_showTime = true && that.isSetShowTime();
		if (this_present_showTime || that_present_showTime) {
			if (!(this_present_showTime && that_present_showTime))
				return false;
			if (!this.showTime.equals(that.showTime))
				return false;
		}

		boolean this_present_hideTime = true && this.isSetHideTime();
		boolean that_present_hideTime = true && that.isSetHideTime();
		if (this_present_hideTime || that_present_hideTime) {
			if (!(this_present_hideTime && that_present_hideTime))
				return false;
			if (!this.hideTime.equals(that.hideTime))
				return false;
		}

		boolean this_present_isAutoShowHide = true;
		boolean that_present_isAutoShowHide = true;
		if (this_present_isAutoShowHide || that_present_isAutoShowHide) {
			if (!(this_present_isAutoShowHide && that_present_isAutoShowHide))
				return false;
			if (this.isAutoShowHide != that.isAutoShowHide)
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_statusOrder = true;
		boolean that_present_statusOrder = true;
		if (this_present_statusOrder || that_present_statusOrder) {
			if (!(this_present_statusOrder && that_present_statusOrder))
				return false;
			if (this.statusOrder != that.statusOrder)
				return false;
		}

		boolean this_present_storeStatus = true;
		boolean that_present_storeStatus = true;
		if (this_present_storeStatus || that_present_storeStatus) {
			if (!(this_present_storeStatus && that_present_storeStatus))
				return false;
			if (this.storeStatus != that.storeStatus)
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_isVirtual = true;
		boolean that_present_isVirtual = true;
		if (this_present_isVirtual || that_present_isVirtual) {
			if (!(this_present_isVirtual && that_present_isVirtual))
				return false;
			if (this.isVirtual != that.isVirtual)
				return false;
		}

		boolean this_present_isCurrency = true;
		boolean that_present_isCurrency = true;
		if (this_present_isCurrency || that_present_isCurrency) {
			if (!(this_present_isCurrency && that_present_isCurrency))
				return false;
			if (this.isCurrency != that.isCurrency)
				return false;
		}

		boolean this_present_isBundle = true;
		boolean that_present_isBundle = true;
		if (this_present_isBundle || that_present_isBundle) {
			if (!(this_present_isBundle && that_present_isBundle))
				return false;
			if (this.isBundle != that.isBundle)
				return false;
		}

		boolean this_present_isMix = true;
		boolean that_present_isMix = true;
		if (this_present_isMix || that_present_isMix) {
			if (!(this_present_isMix && that_present_isMix))
				return false;
			if (this.isMix != that.isMix)
				return false;
		}

		boolean this_present_numLabel = true;
		boolean that_present_numLabel = true;
		if (this_present_numLabel || that_present_numLabel) {
			if (!(this_present_numLabel && that_present_numLabel))
				return false;
			if (this.numLabel != that.numLabel)
				return false;
		}

		boolean this_present_labelsDesc = true && this.isSetLabelsDesc();
		boolean that_present_labelsDesc = true && that.isSetLabelsDesc();
		if (this_present_labelsDesc || that_present_labelsDesc) {
			if (!(this_present_labelsDesc && that_present_labelsDesc))
				return false;
			if (!this.labelsDesc.equals(that.labelsDesc))
				return false;
		}

		boolean this_present_nameSpu = true && this.isSetNameSpu();
		boolean that_present_nameSpu = true && that.isSetNameSpu();
		if (this_present_nameSpu || that_present_nameSpu) {
			if (!(this_present_nameSpu && that_present_nameSpu))
				return false;
			if (!this.nameSpu.equals(that.nameSpu))
				return false;
		}

		boolean this_present_iconSpu = true && this.isSetIconSpu();
		boolean that_present_iconSpu = true && that.isSetIconSpu();
		if (this_present_iconSpu || that_present_iconSpu) {
			if (!(this_present_iconSpu && that_present_iconSpu))
				return false;
			if (!this.iconSpu.equals(that.iconSpu))
				return false;
		}

		boolean this_present_descSpu = true && this.isSetDescSpu();
		boolean that_present_descSpu = true && that.isSetDescSpu();
		if (this_present_descSpu || that_present_descSpu) {
			if (!(this_present_descSpu && that_present_descSpu))
				return false;
			if (!this.descSpu.equals(that.descSpu))
				return false;
		}

		boolean this_present_priority = true;
		boolean that_present_priority = true;
		if (this_present_priority || that_present_priority) {
			if (!(this_present_priority && that_present_priority))
				return false;
			if (this.priority != that.priority)
				return false;
		}

		boolean this_present_isSearch = true;
		boolean that_present_isSearch = true;
		if (this_present_isSearch || that_present_isSearch) {
			if (!(this_present_isSearch && that_present_isSearch))
				return false;
			if (this.isSearch != that.isSearch)
				return false;
		}

		boolean this_present_comment = true && this.isSetComment();
		boolean that_present_comment = true && that.isSetComment();
		if (this_present_comment || that_present_comment) {
			if (!(this_present_comment && that_present_comment))
				return false;
			if (!this.comment.equals(that.comment))
				return false;
		}

		boolean this_present_longitude = true;
		boolean that_present_longitude = true;
		if (this_present_longitude || that_present_longitude) {
			if (!(this_present_longitude && that_present_longitude))
				return false;
			if (this.longitude != that.longitude)
				return false;
		}

		boolean this_present_latitude = true;
		boolean that_present_latitude = true;
		if (this_present_latitude || that_present_latitude) {
			if (!(this_present_latitude && that_present_latitude))
				return false;
			if (this.latitude != that.latitude)
				return false;
		}

		boolean this_present_location = true && this.isSetLocation();
		boolean that_present_location = true && that.isSetLocation();
		if (this_present_location || that_present_location) {
			if (!(this_present_location && that_present_location))
				return false;
			if (!this.location.equals(that.location))
				return false;
		}

		boolean this_present_areaKey = true && this.isSetAreaKey();
		boolean that_present_areaKey = true && that.isSetAreaKey();
		if (this_present_areaKey || that_present_areaKey) {
			if (!(this_present_areaKey && that_present_areaKey))
				return false;
			if (!this.areaKey.equals(that.areaKey))
				return false;
		}

		boolean this_present_maxOrder = true;
		boolean that_present_maxOrder = true;
		if (this_present_maxOrder || that_present_maxOrder) {
			if (!(this_present_maxOrder && that_present_maxOrder))
				return false;
			if (this.maxOrder != that.maxOrder)
				return false;
		}

		boolean this_present_maxUser = true;
		boolean that_present_maxUser = true;
		if (this_present_maxUser || that_present_maxUser) {
			if (!(this_present_maxUser && that_present_maxUser))
				return false;
			if (this.maxUser != that.maxUser)
				return false;
		}

		boolean this_present_minBuy = true;
		boolean that_present_minBuy = true;
		if (this_present_minBuy || that_present_minBuy) {
			if (!(this_present_minBuy && that_present_minBuy))
				return false;
			if (this.minBuy != that.minBuy)
				return false;
		}

		boolean this_present_minLevel = true;
		boolean that_present_minLevel = true;
		if (this_present_minLevel || that_present_minLevel) {
			if (!(this_present_minLevel && that_present_minLevel))
				return false;
			if (this.minLevel != that.minLevel)
				return false;
		}

		boolean this_present_isMemberDis = true;
		boolean that_present_isMemberDis = true;
		if (this_present_isMemberDis || that_present_isMemberDis) {
			if (!(this_present_isMemberDis && that_present_isMemberDis))
				return false;
			if (this.isMemberDis != that.isMemberDis)
				return false;
		}

		boolean this_present_isLimitBuy = true;
		boolean that_present_isLimitBuy = true;
		if (this_present_isLimitBuy || that_present_isLimitBuy) {
			if (!(this_present_isLimitBuy && that_present_isLimitBuy))
				return false;
			if (this.isLimitBuy != that.isLimitBuy)
				return false;
		}

		boolean this_present_notRefund = true;
		boolean that_present_notRefund = true;
		if (this_present_notRefund || that_present_notRefund) {
			if (!(this_present_notRefund && that_present_notRefund))
				return false;
			if (this.notRefund != that.notRefund)
				return false;
		}

		boolean this_present_weight = true;
		boolean that_present_weight = true;
		if (this_present_weight || that_present_weight) {
			if (!(this_present_weight && that_present_weight))
				return false;
			if (this.weight != that.weight)
				return false;
		}

		boolean this_present_transport = true;
		boolean that_present_transport = true;
		if (this_present_transport || that_present_transport) {
			if (!(this_present_transport && that_present_transport))
				return false;
			if (this.transport != that.transport)
				return false;
		}

		boolean this_present_transportFee = true;
		boolean that_present_transportFee = true;
		if (this_present_transportFee || that_present_transportFee) {
			if (!(this_present_transportFee && that_present_transportFee))
				return false;
			if (this.transportFee != that.transportFee)
				return false;
		}

		boolean this_present_feeBelong = true && this.isSetFeeBelong();
		boolean that_present_feeBelong = true && that.isSetFeeBelong();
		if (this_present_feeBelong || that_present_feeBelong) {
			if (!(this_present_feeBelong && that_present_feeBelong))
				return false;
			if (!this.feeBelong.equals(that.feeBelong))
				return false;
		}

		boolean this_present_sellSpu = true;
		boolean that_present_sellSpu = true;
		if (this_present_sellSpu || that_present_sellSpu) {
			if (!(this_present_sellSpu && that_present_sellSpu))
				return false;
			if (this.sellSpu != that.sellSpu)
				return false;
		}

		boolean this_present_scoreNum = true;
		boolean that_present_scoreNum = true;
		if (this_present_scoreNum || that_present_scoreNum) {
			if (!(this_present_scoreNum && that_present_scoreNum))
				return false;
			if (this.scoreNum != that.scoreNum)
				return false;
		}

		boolean this_present_scoreAvg = true;
		boolean that_present_scoreAvg = true;
		if (this_present_scoreAvg || that_present_scoreAvg) {
			if (!(this_present_scoreAvg && that_present_scoreAvg))
				return false;
			if (this.scoreAvg != that.scoreAvg)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
		if (isSetMid())
			hashCode = hashCode * 8191 + mid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetPid()) ? 131071 : 524287);
		if (isSetPid())
			hashCode = hashCode * 8191 + pid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSpu()) ? 131071 : 524287);
		if (isSetSpu())
			hashCode = hashCode * 8191 + spu.hashCode();

		hashCode = hashCode * 8191 + ((isSetKind()) ? 131071 : 524287);
		if (isSetKind())
			hashCode = hashCode * 8191 + kind.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetApplyTime()) ? 131071 : 524287);
		if (isSetApplyTime())
			hashCode = hashCode * 8191 + applyTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTime()) ? 131071 : 524287);
		if (isSetExpireTime())
			hashCode = hashCode * 8191 + expireTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetShowTime()) ? 131071 : 524287);
		if (isSetShowTime())
			hashCode = hashCode * 8191 + showTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetHideTime()) ? 131071 : 524287);
		if (isSetHideTime())
			hashCode = hashCode * 8191 + hideTime.hashCode();

		hashCode = hashCode * 8191 + ((isAutoShowHide) ? 131071 : 524287);

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + statusOrder;

		hashCode = hashCode * 8191 + storeStatus;

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + ((isVirtual) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isCurrency) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isBundle) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isMix) ? 131071 : 524287);

		hashCode = hashCode * 8191 + numLabel;

		hashCode = hashCode * 8191 + ((isSetLabelsDesc()) ? 131071 : 524287);
		if (isSetLabelsDesc())
			hashCode = hashCode * 8191 + labelsDesc.hashCode();

		hashCode = hashCode * 8191 + ((isSetNameSpu()) ? 131071 : 524287);
		if (isSetNameSpu())
			hashCode = hashCode * 8191 + nameSpu.hashCode();

		hashCode = hashCode * 8191 + ((isSetIconSpu()) ? 131071 : 524287);
		if (isSetIconSpu())
			hashCode = hashCode * 8191 + iconSpu.hashCode();

		hashCode = hashCode * 8191 + ((isSetDescSpu()) ? 131071 : 524287);
		if (isSetDescSpu())
			hashCode = hashCode * 8191 + descSpu.hashCode();

		hashCode = hashCode * 8191 + priority;

		hashCode = hashCode * 8191 + ((isSearch) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
		if (isSetComment())
			hashCode = hashCode * 8191 + comment.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(longitude);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(latitude);

		hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
		if (isSetLocation())
			hashCode = hashCode * 8191 + location.hashCode();

		hashCode = hashCode * 8191 + ((isSetAreaKey()) ? 131071 : 524287);
		if (isSetAreaKey())
			hashCode = hashCode * 8191 + areaKey.hashCode();

		hashCode = hashCode * 8191 + maxOrder;

		hashCode = hashCode * 8191 + maxUser;

		hashCode = hashCode * 8191 + minBuy;

		hashCode = hashCode * 8191 + minLevel;

		hashCode = hashCode * 8191 + ((isMemberDis) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isLimitBuy) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((notRefund) ? 131071 : 524287);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(weight);

		hashCode = hashCode * 8191 + transport;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transportFee);

		hashCode = hashCode * 8191 + ((isSetFeeBelong()) ? 131071 : 524287);
		if (isSetFeeBelong())
			hashCode = hashCode * 8191 + feeBelong.hashCode();

		hashCode = hashCode * 8191 + sellSpu;

		hashCode = hashCode * 8191 + scoreNum;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scoreAvg);

		return hashCode;
	}

	@Override
	public int compareTo(Goods other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSpu()).compareTo(other.isSetSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spu, other.spu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetKind()).compareTo(other.isSetKind());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetKind()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kind, other.kind);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetApplyTime()).compareTo(other.isSetApplyTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApplyTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTime, other.applyTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetShowTime()).compareTo(other.isSetShowTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetShowTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showTime, other.showTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetHideTime()).compareTo(other.isSetHideTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetHideTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hideTime, other.hideTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsAutoShowHide()).compareTo(other.isSetIsAutoShowHide());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsAutoShowHide()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAutoShowHide, other.isAutoShowHide);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusOrder()).compareTo(other.isSetStatusOrder());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusOrder()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusOrder, other.statusOrder);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStoreStatus()).compareTo(other.isSetStoreStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStoreStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeStatus, other.storeStatus);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsVirtual()).compareTo(other.isSetIsVirtual());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsVirtual()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVirtual, other.isVirtual);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsCurrency()).compareTo(other.isSetIsCurrency());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsCurrency()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCurrency, other.isCurrency);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsBundle()).compareTo(other.isSetIsBundle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsBundle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBundle, other.isBundle);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsMix()).compareTo(other.isSetIsMix());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsMix()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMix, other.isMix);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumLabel()).compareTo(other.isSetNumLabel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumLabel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numLabel, other.numLabel);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLabelsDesc()).compareTo(other.isSetLabelsDesc());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLabelsDesc()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labelsDesc, other.labelsDesc);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNameSpu()).compareTo(other.isSetNameSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNameSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSpu, other.nameSpu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIconSpu()).compareTo(other.isSetIconSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIconSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconSpu, other.iconSpu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDescSpu()).compareTo(other.isSetDescSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDescSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descSpu, other.descSpu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriority()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsSearch()).compareTo(other.isSetIsSearch());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsSearch()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSearch, other.isSearch);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLongitude()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLatitude()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLocation()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAreaKey()).compareTo(other.isSetAreaKey());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAreaKey()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaKey, other.areaKey);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMaxOrder()).compareTo(other.isSetMaxOrder());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMaxOrder()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxOrder, other.maxOrder);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMaxUser()).compareTo(other.isSetMaxUser());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMaxUser()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxUser, other.maxUser);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMinBuy()).compareTo(other.isSetMinBuy());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMinBuy()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minBuy, other.minBuy);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMinLevel()).compareTo(other.isSetMinLevel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMinLevel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minLevel, other.minLevel);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsMemberDis()).compareTo(other.isSetIsMemberDis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsMemberDis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMemberDis, other.isMemberDis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsLimitBuy()).compareTo(other.isSetIsLimitBuy());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsLimitBuy()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLimitBuy, other.isLimitBuy);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNotRefund()).compareTo(other.isSetNotRefund());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNotRefund()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notRefund, other.notRefund);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWeight()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTransport()).compareTo(other.isSetTransport());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransport()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transport, other.transport);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTransportFee()).compareTo(other.isSetTransportFee());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransportFee()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transportFee, other.transportFee);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFeeBelong()).compareTo(other.isSetFeeBelong());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFeeBelong()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeBelong, other.feeBelong);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSellSpu()).compareTo(other.isSetSellSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSellSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellSpu, other.sellSpu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetScoreNum()).compareTo(other.isSetScoreNum());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetScoreNum()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scoreNum, other.scoreNum);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetScoreAvg()).compareTo(other.isSetScoreAvg());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetScoreAvg()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scoreAvg, other.scoreAvg);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Goods(");
		boolean first = true;

		sb.append("mid:");
		if (this.mid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.mid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("pid:");
		if (this.pid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.pid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("spu:");
		if (this.spu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.spu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("kind:");
		if (this.kind == null) {
			sb.append("null");
		}
		else {
			sb.append(this.kind);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("applyTime:");
		if (this.applyTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.applyTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("expireTime:");
		if (this.expireTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.expireTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("showTime:");
		if (this.showTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.showTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("hideTime:");
		if (this.hideTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.hideTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isAutoShowHide:");
		sb.append(this.isAutoShowHide);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("statusOrder:");
		sb.append(this.statusOrder);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("storeStatus:");
		sb.append(this.storeStatus);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isVirtual:");
		sb.append(this.isVirtual);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isCurrency:");
		sb.append(this.isCurrency);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isBundle:");
		sb.append(this.isBundle);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isMix:");
		sb.append(this.isMix);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numLabel:");
		sb.append(this.numLabel);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("labelsDesc:");
		if (this.labelsDesc == null) {
			sb.append("null");
		}
		else {
			sb.append(this.labelsDesc);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("nameSpu:");
		if (this.nameSpu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.nameSpu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("iconSpu:");
		if (this.iconSpu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.iconSpu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("descSpu:");
		if (this.descSpu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.descSpu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priority:");
		sb.append(this.priority);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isSearch:");
		sb.append(this.isSearch);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("comment:");
		if (this.comment == null) {
			sb.append("null");
		}
		else {
			sb.append(this.comment);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("longitude:");
		sb.append(this.longitude);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("latitude:");
		sb.append(this.latitude);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("location:");
		if (this.location == null) {
			sb.append("null");
		}
		else {
			sb.append(this.location);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("areaKey:");
		if (this.areaKey == null) {
			sb.append("null");
		}
		else {
			sb.append(this.areaKey);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("maxOrder:");
		sb.append(this.maxOrder);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("maxUser:");
		sb.append(this.maxUser);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("minBuy:");
		sb.append(this.minBuy);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("minLevel:");
		sb.append(this.minLevel);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isMemberDis:");
		sb.append(this.isMemberDis);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isLimitBuy:");
		sb.append(this.isLimitBuy);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("notRefund:");
		sb.append(this.notRefund);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("weight:");
		sb.append(this.weight);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("transport:");
		sb.append(this.transport);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("transportFee:");
		sb.append(this.transportFee);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("feeBelong:");
		if (this.feeBelong == null) {
			sb.append("null");
		}
		else {
			sb.append(this.feeBelong);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sellSpu:");
		sb.append(this.sellSpu);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("scoreNum:");
		sb.append(this.scoreNum);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("scoreAvg:");
		sb.append(this.scoreAvg);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class GoodsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public GoodsStandardScheme getScheme() {
			return new GoodsStandardScheme();
		}

	}

	private static class GoodsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Goods> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Goods struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // MID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mid = iprot.readString();
						struct.setMidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // PID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.pid = iprot.readString();
						struct.setPidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.spu = iprot.readString();
						struct.setSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 28: // KIND
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.kind = iprot.readString();
						struct.setKindIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // APPLY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.applyTime = iprot.readString();
						struct.setApplyTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // EXPIRE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTime = iprot.readString();
						struct.setExpireTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 31: // SHOW_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.showTime = iprot.readString();
						struct.setShowTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 32: // HIDE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.hideTime = iprot.readString();
						struct.setHideTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 33: // IS_AUTO_SHOW_HIDE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isAutoShowHide = iprot.readBool();
						struct.setIsAutoShowHideIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 29: // STATUS_ORDER
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusOrder = iprot.readI32();
						struct.setStatusOrderIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 30: // STORE_STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.storeStatus = iprot.readI32();
						struct.setStoreStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // IS_VIRTUAL
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isVirtual = iprot.readBool();
						struct.setIsVirtualIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // IS_CURRENCY
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isCurrency = iprot.readBool();
						struct.setIsCurrencyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // IS_BUNDLE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isBundle = iprot.readBool();
						struct.setIsBundleIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // IS_MIX
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isMix = iprot.readBool();
						struct.setIsMixIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // NUM_LABEL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numLabel = iprot.readI32();
						struct.setNumLabelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 24: // LABELS_DESC
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
							struct.labelsDesc = new java.util.ArrayList<java.lang.String>(_list0.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _elem1;
							for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
								_elem1 = iprot.readString();
								struct.labelsDesc.add(_elem1);
							}
							iprot.readListEnd();
						}
						struct.setLabelsDescIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // NAME_SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nameSpu = iprot.readString();
						struct.setNameSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // ICON_SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.iconSpu = iprot.readString();
						struct.setIconSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // DESC_SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.descSpu = iprot.readString();
						struct.setDescSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // PRIORITY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.priority = iprot.readI32();
						struct.setPriorityIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // IS_SEARCH
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isSearch = iprot.readBool();
						struct.setIsSearchIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 34: // COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.comment = iprot.readString();
						struct.setCommentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 44: // LONGITUDE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.longitude = iprot.readDouble();
						struct.setLongitudeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 45: // LATITUDE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.latitude = iprot.readDouble();
						struct.setLatitudeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 46: // LOCATION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.location = iprot.readString();
						struct.setLocationIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 47: // AREA_KEY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.areaKey = iprot.readString();
						struct.setAreaKeyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // MAX_ORDER
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.maxOrder = iprot.readI32();
						struct.setMaxOrderIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // MAX_USER
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.maxUser = iprot.readI32();
						struct.setMaxUserIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 35: // MIN_BUY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.minBuy = iprot.readI32();
						struct.setMinBuyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 36: // MIN_LEVEL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.minLevel = iprot.readI32();
						struct.setMinLevelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 37: // IS_MEMBER_DIS
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isMemberDis = iprot.readBool();
						struct.setIsMemberDisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 38: // IS_LIMIT_BUY
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isLimitBuy = iprot.readBool();
						struct.setIsLimitBuyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 39: // NOT_REFUND
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.notRefund = iprot.readBool();
						struct.setNotRefundIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 40: // WEIGHT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.weight = iprot.readDouble();
						struct.setWeightIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 41: // TRANSPORT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.transport = iprot.readI32();
						struct.setTransportIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 42: // TRANSPORT_FEE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.transportFee = iprot.readDouble();
						struct.setTransportFeeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 43: // FEE_BELONG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.feeBelong = iprot.readString();
						struct.setFeeBelongIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 25: // SELL_SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.sellSpu = iprot.readI32();
						struct.setSellSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 26: // SCORE_NUM
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.scoreNum = iprot.readI32();
						struct.setScoreNumIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 27: // SCORE_AVG
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.scoreAvg = iprot.readDouble();
						struct.setScoreAvgIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Goods struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.mid != null) {
				oprot.writeFieldBegin(MID_FIELD_DESC);
				oprot.writeString(struct.mid);
				oprot.writeFieldEnd();
			}
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.pid != null) {
				oprot.writeFieldBegin(PID_FIELD_DESC);
				oprot.writeString(struct.pid);
				oprot.writeFieldEnd();
			}
			if (struct.spu != null) {
				oprot.writeFieldBegin(SPU_FIELD_DESC);
				oprot.writeString(struct.spu);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			if (struct.applyTime != null) {
				oprot.writeFieldBegin(APPLY_TIME_FIELD_DESC);
				oprot.writeString(struct.applyTime);
				oprot.writeFieldEnd();
			}
			if (struct.expireTime != null) {
				oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
				oprot.writeString(struct.expireTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_VIRTUAL_FIELD_DESC);
			oprot.writeBool(struct.isVirtual);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_CURRENCY_FIELD_DESC);
			oprot.writeBool(struct.isCurrency);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_BUNDLE_FIELD_DESC);
			oprot.writeBool(struct.isBundle);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_MIX_FIELD_DESC);
			oprot.writeBool(struct.isMix);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_LABEL_FIELD_DESC);
			oprot.writeI32(struct.numLabel);
			oprot.writeFieldEnd();
			if (struct.nameSpu != null) {
				oprot.writeFieldBegin(NAME_SPU_FIELD_DESC);
				oprot.writeString(struct.nameSpu);
				oprot.writeFieldEnd();
			}
			if (struct.iconSpu != null) {
				oprot.writeFieldBegin(ICON_SPU_FIELD_DESC);
				oprot.writeString(struct.iconSpu);
				oprot.writeFieldEnd();
			}
			if (struct.descSpu != null) {
				oprot.writeFieldBegin(DESC_SPU_FIELD_DESC);
				oprot.writeString(struct.descSpu);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
			oprot.writeI32(struct.priority);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_SEARCH_FIELD_DESC);
			oprot.writeBool(struct.isSearch);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MAX_ORDER_FIELD_DESC);
			oprot.writeI32(struct.maxOrder);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MAX_USER_FIELD_DESC);
			oprot.writeI32(struct.maxUser);
			oprot.writeFieldEnd();
			if (struct.labelsDesc != null) {
				oprot.writeFieldBegin(LABELS_DESC_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,
							struct.labelsDesc.size()));
					for (java.lang.String _iter3 : struct.labelsDesc) {
						oprot.writeString(_iter3);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(SELL_SPU_FIELD_DESC);
			oprot.writeI32(struct.sellSpu);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SCORE_NUM_FIELD_DESC);
			oprot.writeI32(struct.scoreNum);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(SCORE_AVG_FIELD_DESC);
			oprot.writeDouble(struct.scoreAvg);
			oprot.writeFieldEnd();
			if (struct.kind != null) {
				oprot.writeFieldBegin(KIND_FIELD_DESC);
				oprot.writeString(struct.kind);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_ORDER_FIELD_DESC);
			oprot.writeI32(struct.statusOrder);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STORE_STATUS_FIELD_DESC);
			oprot.writeI32(struct.storeStatus);
			oprot.writeFieldEnd();
			if (struct.showTime != null) {
				oprot.writeFieldBegin(SHOW_TIME_FIELD_DESC);
				oprot.writeString(struct.showTime);
				oprot.writeFieldEnd();
			}
			if (struct.hideTime != null) {
				oprot.writeFieldBegin(HIDE_TIME_FIELD_DESC);
				oprot.writeString(struct.hideTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_AUTO_SHOW_HIDE_FIELD_DESC);
			oprot.writeBool(struct.isAutoShowHide);
			oprot.writeFieldEnd();
			if (struct.comment != null) {
				oprot.writeFieldBegin(COMMENT_FIELD_DESC);
				oprot.writeString(struct.comment);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(MIN_BUY_FIELD_DESC);
			oprot.writeI32(struct.minBuy);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(MIN_LEVEL_FIELD_DESC);
			oprot.writeI32(struct.minLevel);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_MEMBER_DIS_FIELD_DESC);
			oprot.writeBool(struct.isMemberDis);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_LIMIT_BUY_FIELD_DESC);
			oprot.writeBool(struct.isLimitBuy);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NOT_REFUND_FIELD_DESC);
			oprot.writeBool(struct.notRefund);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
			oprot.writeDouble(struct.weight);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(TRANSPORT_FIELD_DESC);
			oprot.writeI32(struct.transport);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(TRANSPORT_FEE_FIELD_DESC);
			oprot.writeDouble(struct.transportFee);
			oprot.writeFieldEnd();
			if (struct.feeBelong != null) {
				oprot.writeFieldBegin(FEE_BELONG_FIELD_DESC);
				oprot.writeString(struct.feeBelong);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
			oprot.writeDouble(struct.longitude);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
			oprot.writeDouble(struct.latitude);
			oprot.writeFieldEnd();
			if (struct.location != null) {
				oprot.writeFieldBegin(LOCATION_FIELD_DESC);
				oprot.writeString(struct.location);
				oprot.writeFieldEnd();
			}
			if (struct.areaKey != null) {
				oprot.writeFieldBegin(AREA_KEY_FIELD_DESC);
				oprot.writeString(struct.areaKey);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class GoodsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public GoodsTupleScheme getScheme() {
			return new GoodsTupleScheme();
		}

	}

	private static class GoodsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Goods> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Goods struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetMid()) {
				optionals.set(0);
			}
			if (struct.isSetSid()) {
				optionals.set(1);
			}
			if (struct.isSetUid()) {
				optionals.set(2);
			}
			if (struct.isSetPid()) {
				optionals.set(3);
			}
			if (struct.isSetSpu()) {
				optionals.set(4);
			}
			if (struct.isSetKind()) {
				optionals.set(5);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(6);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(7);
			}
			if (struct.isSetApplyTime()) {
				optionals.set(8);
			}
			if (struct.isSetExpireTime()) {
				optionals.set(9);
			}
			if (struct.isSetShowTime()) {
				optionals.set(10);
			}
			if (struct.isSetHideTime()) {
				optionals.set(11);
			}
			if (struct.isSetIsAutoShowHide()) {
				optionals.set(12);
			}
			if (struct.isSetStatus()) {
				optionals.set(13);
			}
			if (struct.isSetStatusOrder()) {
				optionals.set(14);
			}
			if (struct.isSetStoreStatus()) {
				optionals.set(15);
			}
			if (struct.isSetCategory()) {
				optionals.set(16);
			}
			if (struct.isSetIsVirtual()) {
				optionals.set(17);
			}
			if (struct.isSetIsCurrency()) {
				optionals.set(18);
			}
			if (struct.isSetIsBundle()) {
				optionals.set(19);
			}
			if (struct.isSetIsMix()) {
				optionals.set(20);
			}
			if (struct.isSetNumLabel()) {
				optionals.set(21);
			}
			if (struct.isSetLabelsDesc()) {
				optionals.set(22);
			}
			if (struct.isSetNameSpu()) {
				optionals.set(23);
			}
			if (struct.isSetIconSpu()) {
				optionals.set(24);
			}
			if (struct.isSetDescSpu()) {
				optionals.set(25);
			}
			if (struct.isSetPriority()) {
				optionals.set(26);
			}
			if (struct.isSetIsSearch()) {
				optionals.set(27);
			}
			if (struct.isSetComment()) {
				optionals.set(28);
			}
			if (struct.isSetLongitude()) {
				optionals.set(29);
			}
			if (struct.isSetLatitude()) {
				optionals.set(30);
			}
			if (struct.isSetLocation()) {
				optionals.set(31);
			}
			if (struct.isSetAreaKey()) {
				optionals.set(32);
			}
			if (struct.isSetMaxOrder()) {
				optionals.set(33);
			}
			if (struct.isSetMaxUser()) {
				optionals.set(34);
			}
			if (struct.isSetMinBuy()) {
				optionals.set(35);
			}
			if (struct.isSetMinLevel()) {
				optionals.set(36);
			}
			if (struct.isSetIsMemberDis()) {
				optionals.set(37);
			}
			if (struct.isSetIsLimitBuy()) {
				optionals.set(38);
			}
			if (struct.isSetNotRefund()) {
				optionals.set(39);
			}
			if (struct.isSetWeight()) {
				optionals.set(40);
			}
			if (struct.isSetTransport()) {
				optionals.set(41);
			}
			if (struct.isSetTransportFee()) {
				optionals.set(42);
			}
			if (struct.isSetFeeBelong()) {
				optionals.set(43);
			}
			if (struct.isSetSellSpu()) {
				optionals.set(44);
			}
			if (struct.isSetScoreNum()) {
				optionals.set(45);
			}
			if (struct.isSetScoreAvg()) {
				optionals.set(46);
			}
			oprot.writeBitSet(optionals, 47);
			if (struct.isSetMid()) {
				oprot.writeString(struct.mid);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetPid()) {
				oprot.writeString(struct.pid);
			}
			if (struct.isSetSpu()) {
				oprot.writeString(struct.spu);
			}
			if (struct.isSetKind()) {
				oprot.writeString(struct.kind);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetApplyTime()) {
				oprot.writeString(struct.applyTime);
			}
			if (struct.isSetExpireTime()) {
				oprot.writeString(struct.expireTime);
			}
			if (struct.isSetShowTime()) {
				oprot.writeString(struct.showTime);
			}
			if (struct.isSetHideTime()) {
				oprot.writeString(struct.hideTime);
			}
			if (struct.isSetIsAutoShowHide()) {
				oprot.writeBool(struct.isAutoShowHide);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetStatusOrder()) {
				oprot.writeI32(struct.statusOrder);
			}
			if (struct.isSetStoreStatus()) {
				oprot.writeI32(struct.storeStatus);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetIsVirtual()) {
				oprot.writeBool(struct.isVirtual);
			}
			if (struct.isSetIsCurrency()) {
				oprot.writeBool(struct.isCurrency);
			}
			if (struct.isSetIsBundle()) {
				oprot.writeBool(struct.isBundle);
			}
			if (struct.isSetIsMix()) {
				oprot.writeBool(struct.isMix);
			}
			if (struct.isSetNumLabel()) {
				oprot.writeI32(struct.numLabel);
			}
			if (struct.isSetLabelsDesc()) {
				{
					oprot.writeI32(struct.labelsDesc.size());
					for (java.lang.String _iter4 : struct.labelsDesc) {
						oprot.writeString(_iter4);
					}
				}
			}
			if (struct.isSetNameSpu()) {
				oprot.writeString(struct.nameSpu);
			}
			if (struct.isSetIconSpu()) {
				oprot.writeString(struct.iconSpu);
			}
			if (struct.isSetDescSpu()) {
				oprot.writeString(struct.descSpu);
			}
			if (struct.isSetPriority()) {
				oprot.writeI32(struct.priority);
			}
			if (struct.isSetIsSearch()) {
				oprot.writeBool(struct.isSearch);
			}
			if (struct.isSetComment()) {
				oprot.writeString(struct.comment);
			}
			if (struct.isSetLongitude()) {
				oprot.writeDouble(struct.longitude);
			}
			if (struct.isSetLatitude()) {
				oprot.writeDouble(struct.latitude);
			}
			if (struct.isSetLocation()) {
				oprot.writeString(struct.location);
			}
			if (struct.isSetAreaKey()) {
				oprot.writeString(struct.areaKey);
			}
			if (struct.isSetMaxOrder()) {
				oprot.writeI32(struct.maxOrder);
			}
			if (struct.isSetMaxUser()) {
				oprot.writeI32(struct.maxUser);
			}
			if (struct.isSetMinBuy()) {
				oprot.writeI32(struct.minBuy);
			}
			if (struct.isSetMinLevel()) {
				oprot.writeI32(struct.minLevel);
			}
			if (struct.isSetIsMemberDis()) {
				oprot.writeBool(struct.isMemberDis);
			}
			if (struct.isSetIsLimitBuy()) {
				oprot.writeBool(struct.isLimitBuy);
			}
			if (struct.isSetNotRefund()) {
				oprot.writeBool(struct.notRefund);
			}
			if (struct.isSetWeight()) {
				oprot.writeDouble(struct.weight);
			}
			if (struct.isSetTransport()) {
				oprot.writeI32(struct.transport);
			}
			if (struct.isSetTransportFee()) {
				oprot.writeDouble(struct.transportFee);
			}
			if (struct.isSetFeeBelong()) {
				oprot.writeString(struct.feeBelong);
			}
			if (struct.isSetSellSpu()) {
				oprot.writeI32(struct.sellSpu);
			}
			if (struct.isSetScoreNum()) {
				oprot.writeI32(struct.scoreNum);
			}
			if (struct.isSetScoreAvg()) {
				oprot.writeDouble(struct.scoreAvg);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Goods struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(47);
			if (incoming.get(0)) {
				struct.mid = iprot.readString();
				struct.setMidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.pid = iprot.readString();
				struct.setPidIsSet(true);
			}
			if (incoming.get(4)) {
				struct.spu = iprot.readString();
				struct.setSpuIsSet(true);
			}
			if (incoming.get(5)) {
				struct.kind = iprot.readString();
				struct.setKindIsSet(true);
			}
			if (incoming.get(6)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.applyTime = iprot.readString();
				struct.setApplyTimeIsSet(true);
			}
			if (incoming.get(9)) {
				struct.expireTime = iprot.readString();
				struct.setExpireTimeIsSet(true);
			}
			if (incoming.get(10)) {
				struct.showTime = iprot.readString();
				struct.setShowTimeIsSet(true);
			}
			if (incoming.get(11)) {
				struct.hideTime = iprot.readString();
				struct.setHideTimeIsSet(true);
			}
			if (incoming.get(12)) {
				struct.isAutoShowHide = iprot.readBool();
				struct.setIsAutoShowHideIsSet(true);
			}
			if (incoming.get(13)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(14)) {
				struct.statusOrder = iprot.readI32();
				struct.setStatusOrderIsSet(true);
			}
			if (incoming.get(15)) {
				struct.storeStatus = iprot.readI32();
				struct.setStoreStatusIsSet(true);
			}
			if (incoming.get(16)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(17)) {
				struct.isVirtual = iprot.readBool();
				struct.setIsVirtualIsSet(true);
			}
			if (incoming.get(18)) {
				struct.isCurrency = iprot.readBool();
				struct.setIsCurrencyIsSet(true);
			}
			if (incoming.get(19)) {
				struct.isBundle = iprot.readBool();
				struct.setIsBundleIsSet(true);
			}
			if (incoming.get(20)) {
				struct.isMix = iprot.readBool();
				struct.setIsMixIsSet(true);
			}
			if (incoming.get(21)) {
				struct.numLabel = iprot.readI32();
				struct.setNumLabelIsSet(true);
			}
			if (incoming.get(22)) {
				{
					org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.labelsDesc = new java.util.ArrayList<java.lang.String>(_list5.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _elem6;
					for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
						_elem6 = iprot.readString();
						struct.labelsDesc.add(_elem6);
					}
				}
				struct.setLabelsDescIsSet(true);
			}
			if (incoming.get(23)) {
				struct.nameSpu = iprot.readString();
				struct.setNameSpuIsSet(true);
			}
			if (incoming.get(24)) {
				struct.iconSpu = iprot.readString();
				struct.setIconSpuIsSet(true);
			}
			if (incoming.get(25)) {
				struct.descSpu = iprot.readString();
				struct.setDescSpuIsSet(true);
			}
			if (incoming.get(26)) {
				struct.priority = iprot.readI32();
				struct.setPriorityIsSet(true);
			}
			if (incoming.get(27)) {
				struct.isSearch = iprot.readBool();
				struct.setIsSearchIsSet(true);
			}
			if (incoming.get(28)) {
				struct.comment = iprot.readString();
				struct.setCommentIsSet(true);
			}
			if (incoming.get(29)) {
				struct.longitude = iprot.readDouble();
				struct.setLongitudeIsSet(true);
			}
			if (incoming.get(30)) {
				struct.latitude = iprot.readDouble();
				struct.setLatitudeIsSet(true);
			}
			if (incoming.get(31)) {
				struct.location = iprot.readString();
				struct.setLocationIsSet(true);
			}
			if (incoming.get(32)) {
				struct.areaKey = iprot.readString();
				struct.setAreaKeyIsSet(true);
			}
			if (incoming.get(33)) {
				struct.maxOrder = iprot.readI32();
				struct.setMaxOrderIsSet(true);
			}
			if (incoming.get(34)) {
				struct.maxUser = iprot.readI32();
				struct.setMaxUserIsSet(true);
			}
			if (incoming.get(35)) {
				struct.minBuy = iprot.readI32();
				struct.setMinBuyIsSet(true);
			}
			if (incoming.get(36)) {
				struct.minLevel = iprot.readI32();
				struct.setMinLevelIsSet(true);
			}
			if (incoming.get(37)) {
				struct.isMemberDis = iprot.readBool();
				struct.setIsMemberDisIsSet(true);
			}
			if (incoming.get(38)) {
				struct.isLimitBuy = iprot.readBool();
				struct.setIsLimitBuyIsSet(true);
			}
			if (incoming.get(39)) {
				struct.notRefund = iprot.readBool();
				struct.setNotRefundIsSet(true);
			}
			if (incoming.get(40)) {
				struct.weight = iprot.readDouble();
				struct.setWeightIsSet(true);
			}
			if (incoming.get(41)) {
				struct.transport = iprot.readI32();
				struct.setTransportIsSet(true);
			}
			if (incoming.get(42)) {
				struct.transportFee = iprot.readDouble();
				struct.setTransportFeeIsSet(true);
			}
			if (incoming.get(43)) {
				struct.feeBelong = iprot.readString();
				struct.setFeeBelongIsSet(true);
			}
			if (incoming.get(44)) {
				struct.sellSpu = iprot.readI32();
				struct.setSellSpuIsSet(true);
			}
			if (incoming.get(45)) {
				struct.scoreNum = iprot.readI32();
				struct.setScoreNumIsSet(true);
			}
			if (incoming.get(46)) {
				struct.scoreAvg = iprot.readDouble();
				struct.setScoreAvgIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
