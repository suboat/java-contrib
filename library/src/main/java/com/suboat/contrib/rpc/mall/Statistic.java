/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Statistic implements org.apache.thrift.TBase<Statistic, Statistic._Fields>, java.io.Serializable,
		Cloneable, Comparable<Statistic> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Statistic");

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"label", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 4);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField VAL_FLOAT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"valFloat", org.apache.thrift.protocol.TType.DOUBLE, (short) 8);

	private static final org.apache.thrift.protocol.TField VAL_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"valInt", org.apache.thrift.protocol.TType.I32, (short) 9);

	private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comment", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField META_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"metaJson", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StatisticStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StatisticTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String key; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String label; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public double valFloat; // required

	public int valInt; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String comment; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String metaJson; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		SID((short) 1, "sid"), KEY((short) 2, "key"), LABEL((short) 3, "label"), STATUS((short) 4,
				"status"), CREATE_TIME((short) 5, "createTime"), UPDATE_TIME((short) 6, "updateTime"), CATEGORY(
						(short) 7, "category"), VAL_FLOAT((short) 8, "valFloat"), VAL_INT((short) 9,
								"valInt"), COMMENT((short) 10, "comment"), META_JSON((short) 11, "metaJson");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // SID
				return SID;
			case 2: // KEY
				return KEY;
			case 3: // LABEL
				return LABEL;
			case 4: // STATUS
				return STATUS;
			case 5: // CREATE_TIME
				return CREATE_TIME;
			case 6: // UPDATE_TIME
				return UPDATE_TIME;
			case 7: // CATEGORY
				return CATEGORY;
			case 8: // VAL_FLOAT
				return VAL_FLOAT;
			case 9: // VAL_INT
				return VAL_INT;
			case 10: // COMMENT
				return COMMENT;
			case 11: // META_JSON
				return META_JSON;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;

	private static final int __VALFLOAT_ISSET_ID = 1;

	private static final int __VALINT_ISSET_ID = 2;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.KEY,
				new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LABEL,
				new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.VAL_FLOAT,
				new org.apache.thrift.meta_data.FieldMetaData("valFloat",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.VAL_INT,
				new org.apache.thrift.meta_data.FieldMetaData("valInt", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("comment",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.META_JSON,
				new org.apache.thrift.meta_data.FieldMetaData("metaJson",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Statistic.class, metaDataMap);
	}

	public Statistic() {
	}

	public Statistic(java.lang.String sid, java.lang.String key, java.lang.String label, int status,
			java.lang.String createTime, java.lang.String updateTime, java.lang.String category, double valFloat,
			int valInt, java.lang.String comment, java.lang.String metaJson) {
		this();
		this.sid = sid;
		this.key = key;
		this.label = label;
		this.status = status;
		setStatusIsSet(true);
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.category = category;
		this.valFloat = valFloat;
		setValFloatIsSet(true);
		this.valInt = valInt;
		setValIntIsSet(true);
		this.comment = comment;
		this.metaJson = metaJson;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Statistic(Statistic other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetKey()) {
			this.key = other.key;
		}
		if (other.isSetLabel()) {
			this.label = other.label;
		}
		this.status = other.status;
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		this.valFloat = other.valFloat;
		this.valInt = other.valInt;
		if (other.isSetComment()) {
			this.comment = other.comment;
		}
		if (other.isSetMetaJson()) {
			this.metaJson = other.metaJson;
		}
	}

	public Statistic deepCopy() {
		return new Statistic(this);
	}

	@Override
	public void clear() {
		this.sid = null;
		this.key = null;
		this.label = null;
		setStatusIsSet(false);
		this.status = 0;
		this.createTime = null;
		this.updateTime = null;
		this.category = null;
		setValFloatIsSet(false);
		this.valFloat = 0.0;
		setValIntIsSet(false);
		this.valInt = 0;
		this.comment = null;
		this.metaJson = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public Statistic setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getKey() {
		return this.key;
	}

	public Statistic setKey(@org.apache.thrift.annotation.Nullable java.lang.String key) {
		this.key = key;
		return this;
	}

	public void unsetKey() {
		this.key = null;
	}

	/**
	 * Returns true if field key is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetKey() {
		return this.key != null;
	}

	public void setKeyIsSet(boolean value) {
		if (!value) {
			this.key = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLabel() {
		return this.label;
	}

	public Statistic setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
		this.label = label;
		return this;
	}

	public void unsetLabel() {
		this.label = null;
	}

	/**
	 * Returns true if field label is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLabel() {
		return this.label != null;
	}

	public void setLabelIsSet(boolean value) {
		if (!value) {
			this.label = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public Statistic setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Statistic setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Statistic setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public Statistic setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	public double getValFloat() {
		return this.valFloat;
	}

	public Statistic setValFloat(double valFloat) {
		this.valFloat = valFloat;
		setValFloatIsSet(true);
		return this;
	}

	public void unsetValFloat() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALFLOAT_ISSET_ID);
	}

	/**
	 * Returns true if field valFloat is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetValFloat() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALFLOAT_ISSET_ID);
	}

	public void setValFloatIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALFLOAT_ISSET_ID, value);
	}

	public int getValInt() {
		return this.valInt;
	}

	public Statistic setValInt(int valInt) {
		this.valInt = valInt;
		setValIntIsSet(true);
		return this;
	}

	public void unsetValInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALINT_ISSET_ID);
	}

	/**
	 * Returns true if field valInt is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetValInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALINT_ISSET_ID);
	}

	public void setValIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALINT_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getComment() {
		return this.comment;
	}

	public Statistic setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
		this.comment = comment;
		return this;
	}

	public void unsetComment() {
		this.comment = null;
	}

	/**
	 * Returns true if field comment is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComment() {
		return this.comment != null;
	}

	public void setCommentIsSet(boolean value) {
		if (!value) {
			this.comment = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMetaJson() {
		return this.metaJson;
	}

	public Statistic setMetaJson(@org.apache.thrift.annotation.Nullable java.lang.String metaJson) {
		this.metaJson = metaJson;
		return this;
	}

	public void unsetMetaJson() {
		this.metaJson = null;
	}

	/**
	 * Returns true if field metaJson is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMetaJson() {
		return this.metaJson != null;
	}

	public void setMetaJsonIsSet(boolean value) {
		if (!value) {
			this.metaJson = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case KEY:
			if (value == null) {
				unsetKey();
			}
			else {
				setKey((java.lang.String) value);
			}
			break;

		case LABEL:
			if (value == null) {
				unsetLabel();
			}
			else {
				setLabel((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case VAL_FLOAT:
			if (value == null) {
				unsetValFloat();
			}
			else {
				setValFloat((java.lang.Double) value);
			}
			break;

		case VAL_INT:
			if (value == null) {
				unsetValInt();
			}
			else {
				setValInt((java.lang.Integer) value);
			}
			break;

		case COMMENT:
			if (value == null) {
				unsetComment();
			}
			else {
				setComment((java.lang.String) value);
			}
			break;

		case META_JSON:
			if (value == null) {
				unsetMetaJson();
			}
			else {
				setMetaJson((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case SID:
			return getSid();

		case KEY:
			return getKey();

		case LABEL:
			return getLabel();

		case STATUS:
			return getStatus();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case CATEGORY:
			return getCategory();

		case VAL_FLOAT:
			return getValFloat();

		case VAL_INT:
			return getValInt();

		case COMMENT:
			return getComment();

		case META_JSON:
			return getMetaJson();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case SID:
			return isSetSid();
		case KEY:
			return isSetKey();
		case LABEL:
			return isSetLabel();
		case STATUS:
			return isSetStatus();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case CATEGORY:
			return isSetCategory();
		case VAL_FLOAT:
			return isSetValFloat();
		case VAL_INT:
			return isSetValInt();
		case COMMENT:
			return isSetComment();
		case META_JSON:
			return isSetMetaJson();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Statistic)
			return this.equals((Statistic) that);
		return false;
	}

	public boolean equals(Statistic that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_key = true && this.isSetKey();
		boolean that_present_key = true && that.isSetKey();
		if (this_present_key || that_present_key) {
			if (!(this_present_key && that_present_key))
				return false;
			if (!this.key.equals(that.key))
				return false;
		}

		boolean this_present_label = true && this.isSetLabel();
		boolean that_present_label = true && that.isSetLabel();
		if (this_present_label || that_present_label) {
			if (!(this_present_label && that_present_label))
				return false;
			if (!this.label.equals(that.label))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_valFloat = true;
		boolean that_present_valFloat = true;
		if (this_present_valFloat || that_present_valFloat) {
			if (!(this_present_valFloat && that_present_valFloat))
				return false;
			if (this.valFloat != that.valFloat)
				return false;
		}

		boolean this_present_valInt = true;
		boolean that_present_valInt = true;
		if (this_present_valInt || that_present_valInt) {
			if (!(this_present_valInt && that_present_valInt))
				return false;
			if (this.valInt != that.valInt)
				return false;
		}

		boolean this_present_comment = true && this.isSetComment();
		boolean that_present_comment = true && that.isSetComment();
		if (this_present_comment || that_present_comment) {
			if (!(this_present_comment && that_present_comment))
				return false;
			if (!this.comment.equals(that.comment))
				return false;
		}

		boolean this_present_metaJson = true && this.isSetMetaJson();
		boolean that_present_metaJson = true && that.isSetMetaJson();
		if (this_present_metaJson || that_present_metaJson) {
			if (!(this_present_metaJson && that_present_metaJson))
				return false;
			if (!this.metaJson.equals(that.metaJson))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
		if (isSetKey())
			hashCode = hashCode * 8191 + key.hashCode();

		hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
		if (isSetLabel())
			hashCode = hashCode * 8191 + label.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(valFloat);

		hashCode = hashCode * 8191 + valInt;

		hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
		if (isSetComment())
			hashCode = hashCode * 8191 + comment.hashCode();

		hashCode = hashCode * 8191 + ((isSetMetaJson()) ? 131071 : 524287);
		if (isSetMetaJson())
			hashCode = hashCode * 8191 + metaJson.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(Statistic other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetKey()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLabel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetValFloat()).compareTo(other.isSetValFloat());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetValFloat()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valFloat, other.valFloat);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetValInt()).compareTo(other.isSetValInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetValInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valInt, other.valInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMetaJson()).compareTo(other.isSetMetaJson());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMetaJson()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metaJson, other.metaJson);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Statistic(");
		boolean first = true;

		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("key:");
		if (this.key == null) {
			sb.append("null");
		}
		else {
			sb.append(this.key);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("label:");
		if (this.label == null) {
			sb.append("null");
		}
		else {
			sb.append(this.label);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("valFloat:");
		sb.append(this.valFloat);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("valInt:");
		sb.append(this.valInt);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("comment:");
		if (this.comment == null) {
			sb.append("null");
		}
		else {
			sb.append(this.comment);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("metaJson:");
		if (this.metaJson == null) {
			sb.append("null");
		}
		else {
			sb.append(this.metaJson);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class StatisticStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public StatisticStandardScheme getScheme() {
			return new StatisticStandardScheme();
		}

	}

	private static class StatisticStandardScheme extends org.apache.thrift.scheme.StandardScheme<Statistic> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Statistic struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // KEY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.key = iprot.readString();
						struct.setKeyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // LABEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.label = iprot.readString();
						struct.setLabelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // VAL_FLOAT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.valFloat = iprot.readDouble();
						struct.setValFloatIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // VAL_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.valInt = iprot.readI32();
						struct.setValIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.comment = iprot.readString();
						struct.setCommentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // META_JSON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.metaJson = iprot.readString();
						struct.setMetaJsonIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Statistic struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.key != null) {
				oprot.writeFieldBegin(KEY_FIELD_DESC);
				oprot.writeString(struct.key);
				oprot.writeFieldEnd();
			}
			if (struct.label != null) {
				oprot.writeFieldBegin(LABEL_FIELD_DESC);
				oprot.writeString(struct.label);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(VAL_FLOAT_FIELD_DESC);
			oprot.writeDouble(struct.valFloat);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(VAL_INT_FIELD_DESC);
			oprot.writeI32(struct.valInt);
			oprot.writeFieldEnd();
			if (struct.comment != null) {
				oprot.writeFieldBegin(COMMENT_FIELD_DESC);
				oprot.writeString(struct.comment);
				oprot.writeFieldEnd();
			}
			if (struct.metaJson != null) {
				oprot.writeFieldBegin(META_JSON_FIELD_DESC);
				oprot.writeString(struct.metaJson);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class StatisticTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public StatisticTupleScheme getScheme() {
			return new StatisticTupleScheme();
		}

	}

	private static class StatisticTupleScheme extends org.apache.thrift.scheme.TupleScheme<Statistic> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Statistic struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetSid()) {
				optionals.set(0);
			}
			if (struct.isSetKey()) {
				optionals.set(1);
			}
			if (struct.isSetLabel()) {
				optionals.set(2);
			}
			if (struct.isSetStatus()) {
				optionals.set(3);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(4);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(5);
			}
			if (struct.isSetCategory()) {
				optionals.set(6);
			}
			if (struct.isSetValFloat()) {
				optionals.set(7);
			}
			if (struct.isSetValInt()) {
				optionals.set(8);
			}
			if (struct.isSetComment()) {
				optionals.set(9);
			}
			if (struct.isSetMetaJson()) {
				optionals.set(10);
			}
			oprot.writeBitSet(optionals, 11);
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetKey()) {
				oprot.writeString(struct.key);
			}
			if (struct.isSetLabel()) {
				oprot.writeString(struct.label);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetValFloat()) {
				oprot.writeDouble(struct.valFloat);
			}
			if (struct.isSetValInt()) {
				oprot.writeI32(struct.valInt);
			}
			if (struct.isSetComment()) {
				oprot.writeString(struct.comment);
			}
			if (struct.isSetMetaJson()) {
				oprot.writeString(struct.metaJson);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Statistic struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(11);
			if (incoming.get(0)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.key = iprot.readString();
				struct.setKeyIsSet(true);
			}
			if (incoming.get(2)) {
				struct.label = iprot.readString();
				struct.setLabelIsSet(true);
			}
			if (incoming.get(3)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(4)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(6)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(7)) {
				struct.valFloat = iprot.readDouble();
				struct.setValFloatIsSet(true);
			}
			if (incoming.get(8)) {
				struct.valInt = iprot.readI32();
				struct.setValIntIsSet(true);
			}
			if (incoming.get(9)) {
				struct.comment = iprot.readString();
				struct.setCommentIsSet(true);
			}
			if (incoming.get(10)) {
				struct.metaJson = iprot.readString();
				struct.setMetaJsonIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
