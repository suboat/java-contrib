/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 钱包类型
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-05-11")
public class WalletCategory implements org.apache.thrift.TBase<WalletCategory, WalletCategory._Fields>,
		java.io.Serializable, Cloneable, Comparable<WalletCategory> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"WalletCategory");

	private static final org.apache.thrift.protocol.TField ACCESSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"accession", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"currency", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isActive", org.apache.thrift.protocol.TType.BOOL, (short) 4);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WalletCategoryStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WalletCategoryTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String accession; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String currency; // required

	public boolean isActive; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		ACCESSION((short) 1, "accession"), CATEGORY((short) 2, "category"), CURRENCY((short) 3, "currency"), IS_ACTIVE(
				(short) 4, "isActive"), CREATE_TIME((short) 5, "createTime"), UPDATE_TIME((short) 6, "updateTime");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ACCESSION
				return ACCESSION;
			case 2: // CATEGORY
				return CATEGORY;
			case 3: // CURRENCY
				return CURRENCY;
			case 4: // IS_ACTIVE
				return IS_ACTIVE;
			case 5: // CREATE_TIME
				return CREATE_TIME;
			case 6: // UPDATE_TIME
				return UPDATE_TIME;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISACTIVE_ISSET_ID = 0;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ACCESSION,
				new org.apache.thrift.meta_data.FieldMetaData("accession",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CURRENCY,
				new org.apache.thrift.meta_data.FieldMetaData("currency",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_ACTIVE,
				new org.apache.thrift.meta_data.FieldMetaData("isActive",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WalletCategory.class, metaDataMap);
	}

	public WalletCategory() {
	}

	public WalletCategory(java.lang.String accession, java.lang.String category, java.lang.String currency,
			boolean isActive, java.lang.String createTime, java.lang.String updateTime) {
		this();
		this.accession = accession;
		this.category = category;
		this.currency = currency;
		this.isActive = isActive;
		setIsActiveIsSet(true);
		this.createTime = createTime;
		this.updateTime = updateTime;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public WalletCategory(WalletCategory other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetAccession()) {
			this.accession = other.accession;
		}
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		if (other.isSetCurrency()) {
			this.currency = other.currency;
		}
		this.isActive = other.isActive;
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
	}

	public WalletCategory deepCopy() {
		return new WalletCategory(this);
	}

	@Override
	public void clear() {
		this.accession = null;
		this.category = null;
		this.currency = null;
		setIsActiveIsSet(false);
		this.isActive = false;
		this.createTime = null;
		this.updateTime = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAccession() {
		return this.accession;
	}

	public WalletCategory setAccession(@org.apache.thrift.annotation.Nullable java.lang.String accession) {
		this.accession = accession;
		return this;
	}

	public void unsetAccession() {
		this.accession = null;
	}

	/**
	 * Returns true if field accession is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAccession() {
		return this.accession != null;
	}

	public void setAccessionIsSet(boolean value) {
		if (!value) {
			this.accession = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public WalletCategory setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCurrency() {
		return this.currency;
	}

	public WalletCategory setCurrency(@org.apache.thrift.annotation.Nullable java.lang.String currency) {
		this.currency = currency;
		return this;
	}

	public void unsetCurrency() {
		this.currency = null;
	}

	/**
	 * Returns true if field currency is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCurrency() {
		return this.currency != null;
	}

	public void setCurrencyIsSet(boolean value) {
		if (!value) {
			this.currency = null;
		}
	}

	public boolean isIsActive() {
		return this.isActive;
	}

	public WalletCategory setIsActive(boolean isActive) {
		this.isActive = isActive;
		setIsActiveIsSet(true);
		return this;
	}

	public void unsetIsActive() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	/**
	 * Returns true if field isActive is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsActive() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	public void setIsActiveIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISACTIVE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public WalletCategory setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public WalletCategory setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case ACCESSION:
			if (value == null) {
				unsetAccession();
			}
			else {
				setAccession((java.lang.String) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case CURRENCY:
			if (value == null) {
				unsetCurrency();
			}
			else {
				setCurrency((java.lang.String) value);
			}
			break;

		case IS_ACTIVE:
			if (value == null) {
				unsetIsActive();
			}
			else {
				setIsActive((java.lang.Boolean) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ACCESSION:
			return getAccession();

		case CATEGORY:
			return getCategory();

		case CURRENCY:
			return getCurrency();

		case IS_ACTIVE:
			return isIsActive();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ACCESSION:
			return isSetAccession();
		case CATEGORY:
			return isSetCategory();
		case CURRENCY:
			return isSetCurrency();
		case IS_ACTIVE:
			return isSetIsActive();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof WalletCategory)
			return this.equals((WalletCategory) that);
		return false;
	}

	public boolean equals(WalletCategory that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_accession = true && this.isSetAccession();
		boolean that_present_accession = true && that.isSetAccession();
		if (this_present_accession || that_present_accession) {
			if (!(this_present_accession && that_present_accession))
				return false;
			if (!this.accession.equals(that.accession))
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_currency = true && this.isSetCurrency();
		boolean that_present_currency = true && that.isSetCurrency();
		if (this_present_currency || that_present_currency) {
			if (!(this_present_currency && that_present_currency))
				return false;
			if (!this.currency.equals(that.currency))
				return false;
		}

		boolean this_present_isActive = true;
		boolean that_present_isActive = true;
		if (this_present_isActive || that_present_isActive) {
			if (!(this_present_isActive && that_present_isActive))
				return false;
			if (this.isActive != that.isActive)
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetAccession()) ? 131071 : 524287);
		if (isSetAccession())
			hashCode = hashCode * 8191 + accession.hashCode();

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + ((isSetCurrency()) ? 131071 : 524287);
		if (isSetCurrency())
			hashCode = hashCode * 8191 + currency.hashCode();

		hashCode = hashCode * 8191 + ((isActive) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(WalletCategory other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetAccession()).compareTo(other.isSetAccession());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAccession()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accession, other.accession);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCurrency()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsActive()).compareTo(other.isSetIsActive());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsActive()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("WalletCategory(");
		boolean first = true;

		sb.append("accession:");
		if (this.accession == null) {
			sb.append("null");
		}
		else {
			sb.append(this.accession);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("currency:");
		if (this.currency == null) {
			sb.append("null");
		}
		else {
			sb.append(this.currency);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isActive:");
		sb.append(this.isActive);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class WalletCategoryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletCategoryStandardScheme getScheme() {
			return new WalletCategoryStandardScheme();
		}

	}

	private static class WalletCategoryStandardScheme extends org.apache.thrift.scheme.StandardScheme<WalletCategory> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, WalletCategory struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ACCESSION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.accession = iprot.readString();
						struct.setAccessionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // CURRENCY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.currency = iprot.readString();
						struct.setCurrencyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // IS_ACTIVE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isActive = iprot.readBool();
						struct.setIsActiveIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, WalletCategory struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.accession != null) {
				oprot.writeFieldBegin(ACCESSION_FIELD_DESC);
				oprot.writeString(struct.accession);
				oprot.writeFieldEnd();
			}
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			if (struct.currency != null) {
				oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
				oprot.writeString(struct.currency);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
			oprot.writeBool(struct.isActive);
			oprot.writeFieldEnd();
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class WalletCategoryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletCategoryTupleScheme getScheme() {
			return new WalletCategoryTupleScheme();
		}

	}

	private static class WalletCategoryTupleScheme extends org.apache.thrift.scheme.TupleScheme<WalletCategory> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, WalletCategory struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetAccession()) {
				optionals.set(0);
			}
			if (struct.isSetCategory()) {
				optionals.set(1);
			}
			if (struct.isSetCurrency()) {
				optionals.set(2);
			}
			if (struct.isSetIsActive()) {
				optionals.set(3);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(4);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetAccession()) {
				oprot.writeString(struct.accession);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetCurrency()) {
				oprot.writeString(struct.currency);
			}
			if (struct.isSetIsActive()) {
				oprot.writeBool(struct.isActive);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, WalletCategory struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.accession = iprot.readString();
				struct.setAccessionIsSet(true);
			}
			if (incoming.get(1)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(2)) {
				struct.currency = iprot.readString();
				struct.setCurrencyIsSet(true);
			}
			if (incoming.get(3)) {
				struct.isActive = iprot.readBool();
				struct.setIsActiveIsSet(true);
			}
			if (incoming.get(4)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
