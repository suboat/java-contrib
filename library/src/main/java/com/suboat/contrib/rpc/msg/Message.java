/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.msg;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable,
		Comparable<Message> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Message");

	private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"modifyTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField IS_READ_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isRead", org.apache.thrift.protocol.TType.BOOL, (short) 5);

	private static final org.apache.thrift.protocol.TField IS_EDIT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isEdit", org.apache.thrift.protocol.TType.BOOL, (short) 6);

	private static final org.apache.thrift.protocol.TField IS_REMOVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isRemove", org.apache.thrift.protocol.TType.BOOL, (short) 7);

	private static final org.apache.thrift.protocol.TField IS_HIDE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isHideFrom", org.apache.thrift.protocol.TType.BOOL, (short) 8);

	private static final org.apache.thrift.protocol.TField IS_HIDE_TO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isHideTo", org.apache.thrift.protocol.TType.BOOL, (short) 9);

	private static final org.apache.thrift.protocol.TField IS_ASSEMBLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isAssemble", org.apache.thrift.protocol.TType.BOOL, (short) 10);

	private static final org.apache.thrift.protocol.TField IS_FORWARD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isForward", org.apache.thrift.protocol.TType.BOOL, (short) 11);

	private static final org.apache.thrift.protocol.TField UID_TO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidTo", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField FROM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"fromId", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"roomId", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"msgType", org.apache.thrift.protocol.TType.STRING, (short) 15);

	private static final org.apache.thrift.protocol.TField EXT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"extType", org.apache.thrift.protocol.TType.STRING, (short) 16);

	private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"event", org.apache.thrift.protocol.TType.STRING, (short) 17);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 18);

	private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid",
			org.apache.thrift.protocol.TType.STRING, (short) 19);

	private static final org.apache.thrift.protocol.TField REL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"relId", org.apache.thrift.protocol.TType.STRING, (short) 20);

	private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"content", org.apache.thrift.protocol.TType.STRING, (short) 21);

	private static final org.apache.thrift.protocol.TField MEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"mediaId", org.apache.thrift.protocol.TType.STRING, (short) 22);

	private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comment", org.apache.thrift.protocol.TType.STRING, (short) 23);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String mid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String modifyTime; // required

	public boolean isRead; // required

	public boolean isEdit; // required

	public boolean isRemove; // required

	public boolean isHideFrom; // required

	public boolean isHideTo; // required

	public boolean isAssemble; // required

	public boolean isForward; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uidTo; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String fromId; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String roomId; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String msgType; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String extType; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String event; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String cid; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String relId; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String content; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String mediaId; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String comment; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		MID((short) 1, "mid"), UID((short) 2, "uid"), CREATE_TIME((short) 3, "createTime"), MODIFY_TIME((short) 4,
				"modifyTime"), IS_READ((short) 5, "isRead"), IS_EDIT((short) 6, "isEdit"), IS_REMOVE((short) 7,
						"isRemove"), IS_HIDE_FROM((short) 8, "isHideFrom"), IS_HIDE_TO((short) 9,
								"isHideTo"), IS_ASSEMBLE((short) 10, "isAssemble"), IS_FORWARD((short) 11,
										"isForward"), UID_TO((short) 12, "uidTo"), FROM_ID((short) 13,
												"fromId"), ROOM_ID((short) 14, "roomId"), MSG_TYPE((short) 15,
														"msgType"), EXT_TYPE((short) 16, "extType"), EVENT((short) 17,
																"event"), STATUS((short) 18, "status"), CID((short) 19,
																		"cid"), REL_ID((short) 20, "relId"), CONTENT(
																				(short) 21, "content"), MEDIA_ID(
																						(short) 22, "mediaId"), COMMENT(
																								(short) 23, "comment");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // MID
				return MID;
			case 2: // UID
				return UID;
			case 3: // CREATE_TIME
				return CREATE_TIME;
			case 4: // MODIFY_TIME
				return MODIFY_TIME;
			case 5: // IS_READ
				return IS_READ;
			case 6: // IS_EDIT
				return IS_EDIT;
			case 7: // IS_REMOVE
				return IS_REMOVE;
			case 8: // IS_HIDE_FROM
				return IS_HIDE_FROM;
			case 9: // IS_HIDE_TO
				return IS_HIDE_TO;
			case 10: // IS_ASSEMBLE
				return IS_ASSEMBLE;
			case 11: // IS_FORWARD
				return IS_FORWARD;
			case 12: // UID_TO
				return UID_TO;
			case 13: // FROM_ID
				return FROM_ID;
			case 14: // ROOM_ID
				return ROOM_ID;
			case 15: // MSG_TYPE
				return MSG_TYPE;
			case 16: // EXT_TYPE
				return EXT_TYPE;
			case 17: // EVENT
				return EVENT;
			case 18: // STATUS
				return STATUS;
			case 19: // CID
				return CID;
			case 20: // REL_ID
				return REL_ID;
			case 21: // CONTENT
				return CONTENT;
			case 22: // MEDIA_ID
				return MEDIA_ID;
			case 23: // COMMENT
				return COMMENT;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISREAD_ISSET_ID = 0;

	private static final int __ISEDIT_ISSET_ID = 1;

	private static final int __ISREMOVE_ISSET_ID = 2;

	private static final int __ISHIDEFROM_ISSET_ID = 3;

	private static final int __ISHIDETO_ISSET_ID = 4;

	private static final int __ISASSEMBLE_ISSET_ID = 5;

	private static final int __ISFORWARD_ISSET_ID = 6;

	private static final int __STATUS_ISSET_ID = 7;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.CID, _Fields.REL_ID, _Fields.CONTENT, _Fields.MEDIA_ID,
			_Fields.COMMENT };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.MID,
				new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifyTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_READ,
				new org.apache.thrift.meta_data.FieldMetaData("isRead", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_EDIT,
				new org.apache.thrift.meta_data.FieldMetaData("isEdit", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_REMOVE,
				new org.apache.thrift.meta_data.FieldMetaData("isRemove",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_HIDE_FROM,
				new org.apache.thrift.meta_data.FieldMetaData("isHideFrom",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_HIDE_TO,
				new org.apache.thrift.meta_data.FieldMetaData("isHideTo",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_ASSEMBLE,
				new org.apache.thrift.meta_data.FieldMetaData("isAssemble",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_FORWARD,
				new org.apache.thrift.meta_data.FieldMetaData("isForward",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.UID_TO,
				new org.apache.thrift.meta_data.FieldMetaData("uidTo", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FROM_ID,
				new org.apache.thrift.meta_data.FieldMetaData("fromId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ROOM_ID,
				new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MSG_TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("msgType",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EXT_TYPE,
				new org.apache.thrift.meta_data.FieldMetaData("extType",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EVENT,
				new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CID,
				new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REL_ID,
				new org.apache.thrift.meta_data.FieldMetaData("relId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CONTENT,
				new org.apache.thrift.meta_data.FieldMetaData("content",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MEDIA_ID,
				new org.apache.thrift.meta_data.FieldMetaData("mediaId",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("comment",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
	}

	public Message() {
	}

	public Message(java.lang.String mid, java.lang.String uid, java.lang.String createTime, java.lang.String modifyTime,
			boolean isRead, boolean isEdit, boolean isRemove, boolean isHideFrom, boolean isHideTo, boolean isAssemble,
			boolean isForward, java.lang.String uidTo, java.lang.String fromId, java.lang.String roomId,
			java.lang.String msgType, java.lang.String extType, java.lang.String event, int status) {
		this();
		this.mid = mid;
		this.uid = uid;
		this.createTime = createTime;
		this.modifyTime = modifyTime;
		this.isRead = isRead;
		setIsReadIsSet(true);
		this.isEdit = isEdit;
		setIsEditIsSet(true);
		this.isRemove = isRemove;
		setIsRemoveIsSet(true);
		this.isHideFrom = isHideFrom;
		setIsHideFromIsSet(true);
		this.isHideTo = isHideTo;
		setIsHideToIsSet(true);
		this.isAssemble = isAssemble;
		setIsAssembleIsSet(true);
		this.isForward = isForward;
		setIsForwardIsSet(true);
		this.uidTo = uidTo;
		this.fromId = fromId;
		this.roomId = roomId;
		this.msgType = msgType;
		this.extType = extType;
		this.event = event;
		this.status = status;
		setStatusIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Message(Message other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetMid()) {
			this.mid = other.mid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetModifyTime()) {
			this.modifyTime = other.modifyTime;
		}
		this.isRead = other.isRead;
		this.isEdit = other.isEdit;
		this.isRemove = other.isRemove;
		this.isHideFrom = other.isHideFrom;
		this.isHideTo = other.isHideTo;
		this.isAssemble = other.isAssemble;
		this.isForward = other.isForward;
		if (other.isSetUidTo()) {
			this.uidTo = other.uidTo;
		}
		if (other.isSetFromId()) {
			this.fromId = other.fromId;
		}
		if (other.isSetRoomId()) {
			this.roomId = other.roomId;
		}
		if (other.isSetMsgType()) {
			this.msgType = other.msgType;
		}
		if (other.isSetExtType()) {
			this.extType = other.extType;
		}
		if (other.isSetEvent()) {
			this.event = other.event;
		}
		this.status = other.status;
		if (other.isSetCid()) {
			this.cid = other.cid;
		}
		if (other.isSetRelId()) {
			this.relId = other.relId;
		}
		if (other.isSetContent()) {
			this.content = other.content;
		}
		if (other.isSetMediaId()) {
			this.mediaId = other.mediaId;
		}
		if (other.isSetComment()) {
			this.comment = other.comment;
		}
	}

	public Message deepCopy() {
		return new Message(this);
	}

	@Override
	public void clear() {
		this.mid = null;
		this.uid = null;
		this.createTime = null;
		this.modifyTime = null;
		setIsReadIsSet(false);
		this.isRead = false;
		setIsEditIsSet(false);
		this.isEdit = false;
		setIsRemoveIsSet(false);
		this.isRemove = false;
		setIsHideFromIsSet(false);
		this.isHideFrom = false;
		setIsHideToIsSet(false);
		this.isHideTo = false;
		setIsAssembleIsSet(false);
		this.isAssemble = false;
		setIsForwardIsSet(false);
		this.isForward = false;
		this.uidTo = null;
		this.fromId = null;
		this.roomId = null;
		this.msgType = null;
		this.extType = null;
		this.event = null;
		setStatusIsSet(false);
		this.status = 0;
		this.cid = null;
		this.relId = null;
		this.content = null;
		this.mediaId = null;
		this.comment = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMid() {
		return this.mid;
	}

	public Message setMid(@org.apache.thrift.annotation.Nullable java.lang.String mid) {
		this.mid = mid;
		return this;
	}

	public void unsetMid() {
		this.mid = null;
	}

	/**
	 * Returns true if field mid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetMid() {
		return this.mid != null;
	}

	public void setMidIsSet(boolean value) {
		if (!value) {
			this.mid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public Message setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Message setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getModifyTime() {
		return this.modifyTime;
	}

	public Message setModifyTime(@org.apache.thrift.annotation.Nullable java.lang.String modifyTime) {
		this.modifyTime = modifyTime;
		return this;
	}

	public void unsetModifyTime() {
		this.modifyTime = null;
	}

	/**
	 * Returns true if field modifyTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetModifyTime() {
		return this.modifyTime != null;
	}

	public void setModifyTimeIsSet(boolean value) {
		if (!value) {
			this.modifyTime = null;
		}
	}

	public boolean isIsRead() {
		return this.isRead;
	}

	public Message setIsRead(boolean isRead) {
		this.isRead = isRead;
		setIsReadIsSet(true);
		return this;
	}

	public void unsetIsRead() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREAD_ISSET_ID);
	}

	/**
	 * Returns true if field isRead is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsRead() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREAD_ISSET_ID);
	}

	public void setIsReadIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREAD_ISSET_ID, value);
	}

	public boolean isIsEdit() {
		return this.isEdit;
	}

	public Message setIsEdit(boolean isEdit) {
		this.isEdit = isEdit;
		setIsEditIsSet(true);
		return this;
	}

	public void unsetIsEdit() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISEDIT_ISSET_ID);
	}

	/**
	 * Returns true if field isEdit is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsEdit() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISEDIT_ISSET_ID);
	}

	public void setIsEditIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISEDIT_ISSET_ID, value);
	}

	public boolean isIsRemove() {
		return this.isRemove;
	}

	public Message setIsRemove(boolean isRemove) {
		this.isRemove = isRemove;
		setIsRemoveIsSet(true);
		return this;
	}

	public void unsetIsRemove() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREMOVE_ISSET_ID);
	}

	/**
	 * Returns true if field isRemove is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsRemove() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREMOVE_ISSET_ID);
	}

	public void setIsRemoveIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREMOVE_ISSET_ID, value);
	}

	public boolean isIsHideFrom() {
		return this.isHideFrom;
	}

	public Message setIsHideFrom(boolean isHideFrom) {
		this.isHideFrom = isHideFrom;
		setIsHideFromIsSet(true);
		return this;
	}

	public void unsetIsHideFrom() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISHIDEFROM_ISSET_ID);
	}

	/**
	 * Returns true if field isHideFrom is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsHideFrom() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISHIDEFROM_ISSET_ID);
	}

	public void setIsHideFromIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISHIDEFROM_ISSET_ID, value);
	}

	public boolean isIsHideTo() {
		return this.isHideTo;
	}

	public Message setIsHideTo(boolean isHideTo) {
		this.isHideTo = isHideTo;
		setIsHideToIsSet(true);
		return this;
	}

	public void unsetIsHideTo() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISHIDETO_ISSET_ID);
	}

	/**
	 * Returns true if field isHideTo is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsHideTo() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISHIDETO_ISSET_ID);
	}

	public void setIsHideToIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISHIDETO_ISSET_ID, value);
	}

	public boolean isIsAssemble() {
		return this.isAssemble;
	}

	public Message setIsAssemble(boolean isAssemble) {
		this.isAssemble = isAssemble;
		setIsAssembleIsSet(true);
		return this;
	}

	public void unsetIsAssemble() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISASSEMBLE_ISSET_ID);
	}

	/**
	 * Returns true if field isAssemble is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsAssemble() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISASSEMBLE_ISSET_ID);
	}

	public void setIsAssembleIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISASSEMBLE_ISSET_ID, value);
	}

	public boolean isIsForward() {
		return this.isForward;
	}

	public Message setIsForward(boolean isForward) {
		this.isForward = isForward;
		setIsForwardIsSet(true);
		return this;
	}

	public void unsetIsForward() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFORWARD_ISSET_ID);
	}

	/**
	 * Returns true if field isForward is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsForward() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFORWARD_ISSET_ID);
	}

	public void setIsForwardIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFORWARD_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidTo() {
		return this.uidTo;
	}

	public Message setUidTo(@org.apache.thrift.annotation.Nullable java.lang.String uidTo) {
		this.uidTo = uidTo;
		return this;
	}

	public void unsetUidTo() {
		this.uidTo = null;
	}

	/**
	 * Returns true if field uidTo is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUidTo() {
		return this.uidTo != null;
	}

	public void setUidToIsSet(boolean value) {
		if (!value) {
			this.uidTo = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getFromId() {
		return this.fromId;
	}

	public Message setFromId(@org.apache.thrift.annotation.Nullable java.lang.String fromId) {
		this.fromId = fromId;
		return this;
	}

	public void unsetFromId() {
		this.fromId = null;
	}

	/**
	 * Returns true if field fromId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetFromId() {
		return this.fromId != null;
	}

	public void setFromIdIsSet(boolean value) {
		if (!value) {
			this.fromId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRoomId() {
		return this.roomId;
	}

	public Message setRoomId(@org.apache.thrift.annotation.Nullable java.lang.String roomId) {
		this.roomId = roomId;
		return this;
	}

	public void unsetRoomId() {
		this.roomId = null;
	}

	/**
	 * Returns true if field roomId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRoomId() {
		return this.roomId != null;
	}

	public void setRoomIdIsSet(boolean value) {
		if (!value) {
			this.roomId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMsgType() {
		return this.msgType;
	}

	public Message setMsgType(@org.apache.thrift.annotation.Nullable java.lang.String msgType) {
		this.msgType = msgType;
		return this;
	}

	public void unsetMsgType() {
		this.msgType = null;
	}

	/**
	 * Returns true if field msgType is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMsgType() {
		return this.msgType != null;
	}

	public void setMsgTypeIsSet(boolean value) {
		if (!value) {
			this.msgType = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExtType() {
		return this.extType;
	}

	public Message setExtType(@org.apache.thrift.annotation.Nullable java.lang.String extType) {
		this.extType = extType;
		return this;
	}

	public void unsetExtType() {
		this.extType = null;
	}

	/**
	 * Returns true if field extType is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExtType() {
		return this.extType != null;
	}

	public void setExtTypeIsSet(boolean value) {
		if (!value) {
			this.extType = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getEvent() {
		return this.event;
	}

	public Message setEvent(@org.apache.thrift.annotation.Nullable java.lang.String event) {
		this.event = event;
		return this;
	}

	public void unsetEvent() {
		this.event = null;
	}

	/**
	 * Returns true if field event is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetEvent() {
		return this.event != null;
	}

	public void setEventIsSet(boolean value) {
		if (!value) {
			this.event = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public Message setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCid() {
		return this.cid;
	}

	public Message setCid(@org.apache.thrift.annotation.Nullable java.lang.String cid) {
		this.cid = cid;
		return this;
	}

	public void unsetCid() {
		this.cid = null;
	}

	/**
	 * Returns true if field cid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCid() {
		return this.cid != null;
	}

	public void setCidIsSet(boolean value) {
		if (!value) {
			this.cid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRelId() {
		return this.relId;
	}

	public Message setRelId(@org.apache.thrift.annotation.Nullable java.lang.String relId) {
		this.relId = relId;
		return this;
	}

	public void unsetRelId() {
		this.relId = null;
	}

	/**
	 * Returns true if field relId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRelId() {
		return this.relId != null;
	}

	public void setRelIdIsSet(boolean value) {
		if (!value) {
			this.relId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getContent() {
		return this.content;
	}

	public Message setContent(@org.apache.thrift.annotation.Nullable java.lang.String content) {
		this.content = content;
		return this;
	}

	public void unsetContent() {
		this.content = null;
	}

	/**
	 * Returns true if field content is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetContent() {
		return this.content != null;
	}

	public void setContentIsSet(boolean value) {
		if (!value) {
			this.content = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMediaId() {
		return this.mediaId;
	}

	public Message setMediaId(@org.apache.thrift.annotation.Nullable java.lang.String mediaId) {
		this.mediaId = mediaId;
		return this;
	}

	public void unsetMediaId() {
		this.mediaId = null;
	}

	/**
	 * Returns true if field mediaId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMediaId() {
		return this.mediaId != null;
	}

	public void setMediaIdIsSet(boolean value) {
		if (!value) {
			this.mediaId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getComment() {
		return this.comment;
	}

	public Message setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
		this.comment = comment;
		return this;
	}

	public void unsetComment() {
		this.comment = null;
	}

	/**
	 * Returns true if field comment is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComment() {
		return this.comment != null;
	}

	public void setCommentIsSet(boolean value) {
		if (!value) {
			this.comment = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case MID:
			if (value == null) {
				unsetMid();
			}
			else {
				setMid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case MODIFY_TIME:
			if (value == null) {
				unsetModifyTime();
			}
			else {
				setModifyTime((java.lang.String) value);
			}
			break;

		case IS_READ:
			if (value == null) {
				unsetIsRead();
			}
			else {
				setIsRead((java.lang.Boolean) value);
			}
			break;

		case IS_EDIT:
			if (value == null) {
				unsetIsEdit();
			}
			else {
				setIsEdit((java.lang.Boolean) value);
			}
			break;

		case IS_REMOVE:
			if (value == null) {
				unsetIsRemove();
			}
			else {
				setIsRemove((java.lang.Boolean) value);
			}
			break;

		case IS_HIDE_FROM:
			if (value == null) {
				unsetIsHideFrom();
			}
			else {
				setIsHideFrom((java.lang.Boolean) value);
			}
			break;

		case IS_HIDE_TO:
			if (value == null) {
				unsetIsHideTo();
			}
			else {
				setIsHideTo((java.lang.Boolean) value);
			}
			break;

		case IS_ASSEMBLE:
			if (value == null) {
				unsetIsAssemble();
			}
			else {
				setIsAssemble((java.lang.Boolean) value);
			}
			break;

		case IS_FORWARD:
			if (value == null) {
				unsetIsForward();
			}
			else {
				setIsForward((java.lang.Boolean) value);
			}
			break;

		case UID_TO:
			if (value == null) {
				unsetUidTo();
			}
			else {
				setUidTo((java.lang.String) value);
			}
			break;

		case FROM_ID:
			if (value == null) {
				unsetFromId();
			}
			else {
				setFromId((java.lang.String) value);
			}
			break;

		case ROOM_ID:
			if (value == null) {
				unsetRoomId();
			}
			else {
				setRoomId((java.lang.String) value);
			}
			break;

		case MSG_TYPE:
			if (value == null) {
				unsetMsgType();
			}
			else {
				setMsgType((java.lang.String) value);
			}
			break;

		case EXT_TYPE:
			if (value == null) {
				unsetExtType();
			}
			else {
				setExtType((java.lang.String) value);
			}
			break;

		case EVENT:
			if (value == null) {
				unsetEvent();
			}
			else {
				setEvent((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case CID:
			if (value == null) {
				unsetCid();
			}
			else {
				setCid((java.lang.String) value);
			}
			break;

		case REL_ID:
			if (value == null) {
				unsetRelId();
			}
			else {
				setRelId((java.lang.String) value);
			}
			break;

		case CONTENT:
			if (value == null) {
				unsetContent();
			}
			else {
				setContent((java.lang.String) value);
			}
			break;

		case MEDIA_ID:
			if (value == null) {
				unsetMediaId();
			}
			else {
				setMediaId((java.lang.String) value);
			}
			break;

		case COMMENT:
			if (value == null) {
				unsetComment();
			}
			else {
				setComment((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case MID:
			return getMid();

		case UID:
			return getUid();

		case CREATE_TIME:
			return getCreateTime();

		case MODIFY_TIME:
			return getModifyTime();

		case IS_READ:
			return isIsRead();

		case IS_EDIT:
			return isIsEdit();

		case IS_REMOVE:
			return isIsRemove();

		case IS_HIDE_FROM:
			return isIsHideFrom();

		case IS_HIDE_TO:
			return isIsHideTo();

		case IS_ASSEMBLE:
			return isIsAssemble();

		case IS_FORWARD:
			return isIsForward();

		case UID_TO:
			return getUidTo();

		case FROM_ID:
			return getFromId();

		case ROOM_ID:
			return getRoomId();

		case MSG_TYPE:
			return getMsgType();

		case EXT_TYPE:
			return getExtType();

		case EVENT:
			return getEvent();

		case STATUS:
			return getStatus();

		case CID:
			return getCid();

		case REL_ID:
			return getRelId();

		case CONTENT:
			return getContent();

		case MEDIA_ID:
			return getMediaId();

		case COMMENT:
			return getComment();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case MID:
			return isSetMid();
		case UID:
			return isSetUid();
		case CREATE_TIME:
			return isSetCreateTime();
		case MODIFY_TIME:
			return isSetModifyTime();
		case IS_READ:
			return isSetIsRead();
		case IS_EDIT:
			return isSetIsEdit();
		case IS_REMOVE:
			return isSetIsRemove();
		case IS_HIDE_FROM:
			return isSetIsHideFrom();
		case IS_HIDE_TO:
			return isSetIsHideTo();
		case IS_ASSEMBLE:
			return isSetIsAssemble();
		case IS_FORWARD:
			return isSetIsForward();
		case UID_TO:
			return isSetUidTo();
		case FROM_ID:
			return isSetFromId();
		case ROOM_ID:
			return isSetRoomId();
		case MSG_TYPE:
			return isSetMsgType();
		case EXT_TYPE:
			return isSetExtType();
		case EVENT:
			return isSetEvent();
		case STATUS:
			return isSetStatus();
		case CID:
			return isSetCid();
		case REL_ID:
			return isSetRelId();
		case CONTENT:
			return isSetContent();
		case MEDIA_ID:
			return isSetMediaId();
		case COMMENT:
			return isSetComment();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Message)
			return this.equals((Message) that);
		return false;
	}

	public boolean equals(Message that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_mid = true && this.isSetMid();
		boolean that_present_mid = true && that.isSetMid();
		if (this_present_mid || that_present_mid) {
			if (!(this_present_mid && that_present_mid))
				return false;
			if (!this.mid.equals(that.mid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_modifyTime = true && this.isSetModifyTime();
		boolean that_present_modifyTime = true && that.isSetModifyTime();
		if (this_present_modifyTime || that_present_modifyTime) {
			if (!(this_present_modifyTime && that_present_modifyTime))
				return false;
			if (!this.modifyTime.equals(that.modifyTime))
				return false;
		}

		boolean this_present_isRead = true;
		boolean that_present_isRead = true;
		if (this_present_isRead || that_present_isRead) {
			if (!(this_present_isRead && that_present_isRead))
				return false;
			if (this.isRead != that.isRead)
				return false;
		}

		boolean this_present_isEdit = true;
		boolean that_present_isEdit = true;
		if (this_present_isEdit || that_present_isEdit) {
			if (!(this_present_isEdit && that_present_isEdit))
				return false;
			if (this.isEdit != that.isEdit)
				return false;
		}

		boolean this_present_isRemove = true;
		boolean that_present_isRemove = true;
		if (this_present_isRemove || that_present_isRemove) {
			if (!(this_present_isRemove && that_present_isRemove))
				return false;
			if (this.isRemove != that.isRemove)
				return false;
		}

		boolean this_present_isHideFrom = true;
		boolean that_present_isHideFrom = true;
		if (this_present_isHideFrom || that_present_isHideFrom) {
			if (!(this_present_isHideFrom && that_present_isHideFrom))
				return false;
			if (this.isHideFrom != that.isHideFrom)
				return false;
		}

		boolean this_present_isHideTo = true;
		boolean that_present_isHideTo = true;
		if (this_present_isHideTo || that_present_isHideTo) {
			if (!(this_present_isHideTo && that_present_isHideTo))
				return false;
			if (this.isHideTo != that.isHideTo)
				return false;
		}

		boolean this_present_isAssemble = true;
		boolean that_present_isAssemble = true;
		if (this_present_isAssemble || that_present_isAssemble) {
			if (!(this_present_isAssemble && that_present_isAssemble))
				return false;
			if (this.isAssemble != that.isAssemble)
				return false;
		}

		boolean this_present_isForward = true;
		boolean that_present_isForward = true;
		if (this_present_isForward || that_present_isForward) {
			if (!(this_present_isForward && that_present_isForward))
				return false;
			if (this.isForward != that.isForward)
				return false;
		}

		boolean this_present_uidTo = true && this.isSetUidTo();
		boolean that_present_uidTo = true && that.isSetUidTo();
		if (this_present_uidTo || that_present_uidTo) {
			if (!(this_present_uidTo && that_present_uidTo))
				return false;
			if (!this.uidTo.equals(that.uidTo))
				return false;
		}

		boolean this_present_fromId = true && this.isSetFromId();
		boolean that_present_fromId = true && that.isSetFromId();
		if (this_present_fromId || that_present_fromId) {
			if (!(this_present_fromId && that_present_fromId))
				return false;
			if (!this.fromId.equals(that.fromId))
				return false;
		}

		boolean this_present_roomId = true && this.isSetRoomId();
		boolean that_present_roomId = true && that.isSetRoomId();
		if (this_present_roomId || that_present_roomId) {
			if (!(this_present_roomId && that_present_roomId))
				return false;
			if (!this.roomId.equals(that.roomId))
				return false;
		}

		boolean this_present_msgType = true && this.isSetMsgType();
		boolean that_present_msgType = true && that.isSetMsgType();
		if (this_present_msgType || that_present_msgType) {
			if (!(this_present_msgType && that_present_msgType))
				return false;
			if (!this.msgType.equals(that.msgType))
				return false;
		}

		boolean this_present_extType = true && this.isSetExtType();
		boolean that_present_extType = true && that.isSetExtType();
		if (this_present_extType || that_present_extType) {
			if (!(this_present_extType && that_present_extType))
				return false;
			if (!this.extType.equals(that.extType))
				return false;
		}

		boolean this_present_event = true && this.isSetEvent();
		boolean that_present_event = true && that.isSetEvent();
		if (this_present_event || that_present_event) {
			if (!(this_present_event && that_present_event))
				return false;
			if (!this.event.equals(that.event))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_cid = true && this.isSetCid();
		boolean that_present_cid = true && that.isSetCid();
		if (this_present_cid || that_present_cid) {
			if (!(this_present_cid && that_present_cid))
				return false;
			if (!this.cid.equals(that.cid))
				return false;
		}

		boolean this_present_relId = true && this.isSetRelId();
		boolean that_present_relId = true && that.isSetRelId();
		if (this_present_relId || that_present_relId) {
			if (!(this_present_relId && that_present_relId))
				return false;
			if (!this.relId.equals(that.relId))
				return false;
		}

		boolean this_present_content = true && this.isSetContent();
		boolean that_present_content = true && that.isSetContent();
		if (this_present_content || that_present_content) {
			if (!(this_present_content && that_present_content))
				return false;
			if (!this.content.equals(that.content))
				return false;
		}

		boolean this_present_mediaId = true && this.isSetMediaId();
		boolean that_present_mediaId = true && that.isSetMediaId();
		if (this_present_mediaId || that_present_mediaId) {
			if (!(this_present_mediaId && that_present_mediaId))
				return false;
			if (!this.mediaId.equals(that.mediaId))
				return false;
		}

		boolean this_present_comment = true && this.isSetComment();
		boolean that_present_comment = true && that.isSetComment();
		if (this_present_comment || that_present_comment) {
			if (!(this_present_comment && that_present_comment))
				return false;
			if (!this.comment.equals(that.comment))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
		if (isSetMid())
			hashCode = hashCode * 8191 + mid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetModifyTime()) ? 131071 : 524287);
		if (isSetModifyTime())
			hashCode = hashCode * 8191 + modifyTime.hashCode();

		hashCode = hashCode * 8191 + ((isRead) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isEdit) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isRemove) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isHideFrom) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isHideTo) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isAssemble) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isForward) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetUidTo()) ? 131071 : 524287);
		if (isSetUidTo())
			hashCode = hashCode * 8191 + uidTo.hashCode();

		hashCode = hashCode * 8191 + ((isSetFromId()) ? 131071 : 524287);
		if (isSetFromId())
			hashCode = hashCode * 8191 + fromId.hashCode();

		hashCode = hashCode * 8191 + ((isSetRoomId()) ? 131071 : 524287);
		if (isSetRoomId())
			hashCode = hashCode * 8191 + roomId.hashCode();

		hashCode = hashCode * 8191 + ((isSetMsgType()) ? 131071 : 524287);
		if (isSetMsgType())
			hashCode = hashCode * 8191 + msgType.hashCode();

		hashCode = hashCode * 8191 + ((isSetExtType()) ? 131071 : 524287);
		if (isSetExtType())
			hashCode = hashCode * 8191 + extType.hashCode();

		hashCode = hashCode * 8191 + ((isSetEvent()) ? 131071 : 524287);
		if (isSetEvent())
			hashCode = hashCode * 8191 + event.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetCid()) ? 131071 : 524287);
		if (isSetCid())
			hashCode = hashCode * 8191 + cid.hashCode();

		hashCode = hashCode * 8191 + ((isSetRelId()) ? 131071 : 524287);
		if (isSetRelId())
			hashCode = hashCode * 8191 + relId.hashCode();

		hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
		if (isSetContent())
			hashCode = hashCode * 8191 + content.hashCode();

		hashCode = hashCode * 8191 + ((isSetMediaId()) ? 131071 : 524287);
		if (isSetMediaId())
			hashCode = hashCode * 8191 + mediaId.hashCode();

		hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
		if (isSetComment())
			hashCode = hashCode * 8191 + comment.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(Message other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetModifyTime()).compareTo(other.isSetModifyTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetModifyTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTime, other.modifyTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsRead()).compareTo(other.isSetIsRead());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsRead()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRead, other.isRead);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsEdit()).compareTo(other.isSetIsEdit());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsEdit()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEdit, other.isEdit);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsRemove()).compareTo(other.isSetIsRemove());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsRemove()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRemove, other.isRemove);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsHideFrom()).compareTo(other.isSetIsHideFrom());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsHideFrom()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHideFrom, other.isHideFrom);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsHideTo()).compareTo(other.isSetIsHideTo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsHideTo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHideTo, other.isHideTo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsAssemble()).compareTo(other.isSetIsAssemble());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsAssemble()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAssemble, other.isAssemble);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsForward()).compareTo(other.isSetIsForward());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsForward()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isForward, other.isForward);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidTo()).compareTo(other.isSetUidTo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidTo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidTo, other.uidTo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFromId()).compareTo(other.isSetFromId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFromId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromId, other.fromId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRoomId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMsgType()).compareTo(other.isSetMsgType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMsgType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExtType()).compareTo(other.isSetExtType());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExtType()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extType, other.extType);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEvent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCid()).compareTo(other.isSetCid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, other.cid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRelId()).compareTo(other.isSetRelId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRelId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relId, other.relId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetContent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMediaId()).compareTo(other.isSetMediaId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMediaId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaId, other.mediaId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Message(");
		boolean first = true;

		sb.append("mid:");
		if (this.mid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.mid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("modifyTime:");
		if (this.modifyTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.modifyTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isRead:");
		sb.append(this.isRead);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isEdit:");
		sb.append(this.isEdit);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isRemove:");
		sb.append(this.isRemove);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isHideFrom:");
		sb.append(this.isHideFrom);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isHideTo:");
		sb.append(this.isHideTo);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isAssemble:");
		sb.append(this.isAssemble);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isForward:");
		sb.append(this.isForward);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uidTo:");
		if (this.uidTo == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uidTo);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("fromId:");
		if (this.fromId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.fromId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("roomId:");
		if (this.roomId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.roomId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("msgType:");
		if (this.msgType == null) {
			sb.append("null");
		}
		else {
			sb.append(this.msgType);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("extType:");
		if (this.extType == null) {
			sb.append("null");
		}
		else {
			sb.append(this.extType);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("event:");
		if (this.event == null) {
			sb.append("null");
		}
		else {
			sb.append(this.event);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (isSetCid()) {
			if (!first)
				sb.append(", ");
			sb.append("cid:");
			if (this.cid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.cid);
			}
			first = false;
		}
		if (isSetRelId()) {
			if (!first)
				sb.append(", ");
			sb.append("relId:");
			if (this.relId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.relId);
			}
			first = false;
		}
		if (isSetContent()) {
			if (!first)
				sb.append(", ");
			sb.append("content:");
			if (this.content == null) {
				sb.append("null");
			}
			else {
				sb.append(this.content);
			}
			first = false;
		}
		if (isSetMediaId()) {
			if (!first)
				sb.append(", ");
			sb.append("mediaId:");
			if (this.mediaId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.mediaId);
			}
			first = false;
		}
		if (isSetComment()) {
			if (!first)
				sb.append(", ");
			sb.append("comment:");
			if (this.comment == null) {
				sb.append("null");
			}
			else {
				sb.append(this.comment);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class MessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public MessageStandardScheme getScheme() {
			return new MessageStandardScheme();
		}

	}

	private static class MessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<Message> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // MID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mid = iprot.readString();
						struct.setMidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // MODIFY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.modifyTime = iprot.readString();
						struct.setModifyTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // IS_READ
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isRead = iprot.readBool();
						struct.setIsReadIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // IS_EDIT
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isEdit = iprot.readBool();
						struct.setIsEditIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // IS_REMOVE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isRemove = iprot.readBool();
						struct.setIsRemoveIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // IS_HIDE_FROM
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isHideFrom = iprot.readBool();
						struct.setIsHideFromIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_HIDE_TO
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isHideTo = iprot.readBool();
						struct.setIsHideToIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // IS_ASSEMBLE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isAssemble = iprot.readBool();
						struct.setIsAssembleIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // IS_FORWARD
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isForward = iprot.readBool();
						struct.setIsForwardIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // UID_TO
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidTo = iprot.readString();
						struct.setUidToIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // FROM_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.fromId = iprot.readString();
						struct.setFromIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // ROOM_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.roomId = iprot.readString();
						struct.setRoomIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // MSG_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.msgType = iprot.readString();
						struct.setMsgTypeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // EXT_TYPE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.extType = iprot.readString();
						struct.setExtTypeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // EVENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.event = iprot.readString();
						struct.setEventIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // CID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.cid = iprot.readString();
						struct.setCidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // REL_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.relId = iprot.readString();
						struct.setRelIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // CONTENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.content = iprot.readString();
						struct.setContentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // MEDIA_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mediaId = iprot.readString();
						struct.setMediaIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.comment = iprot.readString();
						struct.setCommentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.mid != null) {
				oprot.writeFieldBegin(MID_FIELD_DESC);
				oprot.writeString(struct.mid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.modifyTime != null) {
				oprot.writeFieldBegin(MODIFY_TIME_FIELD_DESC);
				oprot.writeString(struct.modifyTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_READ_FIELD_DESC);
			oprot.writeBool(struct.isRead);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_EDIT_FIELD_DESC);
			oprot.writeBool(struct.isEdit);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_REMOVE_FIELD_DESC);
			oprot.writeBool(struct.isRemove);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_HIDE_FROM_FIELD_DESC);
			oprot.writeBool(struct.isHideFrom);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_HIDE_TO_FIELD_DESC);
			oprot.writeBool(struct.isHideTo);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_ASSEMBLE_FIELD_DESC);
			oprot.writeBool(struct.isAssemble);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_FORWARD_FIELD_DESC);
			oprot.writeBool(struct.isForward);
			oprot.writeFieldEnd();
			if (struct.uidTo != null) {
				oprot.writeFieldBegin(UID_TO_FIELD_DESC);
				oprot.writeString(struct.uidTo);
				oprot.writeFieldEnd();
			}
			if (struct.fromId != null) {
				oprot.writeFieldBegin(FROM_ID_FIELD_DESC);
				oprot.writeString(struct.fromId);
				oprot.writeFieldEnd();
			}
			if (struct.roomId != null) {
				oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
				oprot.writeString(struct.roomId);
				oprot.writeFieldEnd();
			}
			if (struct.msgType != null) {
				oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
				oprot.writeString(struct.msgType);
				oprot.writeFieldEnd();
			}
			if (struct.extType != null) {
				oprot.writeFieldBegin(EXT_TYPE_FIELD_DESC);
				oprot.writeString(struct.extType);
				oprot.writeFieldEnd();
			}
			if (struct.event != null) {
				oprot.writeFieldBegin(EVENT_FIELD_DESC);
				oprot.writeString(struct.event);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.cid != null) {
				if (struct.isSetCid()) {
					oprot.writeFieldBegin(CID_FIELD_DESC);
					oprot.writeString(struct.cid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.relId != null) {
				if (struct.isSetRelId()) {
					oprot.writeFieldBegin(REL_ID_FIELD_DESC);
					oprot.writeString(struct.relId);
					oprot.writeFieldEnd();
				}
			}
			if (struct.content != null) {
				if (struct.isSetContent()) {
					oprot.writeFieldBegin(CONTENT_FIELD_DESC);
					oprot.writeString(struct.content);
					oprot.writeFieldEnd();
				}
			}
			if (struct.mediaId != null) {
				if (struct.isSetMediaId()) {
					oprot.writeFieldBegin(MEDIA_ID_FIELD_DESC);
					oprot.writeString(struct.mediaId);
					oprot.writeFieldEnd();
				}
			}
			if (struct.comment != null) {
				if (struct.isSetComment()) {
					oprot.writeFieldBegin(COMMENT_FIELD_DESC);
					oprot.writeString(struct.comment);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class MessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public MessageTupleScheme getScheme() {
			return new MessageTupleScheme();
		}

	}

	private static class MessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<Message> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Message struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetMid()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(2);
			}
			if (struct.isSetModifyTime()) {
				optionals.set(3);
			}
			if (struct.isSetIsRead()) {
				optionals.set(4);
			}
			if (struct.isSetIsEdit()) {
				optionals.set(5);
			}
			if (struct.isSetIsRemove()) {
				optionals.set(6);
			}
			if (struct.isSetIsHideFrom()) {
				optionals.set(7);
			}
			if (struct.isSetIsHideTo()) {
				optionals.set(8);
			}
			if (struct.isSetIsAssemble()) {
				optionals.set(9);
			}
			if (struct.isSetIsForward()) {
				optionals.set(10);
			}
			if (struct.isSetUidTo()) {
				optionals.set(11);
			}
			if (struct.isSetFromId()) {
				optionals.set(12);
			}
			if (struct.isSetRoomId()) {
				optionals.set(13);
			}
			if (struct.isSetMsgType()) {
				optionals.set(14);
			}
			if (struct.isSetExtType()) {
				optionals.set(15);
			}
			if (struct.isSetEvent()) {
				optionals.set(16);
			}
			if (struct.isSetStatus()) {
				optionals.set(17);
			}
			if (struct.isSetCid()) {
				optionals.set(18);
			}
			if (struct.isSetRelId()) {
				optionals.set(19);
			}
			if (struct.isSetContent()) {
				optionals.set(20);
			}
			if (struct.isSetMediaId()) {
				optionals.set(21);
			}
			if (struct.isSetComment()) {
				optionals.set(22);
			}
			oprot.writeBitSet(optionals, 23);
			if (struct.isSetMid()) {
				oprot.writeString(struct.mid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetModifyTime()) {
				oprot.writeString(struct.modifyTime);
			}
			if (struct.isSetIsRead()) {
				oprot.writeBool(struct.isRead);
			}
			if (struct.isSetIsEdit()) {
				oprot.writeBool(struct.isEdit);
			}
			if (struct.isSetIsRemove()) {
				oprot.writeBool(struct.isRemove);
			}
			if (struct.isSetIsHideFrom()) {
				oprot.writeBool(struct.isHideFrom);
			}
			if (struct.isSetIsHideTo()) {
				oprot.writeBool(struct.isHideTo);
			}
			if (struct.isSetIsAssemble()) {
				oprot.writeBool(struct.isAssemble);
			}
			if (struct.isSetIsForward()) {
				oprot.writeBool(struct.isForward);
			}
			if (struct.isSetUidTo()) {
				oprot.writeString(struct.uidTo);
			}
			if (struct.isSetFromId()) {
				oprot.writeString(struct.fromId);
			}
			if (struct.isSetRoomId()) {
				oprot.writeString(struct.roomId);
			}
			if (struct.isSetMsgType()) {
				oprot.writeString(struct.msgType);
			}
			if (struct.isSetExtType()) {
				oprot.writeString(struct.extType);
			}
			if (struct.isSetEvent()) {
				oprot.writeString(struct.event);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetCid()) {
				oprot.writeString(struct.cid);
			}
			if (struct.isSetRelId()) {
				oprot.writeString(struct.relId);
			}
			if (struct.isSetContent()) {
				oprot.writeString(struct.content);
			}
			if (struct.isSetMediaId()) {
				oprot.writeString(struct.mediaId);
			}
			if (struct.isSetComment()) {
				oprot.writeString(struct.comment);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Message struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(23);
			if (incoming.get(0)) {
				struct.mid = iprot.readString();
				struct.setMidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.modifyTime = iprot.readString();
				struct.setModifyTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.isRead = iprot.readBool();
				struct.setIsReadIsSet(true);
			}
			if (incoming.get(5)) {
				struct.isEdit = iprot.readBool();
				struct.setIsEditIsSet(true);
			}
			if (incoming.get(6)) {
				struct.isRemove = iprot.readBool();
				struct.setIsRemoveIsSet(true);
			}
			if (incoming.get(7)) {
				struct.isHideFrom = iprot.readBool();
				struct.setIsHideFromIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isHideTo = iprot.readBool();
				struct.setIsHideToIsSet(true);
			}
			if (incoming.get(9)) {
				struct.isAssemble = iprot.readBool();
				struct.setIsAssembleIsSet(true);
			}
			if (incoming.get(10)) {
				struct.isForward = iprot.readBool();
				struct.setIsForwardIsSet(true);
			}
			if (incoming.get(11)) {
				struct.uidTo = iprot.readString();
				struct.setUidToIsSet(true);
			}
			if (incoming.get(12)) {
				struct.fromId = iprot.readString();
				struct.setFromIdIsSet(true);
			}
			if (incoming.get(13)) {
				struct.roomId = iprot.readString();
				struct.setRoomIdIsSet(true);
			}
			if (incoming.get(14)) {
				struct.msgType = iprot.readString();
				struct.setMsgTypeIsSet(true);
			}
			if (incoming.get(15)) {
				struct.extType = iprot.readString();
				struct.setExtTypeIsSet(true);
			}
			if (incoming.get(16)) {
				struct.event = iprot.readString();
				struct.setEventIsSet(true);
			}
			if (incoming.get(17)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(18)) {
				struct.cid = iprot.readString();
				struct.setCidIsSet(true);
			}
			if (incoming.get(19)) {
				struct.relId = iprot.readString();
				struct.setRelIdIsSet(true);
			}
			if (incoming.get(20)) {
				struct.content = iprot.readString();
				struct.setContentIsSet(true);
			}
			if (incoming.get(21)) {
				struct.mediaId = iprot.readString();
				struct.setMediaIdIsSet(true);
			}
			if (incoming.get(22)) {
				struct.comment = iprot.readString();
				struct.setCommentIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
