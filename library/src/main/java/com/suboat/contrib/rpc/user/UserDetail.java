/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 用户详情
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-09")
public class UserDetail implements org.apache.thrift.TBase<UserDetail, UserDetail._Fields>, java.io.Serializable,
		Cloneable, Comparable<UserDetail> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"UserDetail");

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"nickname", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"base", org.apache.thrift.protocol.TType.STRUCT, (short) 3);

	private static final org.apache.thrift.protocol.TField PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"profile", org.apache.thrift.protocol.TType.STRUCT, (short) 4);

	private static final org.apache.thrift.protocol.TField SESSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"sessions", org.apache.thrift.protocol.TType.LIST, (short) 5);

	private static final org.apache.thrift.protocol.TField BANK_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bankCard", org.apache.thrift.protocol.TType.STRUCT, (short) 6);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserDetailStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserDetailTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String nickname; // required

	public @org.apache.thrift.annotation.Nullable User base; // required

	public @org.apache.thrift.annotation.Nullable UserProfile profile; // required

	public @org.apache.thrift.annotation.Nullable java.util.List<UserSession> sessions; // required

	public @org.apache.thrift.annotation.Nullable UserBankCard bankCard; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID((short) 1, "uid"), NICKNAME((short) 2, "nickname"), BASE((short) 3, "base"), PROFILE((short) 4,
				"profile"), SESSIONS((short) 5, "sessions"), BANK_CARD((short) 6, "bankCard");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID
				return UID;
			case 2: // NICKNAME
				return NICKNAME;
			case 3: // BASE
				return BASE;
			case 4: // PROFILE
				return PROFILE;
			case 5: // SESSIONS
				return SESSIONS;
			case 6: // BANK_CARD
				return BANK_CARD;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NICKNAME,
				new org.apache.thrift.meta_data.FieldMetaData("nickname",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
		tmpMap.put(_Fields.PROFILE,
				new org.apache.thrift.meta_data.FieldMetaData("profile",
						org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
								org.apache.thrift.protocol.TType.STRUCT, UserProfile.class)));
		tmpMap.put(_Fields.SESSIONS, new org.apache.thrift.meta_data.FieldMetaData("sessions",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"UserSession"))));
		tmpMap.put(_Fields.BANK_CARD,
				new org.apache.thrift.meta_data.FieldMetaData("bankCard",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"UserBankCard")));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserDetail.class, metaDataMap);
	}

	public UserDetail() {
	}

	public UserDetail(java.lang.String uid, java.lang.String nickname, User base, UserProfile profile,
			java.util.List<UserSession> sessions, UserBankCard bankCard) {
		this();
		this.uid = uid;
		this.nickname = nickname;
		this.base = base;
		this.profile = profile;
		this.sessions = sessions;
		this.bankCard = bankCard;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public UserDetail(UserDetail other) {
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetNickname()) {
			this.nickname = other.nickname;
		}
		if (other.isSetBase()) {
			this.base = new User(other.base);
		}
		if (other.isSetProfile()) {
			this.profile = new UserProfile(other.profile);
		}
		if (other.isSetSessions()) {
			java.util.List<UserSession> __this__sessions = new java.util.ArrayList<UserSession>(other.sessions.size());
			for (UserSession other_element : other.sessions) {
				__this__sessions.add(new UserSession(other_element));
			}
			this.sessions = __this__sessions;
		}
		if (other.isSetBankCard()) {
			this.bankCard = new UserBankCard(other.bankCard);
		}
	}

	public UserDetail deepCopy() {
		return new UserDetail(this);
	}

	@Override
	public void clear() {
		this.uid = null;
		this.nickname = null;
		this.base = null;
		this.profile = null;
		this.sessions = null;
		this.bankCard = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public UserDetail setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNickname() {
		return this.nickname;
	}

	public UserDetail setNickname(@org.apache.thrift.annotation.Nullable java.lang.String nickname) {
		this.nickname = nickname;
		return this;
	}

	public void unsetNickname() {
		this.nickname = null;
	}

	/**
	 * Returns true if field nickname is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNickname() {
		return this.nickname != null;
	}

	public void setNicknameIsSet(boolean value) {
		if (!value) {
			this.nickname = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public User getBase() {
		return this.base;
	}

	public UserDetail setBase(@org.apache.thrift.annotation.Nullable User base) {
		this.base = base;
		return this;
	}

	public void unsetBase() {
		this.base = null;
	}

	/**
	 * Returns true if field base is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetBase() {
		return this.base != null;
	}

	public void setBaseIsSet(boolean value) {
		if (!value) {
			this.base = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public UserProfile getProfile() {
		return this.profile;
	}

	public UserDetail setProfile(@org.apache.thrift.annotation.Nullable UserProfile profile) {
		this.profile = profile;
		return this;
	}

	public void unsetProfile() {
		this.profile = null;
	}

	/**
	 * Returns true if field profile is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProfile() {
		return this.profile != null;
	}

	public void setProfileIsSet(boolean value) {
		if (!value) {
			this.profile = null;
		}
	}

	public int getSessionsSize() {
		return (this.sessions == null) ? 0 : this.sessions.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<UserSession> getSessionsIterator() {
		return (this.sessions == null) ? null : this.sessions.iterator();
	}

	public void addToSessions(UserSession elem) {
		if (this.sessions == null) {
			this.sessions = new java.util.ArrayList<UserSession>();
		}
		this.sessions.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<UserSession> getSessions() {
		return this.sessions;
	}

	public UserDetail setSessions(@org.apache.thrift.annotation.Nullable java.util.List<UserSession> sessions) {
		this.sessions = sessions;
		return this;
	}

	public void unsetSessions() {
		this.sessions = null;
	}

	/**
	 * Returns true if field sessions is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSessions() {
		return this.sessions != null;
	}

	public void setSessionsIsSet(boolean value) {
		if (!value) {
			this.sessions = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public UserBankCard getBankCard() {
		return this.bankCard;
	}

	public UserDetail setBankCard(@org.apache.thrift.annotation.Nullable UserBankCard bankCard) {
		this.bankCard = bankCard;
		return this;
	}

	public void unsetBankCard() {
		this.bankCard = null;
	}

	/**
	 * Returns true if field bankCard is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBankCard() {
		return this.bankCard != null;
	}

	public void setBankCardIsSet(boolean value) {
		if (!value) {
			this.bankCard = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case NICKNAME:
			if (value == null) {
				unsetNickname();
			}
			else {
				setNickname((java.lang.String) value);
			}
			break;

		case BASE:
			if (value == null) {
				unsetBase();
			}
			else {
				setBase((User) value);
			}
			break;

		case PROFILE:
			if (value == null) {
				unsetProfile();
			}
			else {
				setProfile((UserProfile) value);
			}
			break;

		case SESSIONS:
			if (value == null) {
				unsetSessions();
			}
			else {
				setSessions((java.util.List<UserSession>) value);
			}
			break;

		case BANK_CARD:
			if (value == null) {
				unsetBankCard();
			}
			else {
				setBankCard((UserBankCard) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID:
			return getUid();

		case NICKNAME:
			return getNickname();

		case BASE:
			return getBase();

		case PROFILE:
			return getProfile();

		case SESSIONS:
			return getSessions();

		case BANK_CARD:
			return getBankCard();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID:
			return isSetUid();
		case NICKNAME:
			return isSetNickname();
		case BASE:
			return isSetBase();
		case PROFILE:
			return isSetProfile();
		case SESSIONS:
			return isSetSessions();
		case BANK_CARD:
			return isSetBankCard();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof UserDetail)
			return this.equals((UserDetail) that);
		return false;
	}

	public boolean equals(UserDetail that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_nickname = true && this.isSetNickname();
		boolean that_present_nickname = true && that.isSetNickname();
		if (this_present_nickname || that_present_nickname) {
			if (!(this_present_nickname && that_present_nickname))
				return false;
			if (!this.nickname.equals(that.nickname))
				return false;
		}

		boolean this_present_base = true && this.isSetBase();
		boolean that_present_base = true && that.isSetBase();
		if (this_present_base || that_present_base) {
			if (!(this_present_base && that_present_base))
				return false;
			if (!this.base.equals(that.base))
				return false;
		}

		boolean this_present_profile = true && this.isSetProfile();
		boolean that_present_profile = true && that.isSetProfile();
		if (this_present_profile || that_present_profile) {
			if (!(this_present_profile && that_present_profile))
				return false;
			if (!this.profile.equals(that.profile))
				return false;
		}

		boolean this_present_sessions = true && this.isSetSessions();
		boolean that_present_sessions = true && that.isSetSessions();
		if (this_present_sessions || that_present_sessions) {
			if (!(this_present_sessions && that_present_sessions))
				return false;
			if (!this.sessions.equals(that.sessions))
				return false;
		}

		boolean this_present_bankCard = true && this.isSetBankCard();
		boolean that_present_bankCard = true && that.isSetBankCard();
		if (this_present_bankCard || that_present_bankCard) {
			if (!(this_present_bankCard && that_present_bankCard))
				return false;
			if (!this.bankCard.equals(that.bankCard))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetNickname()) ? 131071 : 524287);
		if (isSetNickname())
			hashCode = hashCode * 8191 + nickname.hashCode();

		hashCode = hashCode * 8191 + ((isSetBase()) ? 131071 : 524287);
		if (isSetBase())
			hashCode = hashCode * 8191 + base.hashCode();

		hashCode = hashCode * 8191 + ((isSetProfile()) ? 131071 : 524287);
		if (isSetProfile())
			hashCode = hashCode * 8191 + profile.hashCode();

		hashCode = hashCode * 8191 + ((isSetSessions()) ? 131071 : 524287);
		if (isSetSessions())
			hashCode = hashCode * 8191 + sessions.hashCode();

		hashCode = hashCode * 8191 + ((isSetBankCard()) ? 131071 : 524287);
		if (isSetBankCard())
			hashCode = hashCode * 8191 + bankCard.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(UserDetail other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNickname()).compareTo(other.isSetNickname());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNickname()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickname, other.nickname);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBase()).compareTo(other.isSetBase());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBase()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProfile()).compareTo(other.isSetProfile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProfile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profile, other.profile);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSessions()).compareTo(other.isSetSessions());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSessions()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessions, other.sessions);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBankCard()).compareTo(other.isSetBankCard());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBankCard()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCard, other.bankCard);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("UserDetail(");
		boolean first = true;

		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("nickname:");
		if (this.nickname == null) {
			sb.append("null");
		}
		else {
			sb.append(this.nickname);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("base:");
		if (this.base == null) {
			sb.append("null");
		}
		else {
			sb.append(this.base);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("profile:");
		if (this.profile == null) {
			sb.append("null");
		}
		else {
			sb.append(this.profile);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sessions:");
		if (this.sessions == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sessions);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("bankCard:");
		if (this.bankCard == null) {
			sb.append("null");
		}
		else {
			sb.append(this.bankCard);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (base != null) {
			base.validate();
		}
		if (profile != null) {
			profile.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class UserDetailStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserDetailStandardScheme getScheme() {
			return new UserDetailStandardScheme();
		}

	}

	private static class UserDetailStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserDetail> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, UserDetail struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // NICKNAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nickname = iprot.readString();
						struct.setNicknameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // BASE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.base = new User();
						struct.base.read(iprot);
						struct.setBaseIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // PROFILE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.profile = new UserProfile();
						struct.profile.read(iprot);
						struct.setProfileIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // SESSIONS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
							struct.sessions = new java.util.ArrayList<UserSession>(_list0.size);
							@org.apache.thrift.annotation.Nullable
							UserSession _elem1;
							for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
								_elem1 = new UserSession();
								_elem1.read(iprot);
								struct.sessions.add(_elem1);
							}
							iprot.readListEnd();
						}
						struct.setSessionsIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // BANK_CARD
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.bankCard = new UserBankCard();
						struct.bankCard.read(iprot);
						struct.setBankCardIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, UserDetail struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.nickname != null) {
				oprot.writeFieldBegin(NICKNAME_FIELD_DESC);
				oprot.writeString(struct.nickname);
				oprot.writeFieldEnd();
			}
			if (struct.base != null) {
				oprot.writeFieldBegin(BASE_FIELD_DESC);
				struct.base.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.profile != null) {
				oprot.writeFieldBegin(PROFILE_FIELD_DESC);
				struct.profile.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.sessions != null) {
				oprot.writeFieldBegin(SESSIONS_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
							struct.sessions.size()));
					for (UserSession _iter3 : struct.sessions) {
						_iter3.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.bankCard != null) {
				oprot.writeFieldBegin(BANK_CARD_FIELD_DESC);
				struct.bankCard.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class UserDetailTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public UserDetailTupleScheme getScheme() {
			return new UserDetailTupleScheme();
		}

	}

	private static class UserDetailTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserDetail> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, UserDetail struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUid()) {
				optionals.set(0);
			}
			if (struct.isSetNickname()) {
				optionals.set(1);
			}
			if (struct.isSetBase()) {
				optionals.set(2);
			}
			if (struct.isSetProfile()) {
				optionals.set(3);
			}
			if (struct.isSetSessions()) {
				optionals.set(4);
			}
			if (struct.isSetBankCard()) {
				optionals.set(5);
			}
			oprot.writeBitSet(optionals, 6);
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetNickname()) {
				oprot.writeString(struct.nickname);
			}
			if (struct.isSetBase()) {
				struct.base.write(oprot);
			}
			if (struct.isSetProfile()) {
				struct.profile.write(oprot);
			}
			if (struct.isSetSessions()) {
				{
					oprot.writeI32(struct.sessions.size());
					for (UserSession _iter4 : struct.sessions) {
						_iter4.write(oprot);
					}
				}
			}
			if (struct.isSetBankCard()) {
				struct.bankCard.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, UserDetail struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(6);
			if (incoming.get(0)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.nickname = iprot.readString();
				struct.setNicknameIsSet(true);
			}
			if (incoming.get(2)) {
				struct.base = new User();
				struct.base.read(iprot);
				struct.setBaseIsSet(true);
			}
			if (incoming.get(3)) {
				struct.profile = new UserProfile();
				struct.profile.read(iprot);
				struct.setProfileIsSet(true);
			}
			if (incoming.get(4)) {
				{
					org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
					struct.sessions = new java.util.ArrayList<UserSession>(_list5.size);
					@org.apache.thrift.annotation.Nullable
					UserSession _elem6;
					for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
						_elem6 = new UserSession();
						_elem6.read(iprot);
						struct.sessions.add(_elem6);
					}
				}
				struct.setSessionsIsSet(true);
			}
			if (incoming.get(5)) {
				struct.bankCard = new UserBankCard();
				struct.bankCard.read(iprot);
				struct.setBankCardIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
