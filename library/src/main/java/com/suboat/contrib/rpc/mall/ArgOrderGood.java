/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class ArgOrderGood implements org.apache.thrift.TBase<ArgOrderGood, ArgOrderGood._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgOrderGood> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgOrderGood");

	private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField NUM_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numBuy", org.apache.thrift.protocol.TType.I32, (short) 2);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField UID_SELL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidSell", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"price", org.apache.thrift.protocol.TType.DOUBLE, (short) 10);

	private static final org.apache.thrift.protocol.TField PRICE_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceOld", org.apache.thrift.protocol.TType.DOUBLE, (short) 11);

	private static final org.apache.thrift.protocol.TField PRICE_COST_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceCost", org.apache.thrift.protocol.TType.DOUBLE, (short) 12);

	private static final org.apache.thrift.protocol.TField PAY_METHOD_PICK_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMethodPick", org.apache.thrift.protocol.TType.I32, (short) 5);

	private static final org.apache.thrift.protocol.TField PAY_METHOD_COVER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMethodCover", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField TRANSPORT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"transport", org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"address", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"note", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField INVOICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"invoice", org.apache.thrift.protocol.TType.STRUCT, (short) 13);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgOrderGoodStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgOrderGoodTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String gid; // required

	public int numBuy; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String uidSell; // optional

	public double price; // optional

	public double priceOld; // optional

	public double priceCost; // optional

	public int payMethodPick; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String payMethodCover; // optional

	public int transport; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String address; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String note; // optional

	public @org.apache.thrift.annotation.Nullable ArgOrderInvoice invoice; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		GID((short) 1, "gid"), NUM_BUY((short) 2, "numBuy"), UID((short) 3, "uid"), UID_SELL((short) 4,
				"uidSell"), PRICE((short) 10, "price"), PRICE_OLD((short) 11, "priceOld"), PRICE_COST((short) 12,
						"priceCost"), PAY_METHOD_PICK((short) 5, "payMethodPick"), PAY_METHOD_COVER((short) 6,
								"payMethodCover"), TRANSPORT((short) 7, "transport"), ADDRESS((short) 8,
										"address"), NOTE((short) 9, "note"), INVOICE((short) 13, "invoice");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // GID
				return GID;
			case 2: // NUM_BUY
				return NUM_BUY;
			case 3: // UID
				return UID;
			case 4: // UID_SELL
				return UID_SELL;
			case 10: // PRICE
				return PRICE;
			case 11: // PRICE_OLD
				return PRICE_OLD;
			case 12: // PRICE_COST
				return PRICE_COST;
			case 5: // PAY_METHOD_PICK
				return PAY_METHOD_PICK;
			case 6: // PAY_METHOD_COVER
				return PAY_METHOD_COVER;
			case 7: // TRANSPORT
				return TRANSPORT;
			case 8: // ADDRESS
				return ADDRESS;
			case 9: // NOTE
				return NOTE;
			case 13: // INVOICE
				return INVOICE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __NUMBUY_ISSET_ID = 0;

	private static final int __PRICE_ISSET_ID = 1;

	private static final int __PRICEOLD_ISSET_ID = 2;

	private static final int __PRICECOST_ISSET_ID = 3;

	private static final int __PAYMETHODPICK_ISSET_ID = 4;

	private static final int __TRANSPORT_ISSET_ID = 5;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.UID, _Fields.UID_SELL, _Fields.PRICE, _Fields.PRICE_OLD,
			_Fields.PRICE_COST, _Fields.PAY_METHOD_PICK, _Fields.PAY_METHOD_COVER, _Fields.TRANSPORT, _Fields.ADDRESS,
			_Fields.NOTE, _Fields.INVOICE };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.GID,
				new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NUM_BUY,
				new org.apache.thrift.meta_data.FieldMetaData("numBuy", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID_SELL,
				new org.apache.thrift.meta_data.FieldMetaData("uidSell",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_OLD,
				new org.apache.thrift.meta_data.FieldMetaData("priceOld",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_COST,
				new org.apache.thrift.meta_data.FieldMetaData("priceCost",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PAY_METHOD_PICK,
				new org.apache.thrift.meta_data.FieldMetaData("payMethodPick",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PAY_METHOD_COVER,
				new org.apache.thrift.meta_data.FieldMetaData("payMethodCover",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TRANSPORT,
				new org.apache.thrift.meta_data.FieldMetaData("transport",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ADDRESS,
				new org.apache.thrift.meta_data.FieldMetaData("address",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NOTE,
				new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.INVOICE,
				new org.apache.thrift.meta_data.FieldMetaData("invoice",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"ArgOrderInvoice")));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgOrderGood.class, metaDataMap);
	}

	public ArgOrderGood() {
	}

	public ArgOrderGood(java.lang.String gid, int numBuy) {
		this();
		this.gid = gid;
		this.numBuy = numBuy;
		setNumBuyIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgOrderGood(ArgOrderGood other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetGid()) {
			this.gid = other.gid;
		}
		this.numBuy = other.numBuy;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetUidSell()) {
			this.uidSell = other.uidSell;
		}
		this.price = other.price;
		this.priceOld = other.priceOld;
		this.priceCost = other.priceCost;
		this.payMethodPick = other.payMethodPick;
		if (other.isSetPayMethodCover()) {
			this.payMethodCover = other.payMethodCover;
		}
		this.transport = other.transport;
		if (other.isSetAddress()) {
			this.address = other.address;
		}
		if (other.isSetNote()) {
			this.note = other.note;
		}
		if (other.isSetInvoice()) {
			this.invoice = new ArgOrderInvoice(other.invoice);
		}
	}

	public ArgOrderGood deepCopy() {
		return new ArgOrderGood(this);
	}

	@Override
	public void clear() {
		this.gid = null;
		setNumBuyIsSet(false);
		this.numBuy = 0;
		this.uid = null;
		this.uidSell = null;
		setPriceIsSet(false);
		this.price = 0.0;
		setPriceOldIsSet(false);
		this.priceOld = 0.0;
		setPriceCostIsSet(false);
		this.priceCost = 0.0;
		setPayMethodPickIsSet(false);
		this.payMethodPick = 0;
		this.payMethodCover = null;
		setTransportIsSet(false);
		this.transport = 0;
		this.address = null;
		this.note = null;
		this.invoice = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getGid() {
		return this.gid;
	}

	public ArgOrderGood setGid(@org.apache.thrift.annotation.Nullable java.lang.String gid) {
		this.gid = gid;
		return this;
	}

	public void unsetGid() {
		this.gid = null;
	}

	/**
	 * Returns true if field gid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetGid() {
		return this.gid != null;
	}

	public void setGidIsSet(boolean value) {
		if (!value) {
			this.gid = null;
		}
	}

	public int getNumBuy() {
		return this.numBuy;
	}

	public ArgOrderGood setNumBuy(int numBuy) {
		this.numBuy = numBuy;
		setNumBuyIsSet(true);
		return this;
	}

	public void unsetNumBuy() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBUY_ISSET_ID);
	}

	/**
	 * Returns true if field numBuy is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetNumBuy() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBUY_ISSET_ID);
	}

	public void setNumBuyIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBUY_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public ArgOrderGood setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidSell() {
		return this.uidSell;
	}

	public ArgOrderGood setUidSell(@org.apache.thrift.annotation.Nullable java.lang.String uidSell) {
		this.uidSell = uidSell;
		return this;
	}

	public void unsetUidSell() {
		this.uidSell = null;
	}

	/**
	 * Returns true if field uidSell is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUidSell() {
		return this.uidSell != null;
	}

	public void setUidSellIsSet(boolean value) {
		if (!value) {
			this.uidSell = null;
		}
	}

	public double getPrice() {
		return this.price;
	}

	public ArgOrderGood setPrice(double price) {
		this.price = price;
		setPriceIsSet(true);
		return this;
	}

	public void unsetPrice() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
	}

	/**
	 * Returns true if field price is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPrice() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
	}

	public void setPriceIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
	}

	public double getPriceOld() {
		return this.priceOld;
	}

	public ArgOrderGood setPriceOld(double priceOld) {
		this.priceOld = priceOld;
		setPriceOldIsSet(true);
		return this;
	}

	public void unsetPriceOld() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEOLD_ISSET_ID);
	}

	/**
	 * Returns true if field priceOld is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceOld() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEOLD_ISSET_ID);
	}

	public void setPriceOldIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEOLD_ISSET_ID, value);
	}

	public double getPriceCost() {
		return this.priceCost;
	}

	public ArgOrderGood setPriceCost(double priceCost) {
		this.priceCost = priceCost;
		setPriceCostIsSet(true);
		return this;
	}

	public void unsetPriceCost() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICECOST_ISSET_ID);
	}

	/**
	 * Returns true if field priceCost is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceCost() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICECOST_ISSET_ID);
	}

	public void setPriceCostIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICECOST_ISSET_ID, value);
	}

	public int getPayMethodPick() {
		return this.payMethodPick;
	}

	public ArgOrderGood setPayMethodPick(int payMethodPick) {
		this.payMethodPick = payMethodPick;
		setPayMethodPickIsSet(true);
		return this;
	}

	public void unsetPayMethodPick() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAYMETHODPICK_ISSET_ID);
	}

	/**
	 * Returns true if field payMethodPick is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayMethodPick() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAYMETHODPICK_ISSET_ID);
	}

	public void setPayMethodPickIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAYMETHODPICK_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPayMethodCover() {
		return this.payMethodCover;
	}

	public ArgOrderGood setPayMethodCover(@org.apache.thrift.annotation.Nullable java.lang.String payMethodCover) {
		this.payMethodCover = payMethodCover;
		return this;
	}

	public void unsetPayMethodCover() {
		this.payMethodCover = null;
	}

	/**
	 * Returns true if field payMethodCover is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayMethodCover() {
		return this.payMethodCover != null;
	}

	public void setPayMethodCoverIsSet(boolean value) {
		if (!value) {
			this.payMethodCover = null;
		}
	}

	public int getTransport() {
		return this.transport;
	}

	public ArgOrderGood setTransport(int transport) {
		this.transport = transport;
		setTransportIsSet(true);
		return this;
	}

	public void unsetTransport() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSPORT_ISSET_ID);
	}

	/**
	 * Returns true if field transport is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTransport() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSPORT_ISSET_ID);
	}

	public void setTransportIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSPORT_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAddress() {
		return this.address;
	}

	public ArgOrderGood setAddress(@org.apache.thrift.annotation.Nullable java.lang.String address) {
		this.address = address;
		return this;
	}

	public void unsetAddress() {
		this.address = null;
	}

	/**
	 * Returns true if field address is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAddress() {
		return this.address != null;
	}

	public void setAddressIsSet(boolean value) {
		if (!value) {
			this.address = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNote() {
		return this.note;
	}

	public ArgOrderGood setNote(@org.apache.thrift.annotation.Nullable java.lang.String note) {
		this.note = note;
		return this;
	}

	public void unsetNote() {
		this.note = null;
	}

	/**
	 * Returns true if field note is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetNote() {
		return this.note != null;
	}

	public void setNoteIsSet(boolean value) {
		if (!value) {
			this.note = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public ArgOrderInvoice getInvoice() {
		return this.invoice;
	}

	public ArgOrderGood setInvoice(@org.apache.thrift.annotation.Nullable ArgOrderInvoice invoice) {
		this.invoice = invoice;
		return this;
	}

	public void unsetInvoice() {
		this.invoice = null;
	}

	/**
	 * Returns true if field invoice is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetInvoice() {
		return this.invoice != null;
	}

	public void setInvoiceIsSet(boolean value) {
		if (!value) {
			this.invoice = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case GID:
			if (value == null) {
				unsetGid();
			}
			else {
				setGid((java.lang.String) value);
			}
			break;

		case NUM_BUY:
			if (value == null) {
				unsetNumBuy();
			}
			else {
				setNumBuy((java.lang.Integer) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case UID_SELL:
			if (value == null) {
				unsetUidSell();
			}
			else {
				setUidSell((java.lang.String) value);
			}
			break;

		case PRICE:
			if (value == null) {
				unsetPrice();
			}
			else {
				setPrice((java.lang.Double) value);
			}
			break;

		case PRICE_OLD:
			if (value == null) {
				unsetPriceOld();
			}
			else {
				setPriceOld((java.lang.Double) value);
			}
			break;

		case PRICE_COST:
			if (value == null) {
				unsetPriceCost();
			}
			else {
				setPriceCost((java.lang.Double) value);
			}
			break;

		case PAY_METHOD_PICK:
			if (value == null) {
				unsetPayMethodPick();
			}
			else {
				setPayMethodPick((java.lang.Integer) value);
			}
			break;

		case PAY_METHOD_COVER:
			if (value == null) {
				unsetPayMethodCover();
			}
			else {
				setPayMethodCover((java.lang.String) value);
			}
			break;

		case TRANSPORT:
			if (value == null) {
				unsetTransport();
			}
			else {
				setTransport((java.lang.Integer) value);
			}
			break;

		case ADDRESS:
			if (value == null) {
				unsetAddress();
			}
			else {
				setAddress((java.lang.String) value);
			}
			break;

		case NOTE:
			if (value == null) {
				unsetNote();
			}
			else {
				setNote((java.lang.String) value);
			}
			break;

		case INVOICE:
			if (value == null) {
				unsetInvoice();
			}
			else {
				setInvoice((ArgOrderInvoice) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case GID:
			return getGid();

		case NUM_BUY:
			return getNumBuy();

		case UID:
			return getUid();

		case UID_SELL:
			return getUidSell();

		case PRICE:
			return getPrice();

		case PRICE_OLD:
			return getPriceOld();

		case PRICE_COST:
			return getPriceCost();

		case PAY_METHOD_PICK:
			return getPayMethodPick();

		case PAY_METHOD_COVER:
			return getPayMethodCover();

		case TRANSPORT:
			return getTransport();

		case ADDRESS:
			return getAddress();

		case NOTE:
			return getNote();

		case INVOICE:
			return getInvoice();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case GID:
			return isSetGid();
		case NUM_BUY:
			return isSetNumBuy();
		case UID:
			return isSetUid();
		case UID_SELL:
			return isSetUidSell();
		case PRICE:
			return isSetPrice();
		case PRICE_OLD:
			return isSetPriceOld();
		case PRICE_COST:
			return isSetPriceCost();
		case PAY_METHOD_PICK:
			return isSetPayMethodPick();
		case PAY_METHOD_COVER:
			return isSetPayMethodCover();
		case TRANSPORT:
			return isSetTransport();
		case ADDRESS:
			return isSetAddress();
		case NOTE:
			return isSetNote();
		case INVOICE:
			return isSetInvoice();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgOrderGood)
			return this.equals((ArgOrderGood) that);
		return false;
	}

	public boolean equals(ArgOrderGood that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_gid = true && this.isSetGid();
		boolean that_present_gid = true && that.isSetGid();
		if (this_present_gid || that_present_gid) {
			if (!(this_present_gid && that_present_gid))
				return false;
			if (!this.gid.equals(that.gid))
				return false;
		}

		boolean this_present_numBuy = true;
		boolean that_present_numBuy = true;
		if (this_present_numBuy || that_present_numBuy) {
			if (!(this_present_numBuy && that_present_numBuy))
				return false;
			if (this.numBuy != that.numBuy)
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_uidSell = true && this.isSetUidSell();
		boolean that_present_uidSell = true && that.isSetUidSell();
		if (this_present_uidSell || that_present_uidSell) {
			if (!(this_present_uidSell && that_present_uidSell))
				return false;
			if (!this.uidSell.equals(that.uidSell))
				return false;
		}

		boolean this_present_price = true && this.isSetPrice();
		boolean that_present_price = true && that.isSetPrice();
		if (this_present_price || that_present_price) {
			if (!(this_present_price && that_present_price))
				return false;
			if (this.price != that.price)
				return false;
		}

		boolean this_present_priceOld = true && this.isSetPriceOld();
		boolean that_present_priceOld = true && that.isSetPriceOld();
		if (this_present_priceOld || that_present_priceOld) {
			if (!(this_present_priceOld && that_present_priceOld))
				return false;
			if (this.priceOld != that.priceOld)
				return false;
		}

		boolean this_present_priceCost = true && this.isSetPriceCost();
		boolean that_present_priceCost = true && that.isSetPriceCost();
		if (this_present_priceCost || that_present_priceCost) {
			if (!(this_present_priceCost && that_present_priceCost))
				return false;
			if (this.priceCost != that.priceCost)
				return false;
		}

		boolean this_present_payMethodPick = true && this.isSetPayMethodPick();
		boolean that_present_payMethodPick = true && that.isSetPayMethodPick();
		if (this_present_payMethodPick || that_present_payMethodPick) {
			if (!(this_present_payMethodPick && that_present_payMethodPick))
				return false;
			if (this.payMethodPick != that.payMethodPick)
				return false;
		}

		boolean this_present_payMethodCover = true && this.isSetPayMethodCover();
		boolean that_present_payMethodCover = true && that.isSetPayMethodCover();
		if (this_present_payMethodCover || that_present_payMethodCover) {
			if (!(this_present_payMethodCover && that_present_payMethodCover))
				return false;
			if (!this.payMethodCover.equals(that.payMethodCover))
				return false;
		}

		boolean this_present_transport = true && this.isSetTransport();
		boolean that_present_transport = true && that.isSetTransport();
		if (this_present_transport || that_present_transport) {
			if (!(this_present_transport && that_present_transport))
				return false;
			if (this.transport != that.transport)
				return false;
		}

		boolean this_present_address = true && this.isSetAddress();
		boolean that_present_address = true && that.isSetAddress();
		if (this_present_address || that_present_address) {
			if (!(this_present_address && that_present_address))
				return false;
			if (!this.address.equals(that.address))
				return false;
		}

		boolean this_present_note = true && this.isSetNote();
		boolean that_present_note = true && that.isSetNote();
		if (this_present_note || that_present_note) {
			if (!(this_present_note && that_present_note))
				return false;
			if (!this.note.equals(that.note))
				return false;
		}

		boolean this_present_invoice = true && this.isSetInvoice();
		boolean that_present_invoice = true && that.isSetInvoice();
		if (this_present_invoice || that_present_invoice) {
			if (!(this_present_invoice && that_present_invoice))
				return false;
			if (!this.invoice.equals(that.invoice))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetGid()) ? 131071 : 524287);
		if (isSetGid())
			hashCode = hashCode * 8191 + gid.hashCode();

		hashCode = hashCode * 8191 + numBuy;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUidSell()) ? 131071 : 524287);
		if (isSetUidSell())
			hashCode = hashCode * 8191 + uidSell.hashCode();

		hashCode = hashCode * 8191 + ((isSetPrice()) ? 131071 : 524287);
		if (isSetPrice())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(price);

		hashCode = hashCode * 8191 + ((isSetPriceOld()) ? 131071 : 524287);
		if (isSetPriceOld())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceOld);

		hashCode = hashCode * 8191 + ((isSetPriceCost()) ? 131071 : 524287);
		if (isSetPriceCost())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceCost);

		hashCode = hashCode * 8191 + ((isSetPayMethodPick()) ? 131071 : 524287);
		if (isSetPayMethodPick())
			hashCode = hashCode * 8191 + payMethodPick;

		hashCode = hashCode * 8191 + ((isSetPayMethodCover()) ? 131071 : 524287);
		if (isSetPayMethodCover())
			hashCode = hashCode * 8191 + payMethodCover.hashCode();

		hashCode = hashCode * 8191 + ((isSetTransport()) ? 131071 : 524287);
		if (isSetTransport())
			hashCode = hashCode * 8191 + transport;

		hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
		if (isSetAddress())
			hashCode = hashCode * 8191 + address.hashCode();

		hashCode = hashCode * 8191 + ((isSetNote()) ? 131071 : 524287);
		if (isSetNote())
			hashCode = hashCode * 8191 + note.hashCode();

		hashCode = hashCode * 8191 + ((isSetInvoice()) ? 131071 : 524287);
		if (isSetInvoice())
			hashCode = hashCode * 8191 + invoice.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgOrderGood other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, other.gid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumBuy()).compareTo(other.isSetNumBuy());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumBuy()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numBuy, other.numBuy);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidSell()).compareTo(other.isSetUidSell());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidSell()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidSell, other.uidSell);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceOld()).compareTo(other.isSetPriceOld());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceOld()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceOld, other.priceOld);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceCost()).compareTo(other.isSetPriceCost());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceCost()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceCost, other.priceCost);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayMethodPick()).compareTo(other.isSetPayMethodPick());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMethodPick()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMethodPick, other.payMethodPick);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayMethodCover()).compareTo(other.isSetPayMethodCover());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMethodCover()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMethodCover, other.payMethodCover);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTransport()).compareTo(other.isSetTransport());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransport()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transport, other.transport);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAddress()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNote()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetInvoice()).compareTo(other.isSetInvoice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetInvoice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invoice, other.invoice);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgOrderGood(");
		boolean first = true;

		sb.append("gid:");
		if (this.gid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.gid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numBuy:");
		sb.append(this.numBuy);
		first = false;
		if (isSetUid()) {
			if (!first)
				sb.append(", ");
			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
		}
		if (isSetUidSell()) {
			if (!first)
				sb.append(", ");
			sb.append("uidSell:");
			if (this.uidSell == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uidSell);
			}
			first = false;
		}
		if (isSetPrice()) {
			if (!first)
				sb.append(", ");
			sb.append("price:");
			sb.append(this.price);
			first = false;
		}
		if (isSetPriceOld()) {
			if (!first)
				sb.append(", ");
			sb.append("priceOld:");
			sb.append(this.priceOld);
			first = false;
		}
		if (isSetPriceCost()) {
			if (!first)
				sb.append(", ");
			sb.append("priceCost:");
			sb.append(this.priceCost);
			first = false;
		}
		if (isSetPayMethodPick()) {
			if (!first)
				sb.append(", ");
			sb.append("payMethodPick:");
			sb.append(this.payMethodPick);
			first = false;
		}
		if (isSetPayMethodCover()) {
			if (!first)
				sb.append(", ");
			sb.append("payMethodCover:");
			if (this.payMethodCover == null) {
				sb.append("null");
			}
			else {
				sb.append(this.payMethodCover);
			}
			first = false;
		}
		if (isSetTransport()) {
			if (!first)
				sb.append(", ");
			sb.append("transport:");
			sb.append(this.transport);
			first = false;
		}
		if (isSetAddress()) {
			if (!first)
				sb.append(", ");
			sb.append("address:");
			if (this.address == null) {
				sb.append("null");
			}
			else {
				sb.append(this.address);
			}
			first = false;
		}
		if (isSetNote()) {
			if (!first)
				sb.append(", ");
			sb.append("note:");
			if (this.note == null) {
				sb.append("null");
			}
			else {
				sb.append(this.note);
			}
			first = false;
		}
		if (isSetInvoice()) {
			if (!first)
				sb.append(", ");
			sb.append("invoice:");
			if (this.invoice == null) {
				sb.append("null");
			}
			else {
				sb.append(this.invoice);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgOrderGoodStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgOrderGoodStandardScheme getScheme() {
			return new ArgOrderGoodStandardScheme();
		}

	}

	private static class ArgOrderGoodStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgOrderGood> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgOrderGood struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // GID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.gid = iprot.readString();
						struct.setGidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // NUM_BUY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numBuy = iprot.readI32();
						struct.setNumBuyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // UID_SELL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidSell = iprot.readString();
						struct.setUidSellIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.price = iprot.readDouble();
						struct.setPriceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // PRICE_OLD
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceOld = iprot.readDouble();
						struct.setPriceOldIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // PRICE_COST
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceCost = iprot.readDouble();
						struct.setPriceCostIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // PAY_METHOD_PICK
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.payMethodPick = iprot.readI32();
						struct.setPayMethodPickIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // PAY_METHOD_COVER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.payMethodCover = iprot.readString();
						struct.setPayMethodCoverIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // TRANSPORT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.transport = iprot.readI32();
						struct.setTransportIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // ADDRESS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.address = iprot.readString();
						struct.setAddressIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // NOTE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.note = iprot.readString();
						struct.setNoteIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // INVOICE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.invoice = new ArgOrderInvoice();
						struct.invoice.read(iprot);
						struct.setInvoiceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgOrderGood struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.gid != null) {
				oprot.writeFieldBegin(GID_FIELD_DESC);
				oprot.writeString(struct.gid);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(NUM_BUY_FIELD_DESC);
			oprot.writeI32(struct.numBuy);
			oprot.writeFieldEnd();
			if (struct.uid != null) {
				if (struct.isSetUid()) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.uidSell != null) {
				if (struct.isSetUidSell()) {
					oprot.writeFieldBegin(UID_SELL_FIELD_DESC);
					oprot.writeString(struct.uidSell);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetPayMethodPick()) {
				oprot.writeFieldBegin(PAY_METHOD_PICK_FIELD_DESC);
				oprot.writeI32(struct.payMethodPick);
				oprot.writeFieldEnd();
			}
			if (struct.payMethodCover != null) {
				if (struct.isSetPayMethodCover()) {
					oprot.writeFieldBegin(PAY_METHOD_COVER_FIELD_DESC);
					oprot.writeString(struct.payMethodCover);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetTransport()) {
				oprot.writeFieldBegin(TRANSPORT_FIELD_DESC);
				oprot.writeI32(struct.transport);
				oprot.writeFieldEnd();
			}
			if (struct.address != null) {
				if (struct.isSetAddress()) {
					oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
					oprot.writeString(struct.address);
					oprot.writeFieldEnd();
				}
			}
			if (struct.note != null) {
				if (struct.isSetNote()) {
					oprot.writeFieldBegin(NOTE_FIELD_DESC);
					oprot.writeString(struct.note);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetPrice()) {
				oprot.writeFieldBegin(PRICE_FIELD_DESC);
				oprot.writeDouble(struct.price);
				oprot.writeFieldEnd();
			}
			if (struct.isSetPriceOld()) {
				oprot.writeFieldBegin(PRICE_OLD_FIELD_DESC);
				oprot.writeDouble(struct.priceOld);
				oprot.writeFieldEnd();
			}
			if (struct.isSetPriceCost()) {
				oprot.writeFieldBegin(PRICE_COST_FIELD_DESC);
				oprot.writeDouble(struct.priceCost);
				oprot.writeFieldEnd();
			}
			if (struct.invoice != null) {
				if (struct.isSetInvoice()) {
					oprot.writeFieldBegin(INVOICE_FIELD_DESC);
					struct.invoice.write(oprot);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgOrderGoodTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgOrderGoodTupleScheme getScheme() {
			return new ArgOrderGoodTupleScheme();
		}

	}

	private static class ArgOrderGoodTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgOrderGood> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgOrderGood struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetGid()) {
				optionals.set(0);
			}
			if (struct.isSetNumBuy()) {
				optionals.set(1);
			}
			if (struct.isSetUid()) {
				optionals.set(2);
			}
			if (struct.isSetUidSell()) {
				optionals.set(3);
			}
			if (struct.isSetPrice()) {
				optionals.set(4);
			}
			if (struct.isSetPriceOld()) {
				optionals.set(5);
			}
			if (struct.isSetPriceCost()) {
				optionals.set(6);
			}
			if (struct.isSetPayMethodPick()) {
				optionals.set(7);
			}
			if (struct.isSetPayMethodCover()) {
				optionals.set(8);
			}
			if (struct.isSetTransport()) {
				optionals.set(9);
			}
			if (struct.isSetAddress()) {
				optionals.set(10);
			}
			if (struct.isSetNote()) {
				optionals.set(11);
			}
			if (struct.isSetInvoice()) {
				optionals.set(12);
			}
			oprot.writeBitSet(optionals, 13);
			if (struct.isSetGid()) {
				oprot.writeString(struct.gid);
			}
			if (struct.isSetNumBuy()) {
				oprot.writeI32(struct.numBuy);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetUidSell()) {
				oprot.writeString(struct.uidSell);
			}
			if (struct.isSetPrice()) {
				oprot.writeDouble(struct.price);
			}
			if (struct.isSetPriceOld()) {
				oprot.writeDouble(struct.priceOld);
			}
			if (struct.isSetPriceCost()) {
				oprot.writeDouble(struct.priceCost);
			}
			if (struct.isSetPayMethodPick()) {
				oprot.writeI32(struct.payMethodPick);
			}
			if (struct.isSetPayMethodCover()) {
				oprot.writeString(struct.payMethodCover);
			}
			if (struct.isSetTransport()) {
				oprot.writeI32(struct.transport);
			}
			if (struct.isSetAddress()) {
				oprot.writeString(struct.address);
			}
			if (struct.isSetNote()) {
				oprot.writeString(struct.note);
			}
			if (struct.isSetInvoice()) {
				struct.invoice.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgOrderGood struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(13);
			if (incoming.get(0)) {
				struct.gid = iprot.readString();
				struct.setGidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.numBuy = iprot.readI32();
				struct.setNumBuyIsSet(true);
			}
			if (incoming.get(2)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.uidSell = iprot.readString();
				struct.setUidSellIsSet(true);
			}
			if (incoming.get(4)) {
				struct.price = iprot.readDouble();
				struct.setPriceIsSet(true);
			}
			if (incoming.get(5)) {
				struct.priceOld = iprot.readDouble();
				struct.setPriceOldIsSet(true);
			}
			if (incoming.get(6)) {
				struct.priceCost = iprot.readDouble();
				struct.setPriceCostIsSet(true);
			}
			if (incoming.get(7)) {
				struct.payMethodPick = iprot.readI32();
				struct.setPayMethodPickIsSet(true);
			}
			if (incoming.get(8)) {
				struct.payMethodCover = iprot.readString();
				struct.setPayMethodCoverIsSet(true);
			}
			if (incoming.get(9)) {
				struct.transport = iprot.readI32();
				struct.setTransportIsSet(true);
			}
			if (incoming.get(10)) {
				struct.address = iprot.readString();
				struct.setAddressIsSet(true);
			}
			if (incoming.get(11)) {
				struct.note = iprot.readString();
				struct.setNoteIsSet(true);
			}
			if (incoming.get(12)) {
				struct.invoice = new ArgOrderInvoice();
				struct.invoice.read(iprot);
				struct.setInvoiceIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
