/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Order
		implements org.apache.thrift.TBase<Order, Order._Fields>, java.io.Serializable, Cloneable, Comparable<Order> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Order");

	private static final org.apache.thrift.protocol.TField OID_FIELD_DESC = new org.apache.thrift.protocol.TField("oid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField XID_FIELD_DESC = new org.apache.thrift.protocol.TField("xid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField DID_FIELD_DESC = new org.apache.thrift.protocol.TField("did",
			org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField UID_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidBuy", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField UID_SELL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidSell", org.apache.thrift.protocol.TType.STRING, (short) 51);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField CONFIRM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"confirmTime", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTime", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField IS_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isDelete", org.apache.thrift.protocol.TType.BOOL, (short) 11);

	private static final org.apache.thrift.protocol.TField IS_VIRTUAL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isVirtual", org.apache.thrift.protocol.TType.BOOL, (short) 12);

	private static final org.apache.thrift.protocol.TField IS_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isCurrency", org.apache.thrift.protocol.TType.BOOL, (short) 13);

	private static final org.apache.thrift.protocol.TField IS_BUNDLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isBundle", org.apache.thrift.protocol.TType.BOOL, (short) 14);

	private static final org.apache.thrift.protocol.TField IS_MIX_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isMix", org.apache.thrift.protocol.TType.BOOL, (short) 15);

	private static final org.apache.thrift.protocol.TField IS_NEED_CASH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isNeedCash", org.apache.thrift.protocol.TType.BOOL, (short) 16);

	private static final org.apache.thrift.protocol.TField IS_NEED_WALLET_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isNeedWallet", org.apache.thrift.protocol.TType.BOOL, (short) 17);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 18);

	private static final org.apache.thrift.protocol.TField STATUS_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"statusPay", org.apache.thrift.protocol.TType.I32, (short) 19);

	private static final org.apache.thrift.protocol.TField SERIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"serialId", org.apache.thrift.protocol.TType.STRING, (short) 20);

	private static final org.apache.thrift.protocol.TField IS_REVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isReview", org.apache.thrift.protocol.TType.BOOL, (short) 21);

	private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comment", org.apache.thrift.protocol.TType.STRING, (short) 22);

	private static final org.apache.thrift.protocol.TField PRICE_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceOne", org.apache.thrift.protocol.TType.DOUBLE, (short) 23);

	private static final org.apache.thrift.protocol.TField PRICE_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceAll", org.apache.thrift.protocol.TType.DOUBLE, (short) 24);

	private static final org.apache.thrift.protocol.TField NUM_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numBuy", org.apache.thrift.protocol.TType.I32, (short) 25);

	private static final org.apache.thrift.protocol.TField METHOD_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"methodPay", org.apache.thrift.protocol.TType.I32, (short) 26);

	private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid",
			org.apache.thrift.protocol.TType.STRING, (short) 27);

	private static final org.apache.thrift.protocol.TField PAY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payTime", org.apache.thrift.protocol.TType.STRING, (short) 28);

	private static final org.apache.thrift.protocol.TField SEND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"sendTime", org.apache.thrift.protocol.TType.STRING, (short) 29);

	private static final org.apache.thrift.protocol.TField DEAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"dealTime", org.apache.thrift.protocol.TType.STRING, (short) 30);

	private static final org.apache.thrift.protocol.TField PAY_MAP_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMapOne", org.apache.thrift.protocol.TType.MAP, (short) 31);

	private static final org.apache.thrift.protocol.TField PAY_MAP_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMapThis", org.apache.thrift.protocol.TType.MAP, (short) 32);

	private static final org.apache.thrift.protocol.TField PAY_MAP_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMapAll", org.apache.thrift.protocol.TType.MAP, (short) 33);

	private static final org.apache.thrift.protocol.TField UNPAID_MAP_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"unpaidMapThis", org.apache.thrift.protocol.TType.MAP, (short) 34);

	private static final org.apache.thrift.protocol.TField UNPAID_MAP_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"unpaidMapAll", org.apache.thrift.protocol.TType.MAP, (short) 35);

	private static final org.apache.thrift.protocol.TField PAID_MAP_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"paidMapOne", org.apache.thrift.protocol.TType.MAP, (short) 54);

	private static final org.apache.thrift.protocol.TField PAID_MAP_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"paidMapThis", org.apache.thrift.protocol.TType.MAP, (short) 55);

	private static final org.apache.thrift.protocol.TField PAID_MAP_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"paidMapAll", org.apache.thrift.protocol.TType.MAP, (short) 56);

	private static final org.apache.thrift.protocol.TField TRANSPORT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"transport", org.apache.thrift.protocol.TType.I32, (short) 59);

	private static final org.apache.thrift.protocol.TField TRANS_FEE_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"transFeeOne", org.apache.thrift.protocol.TType.DOUBLE, (short) 36);

	private static final org.apache.thrift.protocol.TField TRANS_FEE_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"transFeeThis", org.apache.thrift.protocol.TType.DOUBLE, (short) 37);

	private static final org.apache.thrift.protocol.TField TRANS_FEE_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"transFeeAll", org.apache.thrift.protocol.TType.DOUBLE, (short) 38);

	private static final org.apache.thrift.protocol.TField DELIVERY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"deliveryCode", org.apache.thrift.protocol.TType.STRING, (short) 60);

	private static final org.apache.thrift.protocol.TField DELIVERY_COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"deliveryCompany", org.apache.thrift.protocol.TType.STRING, (short) 61);

	private static final org.apache.thrift.protocol.TField PRICE_WORK_ONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceWorkOne", org.apache.thrift.protocol.TType.DOUBLE, (short) 39);

	private static final org.apache.thrift.protocol.TField PRICE_WORK_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceWorkThis", org.apache.thrift.protocol.TType.DOUBLE, (short) 40);

	private static final org.apache.thrift.protocol.TField PRICE_WORK_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceWorkAll", org.apache.thrift.protocol.TType.DOUBLE, (short) 41);

	private static final org.apache.thrift.protocol.TField PRICE_COST_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceCostThis", org.apache.thrift.protocol.TType.DOUBLE, (short) 49);

	private static final org.apache.thrift.protocol.TField PRICE_COST_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceCostAll", org.apache.thrift.protocol.TType.DOUBLE, (short) 50);

	private static final org.apache.thrift.protocol.TField COUPON_PAY_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"couponPayThis", org.apache.thrift.protocol.TType.DOUBLE, (short) 42);

	private static final org.apache.thrift.protocol.TField COUPON_PAY_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"couponPayAll", org.apache.thrift.protocol.TType.DOUBLE, (short) 43);

	private static final org.apache.thrift.protocol.TField COUPON_CASH_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"couponCashThis", org.apache.thrift.protocol.TType.DOUBLE, (short) 44);

	private static final org.apache.thrift.protocol.TField COUPON_CASH_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"couponCashAll", org.apache.thrift.protocol.TType.DOUBLE, (short) 45);

	private static final org.apache.thrift.protocol.TField COUPON_DIS_THIS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"couponDisThis", org.apache.thrift.protocol.TType.DOUBLE, (short) 46);

	private static final org.apache.thrift.protocol.TField COUPON_DIS_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"couponDisAll", org.apache.thrift.protocol.TType.DOUBLE, (short) 47);

	private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"note", org.apache.thrift.protocol.TType.STRING, (short) 48);

	private static final org.apache.thrift.protocol.TField NOTE_SELL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"noteSell", org.apache.thrift.protocol.TType.STRING, (short) 62);

	private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"address", org.apache.thrift.protocol.TType.STRING, (short) 52);

	private static final org.apache.thrift.protocol.TField COUPON_ARR_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"couponArr", org.apache.thrift.protocol.TType.LIST, (short) 53);

	private static final org.apache.thrift.protocol.TField GOOD_SHOT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"goodShot", org.apache.thrift.protocol.TType.STRING, (short) 57);

	private static final org.apache.thrift.protocol.TField GOODS_SHOT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"goodsShot", org.apache.thrift.protocol.TType.STRING, (short) 58);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OrderStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OrderTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String oid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String xid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String gid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String did; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uidBuy; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uidSell; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String confirmTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTime; // required

	public boolean isDelete; // required

	public boolean isVirtual; // required

	public boolean isCurrency; // required

	public boolean isBundle; // required

	public boolean isMix; // required

	public boolean isNeedCash; // required

	public boolean isNeedWallet; // required

	public int status; // required

	public int statusPay; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String serialId; // required

	public boolean isReview; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String comment; // required

	public double priceOne; // required

	public double priceAll; // required

	public int numBuy; // required

	public int methodPay; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String pid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String payTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String sendTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String dealTime; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapOne; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapThis; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapAll; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> unpaidMapThis; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> unpaidMapAll; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> paidMapOne; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> paidMapThis; // required

	public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> paidMapAll; // required

	public int transport; // required

	public double transFeeOne; // required

	public double transFeeThis; // required

	public double transFeeAll; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String deliveryCode; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String deliveryCompany; // required

	public double priceWorkOne; // required

	public double priceWorkThis; // required

	public double priceWorkAll; // required

	public double priceCostThis; // required

	public double priceCostAll; // required

	public double couponPayThis; // required

	public double couponPayAll; // required

	public double couponCashThis; // required

	public double couponCashAll; // required

	public double couponDisThis; // required

	public double couponDisAll; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String note; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String noteSell; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String address; // required

	public @org.apache.thrift.annotation.Nullable java.util.List<CouponFlow> couponArr; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String goodShot; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String goodsShot; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		OID((short) 1, "oid"), XID((short) 2, "xid"), SID((short) 3, "sid"), GID((short) 4, "gid"), DID((short) 5,
				"did"), UID_BUY((short) 6, "uidBuy"), UID_SELL((short) 51, "uidSell"), CREATE_TIME((short) 7,
						"createTime"), UPDATE_TIME((short) 8, "updateTime"), CONFIRM_TIME((short) 9,
								"confirmTime"), EXPIRE_TIME((short) 10, "expireTime"), IS_DELETE((short) 11,
										"isDelete"), IS_VIRTUAL((short) 12, "isVirtual"), IS_CURRENCY((short) 13,
												"isCurrency"), IS_BUNDLE((short) 14, "isBundle"), IS_MIX((short) 15,
														"isMix"), IS_NEED_CASH((short) 16,
																"isNeedCash"), IS_NEED_WALLET((short) 17,
																		"isNeedWallet"), STATUS((short) 18,
																				"status"), STATUS_PAY((short) 19,
																						"statusPay"), SERIAL_ID(
																								(short) 20,
																								"serialId"), IS_REVIEW(
																										(short) 21,
																										"isReview"), COMMENT(
																												(short) 22,
																												"comment"), PRICE_ONE(
																														(short) 23,
																														"priceOne"), PRICE_ALL(
																																(short) 24,
																																"priceAll"), NUM_BUY(
																																		(short) 25,
																																		"numBuy"), METHOD_PAY(
																																				(short) 26,
																																				"methodPay"), PID(
																																						(short) 27,
																																						"pid"), PAY_TIME(
																																								(short) 28,
																																								"payTime"), SEND_TIME(
																																										(short) 29,
																																										"sendTime"), DEAL_TIME(
																																												(short) 30,
																																												"dealTime"), PAY_MAP_ONE(
																																														(short) 31,
																																														"payMapOne"), PAY_MAP_THIS(
																																																(short) 32,
																																																"payMapThis"), PAY_MAP_ALL(
																																																		(short) 33,
																																																		"payMapAll"), UNPAID_MAP_THIS(
																																																				(short) 34,
																																																				"unpaidMapThis"), UNPAID_MAP_ALL(
																																																						(short) 35,
																																																						"unpaidMapAll"), PAID_MAP_ONE(
																																																								(short) 54,
																																																								"paidMapOne"), PAID_MAP_THIS(
																																																										(short) 55,
																																																										"paidMapThis"), PAID_MAP_ALL(
																																																												(short) 56,
																																																												"paidMapAll"), TRANSPORT(
																																																														(short) 59,
																																																														"transport"), TRANS_FEE_ONE(
																																																																(short) 36,
																																																																"transFeeOne"), TRANS_FEE_THIS(
																																																																		(short) 37,
																																																																		"transFeeThis"), TRANS_FEE_ALL(
																																																																				(short) 38,
																																																																				"transFeeAll"), DELIVERY_CODE(
																																																																						(short) 60,
																																																																						"deliveryCode"), DELIVERY_COMPANY(
																																																																								(short) 61,
																																																																								"deliveryCompany"), PRICE_WORK_ONE(
																																																																										(short) 39,
																																																																										"priceWorkOne"), PRICE_WORK_THIS(
																																																																												(short) 40,
																																																																												"priceWorkThis"), PRICE_WORK_ALL(
																																																																														(short) 41,
																																																																														"priceWorkAll"), PRICE_COST_THIS(
																																																																																(short) 49,
																																																																																"priceCostThis"), PRICE_COST_ALL(
																																																																																		(short) 50,
																																																																																		"priceCostAll"), COUPON_PAY_THIS(
																																																																																				(short) 42,
																																																																																				"couponPayThis"), COUPON_PAY_ALL(
																																																																																						(short) 43,
																																																																																						"couponPayAll"), COUPON_CASH_THIS(
																																																																																								(short) 44,
																																																																																								"couponCashThis"), COUPON_CASH_ALL(
																																																																																										(short) 45,
																																																																																										"couponCashAll"), COUPON_DIS_THIS(
																																																																																												(short) 46,
																																																																																												"couponDisThis"), COUPON_DIS_ALL(
																																																																																														(short) 47,
																																																																																														"couponDisAll"), NOTE(
																																																																																																(short) 48,
																																																																																																"note"), NOTE_SELL(
																																																																																																		(short) 62,
																																																																																																		"noteSell"), ADDRESS(
																																																																																																				(short) 52,
																																																																																																				"address"), COUPON_ARR(
																																																																																																						(short) 53,
																																																																																																						"couponArr"), GOOD_SHOT(
																																																																																																								(short) 57,
																																																																																																								"goodShot"), GOODS_SHOT(
																																																																																																										(short) 58,
																																																																																																										"goodsShot");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // OID
				return OID;
			case 2: // XID
				return XID;
			case 3: // SID
				return SID;
			case 4: // GID
				return GID;
			case 5: // DID
				return DID;
			case 6: // UID_BUY
				return UID_BUY;
			case 51: // UID_SELL
				return UID_SELL;
			case 7: // CREATE_TIME
				return CREATE_TIME;
			case 8: // UPDATE_TIME
				return UPDATE_TIME;
			case 9: // CONFIRM_TIME
				return CONFIRM_TIME;
			case 10: // EXPIRE_TIME
				return EXPIRE_TIME;
			case 11: // IS_DELETE
				return IS_DELETE;
			case 12: // IS_VIRTUAL
				return IS_VIRTUAL;
			case 13: // IS_CURRENCY
				return IS_CURRENCY;
			case 14: // IS_BUNDLE
				return IS_BUNDLE;
			case 15: // IS_MIX
				return IS_MIX;
			case 16: // IS_NEED_CASH
				return IS_NEED_CASH;
			case 17: // IS_NEED_WALLET
				return IS_NEED_WALLET;
			case 18: // STATUS
				return STATUS;
			case 19: // STATUS_PAY
				return STATUS_PAY;
			case 20: // SERIAL_ID
				return SERIAL_ID;
			case 21: // IS_REVIEW
				return IS_REVIEW;
			case 22: // COMMENT
				return COMMENT;
			case 23: // PRICE_ONE
				return PRICE_ONE;
			case 24: // PRICE_ALL
				return PRICE_ALL;
			case 25: // NUM_BUY
				return NUM_BUY;
			case 26: // METHOD_PAY
				return METHOD_PAY;
			case 27: // PID
				return PID;
			case 28: // PAY_TIME
				return PAY_TIME;
			case 29: // SEND_TIME
				return SEND_TIME;
			case 30: // DEAL_TIME
				return DEAL_TIME;
			case 31: // PAY_MAP_ONE
				return PAY_MAP_ONE;
			case 32: // PAY_MAP_THIS
				return PAY_MAP_THIS;
			case 33: // PAY_MAP_ALL
				return PAY_MAP_ALL;
			case 34: // UNPAID_MAP_THIS
				return UNPAID_MAP_THIS;
			case 35: // UNPAID_MAP_ALL
				return UNPAID_MAP_ALL;
			case 54: // PAID_MAP_ONE
				return PAID_MAP_ONE;
			case 55: // PAID_MAP_THIS
				return PAID_MAP_THIS;
			case 56: // PAID_MAP_ALL
				return PAID_MAP_ALL;
			case 59: // TRANSPORT
				return TRANSPORT;
			case 36: // TRANS_FEE_ONE
				return TRANS_FEE_ONE;
			case 37: // TRANS_FEE_THIS
				return TRANS_FEE_THIS;
			case 38: // TRANS_FEE_ALL
				return TRANS_FEE_ALL;
			case 60: // DELIVERY_CODE
				return DELIVERY_CODE;
			case 61: // DELIVERY_COMPANY
				return DELIVERY_COMPANY;
			case 39: // PRICE_WORK_ONE
				return PRICE_WORK_ONE;
			case 40: // PRICE_WORK_THIS
				return PRICE_WORK_THIS;
			case 41: // PRICE_WORK_ALL
				return PRICE_WORK_ALL;
			case 49: // PRICE_COST_THIS
				return PRICE_COST_THIS;
			case 50: // PRICE_COST_ALL
				return PRICE_COST_ALL;
			case 42: // COUPON_PAY_THIS
				return COUPON_PAY_THIS;
			case 43: // COUPON_PAY_ALL
				return COUPON_PAY_ALL;
			case 44: // COUPON_CASH_THIS
				return COUPON_CASH_THIS;
			case 45: // COUPON_CASH_ALL
				return COUPON_CASH_ALL;
			case 46: // COUPON_DIS_THIS
				return COUPON_DIS_THIS;
			case 47: // COUPON_DIS_ALL
				return COUPON_DIS_ALL;
			case 48: // NOTE
				return NOTE;
			case 62: // NOTE_SELL
				return NOTE_SELL;
			case 52: // ADDRESS
				return ADDRESS;
			case 53: // COUPON_ARR
				return COUPON_ARR;
			case 57: // GOOD_SHOT
				return GOOD_SHOT;
			case 58: // GOODS_SHOT
				return GOODS_SHOT;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISDELETE_ISSET_ID = 0;

	private static final int __ISVIRTUAL_ISSET_ID = 1;

	private static final int __ISCURRENCY_ISSET_ID = 2;

	private static final int __ISBUNDLE_ISSET_ID = 3;

	private static final int __ISMIX_ISSET_ID = 4;

	private static final int __ISNEEDCASH_ISSET_ID = 5;

	private static final int __ISNEEDWALLET_ISSET_ID = 6;

	private static final int __STATUS_ISSET_ID = 7;

	private static final int __STATUSPAY_ISSET_ID = 8;

	private static final int __ISREVIEW_ISSET_ID = 9;

	private static final int __PRICEONE_ISSET_ID = 10;

	private static final int __PRICEALL_ISSET_ID = 11;

	private static final int __NUMBUY_ISSET_ID = 12;

	private static final int __METHODPAY_ISSET_ID = 13;

	private static final int __TRANSPORT_ISSET_ID = 14;

	private static final int __TRANSFEEONE_ISSET_ID = 15;

	private static final int __TRANSFEETHIS_ISSET_ID = 16;

	private static final int __TRANSFEEALL_ISSET_ID = 17;

	private static final int __PRICEWORKONE_ISSET_ID = 18;

	private static final int __PRICEWORKTHIS_ISSET_ID = 19;

	private static final int __PRICEWORKALL_ISSET_ID = 20;

	private static final int __PRICECOSTTHIS_ISSET_ID = 21;

	private static final int __PRICECOSTALL_ISSET_ID = 22;

	private static final int __COUPONPAYTHIS_ISSET_ID = 23;

	private static final int __COUPONPAYALL_ISSET_ID = 24;

	private static final int __COUPONCASHTHIS_ISSET_ID = 25;

	private static final int __COUPONCASHALL_ISSET_ID = 26;

	private static final int __COUPONDISTHIS_ISSET_ID = 27;

	private static final int __COUPONDISALL_ISSET_ID = 28;

	private int __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.OID,
				new org.apache.thrift.meta_data.FieldMetaData("oid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.XID,
				new org.apache.thrift.meta_data.FieldMetaData("xid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.GID,
				new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DID,
				new org.apache.thrift.meta_data.FieldMetaData("did", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID_BUY,
				new org.apache.thrift.meta_data.FieldMetaData("uidBuy", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID_SELL,
				new org.apache.thrift.meta_data.FieldMetaData("uidSell",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.CONFIRM_TIME, new org.apache.thrift.meta_data.FieldMetaData("confirmTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_DELETE,
				new org.apache.thrift.meta_data.FieldMetaData("isDelete",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_VIRTUAL,
				new org.apache.thrift.meta_data.FieldMetaData("isVirtual",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_CURRENCY,
				new org.apache.thrift.meta_data.FieldMetaData("isCurrency",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_BUNDLE,
				new org.apache.thrift.meta_data.FieldMetaData("isBundle",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_MIX,
				new org.apache.thrift.meta_data.FieldMetaData("isMix", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_NEED_CASH,
				new org.apache.thrift.meta_data.FieldMetaData("isNeedCash",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_NEED_WALLET,
				new org.apache.thrift.meta_data.FieldMetaData("isNeedWallet",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STATUS_PAY,
				new org.apache.thrift.meta_data.FieldMetaData("statusPay",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.SERIAL_ID,
				new org.apache.thrift.meta_data.FieldMetaData("serialId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_REVIEW,
				new org.apache.thrift.meta_data.FieldMetaData("isReview",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("comment",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PRICE_ONE,
				new org.apache.thrift.meta_data.FieldMetaData("priceOne",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_ALL,
				new org.apache.thrift.meta_data.FieldMetaData("priceAll",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.NUM_BUY,
				new org.apache.thrift.meta_data.FieldMetaData("numBuy", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.METHOD_PAY,
				new org.apache.thrift.meta_data.FieldMetaData("methodPay",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PID,
				new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PAY_TIME, new org.apache.thrift.meta_data.FieldMetaData("payTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.SEND_TIME, new org.apache.thrift.meta_data.FieldMetaData("sendTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.DEAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("dealTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.PAY_MAP_ONE, new org.apache.thrift.meta_data.FieldMetaData("payMapOne",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.PAY_MAP_THIS, new org.apache.thrift.meta_data.FieldMetaData("payMapThis",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.PAY_MAP_ALL, new org.apache.thrift.meta_data.FieldMetaData("payMapAll",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.UNPAID_MAP_THIS, new org.apache.thrift.meta_data.FieldMetaData("unpaidMapThis",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.UNPAID_MAP_ALL, new org.apache.thrift.meta_data.FieldMetaData("unpaidMapAll",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.PAID_MAP_ONE, new org.apache.thrift.meta_data.FieldMetaData("paidMapOne",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.PAID_MAP_THIS, new org.apache.thrift.meta_data.FieldMetaData("paidMapThis",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.PAID_MAP_ALL, new org.apache.thrift.meta_data.FieldMetaData("paidMapAll",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
		tmpMap.put(_Fields.TRANSPORT,
				new org.apache.thrift.meta_data.FieldMetaData("transport",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.TRANS_FEE_ONE,
				new org.apache.thrift.meta_data.FieldMetaData("transFeeOne",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.TRANS_FEE_THIS,
				new org.apache.thrift.meta_data.FieldMetaData("transFeeThis",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.TRANS_FEE_ALL,
				new org.apache.thrift.meta_data.FieldMetaData("transFeeAll",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.DELIVERY_CODE,
				new org.apache.thrift.meta_data.FieldMetaData("deliveryCode",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DELIVERY_COMPANY,
				new org.apache.thrift.meta_data.FieldMetaData("deliveryCompany",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PRICE_WORK_ONE,
				new org.apache.thrift.meta_data.FieldMetaData("priceWorkOne",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_WORK_THIS,
				new org.apache.thrift.meta_data.FieldMetaData("priceWorkThis",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_WORK_ALL,
				new org.apache.thrift.meta_data.FieldMetaData("priceWorkAll",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_COST_THIS,
				new org.apache.thrift.meta_data.FieldMetaData("priceCostThis",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_COST_ALL,
				new org.apache.thrift.meta_data.FieldMetaData("priceCostAll",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COUPON_PAY_THIS,
				new org.apache.thrift.meta_data.FieldMetaData("couponPayThis",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COUPON_PAY_ALL,
				new org.apache.thrift.meta_data.FieldMetaData("couponPayAll",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COUPON_CASH_THIS,
				new org.apache.thrift.meta_data.FieldMetaData("couponCashThis",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COUPON_CASH_ALL,
				new org.apache.thrift.meta_data.FieldMetaData("couponCashAll",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COUPON_DIS_THIS,
				new org.apache.thrift.meta_data.FieldMetaData("couponDisThis",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COUPON_DIS_ALL,
				new org.apache.thrift.meta_data.FieldMetaData("couponDisAll",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.NOTE,
				new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NOTE_SELL,
				new org.apache.thrift.meta_data.FieldMetaData("noteSell",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ADDRESS,
				new org.apache.thrift.meta_data.FieldMetaData("address",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COUPON_ARR,
				new org.apache.thrift.meta_data.FieldMetaData("couponArr",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
										CouponFlow.class))));
		tmpMap.put(_Fields.GOOD_SHOT,
				new org.apache.thrift.meta_data.FieldMetaData("goodShot",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.GOODS_SHOT,
				new org.apache.thrift.meta_data.FieldMetaData("goodsShot",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Order.class, metaDataMap);
	}

	public Order() {
	}

	public Order(java.lang.String oid, java.lang.String xid, java.lang.String sid, java.lang.String gid,
			java.lang.String did, java.lang.String uidBuy, java.lang.String uidSell, java.lang.String createTime,
			java.lang.String updateTime, java.lang.String confirmTime, java.lang.String expireTime, boolean isDelete,
			boolean isVirtual, boolean isCurrency, boolean isBundle, boolean isMix, boolean isNeedCash,
			boolean isNeedWallet, int status, int statusPay, java.lang.String serialId, boolean isReview,
			java.lang.String comment, double priceOne, double priceAll, int numBuy, int methodPay, java.lang.String pid,
			java.lang.String payTime, java.lang.String sendTime, java.lang.String dealTime,
			java.util.Map<java.lang.String, java.lang.Double> payMapOne,
			java.util.Map<java.lang.String, java.lang.Double> payMapThis,
			java.util.Map<java.lang.String, java.lang.Double> payMapAll,
			java.util.Map<java.lang.String, java.lang.Double> unpaidMapThis,
			java.util.Map<java.lang.String, java.lang.Double> unpaidMapAll,
			java.util.Map<java.lang.String, java.lang.Double> paidMapOne,
			java.util.Map<java.lang.String, java.lang.Double> paidMapThis,
			java.util.Map<java.lang.String, java.lang.Double> paidMapAll, int transport, double transFeeOne,
			double transFeeThis, double transFeeAll, java.lang.String deliveryCode, java.lang.String deliveryCompany,
			double priceWorkOne, double priceWorkThis, double priceWorkAll, double priceCostThis, double priceCostAll,
			double couponPayThis, double couponPayAll, double couponCashThis, double couponCashAll,
			double couponDisThis, double couponDisAll, java.lang.String note, java.lang.String noteSell,
			java.lang.String address, java.util.List<CouponFlow> couponArr, java.lang.String goodShot,
			java.lang.String goodsShot) {
		this();
		this.oid = oid;
		this.xid = xid;
		this.sid = sid;
		this.gid = gid;
		this.did = did;
		this.uidBuy = uidBuy;
		this.uidSell = uidSell;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.confirmTime = confirmTime;
		this.expireTime = expireTime;
		this.isDelete = isDelete;
		setIsDeleteIsSet(true);
		this.isVirtual = isVirtual;
		setIsVirtualIsSet(true);
		this.isCurrency = isCurrency;
		setIsCurrencyIsSet(true);
		this.isBundle = isBundle;
		setIsBundleIsSet(true);
		this.isMix = isMix;
		setIsMixIsSet(true);
		this.isNeedCash = isNeedCash;
		setIsNeedCashIsSet(true);
		this.isNeedWallet = isNeedWallet;
		setIsNeedWalletIsSet(true);
		this.status = status;
		setStatusIsSet(true);
		this.statusPay = statusPay;
		setStatusPayIsSet(true);
		this.serialId = serialId;
		this.isReview = isReview;
		setIsReviewIsSet(true);
		this.comment = comment;
		this.priceOne = priceOne;
		setPriceOneIsSet(true);
		this.priceAll = priceAll;
		setPriceAllIsSet(true);
		this.numBuy = numBuy;
		setNumBuyIsSet(true);
		this.methodPay = methodPay;
		setMethodPayIsSet(true);
		this.pid = pid;
		this.payTime = payTime;
		this.sendTime = sendTime;
		this.dealTime = dealTime;
		this.payMapOne = payMapOne;
		this.payMapThis = payMapThis;
		this.payMapAll = payMapAll;
		this.unpaidMapThis = unpaidMapThis;
		this.unpaidMapAll = unpaidMapAll;
		this.paidMapOne = paidMapOne;
		this.paidMapThis = paidMapThis;
		this.paidMapAll = paidMapAll;
		this.transport = transport;
		setTransportIsSet(true);
		this.transFeeOne = transFeeOne;
		setTransFeeOneIsSet(true);
		this.transFeeThis = transFeeThis;
		setTransFeeThisIsSet(true);
		this.transFeeAll = transFeeAll;
		setTransFeeAllIsSet(true);
		this.deliveryCode = deliveryCode;
		this.deliveryCompany = deliveryCompany;
		this.priceWorkOne = priceWorkOne;
		setPriceWorkOneIsSet(true);
		this.priceWorkThis = priceWorkThis;
		setPriceWorkThisIsSet(true);
		this.priceWorkAll = priceWorkAll;
		setPriceWorkAllIsSet(true);
		this.priceCostThis = priceCostThis;
		setPriceCostThisIsSet(true);
		this.priceCostAll = priceCostAll;
		setPriceCostAllIsSet(true);
		this.couponPayThis = couponPayThis;
		setCouponPayThisIsSet(true);
		this.couponPayAll = couponPayAll;
		setCouponPayAllIsSet(true);
		this.couponCashThis = couponCashThis;
		setCouponCashThisIsSet(true);
		this.couponCashAll = couponCashAll;
		setCouponCashAllIsSet(true);
		this.couponDisThis = couponDisThis;
		setCouponDisThisIsSet(true);
		this.couponDisAll = couponDisAll;
		setCouponDisAllIsSet(true);
		this.note = note;
		this.noteSell = noteSell;
		this.address = address;
		this.couponArr = couponArr;
		this.goodShot = goodShot;
		this.goodsShot = goodsShot;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Order(Order other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetOid()) {
			this.oid = other.oid;
		}
		if (other.isSetXid()) {
			this.xid = other.xid;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetGid()) {
			this.gid = other.gid;
		}
		if (other.isSetDid()) {
			this.did = other.did;
		}
		if (other.isSetUidBuy()) {
			this.uidBuy = other.uidBuy;
		}
		if (other.isSetUidSell()) {
			this.uidSell = other.uidSell;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		if (other.isSetConfirmTime()) {
			this.confirmTime = other.confirmTime;
		}
		if (other.isSetExpireTime()) {
			this.expireTime = other.expireTime;
		}
		this.isDelete = other.isDelete;
		this.isVirtual = other.isVirtual;
		this.isCurrency = other.isCurrency;
		this.isBundle = other.isBundle;
		this.isMix = other.isMix;
		this.isNeedCash = other.isNeedCash;
		this.isNeedWallet = other.isNeedWallet;
		this.status = other.status;
		this.statusPay = other.statusPay;
		if (other.isSetSerialId()) {
			this.serialId = other.serialId;
		}
		this.isReview = other.isReview;
		if (other.isSetComment()) {
			this.comment = other.comment;
		}
		this.priceOne = other.priceOne;
		this.priceAll = other.priceAll;
		this.numBuy = other.numBuy;
		this.methodPay = other.methodPay;
		if (other.isSetPid()) {
			this.pid = other.pid;
		}
		if (other.isSetPayTime()) {
			this.payTime = other.payTime;
		}
		if (other.isSetSendTime()) {
			this.sendTime = other.sendTime;
		}
		if (other.isSetDealTime()) {
			this.dealTime = other.dealTime;
		}
		if (other.isSetPayMapOne()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__payMapOne = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.payMapOne);
			this.payMapOne = __this__payMapOne;
		}
		if (other.isSetPayMapThis()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__payMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.payMapThis);
			this.payMapThis = __this__payMapThis;
		}
		if (other.isSetPayMapAll()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__payMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.payMapAll);
			this.payMapAll = __this__payMapAll;
		}
		if (other.isSetUnpaidMapThis()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__unpaidMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.unpaidMapThis);
			this.unpaidMapThis = __this__unpaidMapThis;
		}
		if (other.isSetUnpaidMapAll()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__unpaidMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.unpaidMapAll);
			this.unpaidMapAll = __this__unpaidMapAll;
		}
		if (other.isSetPaidMapOne()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__paidMapOne = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.paidMapOne);
			this.paidMapOne = __this__paidMapOne;
		}
		if (other.isSetPaidMapThis()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__paidMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.paidMapThis);
			this.paidMapThis = __this__paidMapThis;
		}
		if (other.isSetPaidMapAll()) {
			java.util.Map<java.lang.String, java.lang.Double> __this__paidMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(
					other.paidMapAll);
			this.paidMapAll = __this__paidMapAll;
		}
		this.transport = other.transport;
		this.transFeeOne = other.transFeeOne;
		this.transFeeThis = other.transFeeThis;
		this.transFeeAll = other.transFeeAll;
		if (other.isSetDeliveryCode()) {
			this.deliveryCode = other.deliveryCode;
		}
		if (other.isSetDeliveryCompany()) {
			this.deliveryCompany = other.deliveryCompany;
		}
		this.priceWorkOne = other.priceWorkOne;
		this.priceWorkThis = other.priceWorkThis;
		this.priceWorkAll = other.priceWorkAll;
		this.priceCostThis = other.priceCostThis;
		this.priceCostAll = other.priceCostAll;
		this.couponPayThis = other.couponPayThis;
		this.couponPayAll = other.couponPayAll;
		this.couponCashThis = other.couponCashThis;
		this.couponCashAll = other.couponCashAll;
		this.couponDisThis = other.couponDisThis;
		this.couponDisAll = other.couponDisAll;
		if (other.isSetNote()) {
			this.note = other.note;
		}
		if (other.isSetNoteSell()) {
			this.noteSell = other.noteSell;
		}
		if (other.isSetAddress()) {
			this.address = other.address;
		}
		if (other.isSetCouponArr()) {
			java.util.List<CouponFlow> __this__couponArr = new java.util.ArrayList<CouponFlow>(other.couponArr.size());
			for (CouponFlow other_element : other.couponArr) {
				__this__couponArr.add(new CouponFlow(other_element));
			}
			this.couponArr = __this__couponArr;
		}
		if (other.isSetGoodShot()) {
			this.goodShot = other.goodShot;
		}
		if (other.isSetGoodsShot()) {
			this.goodsShot = other.goodsShot;
		}
	}

	public Order deepCopy() {
		return new Order(this);
	}

	@Override
	public void clear() {
		this.oid = null;
		this.xid = null;
		this.sid = null;
		this.gid = null;
		this.did = null;
		this.uidBuy = null;
		this.uidSell = null;
		this.createTime = null;
		this.updateTime = null;
		this.confirmTime = null;
		this.expireTime = null;
		setIsDeleteIsSet(false);
		this.isDelete = false;
		setIsVirtualIsSet(false);
		this.isVirtual = false;
		setIsCurrencyIsSet(false);
		this.isCurrency = false;
		setIsBundleIsSet(false);
		this.isBundle = false;
		setIsMixIsSet(false);
		this.isMix = false;
		setIsNeedCashIsSet(false);
		this.isNeedCash = false;
		setIsNeedWalletIsSet(false);
		this.isNeedWallet = false;
		setStatusIsSet(false);
		this.status = 0;
		setStatusPayIsSet(false);
		this.statusPay = 0;
		this.serialId = null;
		setIsReviewIsSet(false);
		this.isReview = false;
		this.comment = null;
		setPriceOneIsSet(false);
		this.priceOne = 0.0;
		setPriceAllIsSet(false);
		this.priceAll = 0.0;
		setNumBuyIsSet(false);
		this.numBuy = 0;
		setMethodPayIsSet(false);
		this.methodPay = 0;
		this.pid = null;
		this.payTime = null;
		this.sendTime = null;
		this.dealTime = null;
		this.payMapOne = null;
		this.payMapThis = null;
		this.payMapAll = null;
		this.unpaidMapThis = null;
		this.unpaidMapAll = null;
		this.paidMapOne = null;
		this.paidMapThis = null;
		this.paidMapAll = null;
		setTransportIsSet(false);
		this.transport = 0;
		setTransFeeOneIsSet(false);
		this.transFeeOne = 0.0;
		setTransFeeThisIsSet(false);
		this.transFeeThis = 0.0;
		setTransFeeAllIsSet(false);
		this.transFeeAll = 0.0;
		this.deliveryCode = null;
		this.deliveryCompany = null;
		setPriceWorkOneIsSet(false);
		this.priceWorkOne = 0.0;
		setPriceWorkThisIsSet(false);
		this.priceWorkThis = 0.0;
		setPriceWorkAllIsSet(false);
		this.priceWorkAll = 0.0;
		setPriceCostThisIsSet(false);
		this.priceCostThis = 0.0;
		setPriceCostAllIsSet(false);
		this.priceCostAll = 0.0;
		setCouponPayThisIsSet(false);
		this.couponPayThis = 0.0;
		setCouponPayAllIsSet(false);
		this.couponPayAll = 0.0;
		setCouponCashThisIsSet(false);
		this.couponCashThis = 0.0;
		setCouponCashAllIsSet(false);
		this.couponCashAll = 0.0;
		setCouponDisThisIsSet(false);
		this.couponDisThis = 0.0;
		setCouponDisAllIsSet(false);
		this.couponDisAll = 0.0;
		this.note = null;
		this.noteSell = null;
		this.address = null;
		this.couponArr = null;
		this.goodShot = null;
		this.goodsShot = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getOid() {
		return this.oid;
	}

	public Order setOid(@org.apache.thrift.annotation.Nullable java.lang.String oid) {
		this.oid = oid;
		return this;
	}

	public void unsetOid() {
		this.oid = null;
	}

	/**
	 * Returns true if field oid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetOid() {
		return this.oid != null;
	}

	public void setOidIsSet(boolean value) {
		if (!value) {
			this.oid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getXid() {
		return this.xid;
	}

	public Order setXid(@org.apache.thrift.annotation.Nullable java.lang.String xid) {
		this.xid = xid;
		return this;
	}

	public void unsetXid() {
		this.xid = null;
	}

	/**
	 * Returns true if field xid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetXid() {
		return this.xid != null;
	}

	public void setXidIsSet(boolean value) {
		if (!value) {
			this.xid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public Order setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getGid() {
		return this.gid;
	}

	public Order setGid(@org.apache.thrift.annotation.Nullable java.lang.String gid) {
		this.gid = gid;
		return this;
	}

	public void unsetGid() {
		this.gid = null;
	}

	/**
	 * Returns true if field gid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetGid() {
		return this.gid != null;
	}

	public void setGidIsSet(boolean value) {
		if (!value) {
			this.gid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDid() {
		return this.did;
	}

	public Order setDid(@org.apache.thrift.annotation.Nullable java.lang.String did) {
		this.did = did;
		return this;
	}

	public void unsetDid() {
		this.did = null;
	}

	/**
	 * Returns true if field did is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetDid() {
		return this.did != null;
	}

	public void setDidIsSet(boolean value) {
		if (!value) {
			this.did = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidBuy() {
		return this.uidBuy;
	}

	public Order setUidBuy(@org.apache.thrift.annotation.Nullable java.lang.String uidBuy) {
		this.uidBuy = uidBuy;
		return this;
	}

	public void unsetUidBuy() {
		this.uidBuy = null;
	}

	/**
	 * Returns true if field uidBuy is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUidBuy() {
		return this.uidBuy != null;
	}

	public void setUidBuyIsSet(boolean value) {
		if (!value) {
			this.uidBuy = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidSell() {
		return this.uidSell;
	}

	public Order setUidSell(@org.apache.thrift.annotation.Nullable java.lang.String uidSell) {
		this.uidSell = uidSell;
		return this;
	}

	public void unsetUidSell() {
		this.uidSell = null;
	}

	/**
	 * Returns true if field uidSell is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUidSell() {
		return this.uidSell != null;
	}

	public void setUidSellIsSet(boolean value) {
		if (!value) {
			this.uidSell = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Order setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Order setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getConfirmTime() {
		return this.confirmTime;
	}

	public Order setConfirmTime(@org.apache.thrift.annotation.Nullable java.lang.String confirmTime) {
		this.confirmTime = confirmTime;
		return this;
	}

	public void unsetConfirmTime() {
		this.confirmTime = null;
	}

	/**
	 * Returns true if field confirmTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetConfirmTime() {
		return this.confirmTime != null;
	}

	public void setConfirmTimeIsSet(boolean value) {
		if (!value) {
			this.confirmTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTime() {
		return this.expireTime;
	}

	public Order setExpireTime(@org.apache.thrift.annotation.Nullable java.lang.String expireTime) {
		this.expireTime = expireTime;
		return this;
	}

	public void unsetExpireTime() {
		this.expireTime = null;
	}

	/**
	 * Returns true if field expireTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTime() {
		return this.expireTime != null;
	}

	public void setExpireTimeIsSet(boolean value) {
		if (!value) {
			this.expireTime = null;
		}
	}

	public boolean isIsDelete() {
		return this.isDelete;
	}

	public Order setIsDelete(boolean isDelete) {
		this.isDelete = isDelete;
		setIsDeleteIsSet(true);
		return this;
	}

	public void unsetIsDelete() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	/**
	 * Returns true if field isDelete is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsDelete() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDELETE_ISSET_ID);
	}

	public void setIsDeleteIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDELETE_ISSET_ID, value);
	}

	public boolean isIsVirtual() {
		return this.isVirtual;
	}

	public Order setIsVirtual(boolean isVirtual) {
		this.isVirtual = isVirtual;
		setIsVirtualIsSet(true);
		return this;
	}

	public void unsetIsVirtual() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISVIRTUAL_ISSET_ID);
	}

	/**
	 * Returns true if field isVirtual is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsVirtual() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISVIRTUAL_ISSET_ID);
	}

	public void setIsVirtualIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISVIRTUAL_ISSET_ID, value);
	}

	public boolean isIsCurrency() {
		return this.isCurrency;
	}

	public Order setIsCurrency(boolean isCurrency) {
		this.isCurrency = isCurrency;
		setIsCurrencyIsSet(true);
		return this;
	}

	public void unsetIsCurrency() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCURRENCY_ISSET_ID);
	}

	/**
	 * Returns true if field isCurrency is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsCurrency() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCURRENCY_ISSET_ID);
	}

	public void setIsCurrencyIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCURRENCY_ISSET_ID, value);
	}

	public boolean isIsBundle() {
		return this.isBundle;
	}

	public Order setIsBundle(boolean isBundle) {
		this.isBundle = isBundle;
		setIsBundleIsSet(true);
		return this;
	}

	public void unsetIsBundle() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISBUNDLE_ISSET_ID);
	}

	/**
	 * Returns true if field isBundle is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsBundle() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISBUNDLE_ISSET_ID);
	}

	public void setIsBundleIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISBUNDLE_ISSET_ID, value);
	}

	public boolean isIsMix() {
		return this.isMix;
	}

	public Order setIsMix(boolean isMix) {
		this.isMix = isMix;
		setIsMixIsSet(true);
		return this;
	}

	public void unsetIsMix() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMIX_ISSET_ID);
	}

	/**
	 * Returns true if field isMix is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsMix() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMIX_ISSET_ID);
	}

	public void setIsMixIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMIX_ISSET_ID, value);
	}

	public boolean isIsNeedCash() {
		return this.isNeedCash;
	}

	public Order setIsNeedCash(boolean isNeedCash) {
		this.isNeedCash = isNeedCash;
		setIsNeedCashIsSet(true);
		return this;
	}

	public void unsetIsNeedCash() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISNEEDCASH_ISSET_ID);
	}

	/**
	 * Returns true if field isNeedCash is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsNeedCash() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISNEEDCASH_ISSET_ID);
	}

	public void setIsNeedCashIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISNEEDCASH_ISSET_ID, value);
	}

	public boolean isIsNeedWallet() {
		return this.isNeedWallet;
	}

	public Order setIsNeedWallet(boolean isNeedWallet) {
		this.isNeedWallet = isNeedWallet;
		setIsNeedWalletIsSet(true);
		return this;
	}

	public void unsetIsNeedWallet() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISNEEDWALLET_ISSET_ID);
	}

	/**
	 * Returns true if field isNeedWallet is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsNeedWallet() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISNEEDWALLET_ISSET_ID);
	}

	public void setIsNeedWalletIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISNEEDWALLET_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public Order setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	public int getStatusPay() {
		return this.statusPay;
	}

	public Order setStatusPay(int statusPay) {
		this.statusPay = statusPay;
		setStatusPayIsSet(true);
		return this;
	}

	public void unsetStatusPay() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUSPAY_ISSET_ID);
	}

	/**
	 * Returns true if field statusPay is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStatusPay() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUSPAY_ISSET_ID);
	}

	public void setStatusPayIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUSPAY_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSerialId() {
		return this.serialId;
	}

	public Order setSerialId(@org.apache.thrift.annotation.Nullable java.lang.String serialId) {
		this.serialId = serialId;
		return this;
	}

	public void unsetSerialId() {
		this.serialId = null;
	}

	/**
	 * Returns true if field serialId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSerialId() {
		return this.serialId != null;
	}

	public void setSerialIdIsSet(boolean value) {
		if (!value) {
			this.serialId = null;
		}
	}

	public boolean isIsReview() {
		return this.isReview;
	}

	public Order setIsReview(boolean isReview) {
		this.isReview = isReview;
		setIsReviewIsSet(true);
		return this;
	}

	public void unsetIsReview() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREVIEW_ISSET_ID);
	}

	/**
	 * Returns true if field isReview is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsReview() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREVIEW_ISSET_ID);
	}

	public void setIsReviewIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREVIEW_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getComment() {
		return this.comment;
	}

	public Order setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
		this.comment = comment;
		return this;
	}

	public void unsetComment() {
		this.comment = null;
	}

	/**
	 * Returns true if field comment is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComment() {
		return this.comment != null;
	}

	public void setCommentIsSet(boolean value) {
		if (!value) {
			this.comment = null;
		}
	}

	public double getPriceOne() {
		return this.priceOne;
	}

	public Order setPriceOne(double priceOne) {
		this.priceOne = priceOne;
		setPriceOneIsSet(true);
		return this;
	}

	public void unsetPriceOne() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEONE_ISSET_ID);
	}

	/**
	 * Returns true if field priceOne is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceOne() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEONE_ISSET_ID);
	}

	public void setPriceOneIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEONE_ISSET_ID, value);
	}

	public double getPriceAll() {
		return this.priceAll;
	}

	public Order setPriceAll(double priceAll) {
		this.priceAll = priceAll;
		setPriceAllIsSet(true);
		return this;
	}

	public void unsetPriceAll() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEALL_ISSET_ID);
	}

	/**
	 * Returns true if field priceAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceAll() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEALL_ISSET_ID);
	}

	public void setPriceAllIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEALL_ISSET_ID, value);
	}

	public int getNumBuy() {
		return this.numBuy;
	}

	public Order setNumBuy(int numBuy) {
		this.numBuy = numBuy;
		setNumBuyIsSet(true);
		return this;
	}

	public void unsetNumBuy() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBUY_ISSET_ID);
	}

	/**
	 * Returns true if field numBuy is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetNumBuy() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBUY_ISSET_ID);
	}

	public void setNumBuyIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBUY_ISSET_ID, value);
	}

	public int getMethodPay() {
		return this.methodPay;
	}

	public Order setMethodPay(int methodPay) {
		this.methodPay = methodPay;
		setMethodPayIsSet(true);
		return this;
	}

	public void unsetMethodPay() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __METHODPAY_ISSET_ID);
	}

	/**
	 * Returns true if field methodPay is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetMethodPay() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __METHODPAY_ISSET_ID);
	}

	public void setMethodPayIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __METHODPAY_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPid() {
		return this.pid;
	}

	public Order setPid(@org.apache.thrift.annotation.Nullable java.lang.String pid) {
		this.pid = pid;
		return this;
	}

	public void unsetPid() {
		this.pid = null;
	}

	/**
	 * Returns true if field pid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPid() {
		return this.pid != null;
	}

	public void setPidIsSet(boolean value) {
		if (!value) {
			this.pid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPayTime() {
		return this.payTime;
	}

	public Order setPayTime(@org.apache.thrift.annotation.Nullable java.lang.String payTime) {
		this.payTime = payTime;
		return this;
	}

	public void unsetPayTime() {
		this.payTime = null;
	}

	/**
	 * Returns true if field payTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayTime() {
		return this.payTime != null;
	}

	public void setPayTimeIsSet(boolean value) {
		if (!value) {
			this.payTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSendTime() {
		return this.sendTime;
	}

	public Order setSendTime(@org.apache.thrift.annotation.Nullable java.lang.String sendTime) {
		this.sendTime = sendTime;
		return this;
	}

	public void unsetSendTime() {
		this.sendTime = null;
	}

	/**
	 * Returns true if field sendTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSendTime() {
		return this.sendTime != null;
	}

	public void setSendTimeIsSet(boolean value) {
		if (!value) {
			this.sendTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDealTime() {
		return this.dealTime;
	}

	public Order setDealTime(@org.apache.thrift.annotation.Nullable java.lang.String dealTime) {
		this.dealTime = dealTime;
		return this;
	}

	public void unsetDealTime() {
		this.dealTime = null;
	}

	/**
	 * Returns true if field dealTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDealTime() {
		return this.dealTime != null;
	}

	public void setDealTimeIsSet(boolean value) {
		if (!value) {
			this.dealTime = null;
		}
	}

	public int getPayMapOneSize() {
		return (this.payMapOne == null) ? 0 : this.payMapOne.size();
	}

	public void putToPayMapOne(java.lang.String key, double val) {
		if (this.payMapOne == null) {
			this.payMapOne = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.payMapOne.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getPayMapOne() {
		return this.payMapOne;
	}

	public Order setPayMapOne(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapOne) {
		this.payMapOne = payMapOne;
		return this;
	}

	public void unsetPayMapOne() {
		this.payMapOne = null;
	}

	/**
	 * Returns true if field payMapOne is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayMapOne() {
		return this.payMapOne != null;
	}

	public void setPayMapOneIsSet(boolean value) {
		if (!value) {
			this.payMapOne = null;
		}
	}

	public int getPayMapThisSize() {
		return (this.payMapThis == null) ? 0 : this.payMapThis.size();
	}

	public void putToPayMapThis(java.lang.String key, double val) {
		if (this.payMapThis == null) {
			this.payMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.payMapThis.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getPayMapThis() {
		return this.payMapThis;
	}

	public Order setPayMapThis(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapThis) {
		this.payMapThis = payMapThis;
		return this;
	}

	public void unsetPayMapThis() {
		this.payMapThis = null;
	}

	/**
	 * Returns true if field payMapThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayMapThis() {
		return this.payMapThis != null;
	}

	public void setPayMapThisIsSet(boolean value) {
		if (!value) {
			this.payMapThis = null;
		}
	}

	public int getPayMapAllSize() {
		return (this.payMapAll == null) ? 0 : this.payMapAll.size();
	}

	public void putToPayMapAll(java.lang.String key, double val) {
		if (this.payMapAll == null) {
			this.payMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.payMapAll.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getPayMapAll() {
		return this.payMapAll;
	}

	public Order setPayMapAll(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> payMapAll) {
		this.payMapAll = payMapAll;
		return this;
	}

	public void unsetPayMapAll() {
		this.payMapAll = null;
	}

	/**
	 * Returns true if field payMapAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayMapAll() {
		return this.payMapAll != null;
	}

	public void setPayMapAllIsSet(boolean value) {
		if (!value) {
			this.payMapAll = null;
		}
	}

	public int getUnpaidMapThisSize() {
		return (this.unpaidMapThis == null) ? 0 : this.unpaidMapThis.size();
	}

	public void putToUnpaidMapThis(java.lang.String key, double val) {
		if (this.unpaidMapThis == null) {
			this.unpaidMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.unpaidMapThis.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getUnpaidMapThis() {
		return this.unpaidMapThis;
	}

	public Order setUnpaidMapThis(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> unpaidMapThis) {
		this.unpaidMapThis = unpaidMapThis;
		return this;
	}

	public void unsetUnpaidMapThis() {
		this.unpaidMapThis = null;
	}

	/**
	 * Returns true if field unpaidMapThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUnpaidMapThis() {
		return this.unpaidMapThis != null;
	}

	public void setUnpaidMapThisIsSet(boolean value) {
		if (!value) {
			this.unpaidMapThis = null;
		}
	}

	public int getUnpaidMapAllSize() {
		return (this.unpaidMapAll == null) ? 0 : this.unpaidMapAll.size();
	}

	public void putToUnpaidMapAll(java.lang.String key, double val) {
		if (this.unpaidMapAll == null) {
			this.unpaidMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.unpaidMapAll.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getUnpaidMapAll() {
		return this.unpaidMapAll;
	}

	public Order setUnpaidMapAll(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> unpaidMapAll) {
		this.unpaidMapAll = unpaidMapAll;
		return this;
	}

	public void unsetUnpaidMapAll() {
		this.unpaidMapAll = null;
	}

	/**
	 * Returns true if field unpaidMapAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUnpaidMapAll() {
		return this.unpaidMapAll != null;
	}

	public void setUnpaidMapAllIsSet(boolean value) {
		if (!value) {
			this.unpaidMapAll = null;
		}
	}

	public int getPaidMapOneSize() {
		return (this.paidMapOne == null) ? 0 : this.paidMapOne.size();
	}

	public void putToPaidMapOne(java.lang.String key, double val) {
		if (this.paidMapOne == null) {
			this.paidMapOne = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.paidMapOne.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getPaidMapOne() {
		return this.paidMapOne;
	}

	public Order setPaidMapOne(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> paidMapOne) {
		this.paidMapOne = paidMapOne;
		return this;
	}

	public void unsetPaidMapOne() {
		this.paidMapOne = null;
	}

	/**
	 * Returns true if field paidMapOne is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPaidMapOne() {
		return this.paidMapOne != null;
	}

	public void setPaidMapOneIsSet(boolean value) {
		if (!value) {
			this.paidMapOne = null;
		}
	}

	public int getPaidMapThisSize() {
		return (this.paidMapThis == null) ? 0 : this.paidMapThis.size();
	}

	public void putToPaidMapThis(java.lang.String key, double val) {
		if (this.paidMapThis == null) {
			this.paidMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.paidMapThis.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getPaidMapThis() {
		return this.paidMapThis;
	}

	public Order setPaidMapThis(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> paidMapThis) {
		this.paidMapThis = paidMapThis;
		return this;
	}

	public void unsetPaidMapThis() {
		this.paidMapThis = null;
	}

	/**
	 * Returns true if field paidMapThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPaidMapThis() {
		return this.paidMapThis != null;
	}

	public void setPaidMapThisIsSet(boolean value) {
		if (!value) {
			this.paidMapThis = null;
		}
	}

	public int getPaidMapAllSize() {
		return (this.paidMapAll == null) ? 0 : this.paidMapAll.size();
	}

	public void putToPaidMapAll(java.lang.String key, double val) {
		if (this.paidMapAll == null) {
			this.paidMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>();
		}
		this.paidMapAll.put(key, val);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Map<java.lang.String, java.lang.Double> getPaidMapAll() {
		return this.paidMapAll;
	}

	public Order setPaidMapAll(
			@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String, java.lang.Double> paidMapAll) {
		this.paidMapAll = paidMapAll;
		return this;
	}

	public void unsetPaidMapAll() {
		this.paidMapAll = null;
	}

	/**
	 * Returns true if field paidMapAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPaidMapAll() {
		return this.paidMapAll != null;
	}

	public void setPaidMapAllIsSet(boolean value) {
		if (!value) {
			this.paidMapAll = null;
		}
	}

	public int getTransport() {
		return this.transport;
	}

	public Order setTransport(int transport) {
		this.transport = transport;
		setTransportIsSet(true);
		return this;
	}

	public void unsetTransport() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSPORT_ISSET_ID);
	}

	/**
	 * Returns true if field transport is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTransport() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSPORT_ISSET_ID);
	}

	public void setTransportIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSPORT_ISSET_ID, value);
	}

	public double getTransFeeOne() {
		return this.transFeeOne;
	}

	public Order setTransFeeOne(double transFeeOne) {
		this.transFeeOne = transFeeOne;
		setTransFeeOneIsSet(true);
		return this;
	}

	public void unsetTransFeeOne() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSFEEONE_ISSET_ID);
	}

	/**
	 * Returns true if field transFeeOne is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTransFeeOne() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSFEEONE_ISSET_ID);
	}

	public void setTransFeeOneIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSFEEONE_ISSET_ID, value);
	}

	public double getTransFeeThis() {
		return this.transFeeThis;
	}

	public Order setTransFeeThis(double transFeeThis) {
		this.transFeeThis = transFeeThis;
		setTransFeeThisIsSet(true);
		return this;
	}

	public void unsetTransFeeThis() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSFEETHIS_ISSET_ID);
	}

	/**
	 * Returns true if field transFeeThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTransFeeThis() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSFEETHIS_ISSET_ID);
	}

	public void setTransFeeThisIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSFEETHIS_ISSET_ID, value);
	}

	public double getTransFeeAll() {
		return this.transFeeAll;
	}

	public Order setTransFeeAll(double transFeeAll) {
		this.transFeeAll = transFeeAll;
		setTransFeeAllIsSet(true);
		return this;
	}

	public void unsetTransFeeAll() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSFEEALL_ISSET_ID);
	}

	/**
	 * Returns true if field transFeeAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTransFeeAll() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSFEEALL_ISSET_ID);
	}

	public void setTransFeeAllIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSFEEALL_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDeliveryCode() {
		return this.deliveryCode;
	}

	public Order setDeliveryCode(@org.apache.thrift.annotation.Nullable java.lang.String deliveryCode) {
		this.deliveryCode = deliveryCode;
		return this;
	}

	public void unsetDeliveryCode() {
		this.deliveryCode = null;
	}

	/**
	 * Returns true if field deliveryCode is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDeliveryCode() {
		return this.deliveryCode != null;
	}

	public void setDeliveryCodeIsSet(boolean value) {
		if (!value) {
			this.deliveryCode = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDeliveryCompany() {
		return this.deliveryCompany;
	}

	public Order setDeliveryCompany(@org.apache.thrift.annotation.Nullable java.lang.String deliveryCompany) {
		this.deliveryCompany = deliveryCompany;
		return this;
	}

	public void unsetDeliveryCompany() {
		this.deliveryCompany = null;
	}

	/**
	 * Returns true if field deliveryCompany is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDeliveryCompany() {
		return this.deliveryCompany != null;
	}

	public void setDeliveryCompanyIsSet(boolean value) {
		if (!value) {
			this.deliveryCompany = null;
		}
	}

	public double getPriceWorkOne() {
		return this.priceWorkOne;
	}

	public Order setPriceWorkOne(double priceWorkOne) {
		this.priceWorkOne = priceWorkOne;
		setPriceWorkOneIsSet(true);
		return this;
	}

	public void unsetPriceWorkOne() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEWORKONE_ISSET_ID);
	}

	/**
	 * Returns true if field priceWorkOne is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceWorkOne() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEWORKONE_ISSET_ID);
	}

	public void setPriceWorkOneIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEWORKONE_ISSET_ID, value);
	}

	public double getPriceWorkThis() {
		return this.priceWorkThis;
	}

	public Order setPriceWorkThis(double priceWorkThis) {
		this.priceWorkThis = priceWorkThis;
		setPriceWorkThisIsSet(true);
		return this;
	}

	public void unsetPriceWorkThis() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEWORKTHIS_ISSET_ID);
	}

	/**
	 * Returns true if field priceWorkThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceWorkThis() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEWORKTHIS_ISSET_ID);
	}

	public void setPriceWorkThisIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEWORKTHIS_ISSET_ID, value);
	}

	public double getPriceWorkAll() {
		return this.priceWorkAll;
	}

	public Order setPriceWorkAll(double priceWorkAll) {
		this.priceWorkAll = priceWorkAll;
		setPriceWorkAllIsSet(true);
		return this;
	}

	public void unsetPriceWorkAll() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEWORKALL_ISSET_ID);
	}

	/**
	 * Returns true if field priceWorkAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceWorkAll() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEWORKALL_ISSET_ID);
	}

	public void setPriceWorkAllIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEWORKALL_ISSET_ID, value);
	}

	public double getPriceCostThis() {
		return this.priceCostThis;
	}

	public Order setPriceCostThis(double priceCostThis) {
		this.priceCostThis = priceCostThis;
		setPriceCostThisIsSet(true);
		return this;
	}

	public void unsetPriceCostThis() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICECOSTTHIS_ISSET_ID);
	}

	/**
	 * Returns true if field priceCostThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceCostThis() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICECOSTTHIS_ISSET_ID);
	}

	public void setPriceCostThisIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICECOSTTHIS_ISSET_ID, value);
	}

	public double getPriceCostAll() {
		return this.priceCostAll;
	}

	public Order setPriceCostAll(double priceCostAll) {
		this.priceCostAll = priceCostAll;
		setPriceCostAllIsSet(true);
		return this;
	}

	public void unsetPriceCostAll() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICECOSTALL_ISSET_ID);
	}

	/**
	 * Returns true if field priceCostAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceCostAll() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICECOSTALL_ISSET_ID);
	}

	public void setPriceCostAllIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICECOSTALL_ISSET_ID, value);
	}

	public double getCouponPayThis() {
		return this.couponPayThis;
	}

	public Order setCouponPayThis(double couponPayThis) {
		this.couponPayThis = couponPayThis;
		setCouponPayThisIsSet(true);
		return this;
	}

	public void unsetCouponPayThis() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUPONPAYTHIS_ISSET_ID);
	}

	/**
	 * Returns true if field couponPayThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCouponPayThis() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUPONPAYTHIS_ISSET_ID);
	}

	public void setCouponPayThisIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUPONPAYTHIS_ISSET_ID, value);
	}

	public double getCouponPayAll() {
		return this.couponPayAll;
	}

	public Order setCouponPayAll(double couponPayAll) {
		this.couponPayAll = couponPayAll;
		setCouponPayAllIsSet(true);
		return this;
	}

	public void unsetCouponPayAll() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUPONPAYALL_ISSET_ID);
	}

	/**
	 * Returns true if field couponPayAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCouponPayAll() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUPONPAYALL_ISSET_ID);
	}

	public void setCouponPayAllIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUPONPAYALL_ISSET_ID, value);
	}

	public double getCouponCashThis() {
		return this.couponCashThis;
	}

	public Order setCouponCashThis(double couponCashThis) {
		this.couponCashThis = couponCashThis;
		setCouponCashThisIsSet(true);
		return this;
	}

	public void unsetCouponCashThis() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUPONCASHTHIS_ISSET_ID);
	}

	/**
	 * Returns true if field couponCashThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCouponCashThis() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUPONCASHTHIS_ISSET_ID);
	}

	public void setCouponCashThisIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUPONCASHTHIS_ISSET_ID, value);
	}

	public double getCouponCashAll() {
		return this.couponCashAll;
	}

	public Order setCouponCashAll(double couponCashAll) {
		this.couponCashAll = couponCashAll;
		setCouponCashAllIsSet(true);
		return this;
	}

	public void unsetCouponCashAll() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUPONCASHALL_ISSET_ID);
	}

	/**
	 * Returns true if field couponCashAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCouponCashAll() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUPONCASHALL_ISSET_ID);
	}

	public void setCouponCashAllIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUPONCASHALL_ISSET_ID, value);
	}

	public double getCouponDisThis() {
		return this.couponDisThis;
	}

	public Order setCouponDisThis(double couponDisThis) {
		this.couponDisThis = couponDisThis;
		setCouponDisThisIsSet(true);
		return this;
	}

	public void unsetCouponDisThis() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUPONDISTHIS_ISSET_ID);
	}

	/**
	 * Returns true if field couponDisThis is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCouponDisThis() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUPONDISTHIS_ISSET_ID);
	}

	public void setCouponDisThisIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUPONDISTHIS_ISSET_ID, value);
	}

	public double getCouponDisAll() {
		return this.couponDisAll;
	}

	public Order setCouponDisAll(double couponDisAll) {
		this.couponDisAll = couponDisAll;
		setCouponDisAllIsSet(true);
		return this;
	}

	public void unsetCouponDisAll() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUPONDISALL_ISSET_ID);
	}

	/**
	 * Returns true if field couponDisAll is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCouponDisAll() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUPONDISALL_ISSET_ID);
	}

	public void setCouponDisAllIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUPONDISALL_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNote() {
		return this.note;
	}

	public Order setNote(@org.apache.thrift.annotation.Nullable java.lang.String note) {
		this.note = note;
		return this;
	}

	public void unsetNote() {
		this.note = null;
	}

	/**
	 * Returns true if field note is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetNote() {
		return this.note != null;
	}

	public void setNoteIsSet(boolean value) {
		if (!value) {
			this.note = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNoteSell() {
		return this.noteSell;
	}

	public Order setNoteSell(@org.apache.thrift.annotation.Nullable java.lang.String noteSell) {
		this.noteSell = noteSell;
		return this;
	}

	public void unsetNoteSell() {
		this.noteSell = null;
	}

	/**
	 * Returns true if field noteSell is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNoteSell() {
		return this.noteSell != null;
	}

	public void setNoteSellIsSet(boolean value) {
		if (!value) {
			this.noteSell = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAddress() {
		return this.address;
	}

	public Order setAddress(@org.apache.thrift.annotation.Nullable java.lang.String address) {
		this.address = address;
		return this;
	}

	public void unsetAddress() {
		this.address = null;
	}

	/**
	 * Returns true if field address is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAddress() {
		return this.address != null;
	}

	public void setAddressIsSet(boolean value) {
		if (!value) {
			this.address = null;
		}
	}

	public int getCouponArrSize() {
		return (this.couponArr == null) ? 0 : this.couponArr.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<CouponFlow> getCouponArrIterator() {
		return (this.couponArr == null) ? null : this.couponArr.iterator();
	}

	public void addToCouponArr(CouponFlow elem) {
		if (this.couponArr == null) {
			this.couponArr = new java.util.ArrayList<CouponFlow>();
		}
		this.couponArr.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<CouponFlow> getCouponArr() {
		return this.couponArr;
	}

	public Order setCouponArr(@org.apache.thrift.annotation.Nullable java.util.List<CouponFlow> couponArr) {
		this.couponArr = couponArr;
		return this;
	}

	public void unsetCouponArr() {
		this.couponArr = null;
	}

	/**
	 * Returns true if field couponArr is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCouponArr() {
		return this.couponArr != null;
	}

	public void setCouponArrIsSet(boolean value) {
		if (!value) {
			this.couponArr = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getGoodShot() {
		return this.goodShot;
	}

	public Order setGoodShot(@org.apache.thrift.annotation.Nullable java.lang.String goodShot) {
		this.goodShot = goodShot;
		return this;
	}

	public void unsetGoodShot() {
		this.goodShot = null;
	}

	/**
	 * Returns true if field goodShot is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetGoodShot() {
		return this.goodShot != null;
	}

	public void setGoodShotIsSet(boolean value) {
		if (!value) {
			this.goodShot = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getGoodsShot() {
		return this.goodsShot;
	}

	public Order setGoodsShot(@org.apache.thrift.annotation.Nullable java.lang.String goodsShot) {
		this.goodsShot = goodsShot;
		return this;
	}

	public void unsetGoodsShot() {
		this.goodsShot = null;
	}

	/**
	 * Returns true if field goodsShot is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetGoodsShot() {
		return this.goodsShot != null;
	}

	public void setGoodsShotIsSet(boolean value) {
		if (!value) {
			this.goodsShot = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case OID:
			if (value == null) {
				unsetOid();
			}
			else {
				setOid((java.lang.String) value);
			}
			break;

		case XID:
			if (value == null) {
				unsetXid();
			}
			else {
				setXid((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case GID:
			if (value == null) {
				unsetGid();
			}
			else {
				setGid((java.lang.String) value);
			}
			break;

		case DID:
			if (value == null) {
				unsetDid();
			}
			else {
				setDid((java.lang.String) value);
			}
			break;

		case UID_BUY:
			if (value == null) {
				unsetUidBuy();
			}
			else {
				setUidBuy((java.lang.String) value);
			}
			break;

		case UID_SELL:
			if (value == null) {
				unsetUidSell();
			}
			else {
				setUidSell((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case CONFIRM_TIME:
			if (value == null) {
				unsetConfirmTime();
			}
			else {
				setConfirmTime((java.lang.String) value);
			}
			break;

		case EXPIRE_TIME:
			if (value == null) {
				unsetExpireTime();
			}
			else {
				setExpireTime((java.lang.String) value);
			}
			break;

		case IS_DELETE:
			if (value == null) {
				unsetIsDelete();
			}
			else {
				setIsDelete((java.lang.Boolean) value);
			}
			break;

		case IS_VIRTUAL:
			if (value == null) {
				unsetIsVirtual();
			}
			else {
				setIsVirtual((java.lang.Boolean) value);
			}
			break;

		case IS_CURRENCY:
			if (value == null) {
				unsetIsCurrency();
			}
			else {
				setIsCurrency((java.lang.Boolean) value);
			}
			break;

		case IS_BUNDLE:
			if (value == null) {
				unsetIsBundle();
			}
			else {
				setIsBundle((java.lang.Boolean) value);
			}
			break;

		case IS_MIX:
			if (value == null) {
				unsetIsMix();
			}
			else {
				setIsMix((java.lang.Boolean) value);
			}
			break;

		case IS_NEED_CASH:
			if (value == null) {
				unsetIsNeedCash();
			}
			else {
				setIsNeedCash((java.lang.Boolean) value);
			}
			break;

		case IS_NEED_WALLET:
			if (value == null) {
				unsetIsNeedWallet();
			}
			else {
				setIsNeedWallet((java.lang.Boolean) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case STATUS_PAY:
			if (value == null) {
				unsetStatusPay();
			}
			else {
				setStatusPay((java.lang.Integer) value);
			}
			break;

		case SERIAL_ID:
			if (value == null) {
				unsetSerialId();
			}
			else {
				setSerialId((java.lang.String) value);
			}
			break;

		case IS_REVIEW:
			if (value == null) {
				unsetIsReview();
			}
			else {
				setIsReview((java.lang.Boolean) value);
			}
			break;

		case COMMENT:
			if (value == null) {
				unsetComment();
			}
			else {
				setComment((java.lang.String) value);
			}
			break;

		case PRICE_ONE:
			if (value == null) {
				unsetPriceOne();
			}
			else {
				setPriceOne((java.lang.Double) value);
			}
			break;

		case PRICE_ALL:
			if (value == null) {
				unsetPriceAll();
			}
			else {
				setPriceAll((java.lang.Double) value);
			}
			break;

		case NUM_BUY:
			if (value == null) {
				unsetNumBuy();
			}
			else {
				setNumBuy((java.lang.Integer) value);
			}
			break;

		case METHOD_PAY:
			if (value == null) {
				unsetMethodPay();
			}
			else {
				setMethodPay((java.lang.Integer) value);
			}
			break;

		case PID:
			if (value == null) {
				unsetPid();
			}
			else {
				setPid((java.lang.String) value);
			}
			break;

		case PAY_TIME:
			if (value == null) {
				unsetPayTime();
			}
			else {
				setPayTime((java.lang.String) value);
			}
			break;

		case SEND_TIME:
			if (value == null) {
				unsetSendTime();
			}
			else {
				setSendTime((java.lang.String) value);
			}
			break;

		case DEAL_TIME:
			if (value == null) {
				unsetDealTime();
			}
			else {
				setDealTime((java.lang.String) value);
			}
			break;

		case PAY_MAP_ONE:
			if (value == null) {
				unsetPayMapOne();
			}
			else {
				setPayMapOne((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case PAY_MAP_THIS:
			if (value == null) {
				unsetPayMapThis();
			}
			else {
				setPayMapThis((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case PAY_MAP_ALL:
			if (value == null) {
				unsetPayMapAll();
			}
			else {
				setPayMapAll((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case UNPAID_MAP_THIS:
			if (value == null) {
				unsetUnpaidMapThis();
			}
			else {
				setUnpaidMapThis((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case UNPAID_MAP_ALL:
			if (value == null) {
				unsetUnpaidMapAll();
			}
			else {
				setUnpaidMapAll((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case PAID_MAP_ONE:
			if (value == null) {
				unsetPaidMapOne();
			}
			else {
				setPaidMapOne((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case PAID_MAP_THIS:
			if (value == null) {
				unsetPaidMapThis();
			}
			else {
				setPaidMapThis((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case PAID_MAP_ALL:
			if (value == null) {
				unsetPaidMapAll();
			}
			else {
				setPaidMapAll((java.util.Map<java.lang.String, java.lang.Double>) value);
			}
			break;

		case TRANSPORT:
			if (value == null) {
				unsetTransport();
			}
			else {
				setTransport((java.lang.Integer) value);
			}
			break;

		case TRANS_FEE_ONE:
			if (value == null) {
				unsetTransFeeOne();
			}
			else {
				setTransFeeOne((java.lang.Double) value);
			}
			break;

		case TRANS_FEE_THIS:
			if (value == null) {
				unsetTransFeeThis();
			}
			else {
				setTransFeeThis((java.lang.Double) value);
			}
			break;

		case TRANS_FEE_ALL:
			if (value == null) {
				unsetTransFeeAll();
			}
			else {
				setTransFeeAll((java.lang.Double) value);
			}
			break;

		case DELIVERY_CODE:
			if (value == null) {
				unsetDeliveryCode();
			}
			else {
				setDeliveryCode((java.lang.String) value);
			}
			break;

		case DELIVERY_COMPANY:
			if (value == null) {
				unsetDeliveryCompany();
			}
			else {
				setDeliveryCompany((java.lang.String) value);
			}
			break;

		case PRICE_WORK_ONE:
			if (value == null) {
				unsetPriceWorkOne();
			}
			else {
				setPriceWorkOne((java.lang.Double) value);
			}
			break;

		case PRICE_WORK_THIS:
			if (value == null) {
				unsetPriceWorkThis();
			}
			else {
				setPriceWorkThis((java.lang.Double) value);
			}
			break;

		case PRICE_WORK_ALL:
			if (value == null) {
				unsetPriceWorkAll();
			}
			else {
				setPriceWorkAll((java.lang.Double) value);
			}
			break;

		case PRICE_COST_THIS:
			if (value == null) {
				unsetPriceCostThis();
			}
			else {
				setPriceCostThis((java.lang.Double) value);
			}
			break;

		case PRICE_COST_ALL:
			if (value == null) {
				unsetPriceCostAll();
			}
			else {
				setPriceCostAll((java.lang.Double) value);
			}
			break;

		case COUPON_PAY_THIS:
			if (value == null) {
				unsetCouponPayThis();
			}
			else {
				setCouponPayThis((java.lang.Double) value);
			}
			break;

		case COUPON_PAY_ALL:
			if (value == null) {
				unsetCouponPayAll();
			}
			else {
				setCouponPayAll((java.lang.Double) value);
			}
			break;

		case COUPON_CASH_THIS:
			if (value == null) {
				unsetCouponCashThis();
			}
			else {
				setCouponCashThis((java.lang.Double) value);
			}
			break;

		case COUPON_CASH_ALL:
			if (value == null) {
				unsetCouponCashAll();
			}
			else {
				setCouponCashAll((java.lang.Double) value);
			}
			break;

		case COUPON_DIS_THIS:
			if (value == null) {
				unsetCouponDisThis();
			}
			else {
				setCouponDisThis((java.lang.Double) value);
			}
			break;

		case COUPON_DIS_ALL:
			if (value == null) {
				unsetCouponDisAll();
			}
			else {
				setCouponDisAll((java.lang.Double) value);
			}
			break;

		case NOTE:
			if (value == null) {
				unsetNote();
			}
			else {
				setNote((java.lang.String) value);
			}
			break;

		case NOTE_SELL:
			if (value == null) {
				unsetNoteSell();
			}
			else {
				setNoteSell((java.lang.String) value);
			}
			break;

		case ADDRESS:
			if (value == null) {
				unsetAddress();
			}
			else {
				setAddress((java.lang.String) value);
			}
			break;

		case COUPON_ARR:
			if (value == null) {
				unsetCouponArr();
			}
			else {
				setCouponArr((java.util.List<CouponFlow>) value);
			}
			break;

		case GOOD_SHOT:
			if (value == null) {
				unsetGoodShot();
			}
			else {
				setGoodShot((java.lang.String) value);
			}
			break;

		case GOODS_SHOT:
			if (value == null) {
				unsetGoodsShot();
			}
			else {
				setGoodsShot((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case OID:
			return getOid();

		case XID:
			return getXid();

		case SID:
			return getSid();

		case GID:
			return getGid();

		case DID:
			return getDid();

		case UID_BUY:
			return getUidBuy();

		case UID_SELL:
			return getUidSell();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case CONFIRM_TIME:
			return getConfirmTime();

		case EXPIRE_TIME:
			return getExpireTime();

		case IS_DELETE:
			return isIsDelete();

		case IS_VIRTUAL:
			return isIsVirtual();

		case IS_CURRENCY:
			return isIsCurrency();

		case IS_BUNDLE:
			return isIsBundle();

		case IS_MIX:
			return isIsMix();

		case IS_NEED_CASH:
			return isIsNeedCash();

		case IS_NEED_WALLET:
			return isIsNeedWallet();

		case STATUS:
			return getStatus();

		case STATUS_PAY:
			return getStatusPay();

		case SERIAL_ID:
			return getSerialId();

		case IS_REVIEW:
			return isIsReview();

		case COMMENT:
			return getComment();

		case PRICE_ONE:
			return getPriceOne();

		case PRICE_ALL:
			return getPriceAll();

		case NUM_BUY:
			return getNumBuy();

		case METHOD_PAY:
			return getMethodPay();

		case PID:
			return getPid();

		case PAY_TIME:
			return getPayTime();

		case SEND_TIME:
			return getSendTime();

		case DEAL_TIME:
			return getDealTime();

		case PAY_MAP_ONE:
			return getPayMapOne();

		case PAY_MAP_THIS:
			return getPayMapThis();

		case PAY_MAP_ALL:
			return getPayMapAll();

		case UNPAID_MAP_THIS:
			return getUnpaidMapThis();

		case UNPAID_MAP_ALL:
			return getUnpaidMapAll();

		case PAID_MAP_ONE:
			return getPaidMapOne();

		case PAID_MAP_THIS:
			return getPaidMapThis();

		case PAID_MAP_ALL:
			return getPaidMapAll();

		case TRANSPORT:
			return getTransport();

		case TRANS_FEE_ONE:
			return getTransFeeOne();

		case TRANS_FEE_THIS:
			return getTransFeeThis();

		case TRANS_FEE_ALL:
			return getTransFeeAll();

		case DELIVERY_CODE:
			return getDeliveryCode();

		case DELIVERY_COMPANY:
			return getDeliveryCompany();

		case PRICE_WORK_ONE:
			return getPriceWorkOne();

		case PRICE_WORK_THIS:
			return getPriceWorkThis();

		case PRICE_WORK_ALL:
			return getPriceWorkAll();

		case PRICE_COST_THIS:
			return getPriceCostThis();

		case PRICE_COST_ALL:
			return getPriceCostAll();

		case COUPON_PAY_THIS:
			return getCouponPayThis();

		case COUPON_PAY_ALL:
			return getCouponPayAll();

		case COUPON_CASH_THIS:
			return getCouponCashThis();

		case COUPON_CASH_ALL:
			return getCouponCashAll();

		case COUPON_DIS_THIS:
			return getCouponDisThis();

		case COUPON_DIS_ALL:
			return getCouponDisAll();

		case NOTE:
			return getNote();

		case NOTE_SELL:
			return getNoteSell();

		case ADDRESS:
			return getAddress();

		case COUPON_ARR:
			return getCouponArr();

		case GOOD_SHOT:
			return getGoodShot();

		case GOODS_SHOT:
			return getGoodsShot();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case OID:
			return isSetOid();
		case XID:
			return isSetXid();
		case SID:
			return isSetSid();
		case GID:
			return isSetGid();
		case DID:
			return isSetDid();
		case UID_BUY:
			return isSetUidBuy();
		case UID_SELL:
			return isSetUidSell();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case CONFIRM_TIME:
			return isSetConfirmTime();
		case EXPIRE_TIME:
			return isSetExpireTime();
		case IS_DELETE:
			return isSetIsDelete();
		case IS_VIRTUAL:
			return isSetIsVirtual();
		case IS_CURRENCY:
			return isSetIsCurrency();
		case IS_BUNDLE:
			return isSetIsBundle();
		case IS_MIX:
			return isSetIsMix();
		case IS_NEED_CASH:
			return isSetIsNeedCash();
		case IS_NEED_WALLET:
			return isSetIsNeedWallet();
		case STATUS:
			return isSetStatus();
		case STATUS_PAY:
			return isSetStatusPay();
		case SERIAL_ID:
			return isSetSerialId();
		case IS_REVIEW:
			return isSetIsReview();
		case COMMENT:
			return isSetComment();
		case PRICE_ONE:
			return isSetPriceOne();
		case PRICE_ALL:
			return isSetPriceAll();
		case NUM_BUY:
			return isSetNumBuy();
		case METHOD_PAY:
			return isSetMethodPay();
		case PID:
			return isSetPid();
		case PAY_TIME:
			return isSetPayTime();
		case SEND_TIME:
			return isSetSendTime();
		case DEAL_TIME:
			return isSetDealTime();
		case PAY_MAP_ONE:
			return isSetPayMapOne();
		case PAY_MAP_THIS:
			return isSetPayMapThis();
		case PAY_MAP_ALL:
			return isSetPayMapAll();
		case UNPAID_MAP_THIS:
			return isSetUnpaidMapThis();
		case UNPAID_MAP_ALL:
			return isSetUnpaidMapAll();
		case PAID_MAP_ONE:
			return isSetPaidMapOne();
		case PAID_MAP_THIS:
			return isSetPaidMapThis();
		case PAID_MAP_ALL:
			return isSetPaidMapAll();
		case TRANSPORT:
			return isSetTransport();
		case TRANS_FEE_ONE:
			return isSetTransFeeOne();
		case TRANS_FEE_THIS:
			return isSetTransFeeThis();
		case TRANS_FEE_ALL:
			return isSetTransFeeAll();
		case DELIVERY_CODE:
			return isSetDeliveryCode();
		case DELIVERY_COMPANY:
			return isSetDeliveryCompany();
		case PRICE_WORK_ONE:
			return isSetPriceWorkOne();
		case PRICE_WORK_THIS:
			return isSetPriceWorkThis();
		case PRICE_WORK_ALL:
			return isSetPriceWorkAll();
		case PRICE_COST_THIS:
			return isSetPriceCostThis();
		case PRICE_COST_ALL:
			return isSetPriceCostAll();
		case COUPON_PAY_THIS:
			return isSetCouponPayThis();
		case COUPON_PAY_ALL:
			return isSetCouponPayAll();
		case COUPON_CASH_THIS:
			return isSetCouponCashThis();
		case COUPON_CASH_ALL:
			return isSetCouponCashAll();
		case COUPON_DIS_THIS:
			return isSetCouponDisThis();
		case COUPON_DIS_ALL:
			return isSetCouponDisAll();
		case NOTE:
			return isSetNote();
		case NOTE_SELL:
			return isSetNoteSell();
		case ADDRESS:
			return isSetAddress();
		case COUPON_ARR:
			return isSetCouponArr();
		case GOOD_SHOT:
			return isSetGoodShot();
		case GOODS_SHOT:
			return isSetGoodsShot();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Order)
			return this.equals((Order) that);
		return false;
	}

	public boolean equals(Order that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_oid = true && this.isSetOid();
		boolean that_present_oid = true && that.isSetOid();
		if (this_present_oid || that_present_oid) {
			if (!(this_present_oid && that_present_oid))
				return false;
			if (!this.oid.equals(that.oid))
				return false;
		}

		boolean this_present_xid = true && this.isSetXid();
		boolean that_present_xid = true && that.isSetXid();
		if (this_present_xid || that_present_xid) {
			if (!(this_present_xid && that_present_xid))
				return false;
			if (!this.xid.equals(that.xid))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_gid = true && this.isSetGid();
		boolean that_present_gid = true && that.isSetGid();
		if (this_present_gid || that_present_gid) {
			if (!(this_present_gid && that_present_gid))
				return false;
			if (!this.gid.equals(that.gid))
				return false;
		}

		boolean this_present_did = true && this.isSetDid();
		boolean that_present_did = true && that.isSetDid();
		if (this_present_did || that_present_did) {
			if (!(this_present_did && that_present_did))
				return false;
			if (!this.did.equals(that.did))
				return false;
		}

		boolean this_present_uidBuy = true && this.isSetUidBuy();
		boolean that_present_uidBuy = true && that.isSetUidBuy();
		if (this_present_uidBuy || that_present_uidBuy) {
			if (!(this_present_uidBuy && that_present_uidBuy))
				return false;
			if (!this.uidBuy.equals(that.uidBuy))
				return false;
		}

		boolean this_present_uidSell = true && this.isSetUidSell();
		boolean that_present_uidSell = true && that.isSetUidSell();
		if (this_present_uidSell || that_present_uidSell) {
			if (!(this_present_uidSell && that_present_uidSell))
				return false;
			if (!this.uidSell.equals(that.uidSell))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_confirmTime = true && this.isSetConfirmTime();
		boolean that_present_confirmTime = true && that.isSetConfirmTime();
		if (this_present_confirmTime || that_present_confirmTime) {
			if (!(this_present_confirmTime && that_present_confirmTime))
				return false;
			if (!this.confirmTime.equals(that.confirmTime))
				return false;
		}

		boolean this_present_expireTime = true && this.isSetExpireTime();
		boolean that_present_expireTime = true && that.isSetExpireTime();
		if (this_present_expireTime || that_present_expireTime) {
			if (!(this_present_expireTime && that_present_expireTime))
				return false;
			if (!this.expireTime.equals(that.expireTime))
				return false;
		}

		boolean this_present_isDelete = true;
		boolean that_present_isDelete = true;
		if (this_present_isDelete || that_present_isDelete) {
			if (!(this_present_isDelete && that_present_isDelete))
				return false;
			if (this.isDelete != that.isDelete)
				return false;
		}

		boolean this_present_isVirtual = true;
		boolean that_present_isVirtual = true;
		if (this_present_isVirtual || that_present_isVirtual) {
			if (!(this_present_isVirtual && that_present_isVirtual))
				return false;
			if (this.isVirtual != that.isVirtual)
				return false;
		}

		boolean this_present_isCurrency = true;
		boolean that_present_isCurrency = true;
		if (this_present_isCurrency || that_present_isCurrency) {
			if (!(this_present_isCurrency && that_present_isCurrency))
				return false;
			if (this.isCurrency != that.isCurrency)
				return false;
		}

		boolean this_present_isBundle = true;
		boolean that_present_isBundle = true;
		if (this_present_isBundle || that_present_isBundle) {
			if (!(this_present_isBundle && that_present_isBundle))
				return false;
			if (this.isBundle != that.isBundle)
				return false;
		}

		boolean this_present_isMix = true;
		boolean that_present_isMix = true;
		if (this_present_isMix || that_present_isMix) {
			if (!(this_present_isMix && that_present_isMix))
				return false;
			if (this.isMix != that.isMix)
				return false;
		}

		boolean this_present_isNeedCash = true;
		boolean that_present_isNeedCash = true;
		if (this_present_isNeedCash || that_present_isNeedCash) {
			if (!(this_present_isNeedCash && that_present_isNeedCash))
				return false;
			if (this.isNeedCash != that.isNeedCash)
				return false;
		}

		boolean this_present_isNeedWallet = true;
		boolean that_present_isNeedWallet = true;
		if (this_present_isNeedWallet || that_present_isNeedWallet) {
			if (!(this_present_isNeedWallet && that_present_isNeedWallet))
				return false;
			if (this.isNeedWallet != that.isNeedWallet)
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_statusPay = true;
		boolean that_present_statusPay = true;
		if (this_present_statusPay || that_present_statusPay) {
			if (!(this_present_statusPay && that_present_statusPay))
				return false;
			if (this.statusPay != that.statusPay)
				return false;
		}

		boolean this_present_serialId = true && this.isSetSerialId();
		boolean that_present_serialId = true && that.isSetSerialId();
		if (this_present_serialId || that_present_serialId) {
			if (!(this_present_serialId && that_present_serialId))
				return false;
			if (!this.serialId.equals(that.serialId))
				return false;
		}

		boolean this_present_isReview = true;
		boolean that_present_isReview = true;
		if (this_present_isReview || that_present_isReview) {
			if (!(this_present_isReview && that_present_isReview))
				return false;
			if (this.isReview != that.isReview)
				return false;
		}

		boolean this_present_comment = true && this.isSetComment();
		boolean that_present_comment = true && that.isSetComment();
		if (this_present_comment || that_present_comment) {
			if (!(this_present_comment && that_present_comment))
				return false;
			if (!this.comment.equals(that.comment))
				return false;
		}

		boolean this_present_priceOne = true;
		boolean that_present_priceOne = true;
		if (this_present_priceOne || that_present_priceOne) {
			if (!(this_present_priceOne && that_present_priceOne))
				return false;
			if (this.priceOne != that.priceOne)
				return false;
		}

		boolean this_present_priceAll = true;
		boolean that_present_priceAll = true;
		if (this_present_priceAll || that_present_priceAll) {
			if (!(this_present_priceAll && that_present_priceAll))
				return false;
			if (this.priceAll != that.priceAll)
				return false;
		}

		boolean this_present_numBuy = true;
		boolean that_present_numBuy = true;
		if (this_present_numBuy || that_present_numBuy) {
			if (!(this_present_numBuy && that_present_numBuy))
				return false;
			if (this.numBuy != that.numBuy)
				return false;
		}

		boolean this_present_methodPay = true;
		boolean that_present_methodPay = true;
		if (this_present_methodPay || that_present_methodPay) {
			if (!(this_present_methodPay && that_present_methodPay))
				return false;
			if (this.methodPay != that.methodPay)
				return false;
		}

		boolean this_present_pid = true && this.isSetPid();
		boolean that_present_pid = true && that.isSetPid();
		if (this_present_pid || that_present_pid) {
			if (!(this_present_pid && that_present_pid))
				return false;
			if (!this.pid.equals(that.pid))
				return false;
		}

		boolean this_present_payTime = true && this.isSetPayTime();
		boolean that_present_payTime = true && that.isSetPayTime();
		if (this_present_payTime || that_present_payTime) {
			if (!(this_present_payTime && that_present_payTime))
				return false;
			if (!this.payTime.equals(that.payTime))
				return false;
		}

		boolean this_present_sendTime = true && this.isSetSendTime();
		boolean that_present_sendTime = true && that.isSetSendTime();
		if (this_present_sendTime || that_present_sendTime) {
			if (!(this_present_sendTime && that_present_sendTime))
				return false;
			if (!this.sendTime.equals(that.sendTime))
				return false;
		}

		boolean this_present_dealTime = true && this.isSetDealTime();
		boolean that_present_dealTime = true && that.isSetDealTime();
		if (this_present_dealTime || that_present_dealTime) {
			if (!(this_present_dealTime && that_present_dealTime))
				return false;
			if (!this.dealTime.equals(that.dealTime))
				return false;
		}

		boolean this_present_payMapOne = true && this.isSetPayMapOne();
		boolean that_present_payMapOne = true && that.isSetPayMapOne();
		if (this_present_payMapOne || that_present_payMapOne) {
			if (!(this_present_payMapOne && that_present_payMapOne))
				return false;
			if (!this.payMapOne.equals(that.payMapOne))
				return false;
		}

		boolean this_present_payMapThis = true && this.isSetPayMapThis();
		boolean that_present_payMapThis = true && that.isSetPayMapThis();
		if (this_present_payMapThis || that_present_payMapThis) {
			if (!(this_present_payMapThis && that_present_payMapThis))
				return false;
			if (!this.payMapThis.equals(that.payMapThis))
				return false;
		}

		boolean this_present_payMapAll = true && this.isSetPayMapAll();
		boolean that_present_payMapAll = true && that.isSetPayMapAll();
		if (this_present_payMapAll || that_present_payMapAll) {
			if (!(this_present_payMapAll && that_present_payMapAll))
				return false;
			if (!this.payMapAll.equals(that.payMapAll))
				return false;
		}

		boolean this_present_unpaidMapThis = true && this.isSetUnpaidMapThis();
		boolean that_present_unpaidMapThis = true && that.isSetUnpaidMapThis();
		if (this_present_unpaidMapThis || that_present_unpaidMapThis) {
			if (!(this_present_unpaidMapThis && that_present_unpaidMapThis))
				return false;
			if (!this.unpaidMapThis.equals(that.unpaidMapThis))
				return false;
		}

		boolean this_present_unpaidMapAll = true && this.isSetUnpaidMapAll();
		boolean that_present_unpaidMapAll = true && that.isSetUnpaidMapAll();
		if (this_present_unpaidMapAll || that_present_unpaidMapAll) {
			if (!(this_present_unpaidMapAll && that_present_unpaidMapAll))
				return false;
			if (!this.unpaidMapAll.equals(that.unpaidMapAll))
				return false;
		}

		boolean this_present_paidMapOne = true && this.isSetPaidMapOne();
		boolean that_present_paidMapOne = true && that.isSetPaidMapOne();
		if (this_present_paidMapOne || that_present_paidMapOne) {
			if (!(this_present_paidMapOne && that_present_paidMapOne))
				return false;
			if (!this.paidMapOne.equals(that.paidMapOne))
				return false;
		}

		boolean this_present_paidMapThis = true && this.isSetPaidMapThis();
		boolean that_present_paidMapThis = true && that.isSetPaidMapThis();
		if (this_present_paidMapThis || that_present_paidMapThis) {
			if (!(this_present_paidMapThis && that_present_paidMapThis))
				return false;
			if (!this.paidMapThis.equals(that.paidMapThis))
				return false;
		}

		boolean this_present_paidMapAll = true && this.isSetPaidMapAll();
		boolean that_present_paidMapAll = true && that.isSetPaidMapAll();
		if (this_present_paidMapAll || that_present_paidMapAll) {
			if (!(this_present_paidMapAll && that_present_paidMapAll))
				return false;
			if (!this.paidMapAll.equals(that.paidMapAll))
				return false;
		}

		boolean this_present_transport = true;
		boolean that_present_transport = true;
		if (this_present_transport || that_present_transport) {
			if (!(this_present_transport && that_present_transport))
				return false;
			if (this.transport != that.transport)
				return false;
		}

		boolean this_present_transFeeOne = true;
		boolean that_present_transFeeOne = true;
		if (this_present_transFeeOne || that_present_transFeeOne) {
			if (!(this_present_transFeeOne && that_present_transFeeOne))
				return false;
			if (this.transFeeOne != that.transFeeOne)
				return false;
		}

		boolean this_present_transFeeThis = true;
		boolean that_present_transFeeThis = true;
		if (this_present_transFeeThis || that_present_transFeeThis) {
			if (!(this_present_transFeeThis && that_present_transFeeThis))
				return false;
			if (this.transFeeThis != that.transFeeThis)
				return false;
		}

		boolean this_present_transFeeAll = true;
		boolean that_present_transFeeAll = true;
		if (this_present_transFeeAll || that_present_transFeeAll) {
			if (!(this_present_transFeeAll && that_present_transFeeAll))
				return false;
			if (this.transFeeAll != that.transFeeAll)
				return false;
		}

		boolean this_present_deliveryCode = true && this.isSetDeliveryCode();
		boolean that_present_deliveryCode = true && that.isSetDeliveryCode();
		if (this_present_deliveryCode || that_present_deliveryCode) {
			if (!(this_present_deliveryCode && that_present_deliveryCode))
				return false;
			if (!this.deliveryCode.equals(that.deliveryCode))
				return false;
		}

		boolean this_present_deliveryCompany = true && this.isSetDeliveryCompany();
		boolean that_present_deliveryCompany = true && that.isSetDeliveryCompany();
		if (this_present_deliveryCompany || that_present_deliveryCompany) {
			if (!(this_present_deliveryCompany && that_present_deliveryCompany))
				return false;
			if (!this.deliveryCompany.equals(that.deliveryCompany))
				return false;
		}

		boolean this_present_priceWorkOne = true;
		boolean that_present_priceWorkOne = true;
		if (this_present_priceWorkOne || that_present_priceWorkOne) {
			if (!(this_present_priceWorkOne && that_present_priceWorkOne))
				return false;
			if (this.priceWorkOne != that.priceWorkOne)
				return false;
		}

		boolean this_present_priceWorkThis = true;
		boolean that_present_priceWorkThis = true;
		if (this_present_priceWorkThis || that_present_priceWorkThis) {
			if (!(this_present_priceWorkThis && that_present_priceWorkThis))
				return false;
			if (this.priceWorkThis != that.priceWorkThis)
				return false;
		}

		boolean this_present_priceWorkAll = true;
		boolean that_present_priceWorkAll = true;
		if (this_present_priceWorkAll || that_present_priceWorkAll) {
			if (!(this_present_priceWorkAll && that_present_priceWorkAll))
				return false;
			if (this.priceWorkAll != that.priceWorkAll)
				return false;
		}

		boolean this_present_priceCostThis = true;
		boolean that_present_priceCostThis = true;
		if (this_present_priceCostThis || that_present_priceCostThis) {
			if (!(this_present_priceCostThis && that_present_priceCostThis))
				return false;
			if (this.priceCostThis != that.priceCostThis)
				return false;
		}

		boolean this_present_priceCostAll = true;
		boolean that_present_priceCostAll = true;
		if (this_present_priceCostAll || that_present_priceCostAll) {
			if (!(this_present_priceCostAll && that_present_priceCostAll))
				return false;
			if (this.priceCostAll != that.priceCostAll)
				return false;
		}

		boolean this_present_couponPayThis = true;
		boolean that_present_couponPayThis = true;
		if (this_present_couponPayThis || that_present_couponPayThis) {
			if (!(this_present_couponPayThis && that_present_couponPayThis))
				return false;
			if (this.couponPayThis != that.couponPayThis)
				return false;
		}

		boolean this_present_couponPayAll = true;
		boolean that_present_couponPayAll = true;
		if (this_present_couponPayAll || that_present_couponPayAll) {
			if (!(this_present_couponPayAll && that_present_couponPayAll))
				return false;
			if (this.couponPayAll != that.couponPayAll)
				return false;
		}

		boolean this_present_couponCashThis = true;
		boolean that_present_couponCashThis = true;
		if (this_present_couponCashThis || that_present_couponCashThis) {
			if (!(this_present_couponCashThis && that_present_couponCashThis))
				return false;
			if (this.couponCashThis != that.couponCashThis)
				return false;
		}

		boolean this_present_couponCashAll = true;
		boolean that_present_couponCashAll = true;
		if (this_present_couponCashAll || that_present_couponCashAll) {
			if (!(this_present_couponCashAll && that_present_couponCashAll))
				return false;
			if (this.couponCashAll != that.couponCashAll)
				return false;
		}

		boolean this_present_couponDisThis = true;
		boolean that_present_couponDisThis = true;
		if (this_present_couponDisThis || that_present_couponDisThis) {
			if (!(this_present_couponDisThis && that_present_couponDisThis))
				return false;
			if (this.couponDisThis != that.couponDisThis)
				return false;
		}

		boolean this_present_couponDisAll = true;
		boolean that_present_couponDisAll = true;
		if (this_present_couponDisAll || that_present_couponDisAll) {
			if (!(this_present_couponDisAll && that_present_couponDisAll))
				return false;
			if (this.couponDisAll != that.couponDisAll)
				return false;
		}

		boolean this_present_note = true && this.isSetNote();
		boolean that_present_note = true && that.isSetNote();
		if (this_present_note || that_present_note) {
			if (!(this_present_note && that_present_note))
				return false;
			if (!this.note.equals(that.note))
				return false;
		}

		boolean this_present_noteSell = true && this.isSetNoteSell();
		boolean that_present_noteSell = true && that.isSetNoteSell();
		if (this_present_noteSell || that_present_noteSell) {
			if (!(this_present_noteSell && that_present_noteSell))
				return false;
			if (!this.noteSell.equals(that.noteSell))
				return false;
		}

		boolean this_present_address = true && this.isSetAddress();
		boolean that_present_address = true && that.isSetAddress();
		if (this_present_address || that_present_address) {
			if (!(this_present_address && that_present_address))
				return false;
			if (!this.address.equals(that.address))
				return false;
		}

		boolean this_present_couponArr = true && this.isSetCouponArr();
		boolean that_present_couponArr = true && that.isSetCouponArr();
		if (this_present_couponArr || that_present_couponArr) {
			if (!(this_present_couponArr && that_present_couponArr))
				return false;
			if (!this.couponArr.equals(that.couponArr))
				return false;
		}

		boolean this_present_goodShot = true && this.isSetGoodShot();
		boolean that_present_goodShot = true && that.isSetGoodShot();
		if (this_present_goodShot || that_present_goodShot) {
			if (!(this_present_goodShot && that_present_goodShot))
				return false;
			if (!this.goodShot.equals(that.goodShot))
				return false;
		}

		boolean this_present_goodsShot = true && this.isSetGoodsShot();
		boolean that_present_goodsShot = true && that.isSetGoodsShot();
		if (this_present_goodsShot || that_present_goodsShot) {
			if (!(this_present_goodsShot && that_present_goodsShot))
				return false;
			if (!this.goodsShot.equals(that.goodsShot))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetOid()) ? 131071 : 524287);
		if (isSetOid())
			hashCode = hashCode * 8191 + oid.hashCode();

		hashCode = hashCode * 8191 + ((isSetXid()) ? 131071 : 524287);
		if (isSetXid())
			hashCode = hashCode * 8191 + xid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetGid()) ? 131071 : 524287);
		if (isSetGid())
			hashCode = hashCode * 8191 + gid.hashCode();

		hashCode = hashCode * 8191 + ((isSetDid()) ? 131071 : 524287);
		if (isSetDid())
			hashCode = hashCode * 8191 + did.hashCode();

		hashCode = hashCode * 8191 + ((isSetUidBuy()) ? 131071 : 524287);
		if (isSetUidBuy())
			hashCode = hashCode * 8191 + uidBuy.hashCode();

		hashCode = hashCode * 8191 + ((isSetUidSell()) ? 131071 : 524287);
		if (isSetUidSell())
			hashCode = hashCode * 8191 + uidSell.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetConfirmTime()) ? 131071 : 524287);
		if (isSetConfirmTime())
			hashCode = hashCode * 8191 + confirmTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTime()) ? 131071 : 524287);
		if (isSetExpireTime())
			hashCode = hashCode * 8191 + expireTime.hashCode();

		hashCode = hashCode * 8191 + ((isDelete) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isVirtual) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isCurrency) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isBundle) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isMix) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isNeedCash) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isNeedWallet) ? 131071 : 524287);

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + statusPay;

		hashCode = hashCode * 8191 + ((isSetSerialId()) ? 131071 : 524287);
		if (isSetSerialId())
			hashCode = hashCode * 8191 + serialId.hashCode();

		hashCode = hashCode * 8191 + ((isReview) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
		if (isSetComment())
			hashCode = hashCode * 8191 + comment.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceOne);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceAll);

		hashCode = hashCode * 8191 + numBuy;

		hashCode = hashCode * 8191 + methodPay;

		hashCode = hashCode * 8191 + ((isSetPid()) ? 131071 : 524287);
		if (isSetPid())
			hashCode = hashCode * 8191 + pid.hashCode();

		hashCode = hashCode * 8191 + ((isSetPayTime()) ? 131071 : 524287);
		if (isSetPayTime())
			hashCode = hashCode * 8191 + payTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetSendTime()) ? 131071 : 524287);
		if (isSetSendTime())
			hashCode = hashCode * 8191 + sendTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetDealTime()) ? 131071 : 524287);
		if (isSetDealTime())
			hashCode = hashCode * 8191 + dealTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetPayMapOne()) ? 131071 : 524287);
		if (isSetPayMapOne())
			hashCode = hashCode * 8191 + payMapOne.hashCode();

		hashCode = hashCode * 8191 + ((isSetPayMapThis()) ? 131071 : 524287);
		if (isSetPayMapThis())
			hashCode = hashCode * 8191 + payMapThis.hashCode();

		hashCode = hashCode * 8191 + ((isSetPayMapAll()) ? 131071 : 524287);
		if (isSetPayMapAll())
			hashCode = hashCode * 8191 + payMapAll.hashCode();

		hashCode = hashCode * 8191 + ((isSetUnpaidMapThis()) ? 131071 : 524287);
		if (isSetUnpaidMapThis())
			hashCode = hashCode * 8191 + unpaidMapThis.hashCode();

		hashCode = hashCode * 8191 + ((isSetUnpaidMapAll()) ? 131071 : 524287);
		if (isSetUnpaidMapAll())
			hashCode = hashCode * 8191 + unpaidMapAll.hashCode();

		hashCode = hashCode * 8191 + ((isSetPaidMapOne()) ? 131071 : 524287);
		if (isSetPaidMapOne())
			hashCode = hashCode * 8191 + paidMapOne.hashCode();

		hashCode = hashCode * 8191 + ((isSetPaidMapThis()) ? 131071 : 524287);
		if (isSetPaidMapThis())
			hashCode = hashCode * 8191 + paidMapThis.hashCode();

		hashCode = hashCode * 8191 + ((isSetPaidMapAll()) ? 131071 : 524287);
		if (isSetPaidMapAll())
			hashCode = hashCode * 8191 + paidMapAll.hashCode();

		hashCode = hashCode * 8191 + transport;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transFeeOne);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transFeeThis);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transFeeAll);

		hashCode = hashCode * 8191 + ((isSetDeliveryCode()) ? 131071 : 524287);
		if (isSetDeliveryCode())
			hashCode = hashCode * 8191 + deliveryCode.hashCode();

		hashCode = hashCode * 8191 + ((isSetDeliveryCompany()) ? 131071 : 524287);
		if (isSetDeliveryCompany())
			hashCode = hashCode * 8191 + deliveryCompany.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceWorkOne);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceWorkThis);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceWorkAll);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceCostThis);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceCostAll);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(couponPayThis);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(couponPayAll);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(couponCashThis);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(couponCashAll);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(couponDisThis);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(couponDisAll);

		hashCode = hashCode * 8191 + ((isSetNote()) ? 131071 : 524287);
		if (isSetNote())
			hashCode = hashCode * 8191 + note.hashCode();

		hashCode = hashCode * 8191 + ((isSetNoteSell()) ? 131071 : 524287);
		if (isSetNoteSell())
			hashCode = hashCode * 8191 + noteSell.hashCode();

		hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
		if (isSetAddress())
			hashCode = hashCode * 8191 + address.hashCode();

		hashCode = hashCode * 8191 + ((isSetCouponArr()) ? 131071 : 524287);
		if (isSetCouponArr())
			hashCode = hashCode * 8191 + couponArr.hashCode();

		hashCode = hashCode * 8191 + ((isSetGoodShot()) ? 131071 : 524287);
		if (isSetGoodShot())
			hashCode = hashCode * 8191 + goodShot.hashCode();

		hashCode = hashCode * 8191 + ((isSetGoodsShot()) ? 131071 : 524287);
		if (isSetGoodsShot())
			hashCode = hashCode * 8191 + goodsShot.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(Order other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetOid()).compareTo(other.isSetOid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oid, other.oid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetXid()).compareTo(other.isSetXid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetXid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xid, other.xid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, other.gid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDid()).compareTo(other.isSetDid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.did, other.did);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidBuy()).compareTo(other.isSetUidBuy());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidBuy()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidBuy, other.uidBuy);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidSell()).compareTo(other.isSetUidSell());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidSell()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidSell, other.uidSell);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetConfirmTime()).compareTo(other.isSetConfirmTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetConfirmTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmTime, other.confirmTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsDelete()).compareTo(other.isSetIsDelete());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsDelete()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelete, other.isDelete);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsVirtual()).compareTo(other.isSetIsVirtual());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsVirtual()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isVirtual, other.isVirtual);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsCurrency()).compareTo(other.isSetIsCurrency());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsCurrency()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCurrency, other.isCurrency);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsBundle()).compareTo(other.isSetIsBundle());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsBundle()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBundle, other.isBundle);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsMix()).compareTo(other.isSetIsMix());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsMix()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMix, other.isMix);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsNeedCash()).compareTo(other.isSetIsNeedCash());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsNeedCash()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedCash, other.isNeedCash);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsNeedWallet()).compareTo(other.isSetIsNeedWallet());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsNeedWallet()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNeedWallet, other.isNeedWallet);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatusPay()).compareTo(other.isSetStatusPay());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatusPay()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusPay, other.statusPay);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSerialId()).compareTo(other.isSetSerialId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSerialId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialId, other.serialId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsReview()).compareTo(other.isSetIsReview());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsReview()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReview, other.isReview);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceOne()).compareTo(other.isSetPriceOne());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceOne()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceOne, other.priceOne);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceAll()).compareTo(other.isSetPriceAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceAll, other.priceAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumBuy()).compareTo(other.isSetNumBuy());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumBuy()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numBuy, other.numBuy);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMethodPay()).compareTo(other.isSetMethodPay());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMethodPay()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodPay, other.methodPay);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayTime()).compareTo(other.isSetPayTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payTime, other.payTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSendTime()).compareTo(other.isSetSendTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSendTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendTime, other.sendTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDealTime()).compareTo(other.isSetDealTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDealTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealTime, other.dealTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayMapOne()).compareTo(other.isSetPayMapOne());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMapOne()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMapOne, other.payMapOne);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayMapThis()).compareTo(other.isSetPayMapThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMapThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMapThis, other.payMapThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayMapAll()).compareTo(other.isSetPayMapAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMapAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMapAll, other.payMapAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUnpaidMapThis()).compareTo(other.isSetUnpaidMapThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUnpaidMapThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unpaidMapThis, other.unpaidMapThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUnpaidMapAll()).compareTo(other.isSetUnpaidMapAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUnpaidMapAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unpaidMapAll, other.unpaidMapAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPaidMapOne()).compareTo(other.isSetPaidMapOne());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPaidMapOne()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paidMapOne, other.paidMapOne);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPaidMapThis()).compareTo(other.isSetPaidMapThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPaidMapThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paidMapThis, other.paidMapThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPaidMapAll()).compareTo(other.isSetPaidMapAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPaidMapAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paidMapAll, other.paidMapAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTransport()).compareTo(other.isSetTransport());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransport()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transport, other.transport);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTransFeeOne()).compareTo(other.isSetTransFeeOne());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransFeeOne()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transFeeOne, other.transFeeOne);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTransFeeThis()).compareTo(other.isSetTransFeeThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransFeeThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transFeeThis, other.transFeeThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTransFeeAll()).compareTo(other.isSetTransFeeAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTransFeeAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transFeeAll, other.transFeeAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDeliveryCode()).compareTo(other.isSetDeliveryCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDeliveryCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryCode, other.deliveryCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDeliveryCompany()).compareTo(other.isSetDeliveryCompany());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDeliveryCompany()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryCompany, other.deliveryCompany);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceWorkOne()).compareTo(other.isSetPriceWorkOne());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceWorkOne()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceWorkOne, other.priceWorkOne);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceWorkThis()).compareTo(other.isSetPriceWorkThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceWorkThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceWorkThis, other.priceWorkThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceWorkAll()).compareTo(other.isSetPriceWorkAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceWorkAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceWorkAll, other.priceWorkAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceCostThis()).compareTo(other.isSetPriceCostThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceCostThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceCostThis, other.priceCostThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceCostAll()).compareTo(other.isSetPriceCostAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceCostAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceCostAll, other.priceCostAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCouponPayThis()).compareTo(other.isSetCouponPayThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCouponPayThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponPayThis, other.couponPayThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCouponPayAll()).compareTo(other.isSetCouponPayAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCouponPayAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponPayAll, other.couponPayAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCouponCashThis()).compareTo(other.isSetCouponCashThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCouponCashThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponCashThis, other.couponCashThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCouponCashAll()).compareTo(other.isSetCouponCashAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCouponCashAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponCashAll, other.couponCashAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCouponDisThis()).compareTo(other.isSetCouponDisThis());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCouponDisThis()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponDisThis, other.couponDisThis);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCouponDisAll()).compareTo(other.isSetCouponDisAll());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCouponDisAll()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponDisAll, other.couponDisAll);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNote()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNoteSell()).compareTo(other.isSetNoteSell());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNoteSell()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteSell, other.noteSell);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAddress()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCouponArr()).compareTo(other.isSetCouponArr());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCouponArr()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponArr, other.couponArr);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetGoodShot()).compareTo(other.isSetGoodShot());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGoodShot()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodShot, other.goodShot);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetGoodsShot()).compareTo(other.isSetGoodsShot());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGoodsShot()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsShot, other.goodsShot);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Order(");
		boolean first = true;

		sb.append("oid:");
		if (this.oid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.oid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("xid:");
		if (this.xid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.xid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("gid:");
		if (this.gid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.gid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("did:");
		if (this.did == null) {
			sb.append("null");
		}
		else {
			sb.append(this.did);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uidBuy:");
		if (this.uidBuy == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uidBuy);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uidSell:");
		if (this.uidSell == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uidSell);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("confirmTime:");
		if (this.confirmTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.confirmTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("expireTime:");
		if (this.expireTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.expireTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isDelete:");
		sb.append(this.isDelete);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isVirtual:");
		sb.append(this.isVirtual);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isCurrency:");
		sb.append(this.isCurrency);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isBundle:");
		sb.append(this.isBundle);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isMix:");
		sb.append(this.isMix);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isNeedCash:");
		sb.append(this.isNeedCash);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isNeedWallet:");
		sb.append(this.isNeedWallet);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("statusPay:");
		sb.append(this.statusPay);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("serialId:");
		if (this.serialId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.serialId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isReview:");
		sb.append(this.isReview);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("comment:");
		if (this.comment == null) {
			sb.append("null");
		}
		else {
			sb.append(this.comment);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceOne:");
		sb.append(this.priceOne);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceAll:");
		sb.append(this.priceAll);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numBuy:");
		sb.append(this.numBuy);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("methodPay:");
		sb.append(this.methodPay);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("pid:");
		if (this.pid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.pid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payTime:");
		if (this.payTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.payTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sendTime:");
		if (this.sendTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sendTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("dealTime:");
		if (this.dealTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.dealTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payMapOne:");
		if (this.payMapOne == null) {
			sb.append("null");
		}
		else {
			sb.append(this.payMapOne);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payMapThis:");
		if (this.payMapThis == null) {
			sb.append("null");
		}
		else {
			sb.append(this.payMapThis);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payMapAll:");
		if (this.payMapAll == null) {
			sb.append("null");
		}
		else {
			sb.append(this.payMapAll);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("unpaidMapThis:");
		if (this.unpaidMapThis == null) {
			sb.append("null");
		}
		else {
			sb.append(this.unpaidMapThis);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("unpaidMapAll:");
		if (this.unpaidMapAll == null) {
			sb.append("null");
		}
		else {
			sb.append(this.unpaidMapAll);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("paidMapOne:");
		if (this.paidMapOne == null) {
			sb.append("null");
		}
		else {
			sb.append(this.paidMapOne);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("paidMapThis:");
		if (this.paidMapThis == null) {
			sb.append("null");
		}
		else {
			sb.append(this.paidMapThis);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("paidMapAll:");
		if (this.paidMapAll == null) {
			sb.append("null");
		}
		else {
			sb.append(this.paidMapAll);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("transport:");
		sb.append(this.transport);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("transFeeOne:");
		sb.append(this.transFeeOne);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("transFeeThis:");
		sb.append(this.transFeeThis);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("transFeeAll:");
		sb.append(this.transFeeAll);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("deliveryCode:");
		if (this.deliveryCode == null) {
			sb.append("null");
		}
		else {
			sb.append(this.deliveryCode);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("deliveryCompany:");
		if (this.deliveryCompany == null) {
			sb.append("null");
		}
		else {
			sb.append(this.deliveryCompany);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceWorkOne:");
		sb.append(this.priceWorkOne);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceWorkThis:");
		sb.append(this.priceWorkThis);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceWorkAll:");
		sb.append(this.priceWorkAll);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceCostThis:");
		sb.append(this.priceCostThis);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceCostAll:");
		sb.append(this.priceCostAll);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("couponPayThis:");
		sb.append(this.couponPayThis);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("couponPayAll:");
		sb.append(this.couponPayAll);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("couponCashThis:");
		sb.append(this.couponCashThis);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("couponCashAll:");
		sb.append(this.couponCashAll);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("couponDisThis:");
		sb.append(this.couponDisThis);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("couponDisAll:");
		sb.append(this.couponDisAll);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("note:");
		if (this.note == null) {
			sb.append("null");
		}
		else {
			sb.append(this.note);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("noteSell:");
		if (this.noteSell == null) {
			sb.append("null");
		}
		else {
			sb.append(this.noteSell);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("address:");
		if (this.address == null) {
			sb.append("null");
		}
		else {
			sb.append(this.address);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("couponArr:");
		if (this.couponArr == null) {
			sb.append("null");
		}
		else {
			sb.append(this.couponArr);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("goodShot:");
		if (this.goodShot == null) {
			sb.append("null");
		}
		else {
			sb.append(this.goodShot);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("goodsShot:");
		if (this.goodsShot == null) {
			sb.append("null");
		}
		else {
			sb.append(this.goodsShot);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class OrderStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrderStandardScheme getScheme() {
			return new OrderStandardScheme();
		}

	}

	private static class OrderStandardScheme extends org.apache.thrift.scheme.StandardScheme<Order> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Order struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // OID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.oid = iprot.readString();
						struct.setOidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // XID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.xid = iprot.readString();
						struct.setXidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // GID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.gid = iprot.readString();
						struct.setGidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // DID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.did = iprot.readString();
						struct.setDidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // UID_BUY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidBuy = iprot.readString();
						struct.setUidBuyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 51: // UID_SELL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidSell = iprot.readString();
						struct.setUidSellIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // CONFIRM_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.confirmTime = iprot.readString();
						struct.setConfirmTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // EXPIRE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTime = iprot.readString();
						struct.setExpireTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // IS_DELETE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isDelete = iprot.readBool();
						struct.setIsDeleteIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // IS_VIRTUAL
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isVirtual = iprot.readBool();
						struct.setIsVirtualIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // IS_CURRENCY
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isCurrency = iprot.readBool();
						struct.setIsCurrencyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // IS_BUNDLE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isBundle = iprot.readBool();
						struct.setIsBundleIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // IS_MIX
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isMix = iprot.readBool();
						struct.setIsMixIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // IS_NEED_CASH
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isNeedCash = iprot.readBool();
						struct.setIsNeedCashIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // IS_NEED_WALLET
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isNeedWallet = iprot.readBool();
						struct.setIsNeedWalletIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // STATUS_PAY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.statusPay = iprot.readI32();
						struct.setStatusPayIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // SERIAL_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.serialId = iprot.readString();
						struct.setSerialIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // IS_REVIEW
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isReview = iprot.readBool();
						struct.setIsReviewIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.comment = iprot.readString();
						struct.setCommentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // PRICE_ONE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceOne = iprot.readDouble();
						struct.setPriceOneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 24: // PRICE_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceAll = iprot.readDouble();
						struct.setPriceAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 25: // NUM_BUY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numBuy = iprot.readI32();
						struct.setNumBuyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 26: // METHOD_PAY
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.methodPay = iprot.readI32();
						struct.setMethodPayIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 27: // PID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.pid = iprot.readString();
						struct.setPidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 28: // PAY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.payTime = iprot.readString();
						struct.setPayTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 29: // SEND_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sendTime = iprot.readString();
						struct.setSendTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 30: // DEAL_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.dealTime = iprot.readString();
						struct.setDealTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 31: // PAY_MAP_ONE
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map86 = iprot.readMapBegin();
							struct.payMapOne = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map86.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key87;
							double _val88;
							for (int _i89 = 0; _i89 < _map86.size; ++_i89) {
								_key87 = iprot.readString();
								_val88 = iprot.readDouble();
								struct.payMapOne.put(_key87, _val88);
							}
							iprot.readMapEnd();
						}
						struct.setPayMapOneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 32: // PAY_MAP_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map90 = iprot.readMapBegin();
							struct.payMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map90.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key91;
							double _val92;
							for (int _i93 = 0; _i93 < _map90.size; ++_i93) {
								_key91 = iprot.readString();
								_val92 = iprot.readDouble();
								struct.payMapThis.put(_key91, _val92);
							}
							iprot.readMapEnd();
						}
						struct.setPayMapThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 33: // PAY_MAP_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map94 = iprot.readMapBegin();
							struct.payMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map94.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key95;
							double _val96;
							for (int _i97 = 0; _i97 < _map94.size; ++_i97) {
								_key95 = iprot.readString();
								_val96 = iprot.readDouble();
								struct.payMapAll.put(_key95, _val96);
							}
							iprot.readMapEnd();
						}
						struct.setPayMapAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 34: // UNPAID_MAP_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map98 = iprot.readMapBegin();
							struct.unpaidMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map98.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key99;
							double _val100;
							for (int _i101 = 0; _i101 < _map98.size; ++_i101) {
								_key99 = iprot.readString();
								_val100 = iprot.readDouble();
								struct.unpaidMapThis.put(_key99, _val100);
							}
							iprot.readMapEnd();
						}
						struct.setUnpaidMapThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 35: // UNPAID_MAP_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map102 = iprot.readMapBegin();
							struct.unpaidMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map102.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key103;
							double _val104;
							for (int _i105 = 0; _i105 < _map102.size; ++_i105) {
								_key103 = iprot.readString();
								_val104 = iprot.readDouble();
								struct.unpaidMapAll.put(_key103, _val104);
							}
							iprot.readMapEnd();
						}
						struct.setUnpaidMapAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 54: // PAID_MAP_ONE
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
							struct.paidMapOne = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map106.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key107;
							double _val108;
							for (int _i109 = 0; _i109 < _map106.size; ++_i109) {
								_key107 = iprot.readString();
								_val108 = iprot.readDouble();
								struct.paidMapOne.put(_key107, _val108);
							}
							iprot.readMapEnd();
						}
						struct.setPaidMapOneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 55: // PAID_MAP_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map110 = iprot.readMapBegin();
							struct.paidMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map110.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key111;
							double _val112;
							for (int _i113 = 0; _i113 < _map110.size; ++_i113) {
								_key111 = iprot.readString();
								_val112 = iprot.readDouble();
								struct.paidMapThis.put(_key111, _val112);
							}
							iprot.readMapEnd();
						}
						struct.setPaidMapThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 56: // PAID_MAP_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
						{
							org.apache.thrift.protocol.TMap _map114 = iprot.readMapBegin();
							struct.paidMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(
									2 * _map114.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key115;
							double _val116;
							for (int _i117 = 0; _i117 < _map114.size; ++_i117) {
								_key115 = iprot.readString();
								_val116 = iprot.readDouble();
								struct.paidMapAll.put(_key115, _val116);
							}
							iprot.readMapEnd();
						}
						struct.setPaidMapAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 59: // TRANSPORT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.transport = iprot.readI32();
						struct.setTransportIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 36: // TRANS_FEE_ONE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.transFeeOne = iprot.readDouble();
						struct.setTransFeeOneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 37: // TRANS_FEE_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.transFeeThis = iprot.readDouble();
						struct.setTransFeeThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 38: // TRANS_FEE_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.transFeeAll = iprot.readDouble();
						struct.setTransFeeAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 60: // DELIVERY_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.deliveryCode = iprot.readString();
						struct.setDeliveryCodeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 61: // DELIVERY_COMPANY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.deliveryCompany = iprot.readString();
						struct.setDeliveryCompanyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 39: // PRICE_WORK_ONE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceWorkOne = iprot.readDouble();
						struct.setPriceWorkOneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 40: // PRICE_WORK_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceWorkThis = iprot.readDouble();
						struct.setPriceWorkThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 41: // PRICE_WORK_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceWorkAll = iprot.readDouble();
						struct.setPriceWorkAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 49: // PRICE_COST_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceCostThis = iprot.readDouble();
						struct.setPriceCostThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 50: // PRICE_COST_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceCostAll = iprot.readDouble();
						struct.setPriceCostAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 42: // COUPON_PAY_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.couponPayThis = iprot.readDouble();
						struct.setCouponPayThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 43: // COUPON_PAY_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.couponPayAll = iprot.readDouble();
						struct.setCouponPayAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 44: // COUPON_CASH_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.couponCashThis = iprot.readDouble();
						struct.setCouponCashThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 45: // COUPON_CASH_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.couponCashAll = iprot.readDouble();
						struct.setCouponCashAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 46: // COUPON_DIS_THIS
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.couponDisThis = iprot.readDouble();
						struct.setCouponDisThisIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 47: // COUPON_DIS_ALL
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.couponDisAll = iprot.readDouble();
						struct.setCouponDisAllIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 48: // NOTE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.note = iprot.readString();
						struct.setNoteIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 62: // NOTE_SELL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.noteSell = iprot.readString();
						struct.setNoteSellIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 52: // ADDRESS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.address = iprot.readString();
						struct.setAddressIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 53: // COUPON_ARR
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
							struct.couponArr = new java.util.ArrayList<CouponFlow>(_list118.size);
							@org.apache.thrift.annotation.Nullable
							CouponFlow _elem119;
							for (int _i120 = 0; _i120 < _list118.size; ++_i120) {
								_elem119 = new CouponFlow();
								_elem119.read(iprot);
								struct.couponArr.add(_elem119);
							}
							iprot.readListEnd();
						}
						struct.setCouponArrIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 57: // GOOD_SHOT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.goodShot = iprot.readString();
						struct.setGoodShotIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 58: // GOODS_SHOT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.goodsShot = iprot.readString();
						struct.setGoodsShotIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Order struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.oid != null) {
				oprot.writeFieldBegin(OID_FIELD_DESC);
				oprot.writeString(struct.oid);
				oprot.writeFieldEnd();
			}
			if (struct.xid != null) {
				oprot.writeFieldBegin(XID_FIELD_DESC);
				oprot.writeString(struct.xid);
				oprot.writeFieldEnd();
			}
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.gid != null) {
				oprot.writeFieldBegin(GID_FIELD_DESC);
				oprot.writeString(struct.gid);
				oprot.writeFieldEnd();
			}
			if (struct.did != null) {
				oprot.writeFieldBegin(DID_FIELD_DESC);
				oprot.writeString(struct.did);
				oprot.writeFieldEnd();
			}
			if (struct.uidBuy != null) {
				oprot.writeFieldBegin(UID_BUY_FIELD_DESC);
				oprot.writeString(struct.uidBuy);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			if (struct.confirmTime != null) {
				oprot.writeFieldBegin(CONFIRM_TIME_FIELD_DESC);
				oprot.writeString(struct.confirmTime);
				oprot.writeFieldEnd();
			}
			if (struct.expireTime != null) {
				oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
				oprot.writeString(struct.expireTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_DELETE_FIELD_DESC);
			oprot.writeBool(struct.isDelete);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_VIRTUAL_FIELD_DESC);
			oprot.writeBool(struct.isVirtual);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_CURRENCY_FIELD_DESC);
			oprot.writeBool(struct.isCurrency);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_BUNDLE_FIELD_DESC);
			oprot.writeBool(struct.isBundle);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_MIX_FIELD_DESC);
			oprot.writeBool(struct.isMix);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_NEED_CASH_FIELD_DESC);
			oprot.writeBool(struct.isNeedCash);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_NEED_WALLET_FIELD_DESC);
			oprot.writeBool(struct.isNeedWallet);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_PAY_FIELD_DESC);
			oprot.writeI32(struct.statusPay);
			oprot.writeFieldEnd();
			if (struct.serialId != null) {
				oprot.writeFieldBegin(SERIAL_ID_FIELD_DESC);
				oprot.writeString(struct.serialId);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_REVIEW_FIELD_DESC);
			oprot.writeBool(struct.isReview);
			oprot.writeFieldEnd();
			if (struct.comment != null) {
				oprot.writeFieldBegin(COMMENT_FIELD_DESC);
				oprot.writeString(struct.comment);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(PRICE_ONE_FIELD_DESC);
			oprot.writeDouble(struct.priceOne);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_ALL_FIELD_DESC);
			oprot.writeDouble(struct.priceAll);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_BUY_FIELD_DESC);
			oprot.writeI32(struct.numBuy);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(METHOD_PAY_FIELD_DESC);
			oprot.writeI32(struct.methodPay);
			oprot.writeFieldEnd();
			if (struct.pid != null) {
				oprot.writeFieldBegin(PID_FIELD_DESC);
				oprot.writeString(struct.pid);
				oprot.writeFieldEnd();
			}
			if (struct.payTime != null) {
				oprot.writeFieldBegin(PAY_TIME_FIELD_DESC);
				oprot.writeString(struct.payTime);
				oprot.writeFieldEnd();
			}
			if (struct.sendTime != null) {
				oprot.writeFieldBegin(SEND_TIME_FIELD_DESC);
				oprot.writeString(struct.sendTime);
				oprot.writeFieldEnd();
			}
			if (struct.dealTime != null) {
				oprot.writeFieldBegin(DEAL_TIME_FIELD_DESC);
				oprot.writeString(struct.dealTime);
				oprot.writeFieldEnd();
			}
			if (struct.payMapOne != null) {
				oprot.writeFieldBegin(PAY_MAP_ONE_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.DOUBLE, struct.payMapOne.size()));
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter121 : struct.payMapOne
							.entrySet()) {
						oprot.writeString(_iter121.getKey());
						oprot.writeDouble(_iter121.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.payMapThis != null) {
				oprot.writeFieldBegin(PAY_MAP_THIS_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.DOUBLE, struct.payMapThis.size()));
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter122 : struct.payMapThis
							.entrySet()) {
						oprot.writeString(_iter122.getKey());
						oprot.writeDouble(_iter122.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.payMapAll != null) {
				oprot.writeFieldBegin(PAY_MAP_ALL_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.DOUBLE, struct.payMapAll.size()));
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter123 : struct.payMapAll
							.entrySet()) {
						oprot.writeString(_iter123.getKey());
						oprot.writeDouble(_iter123.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.unpaidMapThis != null) {
				oprot.writeFieldBegin(UNPAID_MAP_THIS_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.DOUBLE, struct.unpaidMapThis.size()));
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter124 : struct.unpaidMapThis
							.entrySet()) {
						oprot.writeString(_iter124.getKey());
						oprot.writeDouble(_iter124.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.unpaidMapAll != null) {
				oprot.writeFieldBegin(UNPAID_MAP_ALL_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.DOUBLE, struct.unpaidMapAll.size()));
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter125 : struct.unpaidMapAll
							.entrySet()) {
						oprot.writeString(_iter125.getKey());
						oprot.writeDouble(_iter125.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(TRANS_FEE_ONE_FIELD_DESC);
			oprot.writeDouble(struct.transFeeOne);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(TRANS_FEE_THIS_FIELD_DESC);
			oprot.writeDouble(struct.transFeeThis);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(TRANS_FEE_ALL_FIELD_DESC);
			oprot.writeDouble(struct.transFeeAll);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_WORK_ONE_FIELD_DESC);
			oprot.writeDouble(struct.priceWorkOne);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_WORK_THIS_FIELD_DESC);
			oprot.writeDouble(struct.priceWorkThis);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_WORK_ALL_FIELD_DESC);
			oprot.writeDouble(struct.priceWorkAll);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(COUPON_PAY_THIS_FIELD_DESC);
			oprot.writeDouble(struct.couponPayThis);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(COUPON_PAY_ALL_FIELD_DESC);
			oprot.writeDouble(struct.couponPayAll);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(COUPON_CASH_THIS_FIELD_DESC);
			oprot.writeDouble(struct.couponCashThis);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(COUPON_CASH_ALL_FIELD_DESC);
			oprot.writeDouble(struct.couponCashAll);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(COUPON_DIS_THIS_FIELD_DESC);
			oprot.writeDouble(struct.couponDisThis);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(COUPON_DIS_ALL_FIELD_DESC);
			oprot.writeDouble(struct.couponDisAll);
			oprot.writeFieldEnd();
			if (struct.note != null) {
				oprot.writeFieldBegin(NOTE_FIELD_DESC);
				oprot.writeString(struct.note);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(PRICE_COST_THIS_FIELD_DESC);
			oprot.writeDouble(struct.priceCostThis);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_COST_ALL_FIELD_DESC);
			oprot.writeDouble(struct.priceCostAll);
			oprot.writeFieldEnd();
			if (struct.uidSell != null) {
				oprot.writeFieldBegin(UID_SELL_FIELD_DESC);
				oprot.writeString(struct.uidSell);
				oprot.writeFieldEnd();
			}
			if (struct.address != null) {
				oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
				oprot.writeString(struct.address);
				oprot.writeFieldEnd();
			}
			if (struct.couponArr != null) {
				oprot.writeFieldBegin(COUPON_ARR_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
							struct.couponArr.size()));
					for (CouponFlow _iter126 : struct.couponArr) {
						_iter126.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.paidMapOne != null) {
				oprot.writeFieldBegin(PAID_MAP_ONE_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.DOUBLE, struct.paidMapOne.size()));
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter127 : struct.paidMapOne
							.entrySet()) {
						oprot.writeString(_iter127.getKey());
						oprot.writeDouble(_iter127.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.paidMapThis != null) {
				oprot.writeFieldBegin(PAID_MAP_THIS_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.DOUBLE, struct.paidMapThis.size()));
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter128 : struct.paidMapThis
							.entrySet()) {
						oprot.writeString(_iter128.getKey());
						oprot.writeDouble(_iter128.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.paidMapAll != null) {
				oprot.writeFieldBegin(PAID_MAP_ALL_FIELD_DESC);
				{
					oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
							org.apache.thrift.protocol.TType.DOUBLE, struct.paidMapAll.size()));
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter129 : struct.paidMapAll
							.entrySet()) {
						oprot.writeString(_iter129.getKey());
						oprot.writeDouble(_iter129.getValue());
					}
					oprot.writeMapEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.goodShot != null) {
				oprot.writeFieldBegin(GOOD_SHOT_FIELD_DESC);
				oprot.writeString(struct.goodShot);
				oprot.writeFieldEnd();
			}
			if (struct.goodsShot != null) {
				oprot.writeFieldBegin(GOODS_SHOT_FIELD_DESC);
				oprot.writeString(struct.goodsShot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(TRANSPORT_FIELD_DESC);
			oprot.writeI32(struct.transport);
			oprot.writeFieldEnd();
			if (struct.deliveryCode != null) {
				oprot.writeFieldBegin(DELIVERY_CODE_FIELD_DESC);
				oprot.writeString(struct.deliveryCode);
				oprot.writeFieldEnd();
			}
			if (struct.deliveryCompany != null) {
				oprot.writeFieldBegin(DELIVERY_COMPANY_FIELD_DESC);
				oprot.writeString(struct.deliveryCompany);
				oprot.writeFieldEnd();
			}
			if (struct.noteSell != null) {
				oprot.writeFieldBegin(NOTE_SELL_FIELD_DESC);
				oprot.writeString(struct.noteSell);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class OrderTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrderTupleScheme getScheme() {
			return new OrderTupleScheme();
		}

	}

	private static class OrderTupleScheme extends org.apache.thrift.scheme.TupleScheme<Order> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Order struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetOid()) {
				optionals.set(0);
			}
			if (struct.isSetXid()) {
				optionals.set(1);
			}
			if (struct.isSetSid()) {
				optionals.set(2);
			}
			if (struct.isSetGid()) {
				optionals.set(3);
			}
			if (struct.isSetDid()) {
				optionals.set(4);
			}
			if (struct.isSetUidBuy()) {
				optionals.set(5);
			}
			if (struct.isSetUidSell()) {
				optionals.set(6);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(7);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(8);
			}
			if (struct.isSetConfirmTime()) {
				optionals.set(9);
			}
			if (struct.isSetExpireTime()) {
				optionals.set(10);
			}
			if (struct.isSetIsDelete()) {
				optionals.set(11);
			}
			if (struct.isSetIsVirtual()) {
				optionals.set(12);
			}
			if (struct.isSetIsCurrency()) {
				optionals.set(13);
			}
			if (struct.isSetIsBundle()) {
				optionals.set(14);
			}
			if (struct.isSetIsMix()) {
				optionals.set(15);
			}
			if (struct.isSetIsNeedCash()) {
				optionals.set(16);
			}
			if (struct.isSetIsNeedWallet()) {
				optionals.set(17);
			}
			if (struct.isSetStatus()) {
				optionals.set(18);
			}
			if (struct.isSetStatusPay()) {
				optionals.set(19);
			}
			if (struct.isSetSerialId()) {
				optionals.set(20);
			}
			if (struct.isSetIsReview()) {
				optionals.set(21);
			}
			if (struct.isSetComment()) {
				optionals.set(22);
			}
			if (struct.isSetPriceOne()) {
				optionals.set(23);
			}
			if (struct.isSetPriceAll()) {
				optionals.set(24);
			}
			if (struct.isSetNumBuy()) {
				optionals.set(25);
			}
			if (struct.isSetMethodPay()) {
				optionals.set(26);
			}
			if (struct.isSetPid()) {
				optionals.set(27);
			}
			if (struct.isSetPayTime()) {
				optionals.set(28);
			}
			if (struct.isSetSendTime()) {
				optionals.set(29);
			}
			if (struct.isSetDealTime()) {
				optionals.set(30);
			}
			if (struct.isSetPayMapOne()) {
				optionals.set(31);
			}
			if (struct.isSetPayMapThis()) {
				optionals.set(32);
			}
			if (struct.isSetPayMapAll()) {
				optionals.set(33);
			}
			if (struct.isSetUnpaidMapThis()) {
				optionals.set(34);
			}
			if (struct.isSetUnpaidMapAll()) {
				optionals.set(35);
			}
			if (struct.isSetPaidMapOne()) {
				optionals.set(36);
			}
			if (struct.isSetPaidMapThis()) {
				optionals.set(37);
			}
			if (struct.isSetPaidMapAll()) {
				optionals.set(38);
			}
			if (struct.isSetTransport()) {
				optionals.set(39);
			}
			if (struct.isSetTransFeeOne()) {
				optionals.set(40);
			}
			if (struct.isSetTransFeeThis()) {
				optionals.set(41);
			}
			if (struct.isSetTransFeeAll()) {
				optionals.set(42);
			}
			if (struct.isSetDeliveryCode()) {
				optionals.set(43);
			}
			if (struct.isSetDeliveryCompany()) {
				optionals.set(44);
			}
			if (struct.isSetPriceWorkOne()) {
				optionals.set(45);
			}
			if (struct.isSetPriceWorkThis()) {
				optionals.set(46);
			}
			if (struct.isSetPriceWorkAll()) {
				optionals.set(47);
			}
			if (struct.isSetPriceCostThis()) {
				optionals.set(48);
			}
			if (struct.isSetPriceCostAll()) {
				optionals.set(49);
			}
			if (struct.isSetCouponPayThis()) {
				optionals.set(50);
			}
			if (struct.isSetCouponPayAll()) {
				optionals.set(51);
			}
			if (struct.isSetCouponCashThis()) {
				optionals.set(52);
			}
			if (struct.isSetCouponCashAll()) {
				optionals.set(53);
			}
			if (struct.isSetCouponDisThis()) {
				optionals.set(54);
			}
			if (struct.isSetCouponDisAll()) {
				optionals.set(55);
			}
			if (struct.isSetNote()) {
				optionals.set(56);
			}
			if (struct.isSetNoteSell()) {
				optionals.set(57);
			}
			if (struct.isSetAddress()) {
				optionals.set(58);
			}
			if (struct.isSetCouponArr()) {
				optionals.set(59);
			}
			if (struct.isSetGoodShot()) {
				optionals.set(60);
			}
			if (struct.isSetGoodsShot()) {
				optionals.set(61);
			}
			oprot.writeBitSet(optionals, 62);
			if (struct.isSetOid()) {
				oprot.writeString(struct.oid);
			}
			if (struct.isSetXid()) {
				oprot.writeString(struct.xid);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetGid()) {
				oprot.writeString(struct.gid);
			}
			if (struct.isSetDid()) {
				oprot.writeString(struct.did);
			}
			if (struct.isSetUidBuy()) {
				oprot.writeString(struct.uidBuy);
			}
			if (struct.isSetUidSell()) {
				oprot.writeString(struct.uidSell);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetConfirmTime()) {
				oprot.writeString(struct.confirmTime);
			}
			if (struct.isSetExpireTime()) {
				oprot.writeString(struct.expireTime);
			}
			if (struct.isSetIsDelete()) {
				oprot.writeBool(struct.isDelete);
			}
			if (struct.isSetIsVirtual()) {
				oprot.writeBool(struct.isVirtual);
			}
			if (struct.isSetIsCurrency()) {
				oprot.writeBool(struct.isCurrency);
			}
			if (struct.isSetIsBundle()) {
				oprot.writeBool(struct.isBundle);
			}
			if (struct.isSetIsMix()) {
				oprot.writeBool(struct.isMix);
			}
			if (struct.isSetIsNeedCash()) {
				oprot.writeBool(struct.isNeedCash);
			}
			if (struct.isSetIsNeedWallet()) {
				oprot.writeBool(struct.isNeedWallet);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetStatusPay()) {
				oprot.writeI32(struct.statusPay);
			}
			if (struct.isSetSerialId()) {
				oprot.writeString(struct.serialId);
			}
			if (struct.isSetIsReview()) {
				oprot.writeBool(struct.isReview);
			}
			if (struct.isSetComment()) {
				oprot.writeString(struct.comment);
			}
			if (struct.isSetPriceOne()) {
				oprot.writeDouble(struct.priceOne);
			}
			if (struct.isSetPriceAll()) {
				oprot.writeDouble(struct.priceAll);
			}
			if (struct.isSetNumBuy()) {
				oprot.writeI32(struct.numBuy);
			}
			if (struct.isSetMethodPay()) {
				oprot.writeI32(struct.methodPay);
			}
			if (struct.isSetPid()) {
				oprot.writeString(struct.pid);
			}
			if (struct.isSetPayTime()) {
				oprot.writeString(struct.payTime);
			}
			if (struct.isSetSendTime()) {
				oprot.writeString(struct.sendTime);
			}
			if (struct.isSetDealTime()) {
				oprot.writeString(struct.dealTime);
			}
			if (struct.isSetPayMapOne()) {
				{
					oprot.writeI32(struct.payMapOne.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter130 : struct.payMapOne
							.entrySet()) {
						oprot.writeString(_iter130.getKey());
						oprot.writeDouble(_iter130.getValue());
					}
				}
			}
			if (struct.isSetPayMapThis()) {
				{
					oprot.writeI32(struct.payMapThis.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter131 : struct.payMapThis
							.entrySet()) {
						oprot.writeString(_iter131.getKey());
						oprot.writeDouble(_iter131.getValue());
					}
				}
			}
			if (struct.isSetPayMapAll()) {
				{
					oprot.writeI32(struct.payMapAll.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter132 : struct.payMapAll
							.entrySet()) {
						oprot.writeString(_iter132.getKey());
						oprot.writeDouble(_iter132.getValue());
					}
				}
			}
			if (struct.isSetUnpaidMapThis()) {
				{
					oprot.writeI32(struct.unpaidMapThis.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter133 : struct.unpaidMapThis
							.entrySet()) {
						oprot.writeString(_iter133.getKey());
						oprot.writeDouble(_iter133.getValue());
					}
				}
			}
			if (struct.isSetUnpaidMapAll()) {
				{
					oprot.writeI32(struct.unpaidMapAll.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter134 : struct.unpaidMapAll
							.entrySet()) {
						oprot.writeString(_iter134.getKey());
						oprot.writeDouble(_iter134.getValue());
					}
				}
			}
			if (struct.isSetPaidMapOne()) {
				{
					oprot.writeI32(struct.paidMapOne.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter135 : struct.paidMapOne
							.entrySet()) {
						oprot.writeString(_iter135.getKey());
						oprot.writeDouble(_iter135.getValue());
					}
				}
			}
			if (struct.isSetPaidMapThis()) {
				{
					oprot.writeI32(struct.paidMapThis.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter136 : struct.paidMapThis
							.entrySet()) {
						oprot.writeString(_iter136.getKey());
						oprot.writeDouble(_iter136.getValue());
					}
				}
			}
			if (struct.isSetPaidMapAll()) {
				{
					oprot.writeI32(struct.paidMapAll.size());
					for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter137 : struct.paidMapAll
							.entrySet()) {
						oprot.writeString(_iter137.getKey());
						oprot.writeDouble(_iter137.getValue());
					}
				}
			}
			if (struct.isSetTransport()) {
				oprot.writeI32(struct.transport);
			}
			if (struct.isSetTransFeeOne()) {
				oprot.writeDouble(struct.transFeeOne);
			}
			if (struct.isSetTransFeeThis()) {
				oprot.writeDouble(struct.transFeeThis);
			}
			if (struct.isSetTransFeeAll()) {
				oprot.writeDouble(struct.transFeeAll);
			}
			if (struct.isSetDeliveryCode()) {
				oprot.writeString(struct.deliveryCode);
			}
			if (struct.isSetDeliveryCompany()) {
				oprot.writeString(struct.deliveryCompany);
			}
			if (struct.isSetPriceWorkOne()) {
				oprot.writeDouble(struct.priceWorkOne);
			}
			if (struct.isSetPriceWorkThis()) {
				oprot.writeDouble(struct.priceWorkThis);
			}
			if (struct.isSetPriceWorkAll()) {
				oprot.writeDouble(struct.priceWorkAll);
			}
			if (struct.isSetPriceCostThis()) {
				oprot.writeDouble(struct.priceCostThis);
			}
			if (struct.isSetPriceCostAll()) {
				oprot.writeDouble(struct.priceCostAll);
			}
			if (struct.isSetCouponPayThis()) {
				oprot.writeDouble(struct.couponPayThis);
			}
			if (struct.isSetCouponPayAll()) {
				oprot.writeDouble(struct.couponPayAll);
			}
			if (struct.isSetCouponCashThis()) {
				oprot.writeDouble(struct.couponCashThis);
			}
			if (struct.isSetCouponCashAll()) {
				oprot.writeDouble(struct.couponCashAll);
			}
			if (struct.isSetCouponDisThis()) {
				oprot.writeDouble(struct.couponDisThis);
			}
			if (struct.isSetCouponDisAll()) {
				oprot.writeDouble(struct.couponDisAll);
			}
			if (struct.isSetNote()) {
				oprot.writeString(struct.note);
			}
			if (struct.isSetNoteSell()) {
				oprot.writeString(struct.noteSell);
			}
			if (struct.isSetAddress()) {
				oprot.writeString(struct.address);
			}
			if (struct.isSetCouponArr()) {
				{
					oprot.writeI32(struct.couponArr.size());
					for (CouponFlow _iter138 : struct.couponArr) {
						_iter138.write(oprot);
					}
				}
			}
			if (struct.isSetGoodShot()) {
				oprot.writeString(struct.goodShot);
			}
			if (struct.isSetGoodsShot()) {
				oprot.writeString(struct.goodsShot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Order struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(62);
			if (incoming.get(0)) {
				struct.oid = iprot.readString();
				struct.setOidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.xid = iprot.readString();
				struct.setXidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.gid = iprot.readString();
				struct.setGidIsSet(true);
			}
			if (incoming.get(4)) {
				struct.did = iprot.readString();
				struct.setDidIsSet(true);
			}
			if (incoming.get(5)) {
				struct.uidBuy = iprot.readString();
				struct.setUidBuyIsSet(true);
			}
			if (incoming.get(6)) {
				struct.uidSell = iprot.readString();
				struct.setUidSellIsSet(true);
			}
			if (incoming.get(7)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(9)) {
				struct.confirmTime = iprot.readString();
				struct.setConfirmTimeIsSet(true);
			}
			if (incoming.get(10)) {
				struct.expireTime = iprot.readString();
				struct.setExpireTimeIsSet(true);
			}
			if (incoming.get(11)) {
				struct.isDelete = iprot.readBool();
				struct.setIsDeleteIsSet(true);
			}
			if (incoming.get(12)) {
				struct.isVirtual = iprot.readBool();
				struct.setIsVirtualIsSet(true);
			}
			if (incoming.get(13)) {
				struct.isCurrency = iprot.readBool();
				struct.setIsCurrencyIsSet(true);
			}
			if (incoming.get(14)) {
				struct.isBundle = iprot.readBool();
				struct.setIsBundleIsSet(true);
			}
			if (incoming.get(15)) {
				struct.isMix = iprot.readBool();
				struct.setIsMixIsSet(true);
			}
			if (incoming.get(16)) {
				struct.isNeedCash = iprot.readBool();
				struct.setIsNeedCashIsSet(true);
			}
			if (incoming.get(17)) {
				struct.isNeedWallet = iprot.readBool();
				struct.setIsNeedWalletIsSet(true);
			}
			if (incoming.get(18)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(19)) {
				struct.statusPay = iprot.readI32();
				struct.setStatusPayIsSet(true);
			}
			if (incoming.get(20)) {
				struct.serialId = iprot.readString();
				struct.setSerialIdIsSet(true);
			}
			if (incoming.get(21)) {
				struct.isReview = iprot.readBool();
				struct.setIsReviewIsSet(true);
			}
			if (incoming.get(22)) {
				struct.comment = iprot.readString();
				struct.setCommentIsSet(true);
			}
			if (incoming.get(23)) {
				struct.priceOne = iprot.readDouble();
				struct.setPriceOneIsSet(true);
			}
			if (incoming.get(24)) {
				struct.priceAll = iprot.readDouble();
				struct.setPriceAllIsSet(true);
			}
			if (incoming.get(25)) {
				struct.numBuy = iprot.readI32();
				struct.setNumBuyIsSet(true);
			}
			if (incoming.get(26)) {
				struct.methodPay = iprot.readI32();
				struct.setMethodPayIsSet(true);
			}
			if (incoming.get(27)) {
				struct.pid = iprot.readString();
				struct.setPidIsSet(true);
			}
			if (incoming.get(28)) {
				struct.payTime = iprot.readString();
				struct.setPayTimeIsSet(true);
			}
			if (incoming.get(29)) {
				struct.sendTime = iprot.readString();
				struct.setSendTimeIsSet(true);
			}
			if (incoming.get(30)) {
				struct.dealTime = iprot.readString();
				struct.setDealTimeIsSet(true);
			}
			if (incoming.get(31)) {
				{
					org.apache.thrift.protocol.TMap _map139 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.payMapOne = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map139.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key140;
					double _val141;
					for (int _i142 = 0; _i142 < _map139.size; ++_i142) {
						_key140 = iprot.readString();
						_val141 = iprot.readDouble();
						struct.payMapOne.put(_key140, _val141);
					}
				}
				struct.setPayMapOneIsSet(true);
			}
			if (incoming.get(32)) {
				{
					org.apache.thrift.protocol.TMap _map143 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.payMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map143.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key144;
					double _val145;
					for (int _i146 = 0; _i146 < _map143.size; ++_i146) {
						_key144 = iprot.readString();
						_val145 = iprot.readDouble();
						struct.payMapThis.put(_key144, _val145);
					}
				}
				struct.setPayMapThisIsSet(true);
			}
			if (incoming.get(33)) {
				{
					org.apache.thrift.protocol.TMap _map147 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.payMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map147.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key148;
					double _val149;
					for (int _i150 = 0; _i150 < _map147.size; ++_i150) {
						_key148 = iprot.readString();
						_val149 = iprot.readDouble();
						struct.payMapAll.put(_key148, _val149);
					}
				}
				struct.setPayMapAllIsSet(true);
			}
			if (incoming.get(34)) {
				{
					org.apache.thrift.protocol.TMap _map151 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.unpaidMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map151.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key152;
					double _val153;
					for (int _i154 = 0; _i154 < _map151.size; ++_i154) {
						_key152 = iprot.readString();
						_val153 = iprot.readDouble();
						struct.unpaidMapThis.put(_key152, _val153);
					}
				}
				struct.setUnpaidMapThisIsSet(true);
			}
			if (incoming.get(35)) {
				{
					org.apache.thrift.protocol.TMap _map155 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.unpaidMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map155.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key156;
					double _val157;
					for (int _i158 = 0; _i158 < _map155.size; ++_i158) {
						_key156 = iprot.readString();
						_val157 = iprot.readDouble();
						struct.unpaidMapAll.put(_key156, _val157);
					}
				}
				struct.setUnpaidMapAllIsSet(true);
			}
			if (incoming.get(36)) {
				{
					org.apache.thrift.protocol.TMap _map159 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.paidMapOne = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map159.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key160;
					double _val161;
					for (int _i162 = 0; _i162 < _map159.size; ++_i162) {
						_key160 = iprot.readString();
						_val161 = iprot.readDouble();
						struct.paidMapOne.put(_key160, _val161);
					}
				}
				struct.setPaidMapOneIsSet(true);
			}
			if (incoming.get(37)) {
				{
					org.apache.thrift.protocol.TMap _map163 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.paidMapThis = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map163.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key164;
					double _val165;
					for (int _i166 = 0; _i166 < _map163.size; ++_i166) {
						_key164 = iprot.readString();
						_val165 = iprot.readDouble();
						struct.paidMapThis.put(_key164, _val165);
					}
				}
				struct.setPaidMapThisIsSet(true);
			}
			if (incoming.get(38)) {
				{
					org.apache.thrift.protocol.TMap _map167 = new org.apache.thrift.protocol.TMap(
							org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
							iprot.readI32());
					struct.paidMapAll = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map167.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _key168;
					double _val169;
					for (int _i170 = 0; _i170 < _map167.size; ++_i170) {
						_key168 = iprot.readString();
						_val169 = iprot.readDouble();
						struct.paidMapAll.put(_key168, _val169);
					}
				}
				struct.setPaidMapAllIsSet(true);
			}
			if (incoming.get(39)) {
				struct.transport = iprot.readI32();
				struct.setTransportIsSet(true);
			}
			if (incoming.get(40)) {
				struct.transFeeOne = iprot.readDouble();
				struct.setTransFeeOneIsSet(true);
			}
			if (incoming.get(41)) {
				struct.transFeeThis = iprot.readDouble();
				struct.setTransFeeThisIsSet(true);
			}
			if (incoming.get(42)) {
				struct.transFeeAll = iprot.readDouble();
				struct.setTransFeeAllIsSet(true);
			}
			if (incoming.get(43)) {
				struct.deliveryCode = iprot.readString();
				struct.setDeliveryCodeIsSet(true);
			}
			if (incoming.get(44)) {
				struct.deliveryCompany = iprot.readString();
				struct.setDeliveryCompanyIsSet(true);
			}
			if (incoming.get(45)) {
				struct.priceWorkOne = iprot.readDouble();
				struct.setPriceWorkOneIsSet(true);
			}
			if (incoming.get(46)) {
				struct.priceWorkThis = iprot.readDouble();
				struct.setPriceWorkThisIsSet(true);
			}
			if (incoming.get(47)) {
				struct.priceWorkAll = iprot.readDouble();
				struct.setPriceWorkAllIsSet(true);
			}
			if (incoming.get(48)) {
				struct.priceCostThis = iprot.readDouble();
				struct.setPriceCostThisIsSet(true);
			}
			if (incoming.get(49)) {
				struct.priceCostAll = iprot.readDouble();
				struct.setPriceCostAllIsSet(true);
			}
			if (incoming.get(50)) {
				struct.couponPayThis = iprot.readDouble();
				struct.setCouponPayThisIsSet(true);
			}
			if (incoming.get(51)) {
				struct.couponPayAll = iprot.readDouble();
				struct.setCouponPayAllIsSet(true);
			}
			if (incoming.get(52)) {
				struct.couponCashThis = iprot.readDouble();
				struct.setCouponCashThisIsSet(true);
			}
			if (incoming.get(53)) {
				struct.couponCashAll = iprot.readDouble();
				struct.setCouponCashAllIsSet(true);
			}
			if (incoming.get(54)) {
				struct.couponDisThis = iprot.readDouble();
				struct.setCouponDisThisIsSet(true);
			}
			if (incoming.get(55)) {
				struct.couponDisAll = iprot.readDouble();
				struct.setCouponDisAllIsSet(true);
			}
			if (incoming.get(56)) {
				struct.note = iprot.readString();
				struct.setNoteIsSet(true);
			}
			if (incoming.get(57)) {
				struct.noteSell = iprot.readString();
				struct.setNoteSellIsSet(true);
			}
			if (incoming.get(58)) {
				struct.address = iprot.readString();
				struct.setAddressIsSet(true);
			}
			if (incoming.get(59)) {
				{
					org.apache.thrift.protocol.TList _list171 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
					struct.couponArr = new java.util.ArrayList<CouponFlow>(_list171.size);
					@org.apache.thrift.annotation.Nullable
					CouponFlow _elem172;
					for (int _i173 = 0; _i173 < _list171.size; ++_i173) {
						_elem172 = new CouponFlow();
						_elem172.read(iprot);
						struct.couponArr.add(_elem172);
					}
				}
				struct.setCouponArrIsSet(true);
			}
			if (incoming.get(60)) {
				struct.goodShot = iprot.readString();
				struct.setGoodShotIsSet(true);
			}
			if (incoming.get(61)) {
				struct.goodsShot = iprot.readString();
				struct.setGoodsShotIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
