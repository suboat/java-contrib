/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 用户资料
 */
public class ArgUserProfile implements org.apache.thrift.TBase<ArgUserProfile, ArgUserProfile._Fields>,
		java.io.Serializable, Cloneable, Comparable<ArgUserProfile> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgUserProfile");

	private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"lang", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"level", org.apache.thrift.protocol.TType.I32, (short) 35);

	private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"icon", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"name", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"phone", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"email", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField SOCIAL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"social", org.apache.thrift.protocol.TType.STRING, (short) 23);

	private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex",
			org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField BIRTH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"birth", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField BIRTH_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"birthPlace", org.apache.thrift.protocol.TType.STRING, (short) 33);

	private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"height", org.apache.thrift.protocol.TType.STRING, (short) 24);

	private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"weight", org.apache.thrift.protocol.TType.STRING, (short) 25);

	private static final org.apache.thrift.protocol.TField SIGN_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"sign", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"country", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"province", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"city", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField DISTRICT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"district", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"address", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField VIP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"vipName", org.apache.thrift.protocol.TType.STRING, (short) 26);

	private static final org.apache.thrift.protocol.TField VIP_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"vipPhone", org.apache.thrift.protocol.TType.STRING, (short) 27);

	private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"realName", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField REAL_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"realIcon", org.apache.thrift.protocol.TType.STRING, (short) 28);

	private static final org.apache.thrift.protocol.TField CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"cardId", org.apache.thrift.protocol.TType.STRING, (short) 15);

	private static final org.apache.thrift.protocol.TField PASSPORT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"passport", org.apache.thrift.protocol.TType.STRING, (short) 16);

	private static final org.apache.thrift.protocol.TField DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"driver", org.apache.thrift.protocol.TType.STRING, (short) 17);

	private static final org.apache.thrift.protocol.TField BANK_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bankNumber", org.apache.thrift.protocol.TType.STRING, (short) 18);

	private static final org.apache.thrift.protocol.TField EDUCATION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"education", org.apache.thrift.protocol.TType.STRING, (short) 29);

	private static final org.apache.thrift.protocol.TField GRADUATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"graduate", org.apache.thrift.protocol.TType.STRING, (short) 30);

	private static final org.apache.thrift.protocol.TField MAJOR_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"major", org.apache.thrift.protocol.TType.STRING, (short) 31);

	private static final org.apache.thrift.protocol.TField ETHNIC_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"ethnic", org.apache.thrift.protocol.TType.STRING, (short) 19);

	private static final org.apache.thrift.protocol.TField RELIGION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"religion", org.apache.thrift.protocol.TType.STRING, (short) 20);

	private static final org.apache.thrift.protocol.TField PARTY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"party", org.apache.thrift.protocol.TType.STRING, (short) 32);

	private static final org.apache.thrift.protocol.TField COMPANY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"company", org.apache.thrift.protocol.TType.STRING, (short) 36);

	private static final org.apache.thrift.protocol.TField COMPANY_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"companyAddr", org.apache.thrift.protocol.TType.STRING, (short) 38);

	private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"companyID", org.apache.thrift.protocol.TType.STRING, (short) 39);

	private static final org.apache.thrift.protocol.TField COMPANY_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"companyHash", org.apache.thrift.protocol.TType.STRING, (short) 40);

	private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"position", org.apache.thrift.protocol.TType.STRING, (short) 37);

	private static final org.apache.thrift.protocol.TField WX_ICON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"wxIcon", org.apache.thrift.protocol.TType.STRING, (short) 21);

	private static final org.apache.thrift.protocol.TField WX_NICKNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"wxNickname", org.apache.thrift.protocol.TType.STRING, (short) 22);

	private static final org.apache.thrift.protocol.TField WX_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"wxCard", org.apache.thrift.protocol.TType.STRING, (short) 34);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgUserProfileStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgUserProfileTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String lang; // optional

	public int level; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String icon; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String phone; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String email; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String social; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String sex; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String birth; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String birthPlace; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String height; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String weight; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String sign; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String country; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String province; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String city; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String district; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String address; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String vipName; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String vipPhone; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String realName; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String realIcon; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String cardId; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String passport; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String driver; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String bankNumber; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String education; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String graduate; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String major; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String ethnic; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String religion; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String party; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String company; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String companyAddr; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String companyID; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String companyHash; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String position; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String wxIcon; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String wxNickname; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String wxCard; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		LANG((short) 1, "lang"), LEVEL((short) 35, "level"), ICON((short) 5, "icon"), NAME((short) 2, "name"), PHONE(
				(short) 4,
				"phone"), EMAIL((short) 3, "email"), SOCIAL((short) 23, "social"), SEX((short) 6, "sex"), BIRTH(
						(short) 7,
						"birth"), BIRTH_PLACE((short) 33, "birthPlace"), HEIGHT((short) 24, "height"), WEIGHT(
								(short) 25, "weight"), SIGN((short) 8, "sign"), COUNTRY((short) 9, "country"), PROVINCE(
										(short) 10, "province"), CITY((short) 11, "city"), DISTRICT((short) 12,
												"district"), ADDRESS((short) 13, "address"), VIP_NAME((short) 26,
														"vipName"), VIP_PHONE((short) 27, "vipPhone"), REAL_NAME(
																(short) 14,
																"realName"), REAL_ICON((short) 28, "realIcon"), CARD_ID(
																		(short) 15, "cardId"), PASSPORT((short) 16,
																				"passport"), DRIVER((short) 17,
																						"driver"), BANK_NUMBER(
																								(short) 18,
																								"bankNumber"), EDUCATION(
																										(short) 29,
																										"education"), GRADUATE(
																												(short) 30,
																												"graduate"), MAJOR(
																														(short) 31,
																														"major"), ETHNIC(
																																(short) 19,
																																"ethnic"), RELIGION(
																																		(short) 20,
																																		"religion"), PARTY(
																																				(short) 32,
																																				"party"), COMPANY(
																																						(short) 36,
																																						"company"), COMPANY_ADDR(
																																								(short) 38,
																																								"companyAddr"), COMPANY_ID(
																																										(short) 39,
																																										"companyID"), COMPANY_HASH(
																																												(short) 40,
																																												"companyHash"), POSITION(
																																														(short) 37,
																																														"position"), WX_ICON(
																																																(short) 21,
																																																"wxIcon"), WX_NICKNAME(
																																																		(short) 22,
																																																		"wxNickname"), WX_CARD(
																																																				(short) 34,
																																																				"wxCard");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // LANG
				return LANG;
			case 35: // LEVEL
				return LEVEL;
			case 5: // ICON
				return ICON;
			case 2: // NAME
				return NAME;
			case 4: // PHONE
				return PHONE;
			case 3: // EMAIL
				return EMAIL;
			case 23: // SOCIAL
				return SOCIAL;
			case 6: // SEX
				return SEX;
			case 7: // BIRTH
				return BIRTH;
			case 33: // BIRTH_PLACE
				return BIRTH_PLACE;
			case 24: // HEIGHT
				return HEIGHT;
			case 25: // WEIGHT
				return WEIGHT;
			case 8: // SIGN
				return SIGN;
			case 9: // COUNTRY
				return COUNTRY;
			case 10: // PROVINCE
				return PROVINCE;
			case 11: // CITY
				return CITY;
			case 12: // DISTRICT
				return DISTRICT;
			case 13: // ADDRESS
				return ADDRESS;
			case 26: // VIP_NAME
				return VIP_NAME;
			case 27: // VIP_PHONE
				return VIP_PHONE;
			case 14: // REAL_NAME
				return REAL_NAME;
			case 28: // REAL_ICON
				return REAL_ICON;
			case 15: // CARD_ID
				return CARD_ID;
			case 16: // PASSPORT
				return PASSPORT;
			case 17: // DRIVER
				return DRIVER;
			case 18: // BANK_NUMBER
				return BANK_NUMBER;
			case 29: // EDUCATION
				return EDUCATION;
			case 30: // GRADUATE
				return GRADUATE;
			case 31: // MAJOR
				return MAJOR;
			case 19: // ETHNIC
				return ETHNIC;
			case 20: // RELIGION
				return RELIGION;
			case 32: // PARTY
				return PARTY;
			case 36: // COMPANY
				return COMPANY;
			case 38: // COMPANY_ADDR
				return COMPANY_ADDR;
			case 39: // COMPANY_ID
				return COMPANY_ID;
			case 40: // COMPANY_HASH
				return COMPANY_HASH;
			case 37: // POSITION
				return POSITION;
			case 21: // WX_ICON
				return WX_ICON;
			case 22: // WX_NICKNAME
				return WX_NICKNAME;
			case 34: // WX_CARD
				return WX_CARD;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __LEVEL_ISSET_ID = 0;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.LANG, _Fields.LEVEL, _Fields.ICON, _Fields.NAME, _Fields.PHONE,
			_Fields.EMAIL, _Fields.SOCIAL, _Fields.SEX, _Fields.BIRTH, _Fields.BIRTH_PLACE, _Fields.HEIGHT,
			_Fields.WEIGHT, _Fields.SIGN, _Fields.COUNTRY, _Fields.PROVINCE, _Fields.CITY, _Fields.DISTRICT,
			_Fields.ADDRESS, _Fields.VIP_NAME, _Fields.VIP_PHONE, _Fields.REAL_NAME, _Fields.REAL_ICON, _Fields.CARD_ID,
			_Fields.PASSPORT, _Fields.DRIVER, _Fields.BANK_NUMBER, _Fields.EDUCATION, _Fields.GRADUATE, _Fields.MAJOR,
			_Fields.ETHNIC, _Fields.RELIGION, _Fields.PARTY, _Fields.COMPANY, _Fields.COMPANY_ADDR, _Fields.COMPANY_ID,
			_Fields.COMPANY_HASH, _Fields.POSITION, _Fields.WX_ICON, _Fields.WX_NICKNAME, _Fields.WX_CARD };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.LANG,
				new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LEVEL,
				new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ICON,
				new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NAME,
				new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PHONE,
				new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EMAIL,
				new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SOCIAL,
				new org.apache.thrift.meta_data.FieldMetaData("social",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SEX,
				new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BIRTH,
				new org.apache.thrift.meta_data.FieldMetaData("birth", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BIRTH_PLACE,
				new org.apache.thrift.meta_data.FieldMetaData("birthPlace",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.HEIGHT,
				new org.apache.thrift.meta_data.FieldMetaData("height",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WEIGHT,
				new org.apache.thrift.meta_data.FieldMetaData("weight",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SIGN,
				new org.apache.thrift.meta_data.FieldMetaData("sign", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COUNTRY,
				new org.apache.thrift.meta_data.FieldMetaData("country",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PROVINCE,
				new org.apache.thrift.meta_data.FieldMetaData("province",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CITY,
				new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DISTRICT,
				new org.apache.thrift.meta_data.FieldMetaData("district",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ADDRESS,
				new org.apache.thrift.meta_data.FieldMetaData("address",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.VIP_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("vipName",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.VIP_PHONE,
				new org.apache.thrift.meta_data.FieldMetaData("vipPhone",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REAL_NAME,
				new org.apache.thrift.meta_data.FieldMetaData("realName",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REAL_ICON,
				new org.apache.thrift.meta_data.FieldMetaData("realIcon",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CARD_ID,
				new org.apache.thrift.meta_data.FieldMetaData("cardId",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PASSPORT,
				new org.apache.thrift.meta_data.FieldMetaData("passport",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DRIVER,
				new org.apache.thrift.meta_data.FieldMetaData("driver",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BANK_NUMBER,
				new org.apache.thrift.meta_data.FieldMetaData("bankNumber",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EDUCATION,
				new org.apache.thrift.meta_data.FieldMetaData("education",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.GRADUATE,
				new org.apache.thrift.meta_data.FieldMetaData("graduate",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MAJOR,
				new org.apache.thrift.meta_data.FieldMetaData("major", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ETHNIC,
				new org.apache.thrift.meta_data.FieldMetaData("ethnic",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RELIGION,
				new org.apache.thrift.meta_data.FieldMetaData("religion",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PARTY,
				new org.apache.thrift.meta_data.FieldMetaData("party", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMPANY,
				new org.apache.thrift.meta_data.FieldMetaData("company",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMPANY_ADDR,
				new org.apache.thrift.meta_data.FieldMetaData("companyAddr",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMPANY_ID,
				new org.apache.thrift.meta_data.FieldMetaData("companyID",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMPANY_HASH,
				new org.apache.thrift.meta_data.FieldMetaData("companyHash",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.POSITION,
				new org.apache.thrift.meta_data.FieldMetaData("position",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WX_ICON,
				new org.apache.thrift.meta_data.FieldMetaData("wxIcon",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WX_NICKNAME,
				new org.apache.thrift.meta_data.FieldMetaData("wxNickname",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WX_CARD,
				new org.apache.thrift.meta_data.FieldMetaData("wxCard",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgUserProfile.class, metaDataMap);
	}

	public ArgUserProfile() {
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgUserProfile(ArgUserProfile other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetLang()) {
			this.lang = other.lang;
		}
		this.level = other.level;
		if (other.isSetIcon()) {
			this.icon = other.icon;
		}
		if (other.isSetName()) {
			this.name = other.name;
		}
		if (other.isSetPhone()) {
			this.phone = other.phone;
		}
		if (other.isSetEmail()) {
			this.email = other.email;
		}
		if (other.isSetSocial()) {
			this.social = other.social;
		}
		if (other.isSetSex()) {
			this.sex = other.sex;
		}
		if (other.isSetBirth()) {
			this.birth = other.birth;
		}
		if (other.isSetBirthPlace()) {
			this.birthPlace = other.birthPlace;
		}
		if (other.isSetHeight()) {
			this.height = other.height;
		}
		if (other.isSetWeight()) {
			this.weight = other.weight;
		}
		if (other.isSetSign()) {
			this.sign = other.sign;
		}
		if (other.isSetCountry()) {
			this.country = other.country;
		}
		if (other.isSetProvince()) {
			this.province = other.province;
		}
		if (other.isSetCity()) {
			this.city = other.city;
		}
		if (other.isSetDistrict()) {
			this.district = other.district;
		}
		if (other.isSetAddress()) {
			this.address = other.address;
		}
		if (other.isSetVipName()) {
			this.vipName = other.vipName;
		}
		if (other.isSetVipPhone()) {
			this.vipPhone = other.vipPhone;
		}
		if (other.isSetRealName()) {
			this.realName = other.realName;
		}
		if (other.isSetRealIcon()) {
			this.realIcon = other.realIcon;
		}
		if (other.isSetCardId()) {
			this.cardId = other.cardId;
		}
		if (other.isSetPassport()) {
			this.passport = other.passport;
		}
		if (other.isSetDriver()) {
			this.driver = other.driver;
		}
		if (other.isSetBankNumber()) {
			this.bankNumber = other.bankNumber;
		}
		if (other.isSetEducation()) {
			this.education = other.education;
		}
		if (other.isSetGraduate()) {
			this.graduate = other.graduate;
		}
		if (other.isSetMajor()) {
			this.major = other.major;
		}
		if (other.isSetEthnic()) {
			this.ethnic = other.ethnic;
		}
		if (other.isSetReligion()) {
			this.religion = other.religion;
		}
		if (other.isSetParty()) {
			this.party = other.party;
		}
		if (other.isSetCompany()) {
			this.company = other.company;
		}
		if (other.isSetCompanyAddr()) {
			this.companyAddr = other.companyAddr;
		}
		if (other.isSetCompanyID()) {
			this.companyID = other.companyID;
		}
		if (other.isSetCompanyHash()) {
			this.companyHash = other.companyHash;
		}
		if (other.isSetPosition()) {
			this.position = other.position;
		}
		if (other.isSetWxIcon()) {
			this.wxIcon = other.wxIcon;
		}
		if (other.isSetWxNickname()) {
			this.wxNickname = other.wxNickname;
		}
		if (other.isSetWxCard()) {
			this.wxCard = other.wxCard;
		}
	}

	public ArgUserProfile deepCopy() {
		return new ArgUserProfile(this);
	}

	@Override
	public void clear() {
		this.lang = null;
		setLevelIsSet(false);
		this.level = 0;
		this.icon = null;
		this.name = null;
		this.phone = null;
		this.email = null;
		this.social = null;
		this.sex = null;
		this.birth = null;
		this.birthPlace = null;
		this.height = null;
		this.weight = null;
		this.sign = null;
		this.country = null;
		this.province = null;
		this.city = null;
		this.district = null;
		this.address = null;
		this.vipName = null;
		this.vipPhone = null;
		this.realName = null;
		this.realIcon = null;
		this.cardId = null;
		this.passport = null;
		this.driver = null;
		this.bankNumber = null;
		this.education = null;
		this.graduate = null;
		this.major = null;
		this.ethnic = null;
		this.religion = null;
		this.party = null;
		this.company = null;
		this.companyAddr = null;
		this.companyID = null;
		this.companyHash = null;
		this.position = null;
		this.wxIcon = null;
		this.wxNickname = null;
		this.wxCard = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLang() {
		return this.lang;
	}

	public ArgUserProfile setLang(@org.apache.thrift.annotation.Nullable java.lang.String lang) {
		this.lang = lang;
		return this;
	}

	public void unsetLang() {
		this.lang = null;
	}

	/**
	 * Returns true if field lang is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLang() {
		return this.lang != null;
	}

	public void setLangIsSet(boolean value) {
		if (!value) {
			this.lang = null;
		}
	}

	public int getLevel() {
		return this.level;
	}

	public ArgUserProfile setLevel(int level) {
		this.level = level;
		setLevelIsSet(true);
		return this;
	}

	public void unsetLevel() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
	}

	/**
	 * Returns true if field level is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLevel() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
	}

	public void setLevelIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIcon() {
		return this.icon;
	}

	public ArgUserProfile setIcon(@org.apache.thrift.annotation.Nullable java.lang.String icon) {
		this.icon = icon;
		return this;
	}

	public void unsetIcon() {
		this.icon = null;
	}

	/**
	 * Returns true if field icon is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIcon() {
		return this.icon != null;
	}

	public void setIconIsSet(boolean value) {
		if (!value) {
			this.icon = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getName() {
		return this.name;
	}

	public ArgUserProfile setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	/**
	 * Returns true if field name is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPhone() {
		return this.phone;
	}

	public ArgUserProfile setPhone(@org.apache.thrift.annotation.Nullable java.lang.String phone) {
		this.phone = phone;
		return this;
	}

	public void unsetPhone() {
		this.phone = null;
	}

	/**
	 * Returns true if field phone is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPhone() {
		return this.phone != null;
	}

	public void setPhoneIsSet(boolean value) {
		if (!value) {
			this.phone = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getEmail() {
		return this.email;
	}

	public ArgUserProfile setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
		this.email = email;
		return this;
	}

	public void unsetEmail() {
		this.email = null;
	}

	/**
	 * Returns true if field email is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetEmail() {
		return this.email != null;
	}

	public void setEmailIsSet(boolean value) {
		if (!value) {
			this.email = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSocial() {
		return this.social;
	}

	public ArgUserProfile setSocial(@org.apache.thrift.annotation.Nullable java.lang.String social) {
		this.social = social;
		return this;
	}

	public void unsetSocial() {
		this.social = null;
	}

	/**
	 * Returns true if field social is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSocial() {
		return this.social != null;
	}

	public void setSocialIsSet(boolean value) {
		if (!value) {
			this.social = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSex() {
		return this.sex;
	}

	public ArgUserProfile setSex(@org.apache.thrift.annotation.Nullable java.lang.String sex) {
		this.sex = sex;
		return this;
	}

	public void unsetSex() {
		this.sex = null;
	}

	/**
	 * Returns true if field sex is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSex() {
		return this.sex != null;
	}

	public void setSexIsSet(boolean value) {
		if (!value) {
			this.sex = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBirth() {
		return this.birth;
	}

	public ArgUserProfile setBirth(@org.apache.thrift.annotation.Nullable java.lang.String birth) {
		this.birth = birth;
		return this;
	}

	public void unsetBirth() {
		this.birth = null;
	}

	/**
	 * Returns true if field birth is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetBirth() {
		return this.birth != null;
	}

	public void setBirthIsSet(boolean value) {
		if (!value) {
			this.birth = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBirthPlace() {
		return this.birthPlace;
	}

	public ArgUserProfile setBirthPlace(@org.apache.thrift.annotation.Nullable java.lang.String birthPlace) {
		this.birthPlace = birthPlace;
		return this;
	}

	public void unsetBirthPlace() {
		this.birthPlace = null;
	}

	/**
	 * Returns true if field birthPlace is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBirthPlace() {
		return this.birthPlace != null;
	}

	public void setBirthPlaceIsSet(boolean value) {
		if (!value) {
			this.birthPlace = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getHeight() {
		return this.height;
	}

	public ArgUserProfile setHeight(@org.apache.thrift.annotation.Nullable java.lang.String height) {
		this.height = height;
		return this;
	}

	public void unsetHeight() {
		this.height = null;
	}

	/**
	 * Returns true if field height is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetHeight() {
		return this.height != null;
	}

	public void setHeightIsSet(boolean value) {
		if (!value) {
			this.height = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWeight() {
		return this.weight;
	}

	public ArgUserProfile setWeight(@org.apache.thrift.annotation.Nullable java.lang.String weight) {
		this.weight = weight;
		return this;
	}

	public void unsetWeight() {
		this.weight = null;
	}

	/**
	 * Returns true if field weight is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetWeight() {
		return this.weight != null;
	}

	public void setWeightIsSet(boolean value) {
		if (!value) {
			this.weight = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSign() {
		return this.sign;
	}

	public ArgUserProfile setSign(@org.apache.thrift.annotation.Nullable java.lang.String sign) {
		this.sign = sign;
		return this;
	}

	public void unsetSign() {
		this.sign = null;
	}

	/**
	 * Returns true if field sign is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSign() {
		return this.sign != null;
	}

	public void setSignIsSet(boolean value) {
		if (!value) {
			this.sign = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCountry() {
		return this.country;
	}

	public ArgUserProfile setCountry(@org.apache.thrift.annotation.Nullable java.lang.String country) {
		this.country = country;
		return this;
	}

	public void unsetCountry() {
		this.country = null;
	}

	/**
	 * Returns true if field country is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCountry() {
		return this.country != null;
	}

	public void setCountryIsSet(boolean value) {
		if (!value) {
			this.country = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProvince() {
		return this.province;
	}

	public ArgUserProfile setProvince(@org.apache.thrift.annotation.Nullable java.lang.String province) {
		this.province = province;
		return this;
	}

	public void unsetProvince() {
		this.province = null;
	}

	/**
	 * Returns true if field province is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProvince() {
		return this.province != null;
	}

	public void setProvinceIsSet(boolean value) {
		if (!value) {
			this.province = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCity() {
		return this.city;
	}

	public ArgUserProfile setCity(@org.apache.thrift.annotation.Nullable java.lang.String city) {
		this.city = city;
		return this;
	}

	public void unsetCity() {
		this.city = null;
	}

	/**
	 * Returns true if field city is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCity() {
		return this.city != null;
	}

	public void setCityIsSet(boolean value) {
		if (!value) {
			this.city = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDistrict() {
		return this.district;
	}

	public ArgUserProfile setDistrict(@org.apache.thrift.annotation.Nullable java.lang.String district) {
		this.district = district;
		return this;
	}

	public void unsetDistrict() {
		this.district = null;
	}

	/**
	 * Returns true if field district is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDistrict() {
		return this.district != null;
	}

	public void setDistrictIsSet(boolean value) {
		if (!value) {
			this.district = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAddress() {
		return this.address;
	}

	public ArgUserProfile setAddress(@org.apache.thrift.annotation.Nullable java.lang.String address) {
		this.address = address;
		return this;
	}

	public void unsetAddress() {
		this.address = null;
	}

	/**
	 * Returns true if field address is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAddress() {
		return this.address != null;
	}

	public void setAddressIsSet(boolean value) {
		if (!value) {
			this.address = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getVipName() {
		return this.vipName;
	}

	public ArgUserProfile setVipName(@org.apache.thrift.annotation.Nullable java.lang.String vipName) {
		this.vipName = vipName;
		return this;
	}

	public void unsetVipName() {
		this.vipName = null;
	}

	/**
	 * Returns true if field vipName is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetVipName() {
		return this.vipName != null;
	}

	public void setVipNameIsSet(boolean value) {
		if (!value) {
			this.vipName = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getVipPhone() {
		return this.vipPhone;
	}

	public ArgUserProfile setVipPhone(@org.apache.thrift.annotation.Nullable java.lang.String vipPhone) {
		this.vipPhone = vipPhone;
		return this;
	}

	public void unsetVipPhone() {
		this.vipPhone = null;
	}

	/**
	 * Returns true if field vipPhone is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetVipPhone() {
		return this.vipPhone != null;
	}

	public void setVipPhoneIsSet(boolean value) {
		if (!value) {
			this.vipPhone = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRealName() {
		return this.realName;
	}

	public ArgUserProfile setRealName(@org.apache.thrift.annotation.Nullable java.lang.String realName) {
		this.realName = realName;
		return this;
	}

	public void unsetRealName() {
		this.realName = null;
	}

	/**
	 * Returns true if field realName is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetRealName() {
		return this.realName != null;
	}

	public void setRealNameIsSet(boolean value) {
		if (!value) {
			this.realName = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRealIcon() {
		return this.realIcon;
	}

	public ArgUserProfile setRealIcon(@org.apache.thrift.annotation.Nullable java.lang.String realIcon) {
		this.realIcon = realIcon;
		return this;
	}

	public void unsetRealIcon() {
		this.realIcon = null;
	}

	/**
	 * Returns true if field realIcon is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetRealIcon() {
		return this.realIcon != null;
	}

	public void setRealIconIsSet(boolean value) {
		if (!value) {
			this.realIcon = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCardId() {
		return this.cardId;
	}

	public ArgUserProfile setCardId(@org.apache.thrift.annotation.Nullable java.lang.String cardId) {
		this.cardId = cardId;
		return this;
	}

	public void unsetCardId() {
		this.cardId = null;
	}

	/**
	 * Returns true if field cardId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetCardId() {
		return this.cardId != null;
	}

	public void setCardIdIsSet(boolean value) {
		if (!value) {
			this.cardId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPassport() {
		return this.passport;
	}

	public ArgUserProfile setPassport(@org.apache.thrift.annotation.Nullable java.lang.String passport) {
		this.passport = passport;
		return this;
	}

	public void unsetPassport() {
		this.passport = null;
	}

	/**
	 * Returns true if field passport is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPassport() {
		return this.passport != null;
	}

	public void setPassportIsSet(boolean value) {
		if (!value) {
			this.passport = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDriver() {
		return this.driver;
	}

	public ArgUserProfile setDriver(@org.apache.thrift.annotation.Nullable java.lang.String driver) {
		this.driver = driver;
		return this;
	}

	public void unsetDriver() {
		this.driver = null;
	}

	/**
	 * Returns true if field driver is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetDriver() {
		return this.driver != null;
	}

	public void setDriverIsSet(boolean value) {
		if (!value) {
			this.driver = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBankNumber() {
		return this.bankNumber;
	}

	public ArgUserProfile setBankNumber(@org.apache.thrift.annotation.Nullable java.lang.String bankNumber) {
		this.bankNumber = bankNumber;
		return this;
	}

	public void unsetBankNumber() {
		this.bankNumber = null;
	}

	/**
	 * Returns true if field bankNumber is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBankNumber() {
		return this.bankNumber != null;
	}

	public void setBankNumberIsSet(boolean value) {
		if (!value) {
			this.bankNumber = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getEducation() {
		return this.education;
	}

	public ArgUserProfile setEducation(@org.apache.thrift.annotation.Nullable java.lang.String education) {
		this.education = education;
		return this;
	}

	public void unsetEducation() {
		this.education = null;
	}

	/**
	 * Returns true if field education is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetEducation() {
		return this.education != null;
	}

	public void setEducationIsSet(boolean value) {
		if (!value) {
			this.education = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getGraduate() {
		return this.graduate;
	}

	public ArgUserProfile setGraduate(@org.apache.thrift.annotation.Nullable java.lang.String graduate) {
		this.graduate = graduate;
		return this;
	}

	public void unsetGraduate() {
		this.graduate = null;
	}

	/**
	 * Returns true if field graduate is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetGraduate() {
		return this.graduate != null;
	}

	public void setGraduateIsSet(boolean value) {
		if (!value) {
			this.graduate = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMajor() {
		return this.major;
	}

	public ArgUserProfile setMajor(@org.apache.thrift.annotation.Nullable java.lang.String major) {
		this.major = major;
		return this;
	}

	public void unsetMajor() {
		this.major = null;
	}

	/**
	 * Returns true if field major is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetMajor() {
		return this.major != null;
	}

	public void setMajorIsSet(boolean value) {
		if (!value) {
			this.major = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getEthnic() {
		return this.ethnic;
	}

	public ArgUserProfile setEthnic(@org.apache.thrift.annotation.Nullable java.lang.String ethnic) {
		this.ethnic = ethnic;
		return this;
	}

	public void unsetEthnic() {
		this.ethnic = null;
	}

	/**
	 * Returns true if field ethnic is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetEthnic() {
		return this.ethnic != null;
	}

	public void setEthnicIsSet(boolean value) {
		if (!value) {
			this.ethnic = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getReligion() {
		return this.religion;
	}

	public ArgUserProfile setReligion(@org.apache.thrift.annotation.Nullable java.lang.String religion) {
		this.religion = religion;
		return this;
	}

	public void unsetReligion() {
		this.religion = null;
	}

	/**
	 * Returns true if field religion is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetReligion() {
		return this.religion != null;
	}

	public void setReligionIsSet(boolean value) {
		if (!value) {
			this.religion = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getParty() {
		return this.party;
	}

	public ArgUserProfile setParty(@org.apache.thrift.annotation.Nullable java.lang.String party) {
		this.party = party;
		return this;
	}

	public void unsetParty() {
		this.party = null;
	}

	/**
	 * Returns true if field party is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetParty() {
		return this.party != null;
	}

	public void setPartyIsSet(boolean value) {
		if (!value) {
			this.party = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCompany() {
		return this.company;
	}

	public ArgUserProfile setCompany(@org.apache.thrift.annotation.Nullable java.lang.String company) {
		this.company = company;
		return this;
	}

	public void unsetCompany() {
		this.company = null;
	}

	/**
	 * Returns true if field company is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCompany() {
		return this.company != null;
	}

	public void setCompanyIsSet(boolean value) {
		if (!value) {
			this.company = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCompanyAddr() {
		return this.companyAddr;
	}

	public ArgUserProfile setCompanyAddr(@org.apache.thrift.annotation.Nullable java.lang.String companyAddr) {
		this.companyAddr = companyAddr;
		return this;
	}

	public void unsetCompanyAddr() {
		this.companyAddr = null;
	}

	/**
	 * Returns true if field companyAddr is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCompanyAddr() {
		return this.companyAddr != null;
	}

	public void setCompanyAddrIsSet(boolean value) {
		if (!value) {
			this.companyAddr = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCompanyID() {
		return this.companyID;
	}

	public ArgUserProfile setCompanyID(@org.apache.thrift.annotation.Nullable java.lang.String companyID) {
		this.companyID = companyID;
		return this;
	}

	public void unsetCompanyID() {
		this.companyID = null;
	}

	/**
	 * Returns true if field companyID is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCompanyID() {
		return this.companyID != null;
	}

	public void setCompanyIDIsSet(boolean value) {
		if (!value) {
			this.companyID = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCompanyHash() {
		return this.companyHash;
	}

	public ArgUserProfile setCompanyHash(@org.apache.thrift.annotation.Nullable java.lang.String companyHash) {
		this.companyHash = companyHash;
		return this;
	}

	public void unsetCompanyHash() {
		this.companyHash = null;
	}

	/**
	 * Returns true if field companyHash is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCompanyHash() {
		return this.companyHash != null;
	}

	public void setCompanyHashIsSet(boolean value) {
		if (!value) {
			this.companyHash = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPosition() {
		return this.position;
	}

	public ArgUserProfile setPosition(@org.apache.thrift.annotation.Nullable java.lang.String position) {
		this.position = position;
		return this;
	}

	public void unsetPosition() {
		this.position = null;
	}

	/**
	 * Returns true if field position is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPosition() {
		return this.position != null;
	}

	public void setPositionIsSet(boolean value) {
		if (!value) {
			this.position = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWxIcon() {
		return this.wxIcon;
	}

	public ArgUserProfile setWxIcon(@org.apache.thrift.annotation.Nullable java.lang.String wxIcon) {
		this.wxIcon = wxIcon;
		return this;
	}

	public void unsetWxIcon() {
		this.wxIcon = null;
	}

	/**
	 * Returns true if field wxIcon is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetWxIcon() {
		return this.wxIcon != null;
	}

	public void setWxIconIsSet(boolean value) {
		if (!value) {
			this.wxIcon = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWxNickname() {
		return this.wxNickname;
	}

	public ArgUserProfile setWxNickname(@org.apache.thrift.annotation.Nullable java.lang.String wxNickname) {
		this.wxNickname = wxNickname;
		return this;
	}

	public void unsetWxNickname() {
		this.wxNickname = null;
	}

	/**
	 * Returns true if field wxNickname is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetWxNickname() {
		return this.wxNickname != null;
	}

	public void setWxNicknameIsSet(boolean value) {
		if (!value) {
			this.wxNickname = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWxCard() {
		return this.wxCard;
	}

	public ArgUserProfile setWxCard(@org.apache.thrift.annotation.Nullable java.lang.String wxCard) {
		this.wxCard = wxCard;
		return this;
	}

	public void unsetWxCard() {
		this.wxCard = null;
	}

	/**
	 * Returns true if field wxCard is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetWxCard() {
		return this.wxCard != null;
	}

	public void setWxCardIsSet(boolean value) {
		if (!value) {
			this.wxCard = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case LANG:
			if (value == null) {
				unsetLang();
			}
			else {
				setLang((java.lang.String) value);
			}
			break;

		case LEVEL:
			if (value == null) {
				unsetLevel();
			}
			else {
				setLevel((java.lang.Integer) value);
			}
			break;

		case ICON:
			if (value == null) {
				unsetIcon();
			}
			else {
				setIcon((java.lang.String) value);
			}
			break;

		case NAME:
			if (value == null) {
				unsetName();
			}
			else {
				setName((java.lang.String) value);
			}
			break;

		case PHONE:
			if (value == null) {
				unsetPhone();
			}
			else {
				setPhone((java.lang.String) value);
			}
			break;

		case EMAIL:
			if (value == null) {
				unsetEmail();
			}
			else {
				setEmail((java.lang.String) value);
			}
			break;

		case SOCIAL:
			if (value == null) {
				unsetSocial();
			}
			else {
				setSocial((java.lang.String) value);
			}
			break;

		case SEX:
			if (value == null) {
				unsetSex();
			}
			else {
				setSex((java.lang.String) value);
			}
			break;

		case BIRTH:
			if (value == null) {
				unsetBirth();
			}
			else {
				setBirth((java.lang.String) value);
			}
			break;

		case BIRTH_PLACE:
			if (value == null) {
				unsetBirthPlace();
			}
			else {
				setBirthPlace((java.lang.String) value);
			}
			break;

		case HEIGHT:
			if (value == null) {
				unsetHeight();
			}
			else {
				setHeight((java.lang.String) value);
			}
			break;

		case WEIGHT:
			if (value == null) {
				unsetWeight();
			}
			else {
				setWeight((java.lang.String) value);
			}
			break;

		case SIGN:
			if (value == null) {
				unsetSign();
			}
			else {
				setSign((java.lang.String) value);
			}
			break;

		case COUNTRY:
			if (value == null) {
				unsetCountry();
			}
			else {
				setCountry((java.lang.String) value);
			}
			break;

		case PROVINCE:
			if (value == null) {
				unsetProvince();
			}
			else {
				setProvince((java.lang.String) value);
			}
			break;

		case CITY:
			if (value == null) {
				unsetCity();
			}
			else {
				setCity((java.lang.String) value);
			}
			break;

		case DISTRICT:
			if (value == null) {
				unsetDistrict();
			}
			else {
				setDistrict((java.lang.String) value);
			}
			break;

		case ADDRESS:
			if (value == null) {
				unsetAddress();
			}
			else {
				setAddress((java.lang.String) value);
			}
			break;

		case VIP_NAME:
			if (value == null) {
				unsetVipName();
			}
			else {
				setVipName((java.lang.String) value);
			}
			break;

		case VIP_PHONE:
			if (value == null) {
				unsetVipPhone();
			}
			else {
				setVipPhone((java.lang.String) value);
			}
			break;

		case REAL_NAME:
			if (value == null) {
				unsetRealName();
			}
			else {
				setRealName((java.lang.String) value);
			}
			break;

		case REAL_ICON:
			if (value == null) {
				unsetRealIcon();
			}
			else {
				setRealIcon((java.lang.String) value);
			}
			break;

		case CARD_ID:
			if (value == null) {
				unsetCardId();
			}
			else {
				setCardId((java.lang.String) value);
			}
			break;

		case PASSPORT:
			if (value == null) {
				unsetPassport();
			}
			else {
				setPassport((java.lang.String) value);
			}
			break;

		case DRIVER:
			if (value == null) {
				unsetDriver();
			}
			else {
				setDriver((java.lang.String) value);
			}
			break;

		case BANK_NUMBER:
			if (value == null) {
				unsetBankNumber();
			}
			else {
				setBankNumber((java.lang.String) value);
			}
			break;

		case EDUCATION:
			if (value == null) {
				unsetEducation();
			}
			else {
				setEducation((java.lang.String) value);
			}
			break;

		case GRADUATE:
			if (value == null) {
				unsetGraduate();
			}
			else {
				setGraduate((java.lang.String) value);
			}
			break;

		case MAJOR:
			if (value == null) {
				unsetMajor();
			}
			else {
				setMajor((java.lang.String) value);
			}
			break;

		case ETHNIC:
			if (value == null) {
				unsetEthnic();
			}
			else {
				setEthnic((java.lang.String) value);
			}
			break;

		case RELIGION:
			if (value == null) {
				unsetReligion();
			}
			else {
				setReligion((java.lang.String) value);
			}
			break;

		case PARTY:
			if (value == null) {
				unsetParty();
			}
			else {
				setParty((java.lang.String) value);
			}
			break;

		case COMPANY:
			if (value == null) {
				unsetCompany();
			}
			else {
				setCompany((java.lang.String) value);
			}
			break;

		case COMPANY_ADDR:
			if (value == null) {
				unsetCompanyAddr();
			}
			else {
				setCompanyAddr((java.lang.String) value);
			}
			break;

		case COMPANY_ID:
			if (value == null) {
				unsetCompanyID();
			}
			else {
				setCompanyID((java.lang.String) value);
			}
			break;

		case COMPANY_HASH:
			if (value == null) {
				unsetCompanyHash();
			}
			else {
				setCompanyHash((java.lang.String) value);
			}
			break;

		case POSITION:
			if (value == null) {
				unsetPosition();
			}
			else {
				setPosition((java.lang.String) value);
			}
			break;

		case WX_ICON:
			if (value == null) {
				unsetWxIcon();
			}
			else {
				setWxIcon((java.lang.String) value);
			}
			break;

		case WX_NICKNAME:
			if (value == null) {
				unsetWxNickname();
			}
			else {
				setWxNickname((java.lang.String) value);
			}
			break;

		case WX_CARD:
			if (value == null) {
				unsetWxCard();
			}
			else {
				setWxCard((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case LANG:
			return getLang();

		case LEVEL:
			return getLevel();

		case ICON:
			return getIcon();

		case NAME:
			return getName();

		case PHONE:
			return getPhone();

		case EMAIL:
			return getEmail();

		case SOCIAL:
			return getSocial();

		case SEX:
			return getSex();

		case BIRTH:
			return getBirth();

		case BIRTH_PLACE:
			return getBirthPlace();

		case HEIGHT:
			return getHeight();

		case WEIGHT:
			return getWeight();

		case SIGN:
			return getSign();

		case COUNTRY:
			return getCountry();

		case PROVINCE:
			return getProvince();

		case CITY:
			return getCity();

		case DISTRICT:
			return getDistrict();

		case ADDRESS:
			return getAddress();

		case VIP_NAME:
			return getVipName();

		case VIP_PHONE:
			return getVipPhone();

		case REAL_NAME:
			return getRealName();

		case REAL_ICON:
			return getRealIcon();

		case CARD_ID:
			return getCardId();

		case PASSPORT:
			return getPassport();

		case DRIVER:
			return getDriver();

		case BANK_NUMBER:
			return getBankNumber();

		case EDUCATION:
			return getEducation();

		case GRADUATE:
			return getGraduate();

		case MAJOR:
			return getMajor();

		case ETHNIC:
			return getEthnic();

		case RELIGION:
			return getReligion();

		case PARTY:
			return getParty();

		case COMPANY:
			return getCompany();

		case COMPANY_ADDR:
			return getCompanyAddr();

		case COMPANY_ID:
			return getCompanyID();

		case COMPANY_HASH:
			return getCompanyHash();

		case POSITION:
			return getPosition();

		case WX_ICON:
			return getWxIcon();

		case WX_NICKNAME:
			return getWxNickname();

		case WX_CARD:
			return getWxCard();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case LANG:
			return isSetLang();
		case LEVEL:
			return isSetLevel();
		case ICON:
			return isSetIcon();
		case NAME:
			return isSetName();
		case PHONE:
			return isSetPhone();
		case EMAIL:
			return isSetEmail();
		case SOCIAL:
			return isSetSocial();
		case SEX:
			return isSetSex();
		case BIRTH:
			return isSetBirth();
		case BIRTH_PLACE:
			return isSetBirthPlace();
		case HEIGHT:
			return isSetHeight();
		case WEIGHT:
			return isSetWeight();
		case SIGN:
			return isSetSign();
		case COUNTRY:
			return isSetCountry();
		case PROVINCE:
			return isSetProvince();
		case CITY:
			return isSetCity();
		case DISTRICT:
			return isSetDistrict();
		case ADDRESS:
			return isSetAddress();
		case VIP_NAME:
			return isSetVipName();
		case VIP_PHONE:
			return isSetVipPhone();
		case REAL_NAME:
			return isSetRealName();
		case REAL_ICON:
			return isSetRealIcon();
		case CARD_ID:
			return isSetCardId();
		case PASSPORT:
			return isSetPassport();
		case DRIVER:
			return isSetDriver();
		case BANK_NUMBER:
			return isSetBankNumber();
		case EDUCATION:
			return isSetEducation();
		case GRADUATE:
			return isSetGraduate();
		case MAJOR:
			return isSetMajor();
		case ETHNIC:
			return isSetEthnic();
		case RELIGION:
			return isSetReligion();
		case PARTY:
			return isSetParty();
		case COMPANY:
			return isSetCompany();
		case COMPANY_ADDR:
			return isSetCompanyAddr();
		case COMPANY_ID:
			return isSetCompanyID();
		case COMPANY_HASH:
			return isSetCompanyHash();
		case POSITION:
			return isSetPosition();
		case WX_ICON:
			return isSetWxIcon();
		case WX_NICKNAME:
			return isSetWxNickname();
		case WX_CARD:
			return isSetWxCard();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgUserProfile)
			return this.equals((ArgUserProfile) that);
		return false;
	}

	public boolean equals(ArgUserProfile that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_lang = true && this.isSetLang();
		boolean that_present_lang = true && that.isSetLang();
		if (this_present_lang || that_present_lang) {
			if (!(this_present_lang && that_present_lang))
				return false;
			if (!this.lang.equals(that.lang))
				return false;
		}

		boolean this_present_level = true && this.isSetLevel();
		boolean that_present_level = true && that.isSetLevel();
		if (this_present_level || that_present_level) {
			if (!(this_present_level && that_present_level))
				return false;
			if (this.level != that.level)
				return false;
		}

		boolean this_present_icon = true && this.isSetIcon();
		boolean that_present_icon = true && that.isSetIcon();
		if (this_present_icon || that_present_icon) {
			if (!(this_present_icon && that_present_icon))
				return false;
			if (!this.icon.equals(that.icon))
				return false;
		}

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!this.name.equals(that.name))
				return false;
		}

		boolean this_present_phone = true && this.isSetPhone();
		boolean that_present_phone = true && that.isSetPhone();
		if (this_present_phone || that_present_phone) {
			if (!(this_present_phone && that_present_phone))
				return false;
			if (!this.phone.equals(that.phone))
				return false;
		}

		boolean this_present_email = true && this.isSetEmail();
		boolean that_present_email = true && that.isSetEmail();
		if (this_present_email || that_present_email) {
			if (!(this_present_email && that_present_email))
				return false;
			if (!this.email.equals(that.email))
				return false;
		}

		boolean this_present_social = true && this.isSetSocial();
		boolean that_present_social = true && that.isSetSocial();
		if (this_present_social || that_present_social) {
			if (!(this_present_social && that_present_social))
				return false;
			if (!this.social.equals(that.social))
				return false;
		}

		boolean this_present_sex = true && this.isSetSex();
		boolean that_present_sex = true && that.isSetSex();
		if (this_present_sex || that_present_sex) {
			if (!(this_present_sex && that_present_sex))
				return false;
			if (!this.sex.equals(that.sex))
				return false;
		}

		boolean this_present_birth = true && this.isSetBirth();
		boolean that_present_birth = true && that.isSetBirth();
		if (this_present_birth || that_present_birth) {
			if (!(this_present_birth && that_present_birth))
				return false;
			if (!this.birth.equals(that.birth))
				return false;
		}

		boolean this_present_birthPlace = true && this.isSetBirthPlace();
		boolean that_present_birthPlace = true && that.isSetBirthPlace();
		if (this_present_birthPlace || that_present_birthPlace) {
			if (!(this_present_birthPlace && that_present_birthPlace))
				return false;
			if (!this.birthPlace.equals(that.birthPlace))
				return false;
		}

		boolean this_present_height = true && this.isSetHeight();
		boolean that_present_height = true && that.isSetHeight();
		if (this_present_height || that_present_height) {
			if (!(this_present_height && that_present_height))
				return false;
			if (!this.height.equals(that.height))
				return false;
		}

		boolean this_present_weight = true && this.isSetWeight();
		boolean that_present_weight = true && that.isSetWeight();
		if (this_present_weight || that_present_weight) {
			if (!(this_present_weight && that_present_weight))
				return false;
			if (!this.weight.equals(that.weight))
				return false;
		}

		boolean this_present_sign = true && this.isSetSign();
		boolean that_present_sign = true && that.isSetSign();
		if (this_present_sign || that_present_sign) {
			if (!(this_present_sign && that_present_sign))
				return false;
			if (!this.sign.equals(that.sign))
				return false;
		}

		boolean this_present_country = true && this.isSetCountry();
		boolean that_present_country = true && that.isSetCountry();
		if (this_present_country || that_present_country) {
			if (!(this_present_country && that_present_country))
				return false;
			if (!this.country.equals(that.country))
				return false;
		}

		boolean this_present_province = true && this.isSetProvince();
		boolean that_present_province = true && that.isSetProvince();
		if (this_present_province || that_present_province) {
			if (!(this_present_province && that_present_province))
				return false;
			if (!this.province.equals(that.province))
				return false;
		}

		boolean this_present_city = true && this.isSetCity();
		boolean that_present_city = true && that.isSetCity();
		if (this_present_city || that_present_city) {
			if (!(this_present_city && that_present_city))
				return false;
			if (!this.city.equals(that.city))
				return false;
		}

		boolean this_present_district = true && this.isSetDistrict();
		boolean that_present_district = true && that.isSetDistrict();
		if (this_present_district || that_present_district) {
			if (!(this_present_district && that_present_district))
				return false;
			if (!this.district.equals(that.district))
				return false;
		}

		boolean this_present_address = true && this.isSetAddress();
		boolean that_present_address = true && that.isSetAddress();
		if (this_present_address || that_present_address) {
			if (!(this_present_address && that_present_address))
				return false;
			if (!this.address.equals(that.address))
				return false;
		}

		boolean this_present_vipName = true && this.isSetVipName();
		boolean that_present_vipName = true && that.isSetVipName();
		if (this_present_vipName || that_present_vipName) {
			if (!(this_present_vipName && that_present_vipName))
				return false;
			if (!this.vipName.equals(that.vipName))
				return false;
		}

		boolean this_present_vipPhone = true && this.isSetVipPhone();
		boolean that_present_vipPhone = true && that.isSetVipPhone();
		if (this_present_vipPhone || that_present_vipPhone) {
			if (!(this_present_vipPhone && that_present_vipPhone))
				return false;
			if (!this.vipPhone.equals(that.vipPhone))
				return false;
		}

		boolean this_present_realName = true && this.isSetRealName();
		boolean that_present_realName = true && that.isSetRealName();
		if (this_present_realName || that_present_realName) {
			if (!(this_present_realName && that_present_realName))
				return false;
			if (!this.realName.equals(that.realName))
				return false;
		}

		boolean this_present_realIcon = true && this.isSetRealIcon();
		boolean that_present_realIcon = true && that.isSetRealIcon();
		if (this_present_realIcon || that_present_realIcon) {
			if (!(this_present_realIcon && that_present_realIcon))
				return false;
			if (!this.realIcon.equals(that.realIcon))
				return false;
		}

		boolean this_present_cardId = true && this.isSetCardId();
		boolean that_present_cardId = true && that.isSetCardId();
		if (this_present_cardId || that_present_cardId) {
			if (!(this_present_cardId && that_present_cardId))
				return false;
			if (!this.cardId.equals(that.cardId))
				return false;
		}

		boolean this_present_passport = true && this.isSetPassport();
		boolean that_present_passport = true && that.isSetPassport();
		if (this_present_passport || that_present_passport) {
			if (!(this_present_passport && that_present_passport))
				return false;
			if (!this.passport.equals(that.passport))
				return false;
		}

		boolean this_present_driver = true && this.isSetDriver();
		boolean that_present_driver = true && that.isSetDriver();
		if (this_present_driver || that_present_driver) {
			if (!(this_present_driver && that_present_driver))
				return false;
			if (!this.driver.equals(that.driver))
				return false;
		}

		boolean this_present_bankNumber = true && this.isSetBankNumber();
		boolean that_present_bankNumber = true && that.isSetBankNumber();
		if (this_present_bankNumber || that_present_bankNumber) {
			if (!(this_present_bankNumber && that_present_bankNumber))
				return false;
			if (!this.bankNumber.equals(that.bankNumber))
				return false;
		}

		boolean this_present_education = true && this.isSetEducation();
		boolean that_present_education = true && that.isSetEducation();
		if (this_present_education || that_present_education) {
			if (!(this_present_education && that_present_education))
				return false;
			if (!this.education.equals(that.education))
				return false;
		}

		boolean this_present_graduate = true && this.isSetGraduate();
		boolean that_present_graduate = true && that.isSetGraduate();
		if (this_present_graduate || that_present_graduate) {
			if (!(this_present_graduate && that_present_graduate))
				return false;
			if (!this.graduate.equals(that.graduate))
				return false;
		}

		boolean this_present_major = true && this.isSetMajor();
		boolean that_present_major = true && that.isSetMajor();
		if (this_present_major || that_present_major) {
			if (!(this_present_major && that_present_major))
				return false;
			if (!this.major.equals(that.major))
				return false;
		}

		boolean this_present_ethnic = true && this.isSetEthnic();
		boolean that_present_ethnic = true && that.isSetEthnic();
		if (this_present_ethnic || that_present_ethnic) {
			if (!(this_present_ethnic && that_present_ethnic))
				return false;
			if (!this.ethnic.equals(that.ethnic))
				return false;
		}

		boolean this_present_religion = true && this.isSetReligion();
		boolean that_present_religion = true && that.isSetReligion();
		if (this_present_religion || that_present_religion) {
			if (!(this_present_religion && that_present_religion))
				return false;
			if (!this.religion.equals(that.religion))
				return false;
		}

		boolean this_present_party = true && this.isSetParty();
		boolean that_present_party = true && that.isSetParty();
		if (this_present_party || that_present_party) {
			if (!(this_present_party && that_present_party))
				return false;
			if (!this.party.equals(that.party))
				return false;
		}

		boolean this_present_company = true && this.isSetCompany();
		boolean that_present_company = true && that.isSetCompany();
		if (this_present_company || that_present_company) {
			if (!(this_present_company && that_present_company))
				return false;
			if (!this.company.equals(that.company))
				return false;
		}

		boolean this_present_companyAddr = true && this.isSetCompanyAddr();
		boolean that_present_companyAddr = true && that.isSetCompanyAddr();
		if (this_present_companyAddr || that_present_companyAddr) {
			if (!(this_present_companyAddr && that_present_companyAddr))
				return false;
			if (!this.companyAddr.equals(that.companyAddr))
				return false;
		}

		boolean this_present_companyID = true && this.isSetCompanyID();
		boolean that_present_companyID = true && that.isSetCompanyID();
		if (this_present_companyID || that_present_companyID) {
			if (!(this_present_companyID && that_present_companyID))
				return false;
			if (!this.companyID.equals(that.companyID))
				return false;
		}

		boolean this_present_companyHash = true && this.isSetCompanyHash();
		boolean that_present_companyHash = true && that.isSetCompanyHash();
		if (this_present_companyHash || that_present_companyHash) {
			if (!(this_present_companyHash && that_present_companyHash))
				return false;
			if (!this.companyHash.equals(that.companyHash))
				return false;
		}

		boolean this_present_position = true && this.isSetPosition();
		boolean that_present_position = true && that.isSetPosition();
		if (this_present_position || that_present_position) {
			if (!(this_present_position && that_present_position))
				return false;
			if (!this.position.equals(that.position))
				return false;
		}

		boolean this_present_wxIcon = true && this.isSetWxIcon();
		boolean that_present_wxIcon = true && that.isSetWxIcon();
		if (this_present_wxIcon || that_present_wxIcon) {
			if (!(this_present_wxIcon && that_present_wxIcon))
				return false;
			if (!this.wxIcon.equals(that.wxIcon))
				return false;
		}

		boolean this_present_wxNickname = true && this.isSetWxNickname();
		boolean that_present_wxNickname = true && that.isSetWxNickname();
		if (this_present_wxNickname || that_present_wxNickname) {
			if (!(this_present_wxNickname && that_present_wxNickname))
				return false;
			if (!this.wxNickname.equals(that.wxNickname))
				return false;
		}

		boolean this_present_wxCard = true && this.isSetWxCard();
		boolean that_present_wxCard = true && that.isSetWxCard();
		if (this_present_wxCard || that_present_wxCard) {
			if (!(this_present_wxCard && that_present_wxCard))
				return false;
			if (!this.wxCard.equals(that.wxCard))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetLang()) ? 131071 : 524287);
		if (isSetLang())
			hashCode = hashCode * 8191 + lang.hashCode();

		hashCode = hashCode * 8191 + ((isSetLevel()) ? 131071 : 524287);
		if (isSetLevel())
			hashCode = hashCode * 8191 + level;

		hashCode = hashCode * 8191 + ((isSetIcon()) ? 131071 : 524287);
		if (isSetIcon())
			hashCode = hashCode * 8191 + icon.hashCode();

		hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
		if (isSetName())
			hashCode = hashCode * 8191 + name.hashCode();

		hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
		if (isSetPhone())
			hashCode = hashCode * 8191 + phone.hashCode();

		hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
		if (isSetEmail())
			hashCode = hashCode * 8191 + email.hashCode();

		hashCode = hashCode * 8191 + ((isSetSocial()) ? 131071 : 524287);
		if (isSetSocial())
			hashCode = hashCode * 8191 + social.hashCode();

		hashCode = hashCode * 8191 + ((isSetSex()) ? 131071 : 524287);
		if (isSetSex())
			hashCode = hashCode * 8191 + sex.hashCode();

		hashCode = hashCode * 8191 + ((isSetBirth()) ? 131071 : 524287);
		if (isSetBirth())
			hashCode = hashCode * 8191 + birth.hashCode();

		hashCode = hashCode * 8191 + ((isSetBirthPlace()) ? 131071 : 524287);
		if (isSetBirthPlace())
			hashCode = hashCode * 8191 + birthPlace.hashCode();

		hashCode = hashCode * 8191 + ((isSetHeight()) ? 131071 : 524287);
		if (isSetHeight())
			hashCode = hashCode * 8191 + height.hashCode();

		hashCode = hashCode * 8191 + ((isSetWeight()) ? 131071 : 524287);
		if (isSetWeight())
			hashCode = hashCode * 8191 + weight.hashCode();

		hashCode = hashCode * 8191 + ((isSetSign()) ? 131071 : 524287);
		if (isSetSign())
			hashCode = hashCode * 8191 + sign.hashCode();

		hashCode = hashCode * 8191 + ((isSetCountry()) ? 131071 : 524287);
		if (isSetCountry())
			hashCode = hashCode * 8191 + country.hashCode();

		hashCode = hashCode * 8191 + ((isSetProvince()) ? 131071 : 524287);
		if (isSetProvince())
			hashCode = hashCode * 8191 + province.hashCode();

		hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
		if (isSetCity())
			hashCode = hashCode * 8191 + city.hashCode();

		hashCode = hashCode * 8191 + ((isSetDistrict()) ? 131071 : 524287);
		if (isSetDistrict())
			hashCode = hashCode * 8191 + district.hashCode();

		hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
		if (isSetAddress())
			hashCode = hashCode * 8191 + address.hashCode();

		hashCode = hashCode * 8191 + ((isSetVipName()) ? 131071 : 524287);
		if (isSetVipName())
			hashCode = hashCode * 8191 + vipName.hashCode();

		hashCode = hashCode * 8191 + ((isSetVipPhone()) ? 131071 : 524287);
		if (isSetVipPhone())
			hashCode = hashCode * 8191 + vipPhone.hashCode();

		hashCode = hashCode * 8191 + ((isSetRealName()) ? 131071 : 524287);
		if (isSetRealName())
			hashCode = hashCode * 8191 + realName.hashCode();

		hashCode = hashCode * 8191 + ((isSetRealIcon()) ? 131071 : 524287);
		if (isSetRealIcon())
			hashCode = hashCode * 8191 + realIcon.hashCode();

		hashCode = hashCode * 8191 + ((isSetCardId()) ? 131071 : 524287);
		if (isSetCardId())
			hashCode = hashCode * 8191 + cardId.hashCode();

		hashCode = hashCode * 8191 + ((isSetPassport()) ? 131071 : 524287);
		if (isSetPassport())
			hashCode = hashCode * 8191 + passport.hashCode();

		hashCode = hashCode * 8191 + ((isSetDriver()) ? 131071 : 524287);
		if (isSetDriver())
			hashCode = hashCode * 8191 + driver.hashCode();

		hashCode = hashCode * 8191 + ((isSetBankNumber()) ? 131071 : 524287);
		if (isSetBankNumber())
			hashCode = hashCode * 8191 + bankNumber.hashCode();

		hashCode = hashCode * 8191 + ((isSetEducation()) ? 131071 : 524287);
		if (isSetEducation())
			hashCode = hashCode * 8191 + education.hashCode();

		hashCode = hashCode * 8191 + ((isSetGraduate()) ? 131071 : 524287);
		if (isSetGraduate())
			hashCode = hashCode * 8191 + graduate.hashCode();

		hashCode = hashCode * 8191 + ((isSetMajor()) ? 131071 : 524287);
		if (isSetMajor())
			hashCode = hashCode * 8191 + major.hashCode();

		hashCode = hashCode * 8191 + ((isSetEthnic()) ? 131071 : 524287);
		if (isSetEthnic())
			hashCode = hashCode * 8191 + ethnic.hashCode();

		hashCode = hashCode * 8191 + ((isSetReligion()) ? 131071 : 524287);
		if (isSetReligion())
			hashCode = hashCode * 8191 + religion.hashCode();

		hashCode = hashCode * 8191 + ((isSetParty()) ? 131071 : 524287);
		if (isSetParty())
			hashCode = hashCode * 8191 + party.hashCode();

		hashCode = hashCode * 8191 + ((isSetCompany()) ? 131071 : 524287);
		if (isSetCompany())
			hashCode = hashCode * 8191 + company.hashCode();

		hashCode = hashCode * 8191 + ((isSetCompanyAddr()) ? 131071 : 524287);
		if (isSetCompanyAddr())
			hashCode = hashCode * 8191 + companyAddr.hashCode();

		hashCode = hashCode * 8191 + ((isSetCompanyID()) ? 131071 : 524287);
		if (isSetCompanyID())
			hashCode = hashCode * 8191 + companyID.hashCode();

		hashCode = hashCode * 8191 + ((isSetCompanyHash()) ? 131071 : 524287);
		if (isSetCompanyHash())
			hashCode = hashCode * 8191 + companyHash.hashCode();

		hashCode = hashCode * 8191 + ((isSetPosition()) ? 131071 : 524287);
		if (isSetPosition())
			hashCode = hashCode * 8191 + position.hashCode();

		hashCode = hashCode * 8191 + ((isSetWxIcon()) ? 131071 : 524287);
		if (isSetWxIcon())
			hashCode = hashCode * 8191 + wxIcon.hashCode();

		hashCode = hashCode * 8191 + ((isSetWxNickname()) ? 131071 : 524287);
		if (isSetWxNickname())
			hashCode = hashCode * 8191 + wxNickname.hashCode();

		hashCode = hashCode * 8191 + ((isSetWxCard()) ? 131071 : 524287);
		if (isSetWxCard())
			hashCode = hashCode * 8191 + wxCard.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgUserProfile other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetLang()).compareTo(other.isSetLang());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLang()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLevel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPhone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEmail()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSocial()).compareTo(other.isSetSocial());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSocial()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.social, other.social);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSex()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBirth()).compareTo(other.isSetBirth());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBirth()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birth, other.birth);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBirthPlace()).compareTo(other.isSetBirthPlace());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBirthPlace()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthPlace, other.birthPlace);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetHeight()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWeight()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSign()).compareTo(other.isSetSign());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSign()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sign, other.sign);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCountry()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProvince()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCity()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDistrict()).compareTo(other.isSetDistrict());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDistrict()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.district, other.district);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAddress()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetVipName()).compareTo(other.isSetVipName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVipName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipName, other.vipName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetVipPhone()).compareTo(other.isSetVipPhone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVipPhone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vipPhone, other.vipPhone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRealName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRealIcon()).compareTo(other.isSetRealIcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRealIcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realIcon, other.realIcon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCardId()).compareTo(other.isSetCardId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCardId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardId, other.cardId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPassport()).compareTo(other.isSetPassport());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPassport()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passport, other.passport);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDriver()).compareTo(other.isSetDriver());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDriver()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driver, other.driver);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBankNumber()).compareTo(other.isSetBankNumber());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBankNumber()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNumber, other.bankNumber);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetEducation()).compareTo(other.isSetEducation());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEducation()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.education, other.education);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetGraduate()).compareTo(other.isSetGraduate());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGraduate()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.graduate, other.graduate);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMajor()).compareTo(other.isSetMajor());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMajor()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.major, other.major);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetEthnic()).compareTo(other.isSetEthnic());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEthnic()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ethnic, other.ethnic);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetReligion()).compareTo(other.isSetReligion());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReligion()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.religion, other.religion);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetParty()).compareTo(other.isSetParty());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetParty()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.party, other.party);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCompany()).compareTo(other.isSetCompany());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCompany()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.company, other.company);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCompanyAddr()).compareTo(other.isSetCompanyAddr());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCompanyAddr()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyAddr, other.companyAddr);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCompanyID()).compareTo(other.isSetCompanyID());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCompanyID()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyID, other.companyID);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCompanyHash()).compareTo(other.isSetCompanyHash());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCompanyHash()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyHash, other.companyHash);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPosition()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWxIcon()).compareTo(other.isSetWxIcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWxIcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxIcon, other.wxIcon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWxNickname()).compareTo(other.isSetWxNickname());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWxNickname()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxNickname, other.wxNickname);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWxCard()).compareTo(other.isSetWxCard());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWxCard()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wxCard, other.wxCard);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgUserProfile(");
		boolean first = true;

		if (isSetLang()) {
			sb.append("lang:");
			if (this.lang == null) {
				sb.append("null");
			}
			else {
				sb.append(this.lang);
			}
			first = false;
		}
		if (isSetLevel()) {
			if (!first)
				sb.append(", ");
			sb.append("level:");
			sb.append(this.level);
			first = false;
		}
		if (isSetIcon()) {
			if (!first)
				sb.append(", ");
			sb.append("icon:");
			if (this.icon == null) {
				sb.append("null");
			}
			else {
				sb.append(this.icon);
			}
			first = false;
		}
		if (isSetName()) {
			if (!first)
				sb.append(", ");
			sb.append("name:");
			if (this.name == null) {
				sb.append("null");
			}
			else {
				sb.append(this.name);
			}
			first = false;
		}
		if (isSetPhone()) {
			if (!first)
				sb.append(", ");
			sb.append("phone:");
			if (this.phone == null) {
				sb.append("null");
			}
			else {
				sb.append(this.phone);
			}
			first = false;
		}
		if (isSetEmail()) {
			if (!first)
				sb.append(", ");
			sb.append("email:");
			if (this.email == null) {
				sb.append("null");
			}
			else {
				sb.append(this.email);
			}
			first = false;
		}
		if (isSetSocial()) {
			if (!first)
				sb.append(", ");
			sb.append("social:");
			if (this.social == null) {
				sb.append("null");
			}
			else {
				sb.append(this.social);
			}
			first = false;
		}
		if (isSetSex()) {
			if (!first)
				sb.append(", ");
			sb.append("sex:");
			if (this.sex == null) {
				sb.append("null");
			}
			else {
				sb.append(this.sex);
			}
			first = false;
		}
		if (isSetBirth()) {
			if (!first)
				sb.append(", ");
			sb.append("birth:");
			if (this.birth == null) {
				sb.append("null");
			}
			else {
				sb.append(this.birth);
			}
			first = false;
		}
		if (isSetBirthPlace()) {
			if (!first)
				sb.append(", ");
			sb.append("birthPlace:");
			if (this.birthPlace == null) {
				sb.append("null");
			}
			else {
				sb.append(this.birthPlace);
			}
			first = false;
		}
		if (isSetHeight()) {
			if (!first)
				sb.append(", ");
			sb.append("height:");
			if (this.height == null) {
				sb.append("null");
			}
			else {
				sb.append(this.height);
			}
			first = false;
		}
		if (isSetWeight()) {
			if (!first)
				sb.append(", ");
			sb.append("weight:");
			if (this.weight == null) {
				sb.append("null");
			}
			else {
				sb.append(this.weight);
			}
			first = false;
		}
		if (isSetSign()) {
			if (!first)
				sb.append(", ");
			sb.append("sign:");
			if (this.sign == null) {
				sb.append("null");
			}
			else {
				sb.append(this.sign);
			}
			first = false;
		}
		if (isSetCountry()) {
			if (!first)
				sb.append(", ");
			sb.append("country:");
			if (this.country == null) {
				sb.append("null");
			}
			else {
				sb.append(this.country);
			}
			first = false;
		}
		if (isSetProvince()) {
			if (!first)
				sb.append(", ");
			sb.append("province:");
			if (this.province == null) {
				sb.append("null");
			}
			else {
				sb.append(this.province);
			}
			first = false;
		}
		if (isSetCity()) {
			if (!first)
				sb.append(", ");
			sb.append("city:");
			if (this.city == null) {
				sb.append("null");
			}
			else {
				sb.append(this.city);
			}
			first = false;
		}
		if (isSetDistrict()) {
			if (!first)
				sb.append(", ");
			sb.append("district:");
			if (this.district == null) {
				sb.append("null");
			}
			else {
				sb.append(this.district);
			}
			first = false;
		}
		if (isSetAddress()) {
			if (!first)
				sb.append(", ");
			sb.append("address:");
			if (this.address == null) {
				sb.append("null");
			}
			else {
				sb.append(this.address);
			}
			first = false;
		}
		if (isSetVipName()) {
			if (!first)
				sb.append(", ");
			sb.append("vipName:");
			if (this.vipName == null) {
				sb.append("null");
			}
			else {
				sb.append(this.vipName);
			}
			first = false;
		}
		if (isSetVipPhone()) {
			if (!first)
				sb.append(", ");
			sb.append("vipPhone:");
			if (this.vipPhone == null) {
				sb.append("null");
			}
			else {
				sb.append(this.vipPhone);
			}
			first = false;
		}
		if (isSetRealName()) {
			if (!first)
				sb.append(", ");
			sb.append("realName:");
			if (this.realName == null) {
				sb.append("null");
			}
			else {
				sb.append(this.realName);
			}
			first = false;
		}
		if (isSetRealIcon()) {
			if (!first)
				sb.append(", ");
			sb.append("realIcon:");
			if (this.realIcon == null) {
				sb.append("null");
			}
			else {
				sb.append(this.realIcon);
			}
			first = false;
		}
		if (isSetCardId()) {
			if (!first)
				sb.append(", ");
			sb.append("cardId:");
			if (this.cardId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.cardId);
			}
			first = false;
		}
		if (isSetPassport()) {
			if (!first)
				sb.append(", ");
			sb.append("passport:");
			if (this.passport == null) {
				sb.append("null");
			}
			else {
				sb.append(this.passport);
			}
			first = false;
		}
		if (isSetDriver()) {
			if (!first)
				sb.append(", ");
			sb.append("driver:");
			if (this.driver == null) {
				sb.append("null");
			}
			else {
				sb.append(this.driver);
			}
			first = false;
		}
		if (isSetBankNumber()) {
			if (!first)
				sb.append(", ");
			sb.append("bankNumber:");
			if (this.bankNumber == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bankNumber);
			}
			first = false;
		}
		if (isSetEducation()) {
			if (!first)
				sb.append(", ");
			sb.append("education:");
			if (this.education == null) {
				sb.append("null");
			}
			else {
				sb.append(this.education);
			}
			first = false;
		}
		if (isSetGraduate()) {
			if (!first)
				sb.append(", ");
			sb.append("graduate:");
			if (this.graduate == null) {
				sb.append("null");
			}
			else {
				sb.append(this.graduate);
			}
			first = false;
		}
		if (isSetMajor()) {
			if (!first)
				sb.append(", ");
			sb.append("major:");
			if (this.major == null) {
				sb.append("null");
			}
			else {
				sb.append(this.major);
			}
			first = false;
		}
		if (isSetEthnic()) {
			if (!first)
				sb.append(", ");
			sb.append("ethnic:");
			if (this.ethnic == null) {
				sb.append("null");
			}
			else {
				sb.append(this.ethnic);
			}
			first = false;
		}
		if (isSetReligion()) {
			if (!first)
				sb.append(", ");
			sb.append("religion:");
			if (this.religion == null) {
				sb.append("null");
			}
			else {
				sb.append(this.religion);
			}
			first = false;
		}
		if (isSetParty()) {
			if (!first)
				sb.append(", ");
			sb.append("party:");
			if (this.party == null) {
				sb.append("null");
			}
			else {
				sb.append(this.party);
			}
			first = false;
		}
		if (isSetCompany()) {
			if (!first)
				sb.append(", ");
			sb.append("company:");
			if (this.company == null) {
				sb.append("null");
			}
			else {
				sb.append(this.company);
			}
			first = false;
		}
		if (isSetCompanyAddr()) {
			if (!first)
				sb.append(", ");
			sb.append("companyAddr:");
			if (this.companyAddr == null) {
				sb.append("null");
			}
			else {
				sb.append(this.companyAddr);
			}
			first = false;
		}
		if (isSetCompanyID()) {
			if (!first)
				sb.append(", ");
			sb.append("companyID:");
			if (this.companyID == null) {
				sb.append("null");
			}
			else {
				sb.append(this.companyID);
			}
			first = false;
		}
		if (isSetCompanyHash()) {
			if (!first)
				sb.append(", ");
			sb.append("companyHash:");
			if (this.companyHash == null) {
				sb.append("null");
			}
			else {
				sb.append(this.companyHash);
			}
			first = false;
		}
		if (isSetPosition()) {
			if (!first)
				sb.append(", ");
			sb.append("position:");
			if (this.position == null) {
				sb.append("null");
			}
			else {
				sb.append(this.position);
			}
			first = false;
		}
		if (isSetWxIcon()) {
			if (!first)
				sb.append(", ");
			sb.append("wxIcon:");
			if (this.wxIcon == null) {
				sb.append("null");
			}
			else {
				sb.append(this.wxIcon);
			}
			first = false;
		}
		if (isSetWxNickname()) {
			if (!first)
				sb.append(", ");
			sb.append("wxNickname:");
			if (this.wxNickname == null) {
				sb.append("null");
			}
			else {
				sb.append(this.wxNickname);
			}
			first = false;
		}
		if (isSetWxCard()) {
			if (!first)
				sb.append(", ");
			sb.append("wxCard:");
			if (this.wxCard == null) {
				sb.append("null");
			}
			else {
				sb.append(this.wxCard);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgUserProfileStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgUserProfileStandardScheme getScheme() {
			return new ArgUserProfileStandardScheme();
		}

	}

	private static class ArgUserProfileStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgUserProfile> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgUserProfile struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // LANG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.lang = iprot.readString();
						struct.setLangIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 35: // LEVEL
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.level = iprot.readI32();
						struct.setLevelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // ICON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.icon = iprot.readString();
						struct.setIconIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.name = iprot.readString();
						struct.setNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // PHONE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.phone = iprot.readString();
						struct.setPhoneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // EMAIL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.email = iprot.readString();
						struct.setEmailIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // SOCIAL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.social = iprot.readString();
						struct.setSocialIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // SEX
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sex = iprot.readString();
						struct.setSexIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // BIRTH
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.birth = iprot.readString();
						struct.setBirthIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 33: // BIRTH_PLACE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.birthPlace = iprot.readString();
						struct.setBirthPlaceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 24: // HEIGHT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.height = iprot.readString();
						struct.setHeightIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 25: // WEIGHT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.weight = iprot.readString();
						struct.setWeightIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // SIGN
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sign = iprot.readString();
						struct.setSignIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // COUNTRY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.country = iprot.readString();
						struct.setCountryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // PROVINCE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.province = iprot.readString();
						struct.setProvinceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // CITY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.city = iprot.readString();
						struct.setCityIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // DISTRICT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.district = iprot.readString();
						struct.setDistrictIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // ADDRESS
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.address = iprot.readString();
						struct.setAddressIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 26: // VIP_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.vipName = iprot.readString();
						struct.setVipNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 27: // VIP_PHONE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.vipPhone = iprot.readString();
						struct.setVipPhoneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // REAL_NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.realName = iprot.readString();
						struct.setRealNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 28: // REAL_ICON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.realIcon = iprot.readString();
						struct.setRealIconIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // CARD_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.cardId = iprot.readString();
						struct.setCardIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // PASSPORT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.passport = iprot.readString();
						struct.setPassportIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // DRIVER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.driver = iprot.readString();
						struct.setDriverIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // BANK_NUMBER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bankNumber = iprot.readString();
						struct.setBankNumberIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 29: // EDUCATION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.education = iprot.readString();
						struct.setEducationIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 30: // GRADUATE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.graduate = iprot.readString();
						struct.setGraduateIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 31: // MAJOR
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.major = iprot.readString();
						struct.setMajorIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // ETHNIC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.ethnic = iprot.readString();
						struct.setEthnicIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // RELIGION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.religion = iprot.readString();
						struct.setReligionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 32: // PARTY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.party = iprot.readString();
						struct.setPartyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 36: // COMPANY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.company = iprot.readString();
						struct.setCompanyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 38: // COMPANY_ADDR
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.companyAddr = iprot.readString();
						struct.setCompanyAddrIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 39: // COMPANY_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.companyID = iprot.readString();
						struct.setCompanyIDIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 40: // COMPANY_HASH
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.companyHash = iprot.readString();
						struct.setCompanyHashIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 37: // POSITION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.position = iprot.readString();
						struct.setPositionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // WX_ICON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.wxIcon = iprot.readString();
						struct.setWxIconIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // WX_NICKNAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.wxNickname = iprot.readString();
						struct.setWxNicknameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 34: // WX_CARD
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.wxCard = iprot.readString();
						struct.setWxCardIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgUserProfile struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.lang != null) {
				if (struct.isSetLang()) {
					oprot.writeFieldBegin(LANG_FIELD_DESC);
					oprot.writeString(struct.lang);
					oprot.writeFieldEnd();
				}
			}
			if (struct.name != null) {
				if (struct.isSetName()) {
					oprot.writeFieldBegin(NAME_FIELD_DESC);
					oprot.writeString(struct.name);
					oprot.writeFieldEnd();
				}
			}
			if (struct.email != null) {
				if (struct.isSetEmail()) {
					oprot.writeFieldBegin(EMAIL_FIELD_DESC);
					oprot.writeString(struct.email);
					oprot.writeFieldEnd();
				}
			}
			if (struct.phone != null) {
				if (struct.isSetPhone()) {
					oprot.writeFieldBegin(PHONE_FIELD_DESC);
					oprot.writeString(struct.phone);
					oprot.writeFieldEnd();
				}
			}
			if (struct.icon != null) {
				if (struct.isSetIcon()) {
					oprot.writeFieldBegin(ICON_FIELD_DESC);
					oprot.writeString(struct.icon);
					oprot.writeFieldEnd();
				}
			}
			if (struct.sex != null) {
				if (struct.isSetSex()) {
					oprot.writeFieldBegin(SEX_FIELD_DESC);
					oprot.writeString(struct.sex);
					oprot.writeFieldEnd();
				}
			}
			if (struct.birth != null) {
				if (struct.isSetBirth()) {
					oprot.writeFieldBegin(BIRTH_FIELD_DESC);
					oprot.writeString(struct.birth);
					oprot.writeFieldEnd();
				}
			}
			if (struct.sign != null) {
				if (struct.isSetSign()) {
					oprot.writeFieldBegin(SIGN_FIELD_DESC);
					oprot.writeString(struct.sign);
					oprot.writeFieldEnd();
				}
			}
			if (struct.country != null) {
				if (struct.isSetCountry()) {
					oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
					oprot.writeString(struct.country);
					oprot.writeFieldEnd();
				}
			}
			if (struct.province != null) {
				if (struct.isSetProvince()) {
					oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
					oprot.writeString(struct.province);
					oprot.writeFieldEnd();
				}
			}
			if (struct.city != null) {
				if (struct.isSetCity()) {
					oprot.writeFieldBegin(CITY_FIELD_DESC);
					oprot.writeString(struct.city);
					oprot.writeFieldEnd();
				}
			}
			if (struct.district != null) {
				if (struct.isSetDistrict()) {
					oprot.writeFieldBegin(DISTRICT_FIELD_DESC);
					oprot.writeString(struct.district);
					oprot.writeFieldEnd();
				}
			}
			if (struct.address != null) {
				if (struct.isSetAddress()) {
					oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
					oprot.writeString(struct.address);
					oprot.writeFieldEnd();
				}
			}
			if (struct.realName != null) {
				if (struct.isSetRealName()) {
					oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
					oprot.writeString(struct.realName);
					oprot.writeFieldEnd();
				}
			}
			if (struct.cardId != null) {
				if (struct.isSetCardId()) {
					oprot.writeFieldBegin(CARD_ID_FIELD_DESC);
					oprot.writeString(struct.cardId);
					oprot.writeFieldEnd();
				}
			}
			if (struct.passport != null) {
				if (struct.isSetPassport()) {
					oprot.writeFieldBegin(PASSPORT_FIELD_DESC);
					oprot.writeString(struct.passport);
					oprot.writeFieldEnd();
				}
			}
			if (struct.driver != null) {
				if (struct.isSetDriver()) {
					oprot.writeFieldBegin(DRIVER_FIELD_DESC);
					oprot.writeString(struct.driver);
					oprot.writeFieldEnd();
				}
			}
			if (struct.bankNumber != null) {
				if (struct.isSetBankNumber()) {
					oprot.writeFieldBegin(BANK_NUMBER_FIELD_DESC);
					oprot.writeString(struct.bankNumber);
					oprot.writeFieldEnd();
				}
			}
			if (struct.ethnic != null) {
				if (struct.isSetEthnic()) {
					oprot.writeFieldBegin(ETHNIC_FIELD_DESC);
					oprot.writeString(struct.ethnic);
					oprot.writeFieldEnd();
				}
			}
			if (struct.religion != null) {
				if (struct.isSetReligion()) {
					oprot.writeFieldBegin(RELIGION_FIELD_DESC);
					oprot.writeString(struct.religion);
					oprot.writeFieldEnd();
				}
			}
			if (struct.wxIcon != null) {
				if (struct.isSetWxIcon()) {
					oprot.writeFieldBegin(WX_ICON_FIELD_DESC);
					oprot.writeString(struct.wxIcon);
					oprot.writeFieldEnd();
				}
			}
			if (struct.wxNickname != null) {
				if (struct.isSetWxNickname()) {
					oprot.writeFieldBegin(WX_NICKNAME_FIELD_DESC);
					oprot.writeString(struct.wxNickname);
					oprot.writeFieldEnd();
				}
			}
			if (struct.social != null) {
				if (struct.isSetSocial()) {
					oprot.writeFieldBegin(SOCIAL_FIELD_DESC);
					oprot.writeString(struct.social);
					oprot.writeFieldEnd();
				}
			}
			if (struct.height != null) {
				if (struct.isSetHeight()) {
					oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
					oprot.writeString(struct.height);
					oprot.writeFieldEnd();
				}
			}
			if (struct.weight != null) {
				if (struct.isSetWeight()) {
					oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
					oprot.writeString(struct.weight);
					oprot.writeFieldEnd();
				}
			}
			if (struct.vipName != null) {
				if (struct.isSetVipName()) {
					oprot.writeFieldBegin(VIP_NAME_FIELD_DESC);
					oprot.writeString(struct.vipName);
					oprot.writeFieldEnd();
				}
			}
			if (struct.vipPhone != null) {
				if (struct.isSetVipPhone()) {
					oprot.writeFieldBegin(VIP_PHONE_FIELD_DESC);
					oprot.writeString(struct.vipPhone);
					oprot.writeFieldEnd();
				}
			}
			if (struct.realIcon != null) {
				if (struct.isSetRealIcon()) {
					oprot.writeFieldBegin(REAL_ICON_FIELD_DESC);
					oprot.writeString(struct.realIcon);
					oprot.writeFieldEnd();
				}
			}
			if (struct.education != null) {
				if (struct.isSetEducation()) {
					oprot.writeFieldBegin(EDUCATION_FIELD_DESC);
					oprot.writeString(struct.education);
					oprot.writeFieldEnd();
				}
			}
			if (struct.graduate != null) {
				if (struct.isSetGraduate()) {
					oprot.writeFieldBegin(GRADUATE_FIELD_DESC);
					oprot.writeString(struct.graduate);
					oprot.writeFieldEnd();
				}
			}
			if (struct.major != null) {
				if (struct.isSetMajor()) {
					oprot.writeFieldBegin(MAJOR_FIELD_DESC);
					oprot.writeString(struct.major);
					oprot.writeFieldEnd();
				}
			}
			if (struct.party != null) {
				if (struct.isSetParty()) {
					oprot.writeFieldBegin(PARTY_FIELD_DESC);
					oprot.writeString(struct.party);
					oprot.writeFieldEnd();
				}
			}
			if (struct.birthPlace != null) {
				if (struct.isSetBirthPlace()) {
					oprot.writeFieldBegin(BIRTH_PLACE_FIELD_DESC);
					oprot.writeString(struct.birthPlace);
					oprot.writeFieldEnd();
				}
			}
			if (struct.wxCard != null) {
				if (struct.isSetWxCard()) {
					oprot.writeFieldBegin(WX_CARD_FIELD_DESC);
					oprot.writeString(struct.wxCard);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetLevel()) {
				oprot.writeFieldBegin(LEVEL_FIELD_DESC);
				oprot.writeI32(struct.level);
				oprot.writeFieldEnd();
			}
			if (struct.company != null) {
				if (struct.isSetCompany()) {
					oprot.writeFieldBegin(COMPANY_FIELD_DESC);
					oprot.writeString(struct.company);
					oprot.writeFieldEnd();
				}
			}
			if (struct.position != null) {
				if (struct.isSetPosition()) {
					oprot.writeFieldBegin(POSITION_FIELD_DESC);
					oprot.writeString(struct.position);
					oprot.writeFieldEnd();
				}
			}
			if (struct.companyAddr != null) {
				if (struct.isSetCompanyAddr()) {
					oprot.writeFieldBegin(COMPANY_ADDR_FIELD_DESC);
					oprot.writeString(struct.companyAddr);
					oprot.writeFieldEnd();
				}
			}
			if (struct.companyID != null) {
				if (struct.isSetCompanyID()) {
					oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
					oprot.writeString(struct.companyID);
					oprot.writeFieldEnd();
				}
			}
			if (struct.companyHash != null) {
				if (struct.isSetCompanyHash()) {
					oprot.writeFieldBegin(COMPANY_HASH_FIELD_DESC);
					oprot.writeString(struct.companyHash);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgUserProfileTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgUserProfileTupleScheme getScheme() {
			return new ArgUserProfileTupleScheme();
		}

	}

	private static class ArgUserProfileTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgUserProfile> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgUserProfile struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetLang()) {
				optionals.set(0);
			}
			if (struct.isSetLevel()) {
				optionals.set(1);
			}
			if (struct.isSetIcon()) {
				optionals.set(2);
			}
			if (struct.isSetName()) {
				optionals.set(3);
			}
			if (struct.isSetPhone()) {
				optionals.set(4);
			}
			if (struct.isSetEmail()) {
				optionals.set(5);
			}
			if (struct.isSetSocial()) {
				optionals.set(6);
			}
			if (struct.isSetSex()) {
				optionals.set(7);
			}
			if (struct.isSetBirth()) {
				optionals.set(8);
			}
			if (struct.isSetBirthPlace()) {
				optionals.set(9);
			}
			if (struct.isSetHeight()) {
				optionals.set(10);
			}
			if (struct.isSetWeight()) {
				optionals.set(11);
			}
			if (struct.isSetSign()) {
				optionals.set(12);
			}
			if (struct.isSetCountry()) {
				optionals.set(13);
			}
			if (struct.isSetProvince()) {
				optionals.set(14);
			}
			if (struct.isSetCity()) {
				optionals.set(15);
			}
			if (struct.isSetDistrict()) {
				optionals.set(16);
			}
			if (struct.isSetAddress()) {
				optionals.set(17);
			}
			if (struct.isSetVipName()) {
				optionals.set(18);
			}
			if (struct.isSetVipPhone()) {
				optionals.set(19);
			}
			if (struct.isSetRealName()) {
				optionals.set(20);
			}
			if (struct.isSetRealIcon()) {
				optionals.set(21);
			}
			if (struct.isSetCardId()) {
				optionals.set(22);
			}
			if (struct.isSetPassport()) {
				optionals.set(23);
			}
			if (struct.isSetDriver()) {
				optionals.set(24);
			}
			if (struct.isSetBankNumber()) {
				optionals.set(25);
			}
			if (struct.isSetEducation()) {
				optionals.set(26);
			}
			if (struct.isSetGraduate()) {
				optionals.set(27);
			}
			if (struct.isSetMajor()) {
				optionals.set(28);
			}
			if (struct.isSetEthnic()) {
				optionals.set(29);
			}
			if (struct.isSetReligion()) {
				optionals.set(30);
			}
			if (struct.isSetParty()) {
				optionals.set(31);
			}
			if (struct.isSetCompany()) {
				optionals.set(32);
			}
			if (struct.isSetCompanyAddr()) {
				optionals.set(33);
			}
			if (struct.isSetCompanyID()) {
				optionals.set(34);
			}
			if (struct.isSetCompanyHash()) {
				optionals.set(35);
			}
			if (struct.isSetPosition()) {
				optionals.set(36);
			}
			if (struct.isSetWxIcon()) {
				optionals.set(37);
			}
			if (struct.isSetWxNickname()) {
				optionals.set(38);
			}
			if (struct.isSetWxCard()) {
				optionals.set(39);
			}
			oprot.writeBitSet(optionals, 40);
			if (struct.isSetLang()) {
				oprot.writeString(struct.lang);
			}
			if (struct.isSetLevel()) {
				oprot.writeI32(struct.level);
			}
			if (struct.isSetIcon()) {
				oprot.writeString(struct.icon);
			}
			if (struct.isSetName()) {
				oprot.writeString(struct.name);
			}
			if (struct.isSetPhone()) {
				oprot.writeString(struct.phone);
			}
			if (struct.isSetEmail()) {
				oprot.writeString(struct.email);
			}
			if (struct.isSetSocial()) {
				oprot.writeString(struct.social);
			}
			if (struct.isSetSex()) {
				oprot.writeString(struct.sex);
			}
			if (struct.isSetBirth()) {
				oprot.writeString(struct.birth);
			}
			if (struct.isSetBirthPlace()) {
				oprot.writeString(struct.birthPlace);
			}
			if (struct.isSetHeight()) {
				oprot.writeString(struct.height);
			}
			if (struct.isSetWeight()) {
				oprot.writeString(struct.weight);
			}
			if (struct.isSetSign()) {
				oprot.writeString(struct.sign);
			}
			if (struct.isSetCountry()) {
				oprot.writeString(struct.country);
			}
			if (struct.isSetProvince()) {
				oprot.writeString(struct.province);
			}
			if (struct.isSetCity()) {
				oprot.writeString(struct.city);
			}
			if (struct.isSetDistrict()) {
				oprot.writeString(struct.district);
			}
			if (struct.isSetAddress()) {
				oprot.writeString(struct.address);
			}
			if (struct.isSetVipName()) {
				oprot.writeString(struct.vipName);
			}
			if (struct.isSetVipPhone()) {
				oprot.writeString(struct.vipPhone);
			}
			if (struct.isSetRealName()) {
				oprot.writeString(struct.realName);
			}
			if (struct.isSetRealIcon()) {
				oprot.writeString(struct.realIcon);
			}
			if (struct.isSetCardId()) {
				oprot.writeString(struct.cardId);
			}
			if (struct.isSetPassport()) {
				oprot.writeString(struct.passport);
			}
			if (struct.isSetDriver()) {
				oprot.writeString(struct.driver);
			}
			if (struct.isSetBankNumber()) {
				oprot.writeString(struct.bankNumber);
			}
			if (struct.isSetEducation()) {
				oprot.writeString(struct.education);
			}
			if (struct.isSetGraduate()) {
				oprot.writeString(struct.graduate);
			}
			if (struct.isSetMajor()) {
				oprot.writeString(struct.major);
			}
			if (struct.isSetEthnic()) {
				oprot.writeString(struct.ethnic);
			}
			if (struct.isSetReligion()) {
				oprot.writeString(struct.religion);
			}
			if (struct.isSetParty()) {
				oprot.writeString(struct.party);
			}
			if (struct.isSetCompany()) {
				oprot.writeString(struct.company);
			}
			if (struct.isSetCompanyAddr()) {
				oprot.writeString(struct.companyAddr);
			}
			if (struct.isSetCompanyID()) {
				oprot.writeString(struct.companyID);
			}
			if (struct.isSetCompanyHash()) {
				oprot.writeString(struct.companyHash);
			}
			if (struct.isSetPosition()) {
				oprot.writeString(struct.position);
			}
			if (struct.isSetWxIcon()) {
				oprot.writeString(struct.wxIcon);
			}
			if (struct.isSetWxNickname()) {
				oprot.writeString(struct.wxNickname);
			}
			if (struct.isSetWxCard()) {
				oprot.writeString(struct.wxCard);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgUserProfile struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(40);
			if (incoming.get(0)) {
				struct.lang = iprot.readString();
				struct.setLangIsSet(true);
			}
			if (incoming.get(1)) {
				struct.level = iprot.readI32();
				struct.setLevelIsSet(true);
			}
			if (incoming.get(2)) {
				struct.icon = iprot.readString();
				struct.setIconIsSet(true);
			}
			if (incoming.get(3)) {
				struct.name = iprot.readString();
				struct.setNameIsSet(true);
			}
			if (incoming.get(4)) {
				struct.phone = iprot.readString();
				struct.setPhoneIsSet(true);
			}
			if (incoming.get(5)) {
				struct.email = iprot.readString();
				struct.setEmailIsSet(true);
			}
			if (incoming.get(6)) {
				struct.social = iprot.readString();
				struct.setSocialIsSet(true);
			}
			if (incoming.get(7)) {
				struct.sex = iprot.readString();
				struct.setSexIsSet(true);
			}
			if (incoming.get(8)) {
				struct.birth = iprot.readString();
				struct.setBirthIsSet(true);
			}
			if (incoming.get(9)) {
				struct.birthPlace = iprot.readString();
				struct.setBirthPlaceIsSet(true);
			}
			if (incoming.get(10)) {
				struct.height = iprot.readString();
				struct.setHeightIsSet(true);
			}
			if (incoming.get(11)) {
				struct.weight = iprot.readString();
				struct.setWeightIsSet(true);
			}
			if (incoming.get(12)) {
				struct.sign = iprot.readString();
				struct.setSignIsSet(true);
			}
			if (incoming.get(13)) {
				struct.country = iprot.readString();
				struct.setCountryIsSet(true);
			}
			if (incoming.get(14)) {
				struct.province = iprot.readString();
				struct.setProvinceIsSet(true);
			}
			if (incoming.get(15)) {
				struct.city = iprot.readString();
				struct.setCityIsSet(true);
			}
			if (incoming.get(16)) {
				struct.district = iprot.readString();
				struct.setDistrictIsSet(true);
			}
			if (incoming.get(17)) {
				struct.address = iprot.readString();
				struct.setAddressIsSet(true);
			}
			if (incoming.get(18)) {
				struct.vipName = iprot.readString();
				struct.setVipNameIsSet(true);
			}
			if (incoming.get(19)) {
				struct.vipPhone = iprot.readString();
				struct.setVipPhoneIsSet(true);
			}
			if (incoming.get(20)) {
				struct.realName = iprot.readString();
				struct.setRealNameIsSet(true);
			}
			if (incoming.get(21)) {
				struct.realIcon = iprot.readString();
				struct.setRealIconIsSet(true);
			}
			if (incoming.get(22)) {
				struct.cardId = iprot.readString();
				struct.setCardIdIsSet(true);
			}
			if (incoming.get(23)) {
				struct.passport = iprot.readString();
				struct.setPassportIsSet(true);
			}
			if (incoming.get(24)) {
				struct.driver = iprot.readString();
				struct.setDriverIsSet(true);
			}
			if (incoming.get(25)) {
				struct.bankNumber = iprot.readString();
				struct.setBankNumberIsSet(true);
			}
			if (incoming.get(26)) {
				struct.education = iprot.readString();
				struct.setEducationIsSet(true);
			}
			if (incoming.get(27)) {
				struct.graduate = iprot.readString();
				struct.setGraduateIsSet(true);
			}
			if (incoming.get(28)) {
				struct.major = iprot.readString();
				struct.setMajorIsSet(true);
			}
			if (incoming.get(29)) {
				struct.ethnic = iprot.readString();
				struct.setEthnicIsSet(true);
			}
			if (incoming.get(30)) {
				struct.religion = iprot.readString();
				struct.setReligionIsSet(true);
			}
			if (incoming.get(31)) {
				struct.party = iprot.readString();
				struct.setPartyIsSet(true);
			}
			if (incoming.get(32)) {
				struct.company = iprot.readString();
				struct.setCompanyIsSet(true);
			}
			if (incoming.get(33)) {
				struct.companyAddr = iprot.readString();
				struct.setCompanyAddrIsSet(true);
			}
			if (incoming.get(34)) {
				struct.companyID = iprot.readString();
				struct.setCompanyIDIsSet(true);
			}
			if (incoming.get(35)) {
				struct.companyHash = iprot.readString();
				struct.setCompanyHashIsSet(true);
			}
			if (incoming.get(36)) {
				struct.position = iprot.readString();
				struct.setPositionIsSet(true);
			}
			if (incoming.get(37)) {
				struct.wxIcon = iprot.readString();
				struct.setWxIconIsSet(true);
			}
			if (incoming.get(38)) {
				struct.wxNickname = iprot.readString();
				struct.setWxNicknameIsSet(true);
			}
			if (incoming.get(39)) {
				struct.wxCard = iprot.readString();
				struct.setWxCardIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
