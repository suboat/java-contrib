/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 未来流水实例 18个字段
 */
public class WalletFlowFuture implements org.apache.thrift.TBase<WalletFlowFuture, WalletFlowFuture._Fields>,
		java.io.Serializable, Cloneable, Comparable<WalletFlowFuture> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"WalletFlowFuture");

	private static final org.apache.thrift.protocol.TField ACCESSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"accession", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"applyTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField IS_FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isFinish", org.apache.thrift.protocol.TType.BOOL, (short) 5);

	private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"project", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField IS_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isIncome", org.apache.thrift.protocol.TType.BOOL, (short) 8);

	private static final org.apache.thrift.protocol.TField IS_FREEZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isFreeze", org.apache.thrift.protocol.TType.BOOL, (short) 9);

	private static final org.apache.thrift.protocol.TField TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"trigger", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField REL_ACC_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"relAcc", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField REL_UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"relUid", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"taskId", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amount", org.apache.thrift.protocol.TType.DOUBLE, (short) 14);

	private static final org.apache.thrift.protocol.TField TX_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"txFee", org.apache.thrift.protocol.TType.DOUBLE, (short) 15);

	private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comment", org.apache.thrift.protocol.TType.STRING, (short) 16);

	private static final org.apache.thrift.protocol.TField COMMENT_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"commentJson", org.apache.thrift.protocol.TType.STRING, (short) 17);

	private static final org.apache.thrift.protocol.TField TOTAL_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"totalInt", org.apache.thrift.protocol.TType.I64, (short) 18);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WalletFlowFutureStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WalletFlowFutureTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String accession; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String applyTime; // required

	public boolean isFinish; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String project; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public boolean isIncome; // required

	public boolean isFreeze; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String trigger; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String relAcc; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String relUid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String taskId; // required

	public double amount; // required

	public double txFee; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String comment; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String commentJson; // required

	public long totalInt; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		ACCESSION((short) 1, "accession"), UID((short) 2, "uid"), CREATE_TIME((short) 3, "createTime"), APPLY_TIME(
				(short) 4,
				"applyTime"), IS_FINISH((short) 5, "isFinish"), PROJECT((short) 6, "project"), CATEGORY((short) 7,
						"category"), IS_INCOME((short) 8, "isIncome"), IS_FREEZE((short) 9, "isFreeze"), TRIGGER(
								(short) 10, "trigger"), REL_ACC((short) 11, "relAcc"), REL_UID((short) 12,
										"relUid"), TASK_ID((short) 13, "taskId"), AMOUNT((short) 14, "amount"), TX_FEE(
												(short) 15, "txFee"), COMMENT((short) 16, "comment"), COMMENT_JSON(
														(short) 17, "commentJson"), TOTAL_INT((short) 18, "totalInt");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ACCESSION
				return ACCESSION;
			case 2: // UID
				return UID;
			case 3: // CREATE_TIME
				return CREATE_TIME;
			case 4: // APPLY_TIME
				return APPLY_TIME;
			case 5: // IS_FINISH
				return IS_FINISH;
			case 6: // PROJECT
				return PROJECT;
			case 7: // CATEGORY
				return CATEGORY;
			case 8: // IS_INCOME
				return IS_INCOME;
			case 9: // IS_FREEZE
				return IS_FREEZE;
			case 10: // TRIGGER
				return TRIGGER;
			case 11: // REL_ACC
				return REL_ACC;
			case 12: // REL_UID
				return REL_UID;
			case 13: // TASK_ID
				return TASK_ID;
			case 14: // AMOUNT
				return AMOUNT;
			case 15: // TX_FEE
				return TX_FEE;
			case 16: // COMMENT
				return COMMENT;
			case 17: // COMMENT_JSON
				return COMMENT_JSON;
			case 18: // TOTAL_INT
				return TOTAL_INT;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISFINISH_ISSET_ID = 0;

	private static final int __ISINCOME_ISSET_ID = 1;

	private static final int __ISFREEZE_ISSET_ID = 2;

	private static final int __AMOUNT_ISSET_ID = 3;

	private static final int __TXFEE_ISSET_ID = 4;

	private static final int __TOTALINT_ISSET_ID = 5;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ACCESSION,
				new org.apache.thrift.meta_data.FieldMetaData("accession",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("applyTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_FINISH,
				new org.apache.thrift.meta_data.FieldMetaData("isFinish",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.PROJECT,
				new org.apache.thrift.meta_data.FieldMetaData("project",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_INCOME,
				new org.apache.thrift.meta_data.FieldMetaData("isIncome",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_FREEZE,
				new org.apache.thrift.meta_data.FieldMetaData("isFreeze",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.TRIGGER,
				new org.apache.thrift.meta_data.FieldMetaData("trigger",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REL_ACC,
				new org.apache.thrift.meta_data.FieldMetaData("relAcc", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REL_UID,
				new org.apache.thrift.meta_data.FieldMetaData("relUid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TASK_ID,
				new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AMOUNT,
				new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.TX_FEE,
				new org.apache.thrift.meta_data.FieldMetaData("txFee", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("comment",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMMENT_JSON,
				new org.apache.thrift.meta_data.FieldMetaData("commentJson",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TOTAL_INT,
				new org.apache.thrift.meta_data.FieldMetaData("totalInt",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WalletFlowFuture.class, metaDataMap);
	}

	public WalletFlowFuture() {
	}

	public WalletFlowFuture(java.lang.String accession, java.lang.String uid, java.lang.String createTime,
			java.lang.String applyTime, boolean isFinish, java.lang.String project, java.lang.String category,
			boolean isIncome, boolean isFreeze, java.lang.String trigger, java.lang.String relAcc,
			java.lang.String relUid, java.lang.String taskId, double amount, double txFee, java.lang.String comment,
			java.lang.String commentJson, long totalInt) {
		this();
		this.accession = accession;
		this.uid = uid;
		this.createTime = createTime;
		this.applyTime = applyTime;
		this.isFinish = isFinish;
		setIsFinishIsSet(true);
		this.project = project;
		this.category = category;
		this.isIncome = isIncome;
		setIsIncomeIsSet(true);
		this.isFreeze = isFreeze;
		setIsFreezeIsSet(true);
		this.trigger = trigger;
		this.relAcc = relAcc;
		this.relUid = relUid;
		this.taskId = taskId;
		this.amount = amount;
		setAmountIsSet(true);
		this.txFee = txFee;
		setTxFeeIsSet(true);
		this.comment = comment;
		this.commentJson = commentJson;
		this.totalInt = totalInt;
		setTotalIntIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public WalletFlowFuture(WalletFlowFuture other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetAccession()) {
			this.accession = other.accession;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetApplyTime()) {
			this.applyTime = other.applyTime;
		}
		this.isFinish = other.isFinish;
		if (other.isSetProject()) {
			this.project = other.project;
		}
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		this.isIncome = other.isIncome;
		this.isFreeze = other.isFreeze;
		if (other.isSetTrigger()) {
			this.trigger = other.trigger;
		}
		if (other.isSetRelAcc()) {
			this.relAcc = other.relAcc;
		}
		if (other.isSetRelUid()) {
			this.relUid = other.relUid;
		}
		if (other.isSetTaskId()) {
			this.taskId = other.taskId;
		}
		this.amount = other.amount;
		this.txFee = other.txFee;
		if (other.isSetComment()) {
			this.comment = other.comment;
		}
		if (other.isSetCommentJson()) {
			this.commentJson = other.commentJson;
		}
		this.totalInt = other.totalInt;
	}

	public WalletFlowFuture deepCopy() {
		return new WalletFlowFuture(this);
	}

	@Override
	public void clear() {
		this.accession = null;
		this.uid = null;
		this.createTime = null;
		this.applyTime = null;
		setIsFinishIsSet(false);
		this.isFinish = false;
		this.project = null;
		this.category = null;
		setIsIncomeIsSet(false);
		this.isIncome = false;
		setIsFreezeIsSet(false);
		this.isFreeze = false;
		this.trigger = null;
		this.relAcc = null;
		this.relUid = null;
		this.taskId = null;
		setAmountIsSet(false);
		this.amount = 0.0;
		setTxFeeIsSet(false);
		this.txFee = 0.0;
		this.comment = null;
		this.commentJson = null;
		setTotalIntIsSet(false);
		this.totalInt = 0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAccession() {
		return this.accession;
	}

	public WalletFlowFuture setAccession(@org.apache.thrift.annotation.Nullable java.lang.String accession) {
		this.accession = accession;
		return this;
	}

	public void unsetAccession() {
		this.accession = null;
	}

	/**
	 * Returns true if field accession is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAccession() {
		return this.accession != null;
	}

	public void setAccessionIsSet(boolean value) {
		if (!value) {
			this.accession = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public WalletFlowFuture setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public WalletFlowFuture setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getApplyTime() {
		return this.applyTime;
	}

	public WalletFlowFuture setApplyTime(@org.apache.thrift.annotation.Nullable java.lang.String applyTime) {
		this.applyTime = applyTime;
		return this;
	}

	public void unsetApplyTime() {
		this.applyTime = null;
	}

	/**
	 * Returns true if field applyTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetApplyTime() {
		return this.applyTime != null;
	}

	public void setApplyTimeIsSet(boolean value) {
		if (!value) {
			this.applyTime = null;
		}
	}

	public boolean isIsFinish() {
		return this.isFinish;
	}

	public WalletFlowFuture setIsFinish(boolean isFinish) {
		this.isFinish = isFinish;
		setIsFinishIsSet(true);
		return this;
	}

	public void unsetIsFinish() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFINISH_ISSET_ID);
	}

	/**
	 * Returns true if field isFinish is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsFinish() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFINISH_ISSET_ID);
	}

	public void setIsFinishIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFINISH_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProject() {
		return this.project;
	}

	public WalletFlowFuture setProject(@org.apache.thrift.annotation.Nullable java.lang.String project) {
		this.project = project;
		return this;
	}

	public void unsetProject() {
		this.project = null;
	}

	/**
	 * Returns true if field project is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProject() {
		return this.project != null;
	}

	public void setProjectIsSet(boolean value) {
		if (!value) {
			this.project = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public WalletFlowFuture setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	public boolean isIsIncome() {
		return this.isIncome;
	}

	public WalletFlowFuture setIsIncome(boolean isIncome) {
		this.isIncome = isIncome;
		setIsIncomeIsSet(true);
		return this;
	}

	public void unsetIsIncome() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINCOME_ISSET_ID);
	}

	/**
	 * Returns true if field isIncome is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsIncome() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINCOME_ISSET_ID);
	}

	public void setIsIncomeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINCOME_ISSET_ID, value);
	}

	public boolean isIsFreeze() {
		return this.isFreeze;
	}

	public WalletFlowFuture setIsFreeze(boolean isFreeze) {
		this.isFreeze = isFreeze;
		setIsFreezeIsSet(true);
		return this;
	}

	public void unsetIsFreeze() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFREEZE_ISSET_ID);
	}

	/**
	 * Returns true if field isFreeze is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsFreeze() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFREEZE_ISSET_ID);
	}

	public void setIsFreezeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFREEZE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTrigger() {
		return this.trigger;
	}

	public WalletFlowFuture setTrigger(@org.apache.thrift.annotation.Nullable java.lang.String trigger) {
		this.trigger = trigger;
		return this;
	}

	public void unsetTrigger() {
		this.trigger = null;
	}

	/**
	 * Returns true if field trigger is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTrigger() {
		return this.trigger != null;
	}

	public void setTriggerIsSet(boolean value) {
		if (!value) {
			this.trigger = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRelAcc() {
		return this.relAcc;
	}

	public WalletFlowFuture setRelAcc(@org.apache.thrift.annotation.Nullable java.lang.String relAcc) {
		this.relAcc = relAcc;
		return this;
	}

	public void unsetRelAcc() {
		this.relAcc = null;
	}

	/**
	 * Returns true if field relAcc is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRelAcc() {
		return this.relAcc != null;
	}

	public void setRelAccIsSet(boolean value) {
		if (!value) {
			this.relAcc = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRelUid() {
		return this.relUid;
	}

	public WalletFlowFuture setRelUid(@org.apache.thrift.annotation.Nullable java.lang.String relUid) {
		this.relUid = relUid;
		return this;
	}

	public void unsetRelUid() {
		this.relUid = null;
	}

	/**
	 * Returns true if field relUid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRelUid() {
		return this.relUid != null;
	}

	public void setRelUidIsSet(boolean value) {
		if (!value) {
			this.relUid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTaskId() {
		return this.taskId;
	}

	public WalletFlowFuture setTaskId(@org.apache.thrift.annotation.Nullable java.lang.String taskId) {
		this.taskId = taskId;
		return this;
	}

	public void unsetTaskId() {
		this.taskId = null;
	}

	/**
	 * Returns true if field taskId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTaskId() {
		return this.taskId != null;
	}

	public void setTaskIdIsSet(boolean value) {
		if (!value) {
			this.taskId = null;
		}
	}

	public double getAmount() {
		return this.amount;
	}

	public WalletFlowFuture setAmount(double amount) {
		this.amount = amount;
		setAmountIsSet(true);
		return this;
	}

	public void unsetAmount() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field amount is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAmount() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	public void setAmountIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
	}

	public double getTxFee() {
		return this.txFee;
	}

	public WalletFlowFuture setTxFee(double txFee) {
		this.txFee = txFee;
		setTxFeeIsSet(true);
		return this;
	}

	public void unsetTxFee() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXFEE_ISSET_ID);
	}

	/**
	 * Returns true if field txFee is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTxFee() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXFEE_ISSET_ID);
	}

	public void setTxFeeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXFEE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getComment() {
		return this.comment;
	}

	public WalletFlowFuture setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
		this.comment = comment;
		return this;
	}

	public void unsetComment() {
		this.comment = null;
	}

	/**
	 * Returns true if field comment is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComment() {
		return this.comment != null;
	}

	public void setCommentIsSet(boolean value) {
		if (!value) {
			this.comment = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCommentJson() {
		return this.commentJson;
	}

	public WalletFlowFuture setCommentJson(@org.apache.thrift.annotation.Nullable java.lang.String commentJson) {
		this.commentJson = commentJson;
		return this;
	}

	public void unsetCommentJson() {
		this.commentJson = null;
	}

	/**
	 * Returns true if field commentJson is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCommentJson() {
		return this.commentJson != null;
	}

	public void setCommentJsonIsSet(boolean value) {
		if (!value) {
			this.commentJson = null;
		}
	}

	public long getTotalInt() {
		return this.totalInt;
	}

	public WalletFlowFuture setTotalInt(long totalInt) {
		this.totalInt = totalInt;
		setTotalIntIsSet(true);
		return this;
	}

	public void unsetTotalInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALINT_ISSET_ID);
	}

	/**
	 * Returns true if field totalInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTotalInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALINT_ISSET_ID);
	}

	public void setTotalIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALINT_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case ACCESSION:
			if (value == null) {
				unsetAccession();
			}
			else {
				setAccession((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case APPLY_TIME:
			if (value == null) {
				unsetApplyTime();
			}
			else {
				setApplyTime((java.lang.String) value);
			}
			break;

		case IS_FINISH:
			if (value == null) {
				unsetIsFinish();
			}
			else {
				setIsFinish((java.lang.Boolean) value);
			}
			break;

		case PROJECT:
			if (value == null) {
				unsetProject();
			}
			else {
				setProject((java.lang.String) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case IS_INCOME:
			if (value == null) {
				unsetIsIncome();
			}
			else {
				setIsIncome((java.lang.Boolean) value);
			}
			break;

		case IS_FREEZE:
			if (value == null) {
				unsetIsFreeze();
			}
			else {
				setIsFreeze((java.lang.Boolean) value);
			}
			break;

		case TRIGGER:
			if (value == null) {
				unsetTrigger();
			}
			else {
				setTrigger((java.lang.String) value);
			}
			break;

		case REL_ACC:
			if (value == null) {
				unsetRelAcc();
			}
			else {
				setRelAcc((java.lang.String) value);
			}
			break;

		case REL_UID:
			if (value == null) {
				unsetRelUid();
			}
			else {
				setRelUid((java.lang.String) value);
			}
			break;

		case TASK_ID:
			if (value == null) {
				unsetTaskId();
			}
			else {
				setTaskId((java.lang.String) value);
			}
			break;

		case AMOUNT:
			if (value == null) {
				unsetAmount();
			}
			else {
				setAmount((java.lang.Double) value);
			}
			break;

		case TX_FEE:
			if (value == null) {
				unsetTxFee();
			}
			else {
				setTxFee((java.lang.Double) value);
			}
			break;

		case COMMENT:
			if (value == null) {
				unsetComment();
			}
			else {
				setComment((java.lang.String) value);
			}
			break;

		case COMMENT_JSON:
			if (value == null) {
				unsetCommentJson();
			}
			else {
				setCommentJson((java.lang.String) value);
			}
			break;

		case TOTAL_INT:
			if (value == null) {
				unsetTotalInt();
			}
			else {
				setTotalInt((java.lang.Long) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ACCESSION:
			return getAccession();

		case UID:
			return getUid();

		case CREATE_TIME:
			return getCreateTime();

		case APPLY_TIME:
			return getApplyTime();

		case IS_FINISH:
			return isIsFinish();

		case PROJECT:
			return getProject();

		case CATEGORY:
			return getCategory();

		case IS_INCOME:
			return isIsIncome();

		case IS_FREEZE:
			return isIsFreeze();

		case TRIGGER:
			return getTrigger();

		case REL_ACC:
			return getRelAcc();

		case REL_UID:
			return getRelUid();

		case TASK_ID:
			return getTaskId();

		case AMOUNT:
			return getAmount();

		case TX_FEE:
			return getTxFee();

		case COMMENT:
			return getComment();

		case COMMENT_JSON:
			return getCommentJson();

		case TOTAL_INT:
			return getTotalInt();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ACCESSION:
			return isSetAccession();
		case UID:
			return isSetUid();
		case CREATE_TIME:
			return isSetCreateTime();
		case APPLY_TIME:
			return isSetApplyTime();
		case IS_FINISH:
			return isSetIsFinish();
		case PROJECT:
			return isSetProject();
		case CATEGORY:
			return isSetCategory();
		case IS_INCOME:
			return isSetIsIncome();
		case IS_FREEZE:
			return isSetIsFreeze();
		case TRIGGER:
			return isSetTrigger();
		case REL_ACC:
			return isSetRelAcc();
		case REL_UID:
			return isSetRelUid();
		case TASK_ID:
			return isSetTaskId();
		case AMOUNT:
			return isSetAmount();
		case TX_FEE:
			return isSetTxFee();
		case COMMENT:
			return isSetComment();
		case COMMENT_JSON:
			return isSetCommentJson();
		case TOTAL_INT:
			return isSetTotalInt();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof WalletFlowFuture)
			return this.equals((WalletFlowFuture) that);
		return false;
	}

	public boolean equals(WalletFlowFuture that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_accession = true && this.isSetAccession();
		boolean that_present_accession = true && that.isSetAccession();
		if (this_present_accession || that_present_accession) {
			if (!(this_present_accession && that_present_accession))
				return false;
			if (!this.accession.equals(that.accession))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_applyTime = true && this.isSetApplyTime();
		boolean that_present_applyTime = true && that.isSetApplyTime();
		if (this_present_applyTime || that_present_applyTime) {
			if (!(this_present_applyTime && that_present_applyTime))
				return false;
			if (!this.applyTime.equals(that.applyTime))
				return false;
		}

		boolean this_present_isFinish = true;
		boolean that_present_isFinish = true;
		if (this_present_isFinish || that_present_isFinish) {
			if (!(this_present_isFinish && that_present_isFinish))
				return false;
			if (this.isFinish != that.isFinish)
				return false;
		}

		boolean this_present_project = true && this.isSetProject();
		boolean that_present_project = true && that.isSetProject();
		if (this_present_project || that_present_project) {
			if (!(this_present_project && that_present_project))
				return false;
			if (!this.project.equals(that.project))
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_isIncome = true;
		boolean that_present_isIncome = true;
		if (this_present_isIncome || that_present_isIncome) {
			if (!(this_present_isIncome && that_present_isIncome))
				return false;
			if (this.isIncome != that.isIncome)
				return false;
		}

		boolean this_present_isFreeze = true;
		boolean that_present_isFreeze = true;
		if (this_present_isFreeze || that_present_isFreeze) {
			if (!(this_present_isFreeze && that_present_isFreeze))
				return false;
			if (this.isFreeze != that.isFreeze)
				return false;
		}

		boolean this_present_trigger = true && this.isSetTrigger();
		boolean that_present_trigger = true && that.isSetTrigger();
		if (this_present_trigger || that_present_trigger) {
			if (!(this_present_trigger && that_present_trigger))
				return false;
			if (!this.trigger.equals(that.trigger))
				return false;
		}

		boolean this_present_relAcc = true && this.isSetRelAcc();
		boolean that_present_relAcc = true && that.isSetRelAcc();
		if (this_present_relAcc || that_present_relAcc) {
			if (!(this_present_relAcc && that_present_relAcc))
				return false;
			if (!this.relAcc.equals(that.relAcc))
				return false;
		}

		boolean this_present_relUid = true && this.isSetRelUid();
		boolean that_present_relUid = true && that.isSetRelUid();
		if (this_present_relUid || that_present_relUid) {
			if (!(this_present_relUid && that_present_relUid))
				return false;
			if (!this.relUid.equals(that.relUid))
				return false;
		}

		boolean this_present_taskId = true && this.isSetTaskId();
		boolean that_present_taskId = true && that.isSetTaskId();
		if (this_present_taskId || that_present_taskId) {
			if (!(this_present_taskId && that_present_taskId))
				return false;
			if (!this.taskId.equals(that.taskId))
				return false;
		}

		boolean this_present_amount = true;
		boolean that_present_amount = true;
		if (this_present_amount || that_present_amount) {
			if (!(this_present_amount && that_present_amount))
				return false;
			if (this.amount != that.amount)
				return false;
		}

		boolean this_present_txFee = true;
		boolean that_present_txFee = true;
		if (this_present_txFee || that_present_txFee) {
			if (!(this_present_txFee && that_present_txFee))
				return false;
			if (this.txFee != that.txFee)
				return false;
		}

		boolean this_present_comment = true && this.isSetComment();
		boolean that_present_comment = true && that.isSetComment();
		if (this_present_comment || that_present_comment) {
			if (!(this_present_comment && that_present_comment))
				return false;
			if (!this.comment.equals(that.comment))
				return false;
		}

		boolean this_present_commentJson = true && this.isSetCommentJson();
		boolean that_present_commentJson = true && that.isSetCommentJson();
		if (this_present_commentJson || that_present_commentJson) {
			if (!(this_present_commentJson && that_present_commentJson))
				return false;
			if (!this.commentJson.equals(that.commentJson))
				return false;
		}

		boolean this_present_totalInt = true;
		boolean that_present_totalInt = true;
		if (this_present_totalInt || that_present_totalInt) {
			if (!(this_present_totalInt && that_present_totalInt))
				return false;
			if (this.totalInt != that.totalInt)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetAccession()) ? 131071 : 524287);
		if (isSetAccession())
			hashCode = hashCode * 8191 + accession.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetApplyTime()) ? 131071 : 524287);
		if (isSetApplyTime())
			hashCode = hashCode * 8191 + applyTime.hashCode();

		hashCode = hashCode * 8191 + ((isFinish) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetProject()) ? 131071 : 524287);
		if (isSetProject())
			hashCode = hashCode * 8191 + project.hashCode();

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + ((isIncome) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isFreeze) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetTrigger()) ? 131071 : 524287);
		if (isSetTrigger())
			hashCode = hashCode * 8191 + trigger.hashCode();

		hashCode = hashCode * 8191 + ((isSetRelAcc()) ? 131071 : 524287);
		if (isSetRelAcc())
			hashCode = hashCode * 8191 + relAcc.hashCode();

		hashCode = hashCode * 8191 + ((isSetRelUid()) ? 131071 : 524287);
		if (isSetRelUid())
			hashCode = hashCode * 8191 + relUid.hashCode();

		hashCode = hashCode * 8191 + ((isSetTaskId()) ? 131071 : 524287);
		if (isSetTaskId())
			hashCode = hashCode * 8191 + taskId.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txFee);

		hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
		if (isSetComment())
			hashCode = hashCode * 8191 + comment.hashCode();

		hashCode = hashCode * 8191 + ((isSetCommentJson()) ? 131071 : 524287);
		if (isSetCommentJson())
			hashCode = hashCode * 8191 + commentJson.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalInt);

		return hashCode;
	}

	@Override
	public int compareTo(WalletFlowFuture other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetAccession()).compareTo(other.isSetAccession());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAccession()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accession, other.accession);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetApplyTime()).compareTo(other.isSetApplyTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApplyTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTime, other.applyTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsFinish()).compareTo(other.isSetIsFinish());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsFinish()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFinish, other.isFinish);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProject()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsIncome()).compareTo(other.isSetIsIncome());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsIncome()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isIncome, other.isIncome);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsFreeze()).compareTo(other.isSetIsFreeze());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsFreeze()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFreeze, other.isFreeze);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTrigger()).compareTo(other.isSetTrigger());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTrigger()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trigger, other.trigger);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRelAcc()).compareTo(other.isSetRelAcc());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRelAcc()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relAcc, other.relAcc);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRelUid()).compareTo(other.isSetRelUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRelUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relUid, other.relUid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTaskId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTxFee()).compareTo(other.isSetTxFee());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTxFee()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txFee, other.txFee);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCommentJson()).compareTo(other.isSetCommentJson());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCommentJson()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentJson, other.commentJson);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTotalInt()).compareTo(other.isSetTotalInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTotalInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalInt, other.totalInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("WalletFlowFuture(");
		boolean first = true;

		sb.append("accession:");
		if (this.accession == null) {
			sb.append("null");
		}
		else {
			sb.append(this.accession);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("applyTime:");
		if (this.applyTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.applyTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isFinish:");
		sb.append(this.isFinish);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("project:");
		if (this.project == null) {
			sb.append("null");
		}
		else {
			sb.append(this.project);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isIncome:");
		sb.append(this.isIncome);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isFreeze:");
		sb.append(this.isFreeze);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("trigger:");
		if (this.trigger == null) {
			sb.append("null");
		}
		else {
			sb.append(this.trigger);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("relAcc:");
		if (this.relAcc == null) {
			sb.append("null");
		}
		else {
			sb.append(this.relAcc);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("relUid:");
		if (this.relUid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.relUid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("taskId:");
		if (this.taskId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.taskId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amount:");
		sb.append(this.amount);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("txFee:");
		sb.append(this.txFee);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("comment:");
		if (this.comment == null) {
			sb.append("null");
		}
		else {
			sb.append(this.comment);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("commentJson:");
		if (this.commentJson == null) {
			sb.append("null");
		}
		else {
			sb.append(this.commentJson);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("totalInt:");
		sb.append(this.totalInt);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class WalletFlowFutureStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletFlowFutureStandardScheme getScheme() {
			return new WalletFlowFutureStandardScheme();
		}

	}

	private static class WalletFlowFutureStandardScheme
			extends org.apache.thrift.scheme.StandardScheme<WalletFlowFuture> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, WalletFlowFuture struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ACCESSION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.accession = iprot.readString();
						struct.setAccessionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // APPLY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.applyTime = iprot.readString();
						struct.setApplyTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // IS_FINISH
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isFinish = iprot.readBool();
						struct.setIsFinishIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // PROJECT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.project = iprot.readString();
						struct.setProjectIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // IS_INCOME
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isIncome = iprot.readBool();
						struct.setIsIncomeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_FREEZE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isFreeze = iprot.readBool();
						struct.setIsFreezeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // TRIGGER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.trigger = iprot.readString();
						struct.setTriggerIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // REL_ACC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.relAcc = iprot.readString();
						struct.setRelAccIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // REL_UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.relUid = iprot.readString();
						struct.setRelUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // TASK_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.taskId = iprot.readString();
						struct.setTaskIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // AMOUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amount = iprot.readDouble();
						struct.setAmountIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // TX_FEE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.txFee = iprot.readDouble();
						struct.setTxFeeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.comment = iprot.readString();
						struct.setCommentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // COMMENT_JSON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.commentJson = iprot.readString();
						struct.setCommentJsonIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // TOTAL_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.totalInt = iprot.readI64();
						struct.setTotalIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, WalletFlowFuture struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.accession != null) {
				oprot.writeFieldBegin(ACCESSION_FIELD_DESC);
				oprot.writeString(struct.accession);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.applyTime != null) {
				oprot.writeFieldBegin(APPLY_TIME_FIELD_DESC);
				oprot.writeString(struct.applyTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_FINISH_FIELD_DESC);
			oprot.writeBool(struct.isFinish);
			oprot.writeFieldEnd();
			if (struct.project != null) {
				oprot.writeFieldBegin(PROJECT_FIELD_DESC);
				oprot.writeString(struct.project);
				oprot.writeFieldEnd();
			}
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_INCOME_FIELD_DESC);
			oprot.writeBool(struct.isIncome);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_FREEZE_FIELD_DESC);
			oprot.writeBool(struct.isFreeze);
			oprot.writeFieldEnd();
			if (struct.trigger != null) {
				oprot.writeFieldBegin(TRIGGER_FIELD_DESC);
				oprot.writeString(struct.trigger);
				oprot.writeFieldEnd();
			}
			if (struct.relAcc != null) {
				oprot.writeFieldBegin(REL_ACC_FIELD_DESC);
				oprot.writeString(struct.relAcc);
				oprot.writeFieldEnd();
			}
			if (struct.relUid != null) {
				oprot.writeFieldBegin(REL_UID_FIELD_DESC);
				oprot.writeString(struct.relUid);
				oprot.writeFieldEnd();
			}
			if (struct.taskId != null) {
				oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
				oprot.writeString(struct.taskId);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
			oprot.writeDouble(struct.amount);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(TX_FEE_FIELD_DESC);
			oprot.writeDouble(struct.txFee);
			oprot.writeFieldEnd();
			if (struct.comment != null) {
				oprot.writeFieldBegin(COMMENT_FIELD_DESC);
				oprot.writeString(struct.comment);
				oprot.writeFieldEnd();
			}
			if (struct.commentJson != null) {
				oprot.writeFieldBegin(COMMENT_JSON_FIELD_DESC);
				oprot.writeString(struct.commentJson);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(TOTAL_INT_FIELD_DESC);
			oprot.writeI64(struct.totalInt);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class WalletFlowFutureTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletFlowFutureTupleScheme getScheme() {
			return new WalletFlowFutureTupleScheme();
		}

	}

	private static class WalletFlowFutureTupleScheme extends org.apache.thrift.scheme.TupleScheme<WalletFlowFuture> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, WalletFlowFuture struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetAccession()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(2);
			}
			if (struct.isSetApplyTime()) {
				optionals.set(3);
			}
			if (struct.isSetIsFinish()) {
				optionals.set(4);
			}
			if (struct.isSetProject()) {
				optionals.set(5);
			}
			if (struct.isSetCategory()) {
				optionals.set(6);
			}
			if (struct.isSetIsIncome()) {
				optionals.set(7);
			}
			if (struct.isSetIsFreeze()) {
				optionals.set(8);
			}
			if (struct.isSetTrigger()) {
				optionals.set(9);
			}
			if (struct.isSetRelAcc()) {
				optionals.set(10);
			}
			if (struct.isSetRelUid()) {
				optionals.set(11);
			}
			if (struct.isSetTaskId()) {
				optionals.set(12);
			}
			if (struct.isSetAmount()) {
				optionals.set(13);
			}
			if (struct.isSetTxFee()) {
				optionals.set(14);
			}
			if (struct.isSetComment()) {
				optionals.set(15);
			}
			if (struct.isSetCommentJson()) {
				optionals.set(16);
			}
			if (struct.isSetTotalInt()) {
				optionals.set(17);
			}
			oprot.writeBitSet(optionals, 18);
			if (struct.isSetAccession()) {
				oprot.writeString(struct.accession);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetApplyTime()) {
				oprot.writeString(struct.applyTime);
			}
			if (struct.isSetIsFinish()) {
				oprot.writeBool(struct.isFinish);
			}
			if (struct.isSetProject()) {
				oprot.writeString(struct.project);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetIsIncome()) {
				oprot.writeBool(struct.isIncome);
			}
			if (struct.isSetIsFreeze()) {
				oprot.writeBool(struct.isFreeze);
			}
			if (struct.isSetTrigger()) {
				oprot.writeString(struct.trigger);
			}
			if (struct.isSetRelAcc()) {
				oprot.writeString(struct.relAcc);
			}
			if (struct.isSetRelUid()) {
				oprot.writeString(struct.relUid);
			}
			if (struct.isSetTaskId()) {
				oprot.writeString(struct.taskId);
			}
			if (struct.isSetAmount()) {
				oprot.writeDouble(struct.amount);
			}
			if (struct.isSetTxFee()) {
				oprot.writeDouble(struct.txFee);
			}
			if (struct.isSetComment()) {
				oprot.writeString(struct.comment);
			}
			if (struct.isSetCommentJson()) {
				oprot.writeString(struct.commentJson);
			}
			if (struct.isSetTotalInt()) {
				oprot.writeI64(struct.totalInt);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, WalletFlowFuture struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(18);
			if (incoming.get(0)) {
				struct.accession = iprot.readString();
				struct.setAccessionIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.applyTime = iprot.readString();
				struct.setApplyTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.isFinish = iprot.readBool();
				struct.setIsFinishIsSet(true);
			}
			if (incoming.get(5)) {
				struct.project = iprot.readString();
				struct.setProjectIsSet(true);
			}
			if (incoming.get(6)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(7)) {
				struct.isIncome = iprot.readBool();
				struct.setIsIncomeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isFreeze = iprot.readBool();
				struct.setIsFreezeIsSet(true);
			}
			if (incoming.get(9)) {
				struct.trigger = iprot.readString();
				struct.setTriggerIsSet(true);
			}
			if (incoming.get(10)) {
				struct.relAcc = iprot.readString();
				struct.setRelAccIsSet(true);
			}
			if (incoming.get(11)) {
				struct.relUid = iprot.readString();
				struct.setRelUidIsSet(true);
			}
			if (incoming.get(12)) {
				struct.taskId = iprot.readString();
				struct.setTaskIdIsSet(true);
			}
			if (incoming.get(13)) {
				struct.amount = iprot.readDouble();
				struct.setAmountIsSet(true);
			}
			if (incoming.get(14)) {
				struct.txFee = iprot.readDouble();
				struct.setTxFeeIsSet(true);
			}
			if (incoming.get(15)) {
				struct.comment = iprot.readString();
				struct.setCommentIsSet(true);
			}
			if (incoming.get(16)) {
				struct.commentJson = iprot.readString();
				struct.setCommentJsonIsSet(true);
			}
			if (incoming.get(17)) {
				struct.totalInt = iprot.readI64();
				struct.setTotalIntIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
