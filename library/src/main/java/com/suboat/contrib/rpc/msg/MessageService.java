/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.msg;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class MessageService {

	public interface Iface extends com.suboat.contrib.rpc.base.BaseService.Iface {

		/**
		 *
		 * -----get接口------ getRoom 拉取一个聊天室/群 getContactClass 拉取一个通讯录分组
		 *
		 * -----业务接口------ ensureUser 创建一个用户 createAndSend 发送一条消息 addContact 添加通讯录(双方)
		 * delContact 删除通讯录(双方) setContactAlias 修改通讯录别名 emptyContactClass 清空某用户的所有通讯录分类,
		 * 返回清除的记录数目.clsName:清空该分组下的所有分组 addContactClass 新建联系人分组(重复调用不报错).clsName:组名key
		 * clsParent:父级组名 priority:排序优先级 delContactClass 删除联系人分组.clsName:组名key,前提是分组下已没有成员
		 * setContactClass 修改通讯录分组.clsName:已存在的组名key clsParent:父级组名 priority:排序优先级
		 * setContactClassAlias 修改通讯录分组的别名 joinContactClass 将某条通讯录记录设置到分组,
		 * className传空字符串就表明是设置到"未分组" addRecent 添加最近聊天(双方) delRecent 删除最近聊天(双方)
		 * prependRecent 将某对象的最近聊天置顶. tryBoth:true 如果可以,将对方的最近聊天也置顶 addGroup 新建群聊, 返回聊天室
		 * addGroupMember 向群添加新成员 delGroupMember 移除群中的成员 getUser 取用户信息 getUserList 取用户信息列表
		 * getUserBot 取用户信息 getUserBotList 取用户信息列表 getOrganize 取组织信息 getOrganizeList
		 * 取组织信息列表 getOrganizeRel 取组织关系信息 getOrganizeRelList 取组织关系信息列表 setUserBot 设置机器人代理
		 * @param uid
		 */
		public User getUser(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUser getUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public UserBot getUserBot(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultUserBot getUserBotList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Organize getOrganize(java.lang.String oid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultOrganize getOrganizeList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public OrganizeRel getOrganizeRel(java.lang.String oid, java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultOrganizeRel getOrganizeRelList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Room getRoom(java.lang.String roomId)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Message getMessage(ArgRefMessage form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultMessage getMessageList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public User ensureUser(ArgUser form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ContactClass getContactClass(java.lang.String uid, java.lang.String clsName)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ResultSend createAndSend(ArgMessage msg)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Contact addContact(java.lang.String uid, java.lang.String tid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Contact delContact(java.lang.String uid, java.lang.String tid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Contact setContactAlias(java.lang.String uid, java.lang.String tid, java.lang.String nameAlias)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public int emptyContactClass(java.lang.String uid, java.lang.String clsName)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ContactClass addContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public int delContactClass(java.lang.String uid, java.lang.String clsName)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ContactClass setContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public ContactClass setContactClassAlias(java.lang.String uid, java.lang.String clsName,
				java.lang.String clsAlias) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Contact joinContactClass(java.lang.String uid, java.lang.String tid, java.lang.String clsName)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Recent addRecent(java.lang.String uid, java.lang.String tid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Recent delRecent(java.lang.String uid, java.lang.String tid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Recent prependRecent(java.lang.String uid, java.lang.String tid, boolean tryBoth)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Room addGroup(ArgGroupNew form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Room addGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public Room delGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public User setUser(ArgUser form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

		public UserBot setUserBot(ArgUserBot form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException;

	}

	public interface AsyncIface extends com.suboat.contrib.rpc.base.BaseService.AsyncIface {

		public void getUser(java.lang.String uid, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserBot(java.lang.String uid, org.apache.thrift.async.AsyncMethodCallback<UserBot> resultHandler)
				throws org.apache.thrift.TException;

		public void getUserBotList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserBot> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrganize(java.lang.String oid,
				org.apache.thrift.async.AsyncMethodCallback<Organize> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrganizeList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrganize> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrganizeRel(java.lang.String oid, java.lang.String uid,
				org.apache.thrift.async.AsyncMethodCallback<OrganizeRel> resultHandler)
				throws org.apache.thrift.TException;

		public void getOrganizeRelList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrganizeRel> resultHandler)
				throws org.apache.thrift.TException;

		public void getRoom(java.lang.String roomId, org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler)
				throws org.apache.thrift.TException;

		public void getMessage(ArgRefMessage form, org.apache.thrift.async.AsyncMethodCallback<Message> resultHandler)
				throws org.apache.thrift.TException;

		public void getMessageList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler)
				throws org.apache.thrift.TException;

		public void ensureUser(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException;

		public void getContactClass(java.lang.String uid, java.lang.String clsName,
				org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
				throws org.apache.thrift.TException;

		public void createAndSend(ArgMessage msg, org.apache.thrift.async.AsyncMethodCallback<ResultSend> resultHandler)
				throws org.apache.thrift.TException;

		public void addContact(java.lang.String uid, java.lang.String tid,
				org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler) throws org.apache.thrift.TException;

		public void delContact(java.lang.String uid, java.lang.String tid,
				org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler) throws org.apache.thrift.TException;

		public void setContactAlias(java.lang.String uid, java.lang.String tid, java.lang.String nameAlias,
				org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler) throws org.apache.thrift.TException;

		public void emptyContactClass(java.lang.String uid, java.lang.String clsName,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
				throws org.apache.thrift.TException;

		public void addContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority, org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
				throws org.apache.thrift.TException;

		public void delContactClass(java.lang.String uid, java.lang.String clsName,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
				throws org.apache.thrift.TException;

		public void setContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority, org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
				throws org.apache.thrift.TException;

		public void setContactClassAlias(java.lang.String uid, java.lang.String clsName, java.lang.String clsAlias,
				org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
				throws org.apache.thrift.TException;

		public void joinContactClass(java.lang.String uid, java.lang.String tid, java.lang.String clsName,
				org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler) throws org.apache.thrift.TException;

		public void addRecent(java.lang.String uid, java.lang.String tid,
				org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler) throws org.apache.thrift.TException;

		public void delRecent(java.lang.String uid, java.lang.String tid,
				org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler) throws org.apache.thrift.TException;

		public void prependRecent(java.lang.String uid, java.lang.String tid, boolean tryBoth,
				org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler) throws org.apache.thrift.TException;

		public void addGroup(ArgGroupNew form, org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler)
				throws org.apache.thrift.TException;

		public void addGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList,
				org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler) throws org.apache.thrift.TException;

		public void delGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList,
				org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler) throws org.apache.thrift.TException;

		public void setUser(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException;

		public void setUserBot(ArgUserBot form, org.apache.thrift.async.AsyncMethodCallback<UserBot> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends com.suboat.contrib.rpc.base.BaseService.Client implements Iface {

		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}

		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public User getUser(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUser(uid);
			return recv_getUser();
		}

		public void send_getUser(java.lang.String uid) throws org.apache.thrift.TException {
			getUser_args args = new getUser_args();
			args.setUid(uid);
			sendBase("getUser", args);
		}

		public User recv_getUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUser_result result = new getUser_result();
			receiveBase(result, "getUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUser failed: unknown result");
		}

		public ResultUser getUserList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserList(query);
			return recv_getUserList();
		}

		public void send_getUserList(com.suboat.contrib.rpc.base.ArgQuery query) throws org.apache.thrift.TException {
			getUserList_args args = new getUserList_args();
			args.setQuery(query);
			sendBase("getUserList", args);
		}

		public ResultUser recv_getUserList() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserList_result result = new getUserList_result();
			receiveBase(result, "getUserList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserList failed: unknown result");
		}

		public UserBot getUserBot(java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserBot(uid);
			return recv_getUserBot();
		}

		public void send_getUserBot(java.lang.String uid) throws org.apache.thrift.TException {
			getUserBot_args args = new getUserBot_args();
			args.setUid(uid);
			sendBase("getUserBot", args);
		}

		public UserBot recv_getUserBot() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserBot_result result = new getUserBot_result();
			receiveBase(result, "getUserBot");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserBot failed: unknown result");
		}

		public ResultUserBot getUserBotList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getUserBotList(query);
			return recv_getUserBotList();
		}

		public void send_getUserBotList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getUserBotList_args args = new getUserBotList_args();
			args.setQuery(query);
			sendBase("getUserBotList", args);
		}

		public ResultUserBot recv_getUserBotList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getUserBotList_result result = new getUserBotList_result();
			receiveBase(result, "getUserBotList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getUserBotList failed: unknown result");
		}

		public Organize getOrganize(java.lang.String oid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrganize(oid);
			return recv_getOrganize();
		}

		public void send_getOrganize(java.lang.String oid) throws org.apache.thrift.TException {
			getOrganize_args args = new getOrganize_args();
			args.setOid(oid);
			sendBase("getOrganize", args);
		}

		public Organize recv_getOrganize() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrganize_result result = new getOrganize_result();
			receiveBase(result, "getOrganize");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrganize failed: unknown result");
		}

		public ResultOrganize getOrganizeList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrganizeList(query);
			return recv_getOrganizeList();
		}

		public void send_getOrganizeList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getOrganizeList_args args = new getOrganizeList_args();
			args.setQuery(query);
			sendBase("getOrganizeList", args);
		}

		public ResultOrganize recv_getOrganizeList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrganizeList_result result = new getOrganizeList_result();
			receiveBase(result, "getOrganizeList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrganizeList failed: unknown result");
		}

		public OrganizeRel getOrganizeRel(java.lang.String oid, java.lang.String uid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrganizeRel(oid, uid);
			return recv_getOrganizeRel();
		}

		public void send_getOrganizeRel(java.lang.String oid, java.lang.String uid)
				throws org.apache.thrift.TException {
			getOrganizeRel_args args = new getOrganizeRel_args();
			args.setOid(oid);
			args.setUid(uid);
			sendBase("getOrganizeRel", args);
		}

		public OrganizeRel recv_getOrganizeRel()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrganizeRel_result result = new getOrganizeRel_result();
			receiveBase(result, "getOrganizeRel");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrganizeRel failed: unknown result");
		}

		public ResultOrganizeRel getOrganizeRelList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getOrganizeRelList(query);
			return recv_getOrganizeRelList();
		}

		public void send_getOrganizeRelList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getOrganizeRelList_args args = new getOrganizeRelList_args();
			args.setQuery(query);
			sendBase("getOrganizeRelList", args);
		}

		public ResultOrganizeRel recv_getOrganizeRelList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getOrganizeRelList_result result = new getOrganizeRelList_result();
			receiveBase(result, "getOrganizeRelList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getOrganizeRelList failed: unknown result");
		}

		public Room getRoom(java.lang.String roomId)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getRoom(roomId);
			return recv_getRoom();
		}

		public void send_getRoom(java.lang.String roomId) throws org.apache.thrift.TException {
			getRoom_args args = new getRoom_args();
			args.setRoomId(roomId);
			sendBase("getRoom", args);
		}

		public Room recv_getRoom() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getRoom_result result = new getRoom_result();
			receiveBase(result, "getRoom");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getRoom failed: unknown result");
		}

		public Message getMessage(ArgRefMessage form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getMessage(form);
			return recv_getMessage();
		}

		public void send_getMessage(ArgRefMessage form) throws org.apache.thrift.TException {
			getMessage_args args = new getMessage_args();
			args.setForm(form);
			sendBase("getMessage", args);
		}

		public Message recv_getMessage() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getMessage_result result = new getMessage_result();
			receiveBase(result, "getMessage");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getMessage failed: unknown result");
		}

		public ResultMessage getMessageList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getMessageList(query);
			return recv_getMessageList();
		}

		public void send_getMessageList(com.suboat.contrib.rpc.base.ArgQuery query)
				throws org.apache.thrift.TException {
			getMessageList_args args = new getMessageList_args();
			args.setQuery(query);
			sendBase("getMessageList", args);
		}

		public ResultMessage recv_getMessageList()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getMessageList_result result = new getMessageList_result();
			receiveBase(result, "getMessageList");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getMessageList failed: unknown result");
		}

		public User ensureUser(ArgUser form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_ensureUser(form);
			return recv_ensureUser();
		}

		public void send_ensureUser(ArgUser form) throws org.apache.thrift.TException {
			ensureUser_args args = new ensureUser_args();
			args.setForm(form);
			sendBase("ensureUser", args);
		}

		public User recv_ensureUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			ensureUser_result result = new ensureUser_result();
			receiveBase(result, "ensureUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"ensureUser failed: unknown result");
		}

		public ContactClass getContactClass(java.lang.String uid, java.lang.String clsName)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_getContactClass(uid, clsName);
			return recv_getContactClass();
		}

		public void send_getContactClass(java.lang.String uid, java.lang.String clsName)
				throws org.apache.thrift.TException {
			getContactClass_args args = new getContactClass_args();
			args.setUid(uid);
			args.setClsName(clsName);
			sendBase("getContactClass", args);
		}

		public ContactClass recv_getContactClass()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			getContactClass_result result = new getContactClass_result();
			receiveBase(result, "getContactClass");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"getContactClass failed: unknown result");
		}

		public ResultSend createAndSend(ArgMessage msg)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_createAndSend(msg);
			return recv_createAndSend();
		}

		public void send_createAndSend(ArgMessage msg) throws org.apache.thrift.TException {
			createAndSend_args args = new createAndSend_args();
			args.setMsg(msg);
			sendBase("createAndSend", args);
		}

		public ResultSend recv_createAndSend() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			createAndSend_result result = new createAndSend_result();
			receiveBase(result, "createAndSend");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"createAndSend failed: unknown result");
		}

		public Contact addContact(java.lang.String uid, java.lang.String tid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_addContact(uid, tid);
			return recv_addContact();
		}

		public void send_addContact(java.lang.String uid, java.lang.String tid) throws org.apache.thrift.TException {
			addContact_args args = new addContact_args();
			args.setUid(uid);
			args.setTid(tid);
			sendBase("addContact", args);
		}

		public Contact recv_addContact() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			addContact_result result = new addContact_result();
			receiveBase(result, "addContact");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"addContact failed: unknown result");
		}

		public Contact delContact(java.lang.String uid, java.lang.String tid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_delContact(uid, tid);
			return recv_delContact();
		}

		public void send_delContact(java.lang.String uid, java.lang.String tid) throws org.apache.thrift.TException {
			delContact_args args = new delContact_args();
			args.setUid(uid);
			args.setTid(tid);
			sendBase("delContact", args);
		}

		public Contact recv_delContact() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			delContact_result result = new delContact_result();
			receiveBase(result, "delContact");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"delContact failed: unknown result");
		}

		public Contact setContactAlias(java.lang.String uid, java.lang.String tid, java.lang.String nameAlias)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setContactAlias(uid, tid, nameAlias);
			return recv_setContactAlias();
		}

		public void send_setContactAlias(java.lang.String uid, java.lang.String tid, java.lang.String nameAlias)
				throws org.apache.thrift.TException {
			setContactAlias_args args = new setContactAlias_args();
			args.setUid(uid);
			args.setTid(tid);
			args.setNameAlias(nameAlias);
			sendBase("setContactAlias", args);
		}

		public Contact recv_setContactAlias() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setContactAlias_result result = new setContactAlias_result();
			receiveBase(result, "setContactAlias");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setContactAlias failed: unknown result");
		}

		public int emptyContactClass(java.lang.String uid, java.lang.String clsName)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_emptyContactClass(uid, clsName);
			return recv_emptyContactClass();
		}

		public void send_emptyContactClass(java.lang.String uid, java.lang.String clsName)
				throws org.apache.thrift.TException {
			emptyContactClass_args args = new emptyContactClass_args();
			args.setUid(uid);
			args.setClsName(clsName);
			sendBase("emptyContactClass", args);
		}

		public int recv_emptyContactClass() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			emptyContactClass_result result = new emptyContactClass_result();
			receiveBase(result, "emptyContactClass");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"emptyContactClass failed: unknown result");
		}

		public ContactClass addContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_addContactClass(uid, clsName, clsParent, priority);
			return recv_addContactClass();
		}

		public void send_addContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority) throws org.apache.thrift.TException {
			addContactClass_args args = new addContactClass_args();
			args.setUid(uid);
			args.setClsName(clsName);
			args.setClsParent(clsParent);
			args.setPriority(priority);
			sendBase("addContactClass", args);
		}

		public ContactClass recv_addContactClass()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			addContactClass_result result = new addContactClass_result();
			receiveBase(result, "addContactClass");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"addContactClass failed: unknown result");
		}

		public int delContactClass(java.lang.String uid, java.lang.String clsName)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_delContactClass(uid, clsName);
			return recv_delContactClass();
		}

		public void send_delContactClass(java.lang.String uid, java.lang.String clsName)
				throws org.apache.thrift.TException {
			delContactClass_args args = new delContactClass_args();
			args.setUid(uid);
			args.setClsName(clsName);
			sendBase("delContactClass", args);
		}

		public int recv_delContactClass() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			delContactClass_result result = new delContactClass_result();
			receiveBase(result, "delContactClass");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"delContactClass failed: unknown result");
		}

		public ContactClass setContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setContactClass(uid, clsName, clsParent, priority);
			return recv_setContactClass();
		}

		public void send_setContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority) throws org.apache.thrift.TException {
			setContactClass_args args = new setContactClass_args();
			args.setUid(uid);
			args.setClsName(clsName);
			args.setClsParent(clsParent);
			args.setPriority(priority);
			sendBase("setContactClass", args);
		}

		public ContactClass recv_setContactClass()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setContactClass_result result = new setContactClass_result();
			receiveBase(result, "setContactClass");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setContactClass failed: unknown result");
		}

		public ContactClass setContactClassAlias(java.lang.String uid, java.lang.String clsName,
				java.lang.String clsAlias) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setContactClassAlias(uid, clsName, clsAlias);
			return recv_setContactClassAlias();
		}

		public void send_setContactClassAlias(java.lang.String uid, java.lang.String clsName, java.lang.String clsAlias)
				throws org.apache.thrift.TException {
			setContactClassAlias_args args = new setContactClassAlias_args();
			args.setUid(uid);
			args.setClsName(clsName);
			args.setClsAlias(clsAlias);
			sendBase("setContactClassAlias", args);
		}

		public ContactClass recv_setContactClassAlias()
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setContactClassAlias_result result = new setContactClassAlias_result();
			receiveBase(result, "setContactClassAlias");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setContactClassAlias failed: unknown result");
		}

		public Contact joinContactClass(java.lang.String uid, java.lang.String tid, java.lang.String clsName)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_joinContactClass(uid, tid, clsName);
			return recv_joinContactClass();
		}

		public void send_joinContactClass(java.lang.String uid, java.lang.String tid, java.lang.String clsName)
				throws org.apache.thrift.TException {
			joinContactClass_args args = new joinContactClass_args();
			args.setUid(uid);
			args.setTid(tid);
			args.setClsName(clsName);
			sendBase("joinContactClass", args);
		}

		public Contact recv_joinContactClass() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			joinContactClass_result result = new joinContactClass_result();
			receiveBase(result, "joinContactClass");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"joinContactClass failed: unknown result");
		}

		public Recent addRecent(java.lang.String uid, java.lang.String tid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_addRecent(uid, tid);
			return recv_addRecent();
		}

		public void send_addRecent(java.lang.String uid, java.lang.String tid) throws org.apache.thrift.TException {
			addRecent_args args = new addRecent_args();
			args.setUid(uid);
			args.setTid(tid);
			sendBase("addRecent", args);
		}

		public Recent recv_addRecent() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			addRecent_result result = new addRecent_result();
			receiveBase(result, "addRecent");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"addRecent failed: unknown result");
		}

		public Recent delRecent(java.lang.String uid, java.lang.String tid)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_delRecent(uid, tid);
			return recv_delRecent();
		}

		public void send_delRecent(java.lang.String uid, java.lang.String tid) throws org.apache.thrift.TException {
			delRecent_args args = new delRecent_args();
			args.setUid(uid);
			args.setTid(tid);
			sendBase("delRecent", args);
		}

		public Recent recv_delRecent() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			delRecent_result result = new delRecent_result();
			receiveBase(result, "delRecent");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"delRecent failed: unknown result");
		}

		public Recent prependRecent(java.lang.String uid, java.lang.String tid, boolean tryBoth)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_prependRecent(uid, tid, tryBoth);
			return recv_prependRecent();
		}

		public void send_prependRecent(java.lang.String uid, java.lang.String tid, boolean tryBoth)
				throws org.apache.thrift.TException {
			prependRecent_args args = new prependRecent_args();
			args.setUid(uid);
			args.setTid(tid);
			args.setTryBoth(tryBoth);
			sendBase("prependRecent", args);
		}

		public Recent recv_prependRecent() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			prependRecent_result result = new prependRecent_result();
			receiveBase(result, "prependRecent");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"prependRecent failed: unknown result");
		}

		public Room addGroup(ArgGroupNew form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_addGroup(form);
			return recv_addGroup();
		}

		public void send_addGroup(ArgGroupNew form) throws org.apache.thrift.TException {
			addGroup_args args = new addGroup_args();
			args.setForm(form);
			sendBase("addGroup", args);
		}

		public Room recv_addGroup() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			addGroup_result result = new addGroup_result();
			receiveBase(result, "addGroup");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"addGroup failed: unknown result");
		}

		public Room addGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_addGroupMember(roomId, uidList);
			return recv_addGroupMember();
		}

		public void send_addGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList)
				throws org.apache.thrift.TException {
			addGroupMember_args args = new addGroupMember_args();
			args.setRoomId(roomId);
			args.setUidList(uidList);
			sendBase("addGroupMember", args);
		}

		public Room recv_addGroupMember() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			addGroupMember_result result = new addGroupMember_result();
			receiveBase(result, "addGroupMember");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"addGroupMember failed: unknown result");
		}

		public Room delGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_delGroupMember(roomId, uidList);
			return recv_delGroupMember();
		}

		public void send_delGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList)
				throws org.apache.thrift.TException {
			delGroupMember_args args = new delGroupMember_args();
			args.setRoomId(roomId);
			args.setUidList(uidList);
			sendBase("delGroupMember", args);
		}

		public Room recv_delGroupMember() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			delGroupMember_result result = new delGroupMember_result();
			receiveBase(result, "delGroupMember");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"delGroupMember failed: unknown result");
		}

		public User setUser(ArgUser form) throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setUser(form);
			return recv_setUser();
		}

		public void send_setUser(ArgUser form) throws org.apache.thrift.TException {
			setUser_args args = new setUser_args();
			args.setForm(form);
			sendBase("setUser", args);
		}

		public User recv_setUser() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setUser_result result = new setUser_result();
			receiveBase(result, "setUser");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setUser failed: unknown result");
		}

		public UserBot setUserBot(ArgUserBot form)
				throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			send_setUserBot(form);
			return recv_setUserBot();
		}

		public void send_setUserBot(ArgUserBot form) throws org.apache.thrift.TException {
			setUserBot_args args = new setUserBot_args();
			args.setForm(form);
			sendBase("setUserBot", args);
		}

		public UserBot recv_setUserBot() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
			setUserBot_result result = new setUserBot_result();
			receiveBase(result, "setUserBot");
			if (result.isSetSuccess()) {
				return result.success;
			}
			if (result.err != null) {
				throw result.err;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setUserBot failed: unknown result");
		}

	}

	public static class AsyncClient extends com.suboat.contrib.rpc.base.BaseService.AsyncClient implements AsyncIface {

		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

			private org.apache.thrift.async.TAsyncClientManager clientManager;

			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}

		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void getUser(java.lang.String uid, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUser_call method_call = new getUser_call(uid, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUser_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private java.lang.String uid;

			public getUser_call(java.lang.String uid, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUser_args args = new getUser_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUser();
			}

		}

		public void getUserList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserList_call method_call = new getUserList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultUser> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserList_args args = new getUserList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUser getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserList();
			}

		}

		public void getUserBot(java.lang.String uid, org.apache.thrift.async.AsyncMethodCallback<UserBot> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserBot_call method_call = new getUserBot_call(uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserBot_call extends org.apache.thrift.async.TAsyncMethodCall<UserBot> {

			private java.lang.String uid;

			public getUserBot_call(java.lang.String uid,
					org.apache.thrift.async.AsyncMethodCallback<UserBot> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserBot",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserBot_args args = new getUserBot_args();
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserBot getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserBot();
			}

		}

		public void getUserBotList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultUserBot> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getUserBotList_call method_call = new getUserBotList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getUserBotList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultUserBot> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getUserBotList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserBot> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserBotList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getUserBotList_args args = new getUserBotList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultUserBot getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getUserBotList();
			}

		}

		public void getOrganize(java.lang.String oid,
				org.apache.thrift.async.AsyncMethodCallback<Organize> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrganize_call method_call = new getOrganize_call(oid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrganize_call extends org.apache.thrift.async.TAsyncMethodCall<Organize> {

			private java.lang.String oid;

			public getOrganize_call(java.lang.String oid,
					org.apache.thrift.async.AsyncMethodCallback<Organize> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.oid = oid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrganize",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrganize_args args = new getOrganize_args();
				args.setOid(oid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Organize getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrganize();
			}

		}

		public void getOrganizeList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrganize> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrganizeList_call method_call = new getOrganizeList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrganizeList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultOrganize> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getOrganizeList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrganize> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrganizeList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrganizeList_args args = new getOrganizeList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultOrganize getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrganizeList();
			}

		}

		public void getOrganizeRel(java.lang.String oid, java.lang.String uid,
				org.apache.thrift.async.AsyncMethodCallback<OrganizeRel> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrganizeRel_call method_call = new getOrganizeRel_call(oid, uid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrganizeRel_call extends org.apache.thrift.async.TAsyncMethodCall<OrganizeRel> {

			private java.lang.String oid;

			private java.lang.String uid;

			public getOrganizeRel_call(java.lang.String oid, java.lang.String uid,
					org.apache.thrift.async.AsyncMethodCallback<OrganizeRel> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.oid = oid;
				this.uid = uid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrganizeRel",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrganizeRel_args args = new getOrganizeRel_args();
				args.setOid(oid);
				args.setUid(uid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public OrganizeRel getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrganizeRel();
			}

		}

		public void getOrganizeRelList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultOrganizeRel> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getOrganizeRelList_call method_call = new getOrganizeRelList_call(query, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getOrganizeRelList_call
				extends org.apache.thrift.async.TAsyncMethodCall<ResultOrganizeRel> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getOrganizeRelList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrganizeRel> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrganizeRelList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getOrganizeRelList_args args = new getOrganizeRelList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultOrganizeRel getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getOrganizeRelList();
			}

		}

		public void getRoom(java.lang.String roomId, org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getRoom_call method_call = new getRoom_call(roomId, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getRoom_call extends org.apache.thrift.async.TAsyncMethodCall<Room> {

			private java.lang.String roomId;

			public getRoom_call(java.lang.String roomId,
					org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.roomId = roomId;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoom",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getRoom_args args = new getRoom_args();
				args.setRoomId(roomId);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Room getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getRoom();
			}

		}

		public void getMessage(ArgRefMessage form, org.apache.thrift.async.AsyncMethodCallback<Message> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getMessage_call method_call = new getMessage_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getMessage_call extends org.apache.thrift.async.TAsyncMethodCall<Message> {

			private ArgRefMessage form;

			public getMessage_call(ArgRefMessage form,
					org.apache.thrift.async.AsyncMethodCallback<Message> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessage",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getMessage_args args = new getMessage_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Message getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getMessage();
			}

		}

		public void getMessageList(com.suboat.contrib.rpc.base.ArgQuery query,
				org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getMessageList_call method_call = new getMessageList_call(query, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getMessageList_call extends org.apache.thrift.async.TAsyncMethodCall<ResultMessage> {

			private com.suboat.contrib.rpc.base.ArgQuery query;

			public getMessageList_call(com.suboat.contrib.rpc.base.ArgQuery query,
					org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.query = query;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessageList",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getMessageList_args args = new getMessageList_args();
				args.setQuery(query);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultMessage getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getMessageList();
			}

		}

		public void ensureUser(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			ensureUser_call method_call = new ensureUser_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class ensureUser_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private ArgUser form;

			public ensureUser_call(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ensureUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				ensureUser_args args = new ensureUser_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_ensureUser();
			}

		}

		public void getContactClass(java.lang.String uid, java.lang.String clsName,
				org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			getContactClass_call method_call = new getContactClass_call(uid, clsName, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class getContactClass_call extends org.apache.thrift.async.TAsyncMethodCall<ContactClass> {

			private java.lang.String uid;

			private java.lang.String clsName;

			public getContactClass_call(java.lang.String uid, java.lang.String clsName,
					org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.clsName = clsName;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getContactClass",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				getContactClass_args args = new getContactClass_args();
				args.setUid(uid);
				args.setClsName(clsName);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ContactClass getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_getContactClass();
			}

		}

		public void createAndSend(ArgMessage msg, org.apache.thrift.async.AsyncMethodCallback<ResultSend> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			createAndSend_call method_call = new createAndSend_call(msg, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class createAndSend_call extends org.apache.thrift.async.TAsyncMethodCall<ResultSend> {

			private ArgMessage msg;

			public createAndSend_call(ArgMessage msg,
					org.apache.thrift.async.AsyncMethodCallback<ResultSend> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.msg = msg;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAndSend",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				createAndSend_args args = new createAndSend_args();
				args.setMsg(msg);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ResultSend getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_createAndSend();
			}

		}

		public void addContact(java.lang.String uid, java.lang.String tid,
				org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			addContact_call method_call = new addContact_call(uid, tid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class addContact_call extends org.apache.thrift.async.TAsyncMethodCall<Contact> {

			private java.lang.String uid;

			private java.lang.String tid;

			public addContact_call(java.lang.String uid, java.lang.String tid,
					org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.tid = tid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addContact",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				addContact_args args = new addContact_args();
				args.setUid(uid);
				args.setTid(tid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Contact getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_addContact();
			}

		}

		public void delContact(java.lang.String uid, java.lang.String tid,
				org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			delContact_call method_call = new delContact_call(uid, tid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class delContact_call extends org.apache.thrift.async.TAsyncMethodCall<Contact> {

			private java.lang.String uid;

			private java.lang.String tid;

			public delContact_call(java.lang.String uid, java.lang.String tid,
					org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.tid = tid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delContact",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				delContact_args args = new delContact_args();
				args.setUid(uid);
				args.setTid(tid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Contact getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_delContact();
			}

		}

		public void setContactAlias(java.lang.String uid, java.lang.String tid, java.lang.String nameAlias,
				org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setContactAlias_call method_call = new setContactAlias_call(uid, tid, nameAlias, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setContactAlias_call extends org.apache.thrift.async.TAsyncMethodCall<Contact> {

			private java.lang.String uid;

			private java.lang.String tid;

			private java.lang.String nameAlias;

			public setContactAlias_call(java.lang.String uid, java.lang.String tid, java.lang.String nameAlias,
					org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.tid = tid;
				this.nameAlias = nameAlias;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setContactAlias",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setContactAlias_args args = new setContactAlias_args();
				args.setUid(uid);
				args.setTid(tid);
				args.setNameAlias(nameAlias);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Contact getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setContactAlias();
			}

		}

		public void emptyContactClass(java.lang.String uid, java.lang.String clsName,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			emptyContactClass_call method_call = new emptyContactClass_call(uid, clsName, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class emptyContactClass_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {

			private java.lang.String uid;

			private java.lang.String clsName;

			public emptyContactClass_call(java.lang.String uid, java.lang.String clsName,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.clsName = clsName;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("emptyContactClass",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				emptyContactClass_args args = new emptyContactClass_args();
				args.setUid(uid);
				args.setClsName(clsName);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Integer getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_emptyContactClass();
			}

		}

		public void addContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority, org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			addContactClass_call method_call = new addContactClass_call(uid, clsName, clsParent, priority,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class addContactClass_call extends org.apache.thrift.async.TAsyncMethodCall<ContactClass> {

			private java.lang.String uid;

			private java.lang.String clsName;

			private java.lang.String clsParent;

			private int priority;

			public addContactClass_call(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
					int priority, org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.clsName = clsName;
				this.clsParent = clsParent;
				this.priority = priority;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addContactClass",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				addContactClass_args args = new addContactClass_args();
				args.setUid(uid);
				args.setClsName(clsName);
				args.setClsParent(clsParent);
				args.setPriority(priority);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ContactClass getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_addContactClass();
			}

		}

		public void delContactClass(java.lang.String uid, java.lang.String clsName,
				org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			delContactClass_call method_call = new delContactClass_call(uid, clsName, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class delContactClass_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {

			private java.lang.String uid;

			private java.lang.String clsName;

			public delContactClass_call(java.lang.String uid, java.lang.String clsName,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.clsName = clsName;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delContactClass",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				delContactClass_args args = new delContactClass_args();
				args.setUid(uid);
				args.setClsName(clsName);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public java.lang.Integer getResult()
					throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_delContactClass();
			}

		}

		public void setContactClass(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority, org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setContactClass_call method_call = new setContactClass_call(uid, clsName, clsParent, priority,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setContactClass_call extends org.apache.thrift.async.TAsyncMethodCall<ContactClass> {

			private java.lang.String uid;

			private java.lang.String clsName;

			private java.lang.String clsParent;

			private int priority;

			public setContactClass_call(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
					int priority, org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.clsName = clsName;
				this.clsParent = clsParent;
				this.priority = priority;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setContactClass",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setContactClass_args args = new setContactClass_args();
				args.setUid(uid);
				args.setClsName(clsName);
				args.setClsParent(clsParent);
				args.setPriority(priority);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ContactClass getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setContactClass();
			}

		}

		public void setContactClassAlias(java.lang.String uid, java.lang.String clsName, java.lang.String clsAlias,
				org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setContactClassAlias_call method_call = new setContactClassAlias_call(uid, clsName, clsAlias, resultHandler,
					this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setContactClassAlias_call extends org.apache.thrift.async.TAsyncMethodCall<ContactClass> {

			private java.lang.String uid;

			private java.lang.String clsName;

			private java.lang.String clsAlias;

			public setContactClassAlias_call(java.lang.String uid, java.lang.String clsName, java.lang.String clsAlias,
					org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.clsName = clsName;
				this.clsAlias = clsAlias;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setContactClassAlias",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setContactClassAlias_args args = new setContactClassAlias_args();
				args.setUid(uid);
				args.setClsName(clsName);
				args.setClsAlias(clsAlias);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public ContactClass getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setContactClassAlias();
			}

		}

		public void joinContactClass(java.lang.String uid, java.lang.String tid, java.lang.String clsName,
				org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			joinContactClass_call method_call = new joinContactClass_call(uid, tid, clsName, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class joinContactClass_call extends org.apache.thrift.async.TAsyncMethodCall<Contact> {

			private java.lang.String uid;

			private java.lang.String tid;

			private java.lang.String clsName;

			public joinContactClass_call(java.lang.String uid, java.lang.String tid, java.lang.String clsName,
					org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.tid = tid;
				this.clsName = clsName;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("joinContactClass",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				joinContactClass_args args = new joinContactClass_args();
				args.setUid(uid);
				args.setTid(tid);
				args.setClsName(clsName);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Contact getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_joinContactClass();
			}

		}

		public void addRecent(java.lang.String uid, java.lang.String tid,
				org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			addRecent_call method_call = new addRecent_call(uid, tid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class addRecent_call extends org.apache.thrift.async.TAsyncMethodCall<Recent> {

			private java.lang.String uid;

			private java.lang.String tid;

			public addRecent_call(java.lang.String uid, java.lang.String tid,
					org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.tid = tid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRecent",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				addRecent_args args = new addRecent_args();
				args.setUid(uid);
				args.setTid(tid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Recent getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_addRecent();
			}

		}

		public void delRecent(java.lang.String uid, java.lang.String tid,
				org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			delRecent_call method_call = new delRecent_call(uid, tid, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class delRecent_call extends org.apache.thrift.async.TAsyncMethodCall<Recent> {

			private java.lang.String uid;

			private java.lang.String tid;

			public delRecent_call(java.lang.String uid, java.lang.String tid,
					org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.tid = tid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delRecent",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				delRecent_args args = new delRecent_args();
				args.setUid(uid);
				args.setTid(tid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Recent getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_delRecent();
			}

		}

		public void prependRecent(java.lang.String uid, java.lang.String tid, boolean tryBoth,
				org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			prependRecent_call method_call = new prependRecent_call(uid, tid, tryBoth, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class prependRecent_call extends org.apache.thrift.async.TAsyncMethodCall<Recent> {

			private java.lang.String uid;

			private java.lang.String tid;

			private boolean tryBoth;

			public prependRecent_call(java.lang.String uid, java.lang.String tid, boolean tryBoth,
					org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.uid = uid;
				this.tid = tid;
				this.tryBoth = tryBoth;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prependRecent",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				prependRecent_args args = new prependRecent_args();
				args.setUid(uid);
				args.setTid(tid);
				args.setTryBoth(tryBoth);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Recent getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_prependRecent();
			}

		}

		public void addGroup(ArgGroupNew form, org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			addGroup_call method_call = new addGroup_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class addGroup_call extends org.apache.thrift.async.TAsyncMethodCall<Room> {

			private ArgGroupNew form;

			public addGroup_call(ArgGroupNew form, org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGroup",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				addGroup_args args = new addGroup_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Room getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_addGroup();
			}

		}

		public void addGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList,
				org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			addGroupMember_call method_call = new addGroupMember_call(roomId, uidList, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class addGroupMember_call extends org.apache.thrift.async.TAsyncMethodCall<Room> {

			private java.lang.String roomId;

			private java.util.List<java.lang.String> uidList;

			public addGroupMember_call(java.lang.String roomId, java.util.List<java.lang.String> uidList,
					org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.roomId = roomId;
				this.uidList = uidList;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGroupMember",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				addGroupMember_args args = new addGroupMember_args();
				args.setRoomId(roomId);
				args.setUidList(uidList);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Room getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_addGroupMember();
			}

		}

		public void delGroupMember(java.lang.String roomId, java.util.List<java.lang.String> uidList,
				org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			delGroupMember_call method_call = new delGroupMember_call(roomId, uidList, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class delGroupMember_call extends org.apache.thrift.async.TAsyncMethodCall<Room> {

			private java.lang.String roomId;

			private java.util.List<java.lang.String> uidList;

			public delGroupMember_call(java.lang.String roomId, java.util.List<java.lang.String> uidList,
					org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.roomId = roomId;
				this.uidList = uidList;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delGroupMember",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				delGroupMember_args args = new delGroupMember_args();
				args.setRoomId(roomId);
				args.setUidList(uidList);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Room getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_delGroupMember();
			}

		}

		public void setUser(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setUser_call method_call = new setUser_call(form, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setUser_call extends org.apache.thrift.async.TAsyncMethodCall<User> {

			private ArgUser form;

			public setUser_call(ArgUser form, org.apache.thrift.async.AsyncMethodCallback<User> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUser",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setUser_args args = new setUser_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public User getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setUser();
			}

		}

		public void setUserBot(ArgUserBot form, org.apache.thrift.async.AsyncMethodCallback<UserBot> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			setUserBot_call method_call = new setUserBot_call(form, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setUserBot_call extends org.apache.thrift.async.TAsyncMethodCall<UserBot> {

			private ArgUserBot form;

			public setUserBot_call(ArgUserBot form, org.apache.thrift.async.AsyncMethodCallback<UserBot> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.form = form;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setUserBot",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setUserBot_args args = new setUserBot_args();
				args.setForm(form);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public UserBot getResult() throws com.suboat.contrib.rpc.base.Error, org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setUserBot();
			}

		}

	}

	public static class Processor<I extends Iface> extends com.suboat.contrib.rpc.base.BaseService.Processor<I>
			implements org.apache.thrift.TProcessor {

		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("getUser", new getUser());
			processMap.put("getUserList", new getUserList());
			processMap.put("getUserBot", new getUserBot());
			processMap.put("getUserBotList", new getUserBotList());
			processMap.put("getOrganize", new getOrganize());
			processMap.put("getOrganizeList", new getOrganizeList());
			processMap.put("getOrganizeRel", new getOrganizeRel());
			processMap.put("getOrganizeRelList", new getOrganizeRelList());
			processMap.put("getRoom", new getRoom());
			processMap.put("getMessage", new getMessage());
			processMap.put("getMessageList", new getMessageList());
			processMap.put("ensureUser", new ensureUser());
			processMap.put("getContactClass", new getContactClass());
			processMap.put("createAndSend", new createAndSend());
			processMap.put("addContact", new addContact());
			processMap.put("delContact", new delContact());
			processMap.put("setContactAlias", new setContactAlias());
			processMap.put("emptyContactClass", new emptyContactClass());
			processMap.put("addContactClass", new addContactClass());
			processMap.put("delContactClass", new delContactClass());
			processMap.put("setContactClass", new setContactClass());
			processMap.put("setContactClassAlias", new setContactClassAlias());
			processMap.put("joinContactClass", new joinContactClass());
			processMap.put("addRecent", new addRecent());
			processMap.put("delRecent", new delRecent());
			processMap.put("prependRecent", new prependRecent());
			processMap.put("addGroup", new addGroup());
			processMap.put("addGroupMember", new addGroupMember());
			processMap.put("delGroupMember", new delGroupMember());
			processMap.put("setUser", new setUser());
			processMap.put("setUserBot", new setUserBot());
			return processMap;
		}

		public static class getUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUser_args> {

			public getUser() {
				super("getUser");
			}

			public getUser_args getEmptyArgsInstance() {
				return new getUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUser_result getResult(I iface, getUser_args args) throws org.apache.thrift.TException {
				getUser_result result = new getUser_result();
				try {
					result.success = iface.getUser(args.uid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserList_args> {

			public getUserList() {
				super("getUserList");
			}

			public getUserList_args getEmptyArgsInstance() {
				return new getUserList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserList_result getResult(I iface, getUserList_args args) throws org.apache.thrift.TException {
				getUserList_result result = new getUserList_result();
				try {
					result.success = iface.getUserList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserBot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserBot_args> {

			public getUserBot() {
				super("getUserBot");
			}

			public getUserBot_args getEmptyArgsInstance() {
				return new getUserBot_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserBot_result getResult(I iface, getUserBot_args args) throws org.apache.thrift.TException {
				getUserBot_result result = new getUserBot_result();
				try {
					result.success = iface.getUserBot(args.uid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getUserBotList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getUserBotList_args> {

			public getUserBotList() {
				super("getUserBotList");
			}

			public getUserBotList_args getEmptyArgsInstance() {
				return new getUserBotList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getUserBotList_result getResult(I iface, getUserBotList_args args)
					throws org.apache.thrift.TException {
				getUserBotList_result result = new getUserBotList_result();
				try {
					result.success = iface.getUserBotList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrganize<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrganize_args> {

			public getOrganize() {
				super("getOrganize");
			}

			public getOrganize_args getEmptyArgsInstance() {
				return new getOrganize_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrganize_result getResult(I iface, getOrganize_args args) throws org.apache.thrift.TException {
				getOrganize_result result = new getOrganize_result();
				try {
					result.success = iface.getOrganize(args.oid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrganizeList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrganizeList_args> {

			public getOrganizeList() {
				super("getOrganizeList");
			}

			public getOrganizeList_args getEmptyArgsInstance() {
				return new getOrganizeList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrganizeList_result getResult(I iface, getOrganizeList_args args)
					throws org.apache.thrift.TException {
				getOrganizeList_result result = new getOrganizeList_result();
				try {
					result.success = iface.getOrganizeList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrganizeRel<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrganizeRel_args> {

			public getOrganizeRel() {
				super("getOrganizeRel");
			}

			public getOrganizeRel_args getEmptyArgsInstance() {
				return new getOrganizeRel_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrganizeRel_result getResult(I iface, getOrganizeRel_args args)
					throws org.apache.thrift.TException {
				getOrganizeRel_result result = new getOrganizeRel_result();
				try {
					result.success = iface.getOrganizeRel(args.oid, args.uid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getOrganizeRelList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getOrganizeRelList_args> {

			public getOrganizeRelList() {
				super("getOrganizeRelList");
			}

			public getOrganizeRelList_args getEmptyArgsInstance() {
				return new getOrganizeRelList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getOrganizeRelList_result getResult(I iface, getOrganizeRelList_args args)
					throws org.apache.thrift.TException {
				getOrganizeRelList_result result = new getOrganizeRelList_result();
				try {
					result.success = iface.getOrganizeRelList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoom_args> {

			public getRoom() {
				super("getRoom");
			}

			public getRoom_args getEmptyArgsInstance() {
				return new getRoom_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getRoom_result getResult(I iface, getRoom_args args) throws org.apache.thrift.TException {
				getRoom_result result = new getRoom_result();
				try {
					result.success = iface.getRoom(args.roomId);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMessage_args> {

			public getMessage() {
				super("getMessage");
			}

			public getMessage_args getEmptyArgsInstance() {
				return new getMessage_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getMessage_result getResult(I iface, getMessage_args args) throws org.apache.thrift.TException {
				getMessage_result result = new getMessage_result();
				try {
					result.success = iface.getMessage(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getMessageList<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getMessageList_args> {

			public getMessageList() {
				super("getMessageList");
			}

			public getMessageList_args getEmptyArgsInstance() {
				return new getMessageList_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getMessageList_result getResult(I iface, getMessageList_args args)
					throws org.apache.thrift.TException {
				getMessageList_result result = new getMessageList_result();
				try {
					result.success = iface.getMessageList(args.query);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class ensureUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ensureUser_args> {

			public ensureUser() {
				super("ensureUser");
			}

			public ensureUser_args getEmptyArgsInstance() {
				return new ensureUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public ensureUser_result getResult(I iface, ensureUser_args args) throws org.apache.thrift.TException {
				ensureUser_result result = new ensureUser_result();
				try {
					result.success = iface.ensureUser(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class getContactClass<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, getContactClass_args> {

			public getContactClass() {
				super("getContactClass");
			}

			public getContactClass_args getEmptyArgsInstance() {
				return new getContactClass_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public getContactClass_result getResult(I iface, getContactClass_args args)
					throws org.apache.thrift.TException {
				getContactClass_result result = new getContactClass_result();
				try {
					result.success = iface.getContactClass(args.uid, args.clsName);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class createAndSend<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, createAndSend_args> {

			public createAndSend() {
				super("createAndSend");
			}

			public createAndSend_args getEmptyArgsInstance() {
				return new createAndSend_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public createAndSend_result getResult(I iface, createAndSend_args args)
					throws org.apache.thrift.TException {
				createAndSend_result result = new createAndSend_result();
				try {
					result.success = iface.createAndSend(args.msg);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class addContact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addContact_args> {

			public addContact() {
				super("addContact");
			}

			public addContact_args getEmptyArgsInstance() {
				return new addContact_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public addContact_result getResult(I iface, addContact_args args) throws org.apache.thrift.TException {
				addContact_result result = new addContact_result();
				try {
					result.success = iface.addContact(args.uid, args.tid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class delContact<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delContact_args> {

			public delContact() {
				super("delContact");
			}

			public delContact_args getEmptyArgsInstance() {
				return new delContact_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public delContact_result getResult(I iface, delContact_args args) throws org.apache.thrift.TException {
				delContact_result result = new delContact_result();
				try {
					result.success = iface.delContact(args.uid, args.tid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setContactAlias<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setContactAlias_args> {

			public setContactAlias() {
				super("setContactAlias");
			}

			public setContactAlias_args getEmptyArgsInstance() {
				return new setContactAlias_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setContactAlias_result getResult(I iface, setContactAlias_args args)
					throws org.apache.thrift.TException {
				setContactAlias_result result = new setContactAlias_result();
				try {
					result.success = iface.setContactAlias(args.uid, args.tid, args.nameAlias);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class emptyContactClass<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, emptyContactClass_args> {

			public emptyContactClass() {
				super("emptyContactClass");
			}

			public emptyContactClass_args getEmptyArgsInstance() {
				return new emptyContactClass_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public emptyContactClass_result getResult(I iface, emptyContactClass_args args)
					throws org.apache.thrift.TException {
				emptyContactClass_result result = new emptyContactClass_result();
				try {
					result.success = iface.emptyContactClass(args.uid, args.clsName);
					result.setSuccessIsSet(true);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class addContactClass<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, addContactClass_args> {

			public addContactClass() {
				super("addContactClass");
			}

			public addContactClass_args getEmptyArgsInstance() {
				return new addContactClass_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public addContactClass_result getResult(I iface, addContactClass_args args)
					throws org.apache.thrift.TException {
				addContactClass_result result = new addContactClass_result();
				try {
					result.success = iface.addContactClass(args.uid, args.clsName, args.clsParent, args.priority);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class delContactClass<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, delContactClass_args> {

			public delContactClass() {
				super("delContactClass");
			}

			public delContactClass_args getEmptyArgsInstance() {
				return new delContactClass_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public delContactClass_result getResult(I iface, delContactClass_args args)
					throws org.apache.thrift.TException {
				delContactClass_result result = new delContactClass_result();
				try {
					result.success = iface.delContactClass(args.uid, args.clsName);
					result.setSuccessIsSet(true);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setContactClass<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setContactClass_args> {

			public setContactClass() {
				super("setContactClass");
			}

			public setContactClass_args getEmptyArgsInstance() {
				return new setContactClass_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setContactClass_result getResult(I iface, setContactClass_args args)
					throws org.apache.thrift.TException {
				setContactClass_result result = new setContactClass_result();
				try {
					result.success = iface.setContactClass(args.uid, args.clsName, args.clsParent, args.priority);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setContactClassAlias<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setContactClassAlias_args> {

			public setContactClassAlias() {
				super("setContactClassAlias");
			}

			public setContactClassAlias_args getEmptyArgsInstance() {
				return new setContactClassAlias_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setContactClassAlias_result getResult(I iface, setContactClassAlias_args args)
					throws org.apache.thrift.TException {
				setContactClassAlias_result result = new setContactClassAlias_result();
				try {
					result.success = iface.setContactClassAlias(args.uid, args.clsName, args.clsAlias);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class joinContactClass<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, joinContactClass_args> {

			public joinContactClass() {
				super("joinContactClass");
			}

			public joinContactClass_args getEmptyArgsInstance() {
				return new joinContactClass_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public joinContactClass_result getResult(I iface, joinContactClass_args args)
					throws org.apache.thrift.TException {
				joinContactClass_result result = new joinContactClass_result();
				try {
					result.success = iface.joinContactClass(args.uid, args.tid, args.clsName);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class addRecent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRecent_args> {

			public addRecent() {
				super("addRecent");
			}

			public addRecent_args getEmptyArgsInstance() {
				return new addRecent_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public addRecent_result getResult(I iface, addRecent_args args) throws org.apache.thrift.TException {
				addRecent_result result = new addRecent_result();
				try {
					result.success = iface.addRecent(args.uid, args.tid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class delRecent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delRecent_args> {

			public delRecent() {
				super("delRecent");
			}

			public delRecent_args getEmptyArgsInstance() {
				return new delRecent_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public delRecent_result getResult(I iface, delRecent_args args) throws org.apache.thrift.TException {
				delRecent_result result = new delRecent_result();
				try {
					result.success = iface.delRecent(args.uid, args.tid);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class prependRecent<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, prependRecent_args> {

			public prependRecent() {
				super("prependRecent");
			}

			public prependRecent_args getEmptyArgsInstance() {
				return new prependRecent_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public prependRecent_result getResult(I iface, prependRecent_args args)
					throws org.apache.thrift.TException {
				prependRecent_result result = new prependRecent_result();
				try {
					result.success = iface.prependRecent(args.uid, args.tid, args.tryBoth);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class addGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addGroup_args> {

			public addGroup() {
				super("addGroup");
			}

			public addGroup_args getEmptyArgsInstance() {
				return new addGroup_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public addGroup_result getResult(I iface, addGroup_args args) throws org.apache.thrift.TException {
				addGroup_result result = new addGroup_result();
				try {
					result.success = iface.addGroup(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class addGroupMember<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, addGroupMember_args> {

			public addGroupMember() {
				super("addGroupMember");
			}

			public addGroupMember_args getEmptyArgsInstance() {
				return new addGroupMember_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public addGroupMember_result getResult(I iface, addGroupMember_args args)
					throws org.apache.thrift.TException {
				addGroupMember_result result = new addGroupMember_result();
				try {
					result.success = iface.addGroupMember(args.roomId, args.uidList);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class delGroupMember<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, delGroupMember_args> {

			public delGroupMember() {
				super("delGroupMember");
			}

			public delGroupMember_args getEmptyArgsInstance() {
				return new delGroupMember_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public delGroupMember_result getResult(I iface, delGroupMember_args args)
					throws org.apache.thrift.TException {
				delGroupMember_result result = new delGroupMember_result();
				try {
					result.success = iface.delGroupMember(args.roomId, args.uidList);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUser_args> {

			public setUser() {
				super("setUser");
			}

			public setUser_args getEmptyArgsInstance() {
				return new setUser_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setUser_result getResult(I iface, setUser_args args) throws org.apache.thrift.TException {
				setUser_result result = new setUser_result();
				try {
					result.success = iface.setUser(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

		public static class setUserBot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setUserBot_args> {

			public setUserBot() {
				super("setUserBot");
			}

			public setUserBot_args getEmptyArgsInstance() {
				return new setUserBot_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean rethrowUnhandledExceptions() {
				return false;
			}

			public setUserBot_result getResult(I iface, setUserBot_args args) throws org.apache.thrift.TException {
				setUserBot_result result = new setUserBot_result();
				try {
					result.success = iface.setUserBot(args.form);
				}
				catch (com.suboat.contrib.rpc.base.Error err) {
					result.err = err;
				}
				return result;
			}

		}

	}

	public static class AsyncProcessor<I extends AsyncIface>
			extends com.suboat.contrib.rpc.base.BaseService.AsyncProcessor<I> {

		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("getUser", new getUser());
			processMap.put("getUserList", new getUserList());
			processMap.put("getUserBot", new getUserBot());
			processMap.put("getUserBotList", new getUserBotList());
			processMap.put("getOrganize", new getOrganize());
			processMap.put("getOrganizeList", new getOrganizeList());
			processMap.put("getOrganizeRel", new getOrganizeRel());
			processMap.put("getOrganizeRelList", new getOrganizeRelList());
			processMap.put("getRoom", new getRoom());
			processMap.put("getMessage", new getMessage());
			processMap.put("getMessageList", new getMessageList());
			processMap.put("ensureUser", new ensureUser());
			processMap.put("getContactClass", new getContactClass());
			processMap.put("createAndSend", new createAndSend());
			processMap.put("addContact", new addContact());
			processMap.put("delContact", new delContact());
			processMap.put("setContactAlias", new setContactAlias());
			processMap.put("emptyContactClass", new emptyContactClass());
			processMap.put("addContactClass", new addContactClass());
			processMap.put("delContactClass", new delContactClass());
			processMap.put("setContactClass", new setContactClass());
			processMap.put("setContactClassAlias", new setContactClassAlias());
			processMap.put("joinContactClass", new joinContactClass());
			processMap.put("addRecent", new addRecent());
			processMap.put("delRecent", new delRecent());
			processMap.put("prependRecent", new prependRecent());
			processMap.put("addGroup", new addGroup());
			processMap.put("addGroupMember", new addGroupMember());
			processMap.put("delGroupMember", new delGroupMember());
			processMap.put("setUser", new setUser());
			processMap.put("setUserBot", new setUserBot());
			return processMap;
		}

		public static class getUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUser_args, User> {

			public getUser() {
				super("getUser");
			}

			public getUser_args getEmptyArgsInstance() {
				return new getUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						getUser_result result = new getUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUser_result result = new getUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUser(args.uid, resultHandler);
			}

		}

		public static class getUserList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserList_args, ResultUser> {

			public getUserList() {
				super("getUserList");
			}

			public getUserList_args getEmptyArgsInstance() {
				return new getUserList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUser> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUser>() {
					public void onComplete(ResultUser o) {
						getUserList_result result = new getUserList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserList_result result = new getUserList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUser> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserList(args.query, resultHandler);
			}

		}

		public static class getUserBot<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserBot_args, UserBot> {

			public getUserBot() {
				super("getUserBot");
			}

			public getUserBot_args getEmptyArgsInstance() {
				return new getUserBot_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserBot> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserBot>() {
					public void onComplete(UserBot o) {
						getUserBot_result result = new getUserBot_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserBot_result result = new getUserBot_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserBot_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserBot> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserBot(args.uid, resultHandler);
			}

		}

		public static class getUserBotList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getUserBotList_args, ResultUserBot> {

			public getUserBotList() {
				super("getUserBotList");
			}

			public getUserBotList_args getEmptyArgsInstance() {
				return new getUserBotList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultUserBot> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultUserBot>() {
					public void onComplete(ResultUserBot o) {
						getUserBotList_result result = new getUserBotList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getUserBotList_result result = new getUserBotList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getUserBotList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultUserBot> resultHandler)
					throws org.apache.thrift.TException {
				iface.getUserBotList(args.query, resultHandler);
			}

		}

		public static class getOrganize<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrganize_args, Organize> {

			public getOrganize() {
				super("getOrganize");
			}

			public getOrganize_args getEmptyArgsInstance() {
				return new getOrganize_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Organize> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Organize>() {
					public void onComplete(Organize o) {
						getOrganize_result result = new getOrganize_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrganize_result result = new getOrganize_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrganize_args args,
					org.apache.thrift.async.AsyncMethodCallback<Organize> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrganize(args.oid, resultHandler);
			}

		}

		public static class getOrganizeList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrganizeList_args, ResultOrganize> {

			public getOrganizeList() {
				super("getOrganizeList");
			}

			public getOrganizeList_args getEmptyArgsInstance() {
				return new getOrganizeList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultOrganize> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultOrganize>() {
					public void onComplete(ResultOrganize o) {
						getOrganizeList_result result = new getOrganizeList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrganizeList_result result = new getOrganizeList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrganizeList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrganize> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrganizeList(args.query, resultHandler);
			}

		}

		public static class getOrganizeRel<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrganizeRel_args, OrganizeRel> {

			public getOrganizeRel() {
				super("getOrganizeRel");
			}

			public getOrganizeRel_args getEmptyArgsInstance() {
				return new getOrganizeRel_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<OrganizeRel> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<OrganizeRel>() {
					public void onComplete(OrganizeRel o) {
						getOrganizeRel_result result = new getOrganizeRel_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrganizeRel_result result = new getOrganizeRel_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrganizeRel_args args,
					org.apache.thrift.async.AsyncMethodCallback<OrganizeRel> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrganizeRel(args.oid, args.uid, resultHandler);
			}

		}

		public static class getOrganizeRelList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getOrganizeRelList_args, ResultOrganizeRel> {

			public getOrganizeRelList() {
				super("getOrganizeRelList");
			}

			public getOrganizeRelList_args getEmptyArgsInstance() {
				return new getOrganizeRelList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultOrganizeRel> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultOrganizeRel>() {
					public void onComplete(ResultOrganizeRel o) {
						getOrganizeRelList_result result = new getOrganizeRelList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getOrganizeRelList_result result = new getOrganizeRelList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getOrganizeRelList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultOrganizeRel> resultHandler)
					throws org.apache.thrift.TException {
				iface.getOrganizeRelList(args.query, resultHandler);
			}

		}

		public static class getRoom<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getRoom_args, Room> {

			public getRoom() {
				super("getRoom");
			}

			public getRoom_args getEmptyArgsInstance() {
				return new getRoom_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Room> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Room>() {
					public void onComplete(Room o) {
						getRoom_result result = new getRoom_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getRoom_result result = new getRoom_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getRoom_args args,
					org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler)
					throws org.apache.thrift.TException {
				iface.getRoom(args.roomId, resultHandler);
			}

		}

		public static class getMessage<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getMessage_args, Message> {

			public getMessage() {
				super("getMessage");
			}

			public getMessage_args getEmptyArgsInstance() {
				return new getMessage_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Message> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Message>() {
					public void onComplete(Message o) {
						getMessage_result result = new getMessage_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getMessage_result result = new getMessage_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getMessage_args args,
					org.apache.thrift.async.AsyncMethodCallback<Message> resultHandler)
					throws org.apache.thrift.TException {
				iface.getMessage(args.form, resultHandler);
			}

		}

		public static class getMessageList<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getMessageList_args, ResultMessage> {

			public getMessageList() {
				super("getMessageList");
			}

			public getMessageList_args getEmptyArgsInstance() {
				return new getMessageList_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultMessage> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultMessage>() {
					public void onComplete(ResultMessage o) {
						getMessageList_result result = new getMessageList_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getMessageList_result result = new getMessageList_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getMessageList_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultMessage> resultHandler)
					throws org.apache.thrift.TException {
				iface.getMessageList(args.query, resultHandler);
			}

		}

		public static class ensureUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, ensureUser_args, User> {

			public ensureUser() {
				super("ensureUser");
			}

			public ensureUser_args getEmptyArgsInstance() {
				return new ensureUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						ensureUser_result result = new ensureUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						ensureUser_result result = new ensureUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, ensureUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.ensureUser(args.form, resultHandler);
			}

		}

		public static class getContactClass<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, getContactClass_args, ContactClass> {

			public getContactClass() {
				super("getContactClass");
			}

			public getContactClass_args getEmptyArgsInstance() {
				return new getContactClass_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ContactClass> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ContactClass>() {
					public void onComplete(ContactClass o) {
						getContactClass_result result = new getContactClass_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						getContactClass_result result = new getContactClass_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, getContactClass_args args,
					org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
					throws org.apache.thrift.TException {
				iface.getContactClass(args.uid, args.clsName, resultHandler);
			}

		}

		public static class createAndSend<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, createAndSend_args, ResultSend> {

			public createAndSend() {
				super("createAndSend");
			}

			public createAndSend_args getEmptyArgsInstance() {
				return new createAndSend_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ResultSend> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ResultSend>() {
					public void onComplete(ResultSend o) {
						createAndSend_result result = new createAndSend_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						createAndSend_result result = new createAndSend_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, createAndSend_args args,
					org.apache.thrift.async.AsyncMethodCallback<ResultSend> resultHandler)
					throws org.apache.thrift.TException {
				iface.createAndSend(args.msg, resultHandler);
			}

		}

		public static class addContact<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, addContact_args, Contact> {

			public addContact() {
				super("addContact");
			}

			public addContact_args getEmptyArgsInstance() {
				return new addContact_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Contact> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Contact>() {
					public void onComplete(Contact o) {
						addContact_result result = new addContact_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						addContact_result result = new addContact_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, addContact_args args,
					org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler)
					throws org.apache.thrift.TException {
				iface.addContact(args.uid, args.tid, resultHandler);
			}

		}

		public static class delContact<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, delContact_args, Contact> {

			public delContact() {
				super("delContact");
			}

			public delContact_args getEmptyArgsInstance() {
				return new delContact_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Contact> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Contact>() {
					public void onComplete(Contact o) {
						delContact_result result = new delContact_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						delContact_result result = new delContact_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, delContact_args args,
					org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler)
					throws org.apache.thrift.TException {
				iface.delContact(args.uid, args.tid, resultHandler);
			}

		}

		public static class setContactAlias<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setContactAlias_args, Contact> {

			public setContactAlias() {
				super("setContactAlias");
			}

			public setContactAlias_args getEmptyArgsInstance() {
				return new setContactAlias_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Contact> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Contact>() {
					public void onComplete(Contact o) {
						setContactAlias_result result = new setContactAlias_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setContactAlias_result result = new setContactAlias_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setContactAlias_args args,
					org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler)
					throws org.apache.thrift.TException {
				iface.setContactAlias(args.uid, args.tid, args.nameAlias, resultHandler);
			}

		}

		public static class emptyContactClass<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, emptyContactClass_args, java.lang.Integer> {

			public emptyContactClass() {
				super("emptyContactClass");
			}

			public emptyContactClass_args getEmptyArgsInstance() {
				return new emptyContactClass_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
					public void onComplete(java.lang.Integer o) {
						emptyContactClass_result result = new emptyContactClass_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						emptyContactClass_result result = new emptyContactClass_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, emptyContactClass_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
					throws org.apache.thrift.TException {
				iface.emptyContactClass(args.uid, args.clsName, resultHandler);
			}

		}

		public static class addContactClass<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, addContactClass_args, ContactClass> {

			public addContactClass() {
				super("addContactClass");
			}

			public addContactClass_args getEmptyArgsInstance() {
				return new addContactClass_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ContactClass> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ContactClass>() {
					public void onComplete(ContactClass o) {
						addContactClass_result result = new addContactClass_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						addContactClass_result result = new addContactClass_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, addContactClass_args args,
					org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
					throws org.apache.thrift.TException {
				iface.addContactClass(args.uid, args.clsName, args.clsParent, args.priority, resultHandler);
			}

		}

		public static class delContactClass<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, delContactClass_args, java.lang.Integer> {

			public delContactClass() {
				super("delContactClass");
			}

			public delContactClass_args getEmptyArgsInstance() {
				return new delContactClass_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() {
					public void onComplete(java.lang.Integer o) {
						delContactClass_result result = new delContactClass_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						delContactClass_result result = new delContactClass_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, delContactClass_args args,
					org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler)
					throws org.apache.thrift.TException {
				iface.delContactClass(args.uid, args.clsName, resultHandler);
			}

		}

		public static class setContactClass<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setContactClass_args, ContactClass> {

			public setContactClass() {
				super("setContactClass");
			}

			public setContactClass_args getEmptyArgsInstance() {
				return new setContactClass_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ContactClass> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ContactClass>() {
					public void onComplete(ContactClass o) {
						setContactClass_result result = new setContactClass_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setContactClass_result result = new setContactClass_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setContactClass_args args,
					org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
					throws org.apache.thrift.TException {
				iface.setContactClass(args.uid, args.clsName, args.clsParent, args.priority, resultHandler);
			}

		}

		public static class setContactClassAlias<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setContactClassAlias_args, ContactClass> {

			public setContactClassAlias() {
				super("setContactClassAlias");
			}

			public setContactClassAlias_args getEmptyArgsInstance() {
				return new setContactClassAlias_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<ContactClass> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<ContactClass>() {
					public void onComplete(ContactClass o) {
						setContactClassAlias_result result = new setContactClassAlias_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setContactClassAlias_result result = new setContactClassAlias_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setContactClassAlias_args args,
					org.apache.thrift.async.AsyncMethodCallback<ContactClass> resultHandler)
					throws org.apache.thrift.TException {
				iface.setContactClassAlias(args.uid, args.clsName, args.clsAlias, resultHandler);
			}

		}

		public static class joinContactClass<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, joinContactClass_args, Contact> {

			public joinContactClass() {
				super("joinContactClass");
			}

			public joinContactClass_args getEmptyArgsInstance() {
				return new joinContactClass_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Contact> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Contact>() {
					public void onComplete(Contact o) {
						joinContactClass_result result = new joinContactClass_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						joinContactClass_result result = new joinContactClass_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, joinContactClass_args args,
					org.apache.thrift.async.AsyncMethodCallback<Contact> resultHandler)
					throws org.apache.thrift.TException {
				iface.joinContactClass(args.uid, args.tid, args.clsName, resultHandler);
			}

		}

		public static class addRecent<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, addRecent_args, Recent> {

			public addRecent() {
				super("addRecent");
			}

			public addRecent_args getEmptyArgsInstance() {
				return new addRecent_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Recent> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Recent>() {
					public void onComplete(Recent o) {
						addRecent_result result = new addRecent_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						addRecent_result result = new addRecent_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, addRecent_args args,
					org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler)
					throws org.apache.thrift.TException {
				iface.addRecent(args.uid, args.tid, resultHandler);
			}

		}

		public static class delRecent<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, delRecent_args, Recent> {

			public delRecent() {
				super("delRecent");
			}

			public delRecent_args getEmptyArgsInstance() {
				return new delRecent_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Recent> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Recent>() {
					public void onComplete(Recent o) {
						delRecent_result result = new delRecent_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						delRecent_result result = new delRecent_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, delRecent_args args,
					org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler)
					throws org.apache.thrift.TException {
				iface.delRecent(args.uid, args.tid, resultHandler);
			}

		}

		public static class prependRecent<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, prependRecent_args, Recent> {

			public prependRecent() {
				super("prependRecent");
			}

			public prependRecent_args getEmptyArgsInstance() {
				return new prependRecent_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Recent> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Recent>() {
					public void onComplete(Recent o) {
						prependRecent_result result = new prependRecent_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						prependRecent_result result = new prependRecent_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, prependRecent_args args,
					org.apache.thrift.async.AsyncMethodCallback<Recent> resultHandler)
					throws org.apache.thrift.TException {
				iface.prependRecent(args.uid, args.tid, args.tryBoth, resultHandler);
			}

		}

		public static class addGroup<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, addGroup_args, Room> {

			public addGroup() {
				super("addGroup");
			}

			public addGroup_args getEmptyArgsInstance() {
				return new addGroup_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Room> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Room>() {
					public void onComplete(Room o) {
						addGroup_result result = new addGroup_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						addGroup_result result = new addGroup_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, addGroup_args args,
					org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler)
					throws org.apache.thrift.TException {
				iface.addGroup(args.form, resultHandler);
			}

		}

		public static class addGroupMember<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, addGroupMember_args, Room> {

			public addGroupMember() {
				super("addGroupMember");
			}

			public addGroupMember_args getEmptyArgsInstance() {
				return new addGroupMember_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Room> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Room>() {
					public void onComplete(Room o) {
						addGroupMember_result result = new addGroupMember_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						addGroupMember_result result = new addGroupMember_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, addGroupMember_args args,
					org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler)
					throws org.apache.thrift.TException {
				iface.addGroupMember(args.roomId, args.uidList, resultHandler);
			}

		}

		public static class delGroupMember<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, delGroupMember_args, Room> {

			public delGroupMember() {
				super("delGroupMember");
			}

			public delGroupMember_args getEmptyArgsInstance() {
				return new delGroupMember_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Room> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Room>() {
					public void onComplete(Room o) {
						delGroupMember_result result = new delGroupMember_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						delGroupMember_result result = new delGroupMember_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, delGroupMember_args args,
					org.apache.thrift.async.AsyncMethodCallback<Room> resultHandler)
					throws org.apache.thrift.TException {
				iface.delGroupMember(args.roomId, args.uidList, resultHandler);
			}

		}

		public static class setUser<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setUser_args, User> {

			public setUser() {
				super("setUser");
			}

			public setUser_args getEmptyArgsInstance() {
				return new setUser_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<User> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<User>() {
					public void onComplete(User o) {
						setUser_result result = new setUser_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setUser_result result = new setUser_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setUser_args args,
					org.apache.thrift.async.AsyncMethodCallback<User> resultHandler)
					throws org.apache.thrift.TException {
				iface.setUser(args.form, resultHandler);
			}

		}

		public static class setUserBot<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setUserBot_args, UserBot> {

			public setUserBot() {
				super("setUserBot");
			}

			public setUserBot_args getEmptyArgsInstance() {
				return new setUserBot_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<UserBot> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<UserBot>() {
					public void onComplete(UserBot o) {
						setUserBot_result result = new setUserBot_result();
						result.success = o;
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						}
						catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						}
						catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setUserBot_result result = new setUserBot_result();
						if (e instanceof com.suboat.contrib.rpc.base.Error) {
							result.err = (com.suboat.contrib.rpc.base.Error) e;
							result.setErrIsSet(true);
							msg = result;
						}
						else if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						}
						else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						}
						else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						}
						catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setUserBot_args args,
					org.apache.thrift.async.AsyncMethodCallback<UserBot> resultHandler)
					throws org.apache.thrift.TException {
				iface.setUserBot(args.form, resultHandler);
			}

		}

	}

	public static class getUser_args implements org.apache.thrift.TBase<getUser_args, getUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUser_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_args.class, metaDataMap);
		}

		public getUser_args() {
		}

		public getUser_args(java.lang.String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUser_args(getUser_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public getUser_args deepCopy() {
			return new getUser_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getUser_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUser_args)
				return this.equals((getUser_args) that);
			return false;
		}

		public boolean equals(getUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUser_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_argsStandardScheme getScheme() {
				return new getUser_argsStandardScheme();
			}

		}

		private static class getUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_argsTupleScheme getScheme() {
				return new getUser_argsTupleScheme();
			}

		}

		private static class getUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUser_result implements org.apache.thrift.TBase<getUser_result, getUser_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUser_result.class, metaDataMap);
		}

		public getUser_result() {
		}

		public getUser_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUser_result(getUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUser_result deepCopy() {
			return new getUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public getUser_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUser_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUser_result)
				return this.equals((getUser_result) that);
			return false;
		}

		public boolean equals(getUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_resultStandardScheme getScheme() {
				return new getUser_resultStandardScheme();
			}

		}

		private static class getUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUser_resultTupleScheme getScheme() {
				return new getUser_resultTupleScheme();
			}

		}

		private static class getUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserList_args implements org.apache.thrift.TBase<getUserList_args, getUserList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_args.class, metaDataMap);
		}

		public getUserList_args() {
		}

		public getUserList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserList_args(getUserList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserList_args deepCopy() {
			return new getUserList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserList_args)
				return this.equals((getUserList_args) that);
			return false;
		}

		public boolean equals(getUserList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_argsStandardScheme getScheme() {
				return new getUserList_argsStandardScheme();
			}

		}

		private static class getUserList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_argsTupleScheme getScheme() {
				return new getUserList_argsTupleScheme();
			}

		}

		private static class getUserList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserList_result
			implements org.apache.thrift.TBase<getUserList_result, getUserList_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUser success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUser")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserList_result.class, metaDataMap);
		}

		public getUserList_result() {
		}

		public getUserList_result(ResultUser success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserList_result(getUserList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUser(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserList_result deepCopy() {
			return new getUserList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUser getSuccess() {
			return this.success;
		}

		public getUserList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUser success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserList_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUser) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserList_result)
				return this.equals((getUserList_result) that);
			return false;
		}

		public boolean equals(getUserList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_resultStandardScheme getScheme() {
				return new getUserList_resultStandardScheme();
			}

		}

		private static class getUserList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUser();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserList_resultTupleScheme getScheme() {
				return new getUserList_resultTupleScheme();
			}

		}

		private static class getUserList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUser();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBot_args implements org.apache.thrift.TBase<getUserBot_args, getUserBot_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserBot_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBot_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBot_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBot_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBot_args.class, metaDataMap);
		}

		public getUserBot_args() {
		}

		public getUserBot_args(java.lang.String uid) {
			this();
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBot_args(getUserBot_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public getUserBot_args deepCopy() {
			return new getUserBot_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getUserBot_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBot_args)
				return this.equals((getUserBot_args) that);
			return false;
		}

		public boolean equals(getUserBot_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBot_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBot_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBot_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBot_argsStandardScheme getScheme() {
				return new getUserBot_argsStandardScheme();
			}

		}

		private static class getUserBot_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBot_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBot_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBot_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBot_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBot_argsTupleScheme getScheme() {
				return new getUserBot_argsTupleScheme();
			}

		}

		private static class getUserBot_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUserBot_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBot_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBot_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBot_result
			implements org.apache.thrift.TBase<getUserBot_result, getUserBot_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserBot_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBot_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBot_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBot_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserBot success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserBot.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBot_result.class, metaDataMap);
		}

		public getUserBot_result() {
		}

		public getUserBot_result(UserBot success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBot_result(getUserBot_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserBot(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserBot_result deepCopy() {
			return new getUserBot_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserBot getSuccess() {
			return this.success;
		}

		public getUserBot_result setSuccess(@org.apache.thrift.annotation.Nullable UserBot success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserBot_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserBot) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBot_result)
				return this.equals((getUserBot_result) that);
			return false;
		}

		public boolean equals(getUserBot_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBot_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBot_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBot_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBot_resultStandardScheme getScheme() {
				return new getUserBot_resultStandardScheme();
			}

		}

		private static class getUserBot_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBot_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBot_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserBot();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBot_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBot_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBot_resultTupleScheme getScheme() {
				return new getUserBot_resultTupleScheme();
			}

		}

		private static class getUserBot_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserBot_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBot_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBot_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserBot();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBotList_args
			implements org.apache.thrift.TBase<getUserBotList_args, getUserBotList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getUserBotList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBotList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBotList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBotList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBotList_args.class, metaDataMap);
		}

		public getUserBotList_args() {
		}

		public getUserBotList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBotList_args(getUserBotList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getUserBotList_args deepCopy() {
			return new getUserBotList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getUserBotList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBotList_args)
				return this.equals((getUserBotList_args) that);
			return false;
		}

		public boolean equals(getUserBotList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBotList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBotList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBotList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBotList_argsStandardScheme getScheme() {
				return new getUserBotList_argsStandardScheme();
			}

		}

		private static class getUserBotList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBotList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBotList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBotList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBotList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBotList_argsTupleScheme getScheme() {
				return new getUserBotList_argsTupleScheme();
			}

		}

		private static class getUserBotList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserBotList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBotList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBotList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getUserBotList_result
			implements org.apache.thrift.TBase<getUserBotList_result, getUserBotList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getUserBotList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getUserBotList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUserBotList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUserBotList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultUserBot success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultUserBot")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserBotList_result.class, metaDataMap);
		}

		public getUserBotList_result() {
		}

		public getUserBotList_result(ResultUserBot success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getUserBotList_result(getUserBotList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultUserBot(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getUserBotList_result deepCopy() {
			return new getUserBotList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultUserBot getSuccess() {
			return this.success;
		}

		public getUserBotList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultUserBot success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getUserBotList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultUserBot) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getUserBotList_result)
				return this.equals((getUserBotList_result) that);
			return false;
		}

		public boolean equals(getUserBotList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getUserBotList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getUserBotList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getUserBotList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBotList_resultStandardScheme getScheme() {
				return new getUserBotList_resultStandardScheme();
			}

		}

		private static class getUserBotList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getUserBotList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getUserBotList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultUserBot();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getUserBotList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getUserBotList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getUserBotList_resultTupleScheme getScheme() {
				return new getUserBotList_resultTupleScheme();
			}

		}

		private static class getUserBotList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getUserBotList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getUserBotList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getUserBotList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultUserBot();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrganize_args implements org.apache.thrift.TBase<getOrganize_args, getOrganize_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrganize_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrganize_args");

		private static final org.apache.thrift.protocol.TField OID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"oid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganize_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganize_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String oid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			OID((short) 1, "oid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // OID
					return OID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.OID, new org.apache.thrift.meta_data.FieldMetaData("oid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganize_args.class, metaDataMap);
		}

		public getOrganize_args() {
		}

		public getOrganize_args(java.lang.String oid) {
			this();
			this.oid = oid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrganize_args(getOrganize_args other) {
			if (other.isSetOid()) {
				this.oid = other.oid;
			}
		}

		public getOrganize_args deepCopy() {
			return new getOrganize_args(this);
		}

		@Override
		public void clear() {
			this.oid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getOid() {
			return this.oid;
		}

		public getOrganize_args setOid(@org.apache.thrift.annotation.Nullable java.lang.String oid) {
			this.oid = oid;
			return this;
		}

		public void unsetOid() {
			this.oid = null;
		}

		/**
		 * Returns true if field oid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetOid() {
			return this.oid != null;
		}

		public void setOidIsSet(boolean value) {
			if (!value) {
				this.oid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case OID:
				if (value == null) {
					unsetOid();
				}
				else {
					setOid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case OID:
				return getOid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case OID:
				return isSetOid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrganize_args)
				return this.equals((getOrganize_args) that);
			return false;
		}

		public boolean equals(getOrganize_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_oid = true && this.isSetOid();
			boolean that_present_oid = true && that.isSetOid();
			if (this_present_oid || that_present_oid) {
				if (!(this_present_oid && that_present_oid))
					return false;
				if (!this.oid.equals(that.oid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetOid()) ? 131071 : 524287);
			if (isSetOid())
				hashCode = hashCode * 8191 + oid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrganize_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetOid()).compareTo(other.isSetOid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetOid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oid, other.oid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganize_args(");
			boolean first = true;

			sb.append("oid:");
			if (this.oid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.oid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrganize_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganize_argsStandardScheme getScheme() {
				return new getOrganize_argsStandardScheme();
			}

		}

		private static class getOrganize_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrganize_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganize_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // OID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.oid = iprot.readString();
							struct.setOidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganize_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.oid != null) {
					oprot.writeFieldBegin(OID_FIELD_DESC);
					oprot.writeString(struct.oid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrganize_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganize_argsTupleScheme getScheme() {
				return new getOrganize_argsTupleScheme();
			}

		}

		private static class getOrganize_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrganize_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrganize_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetOid()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetOid()) {
					oprot.writeString(struct.oid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrganize_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.oid = iprot.readString();
					struct.setOidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrganize_result
			implements org.apache.thrift.TBase<getOrganize_result, getOrganize_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getOrganize_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrganize_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganize_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganize_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Organize success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Organize.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganize_result.class, metaDataMap);
		}

		public getOrganize_result() {
		}

		public getOrganize_result(Organize success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrganize_result(getOrganize_result other) {
			if (other.isSetSuccess()) {
				this.success = new Organize(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrganize_result deepCopy() {
			return new getOrganize_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Organize getSuccess() {
			return this.success;
		}

		public getOrganize_result setSuccess(@org.apache.thrift.annotation.Nullable Organize success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrganize_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Organize) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrganize_result)
				return this.equals((getOrganize_result) that);
			return false;
		}

		public boolean equals(getOrganize_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrganize_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganize_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrganize_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganize_resultStandardScheme getScheme() {
				return new getOrganize_resultStandardScheme();
			}

		}

		private static class getOrganize_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrganize_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganize_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Organize();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganize_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrganize_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganize_resultTupleScheme getScheme() {
				return new getOrganize_resultTupleScheme();
			}

		}

		private static class getOrganize_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrganize_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrganize_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrganize_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Organize();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrganizeList_args
			implements org.apache.thrift.TBase<getOrganizeList_args, getOrganizeList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrganizeList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrganizeList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganizeList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganizeList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganizeList_args.class, metaDataMap);
		}

		public getOrganizeList_args() {
		}

		public getOrganizeList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrganizeList_args(getOrganizeList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getOrganizeList_args deepCopy() {
			return new getOrganizeList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getOrganizeList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrganizeList_args)
				return this.equals((getOrganizeList_args) that);
			return false;
		}

		public boolean equals(getOrganizeList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrganizeList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganizeList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrganizeList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeList_argsStandardScheme getScheme() {
				return new getOrganizeList_argsStandardScheme();
			}

		}

		private static class getOrganizeList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrganizeList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganizeList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganizeList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrganizeList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeList_argsTupleScheme getScheme() {
				return new getOrganizeList_argsTupleScheme();
			}

		}

		private static class getOrganizeList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrganizeList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrganizeList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrganizeList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrganizeList_result
			implements org.apache.thrift.TBase<getOrganizeList_result, getOrganizeList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrganizeList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrganizeList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganizeList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganizeList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultOrganize success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultOrganize")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganizeList_result.class, metaDataMap);
		}

		public getOrganizeList_result() {
		}

		public getOrganizeList_result(ResultOrganize success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrganizeList_result(getOrganizeList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultOrganize(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrganizeList_result deepCopy() {
			return new getOrganizeList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultOrganize getSuccess() {
			return this.success;
		}

		public getOrganizeList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultOrganize success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrganizeList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultOrganize) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrganizeList_result)
				return this.equals((getOrganizeList_result) that);
			return false;
		}

		public boolean equals(getOrganizeList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrganizeList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganizeList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrganizeList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeList_resultStandardScheme getScheme() {
				return new getOrganizeList_resultStandardScheme();
			}

		}

		private static class getOrganizeList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrganizeList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganizeList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultOrganize();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganizeList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrganizeList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeList_resultTupleScheme getScheme() {
				return new getOrganizeList_resultTupleScheme();
			}

		}

		private static class getOrganizeList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrganizeList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrganizeList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrganizeList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultOrganize();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrganizeRel_args
			implements org.apache.thrift.TBase<getOrganizeRel_args, getOrganizeRel_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getOrganizeRel_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrganizeRel_args");

		private static final org.apache.thrift.protocol.TField OID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"oid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganizeRel_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganizeRel_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String oid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			OID((short) 1, "oid"), UID((short) 2, "uid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // OID
					return OID;
				case 2: // UID
					return UID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.OID, new org.apache.thrift.meta_data.FieldMetaData("oid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganizeRel_args.class, metaDataMap);
		}

		public getOrganizeRel_args() {
		}

		public getOrganizeRel_args(java.lang.String oid, java.lang.String uid) {
			this();
			this.oid = oid;
			this.uid = uid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrganizeRel_args(getOrganizeRel_args other) {
			if (other.isSetOid()) {
				this.oid = other.oid;
			}
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
		}

		public getOrganizeRel_args deepCopy() {
			return new getOrganizeRel_args(this);
		}

		@Override
		public void clear() {
			this.oid = null;
			this.uid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getOid() {
			return this.oid;
		}

		public getOrganizeRel_args setOid(@org.apache.thrift.annotation.Nullable java.lang.String oid) {
			this.oid = oid;
			return this;
		}

		public void unsetOid() {
			this.oid = null;
		}

		/**
		 * Returns true if field oid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetOid() {
			return this.oid != null;
		}

		public void setOidIsSet(boolean value) {
			if (!value) {
				this.oid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getOrganizeRel_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case OID:
				if (value == null) {
					unsetOid();
				}
				else {
					setOid((java.lang.String) value);
				}
				break;

			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case OID:
				return getOid();

			case UID:
				return getUid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case OID:
				return isSetOid();
			case UID:
				return isSetUid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrganizeRel_args)
				return this.equals((getOrganizeRel_args) that);
			return false;
		}

		public boolean equals(getOrganizeRel_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_oid = true && this.isSetOid();
			boolean that_present_oid = true && that.isSetOid();
			if (this_present_oid || that_present_oid) {
				if (!(this_present_oid && that_present_oid))
					return false;
				if (!this.oid.equals(that.oid))
					return false;
			}

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetOid()) ? 131071 : 524287);
			if (isSetOid())
				hashCode = hashCode * 8191 + oid.hashCode();

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrganizeRel_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetOid()).compareTo(other.isSetOid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetOid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oid, other.oid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganizeRel_args(");
			boolean first = true;

			sb.append("oid:");
			if (this.oid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.oid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrganizeRel_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeRel_argsStandardScheme getScheme() {
				return new getOrganizeRel_argsStandardScheme();
			}

		}

		private static class getOrganizeRel_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrganizeRel_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganizeRel_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // OID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.oid = iprot.readString();
							struct.setOidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganizeRel_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.oid != null) {
					oprot.writeFieldBegin(OID_FIELD_DESC);
					oprot.writeString(struct.oid);
					oprot.writeFieldEnd();
				}
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrganizeRel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeRel_argsTupleScheme getScheme() {
				return new getOrganizeRel_argsTupleScheme();
			}

		}

		private static class getOrganizeRel_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrganizeRel_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrganizeRel_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetOid()) {
					optionals.set(0);
				}
				if (struct.isSetUid()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetOid()) {
					oprot.writeString(struct.oid);
				}
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrganizeRel_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.oid = iprot.readString();
					struct.setOidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrganizeRel_result
			implements org.apache.thrift.TBase<getOrganizeRel_result, getOrganizeRel_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrganizeRel_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrganizeRel_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganizeRel_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganizeRel_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable OrganizeRel success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									OrganizeRel.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganizeRel_result.class, metaDataMap);
		}

		public getOrganizeRel_result() {
		}

		public getOrganizeRel_result(OrganizeRel success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrganizeRel_result(getOrganizeRel_result other) {
			if (other.isSetSuccess()) {
				this.success = new OrganizeRel(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrganizeRel_result deepCopy() {
			return new getOrganizeRel_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public OrganizeRel getSuccess() {
			return this.success;
		}

		public getOrganizeRel_result setSuccess(@org.apache.thrift.annotation.Nullable OrganizeRel success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrganizeRel_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((OrganizeRel) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrganizeRel_result)
				return this.equals((getOrganizeRel_result) that);
			return false;
		}

		public boolean equals(getOrganizeRel_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrganizeRel_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganizeRel_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrganizeRel_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeRel_resultStandardScheme getScheme() {
				return new getOrganizeRel_resultStandardScheme();
			}

		}

		private static class getOrganizeRel_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrganizeRel_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganizeRel_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new OrganizeRel();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganizeRel_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrganizeRel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeRel_resultTupleScheme getScheme() {
				return new getOrganizeRel_resultTupleScheme();
			}

		}

		private static class getOrganizeRel_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrganizeRel_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrganizeRel_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrganizeRel_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new OrganizeRel();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrganizeRelList_args
			implements org.apache.thrift.TBase<getOrganizeRelList_args, getOrganizeRelList_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrganizeRelList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrganizeRelList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganizeRelList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganizeRelList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganizeRelList_args.class, metaDataMap);
		}

		public getOrganizeRelList_args() {
		}

		public getOrganizeRelList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrganizeRelList_args(getOrganizeRelList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getOrganizeRelList_args deepCopy() {
			return new getOrganizeRelList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getOrganizeRelList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrganizeRelList_args)
				return this.equals((getOrganizeRelList_args) that);
			return false;
		}

		public boolean equals(getOrganizeRelList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrganizeRelList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganizeRelList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrganizeRelList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeRelList_argsStandardScheme getScheme() {
				return new getOrganizeRelList_argsStandardScheme();
			}

		}

		private static class getOrganizeRelList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrganizeRelList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganizeRelList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganizeRelList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrganizeRelList_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeRelList_argsTupleScheme getScheme() {
				return new getOrganizeRelList_argsTupleScheme();
			}

		}

		private static class getOrganizeRelList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrganizeRelList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrganizeRelList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrganizeRelList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getOrganizeRelList_result
			implements org.apache.thrift.TBase<getOrganizeRelList_result, getOrganizeRelList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getOrganizeRelList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getOrganizeRelList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganizeRelList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganizeRelList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultOrganizeRel success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultOrganizeRel")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganizeRelList_result.class,
					metaDataMap);
		}

		public getOrganizeRelList_result() {
		}

		public getOrganizeRelList_result(ResultOrganizeRel success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getOrganizeRelList_result(getOrganizeRelList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultOrganizeRel(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getOrganizeRelList_result deepCopy() {
			return new getOrganizeRelList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultOrganizeRel getSuccess() {
			return this.success;
		}

		public getOrganizeRelList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultOrganizeRel success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getOrganizeRelList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultOrganizeRel) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getOrganizeRelList_result)
				return this.equals((getOrganizeRelList_result) that);
			return false;
		}

		public boolean equals(getOrganizeRelList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getOrganizeRelList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganizeRelList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getOrganizeRelList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeRelList_resultStandardScheme getScheme() {
				return new getOrganizeRelList_resultStandardScheme();
			}

		}

		private static class getOrganizeRelList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getOrganizeRelList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganizeRelList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultOrganizeRel();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganizeRelList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getOrganizeRelList_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getOrganizeRelList_resultTupleScheme getScheme() {
				return new getOrganizeRelList_resultTupleScheme();
			}

		}

		private static class getOrganizeRelList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getOrganizeRelList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getOrganizeRelList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getOrganizeRelList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultOrganizeRel();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getRoom_args implements org.apache.thrift.TBase<getRoom_args, getRoom_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getRoom_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRoom_args");

		private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"roomId", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoom_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoom_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String roomId; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			ROOM_ID((short) 1, "roomId");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ROOM_ID
					return ROOM_ID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoom_args.class, metaDataMap);
		}

		public getRoom_args() {
		}

		public getRoom_args(java.lang.String roomId) {
			this();
			this.roomId = roomId;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRoom_args(getRoom_args other) {
			if (other.isSetRoomId()) {
				this.roomId = other.roomId;
			}
		}

		public getRoom_args deepCopy() {
			return new getRoom_args(this);
		}

		@Override
		public void clear() {
			this.roomId = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getRoomId() {
			return this.roomId;
		}

		public getRoom_args setRoomId(@org.apache.thrift.annotation.Nullable java.lang.String roomId) {
			this.roomId = roomId;
			return this;
		}

		public void unsetRoomId() {
			this.roomId = null;
		}

		/**
		 * Returns true if field roomId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRoomId() {
			return this.roomId != null;
		}

		public void setRoomIdIsSet(boolean value) {
			if (!value) {
				this.roomId = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case ROOM_ID:
				if (value == null) {
					unsetRoomId();
				}
				else {
					setRoomId((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ROOM_ID:
				return getRoomId();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ROOM_ID:
				return isSetRoomId();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRoom_args)
				return this.equals((getRoom_args) that);
			return false;
		}

		public boolean equals(getRoom_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_roomId = true && this.isSetRoomId();
			boolean that_present_roomId = true && that.isSetRoomId();
			if (this_present_roomId || that_present_roomId) {
				if (!(this_present_roomId && that_present_roomId))
					return false;
				if (!this.roomId.equals(that.roomId))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetRoomId()) ? 131071 : 524287);
			if (isSetRoomId())
				hashCode = hashCode * 8191 + roomId.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getRoom_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRoomId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRoom_args(");
			boolean first = true;

			sb.append("roomId:");
			if (this.roomId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.roomId);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRoom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getRoom_argsStandardScheme getScheme() {
				return new getRoom_argsStandardScheme();
			}

		}

		private static class getRoom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRoom_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRoom_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ROOM_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.roomId = iprot.readString();
							struct.setRoomIdIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRoom_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.roomId != null) {
					oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
					oprot.writeString(struct.roomId);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRoom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getRoom_argsTupleScheme getScheme() {
				return new getRoom_argsTupleScheme();
			}

		}

		private static class getRoom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoom_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRoom_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetRoomId()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetRoomId()) {
					oprot.writeString(struct.roomId);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRoom_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.roomId = iprot.readString();
					struct.setRoomIdIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getRoom_result implements org.apache.thrift.TBase<getRoom_result, getRoom_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getRoom_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getRoom_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRoom_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRoom_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Room success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Room.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoom_result.class, metaDataMap);
		}

		public getRoom_result() {
		}

		public getRoom_result(Room success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getRoom_result(getRoom_result other) {
			if (other.isSetSuccess()) {
				this.success = new Room(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getRoom_result deepCopy() {
			return new getRoom_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Room getSuccess() {
			return this.success;
		}

		public getRoom_result setSuccess(@org.apache.thrift.annotation.Nullable Room success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getRoom_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Room) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getRoom_result)
				return this.equals((getRoom_result) that);
			return false;
		}

		public boolean equals(getRoom_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getRoom_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getRoom_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getRoom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getRoom_resultStandardScheme getScheme() {
				return new getRoom_resultStandardScheme();
			}

		}

		private static class getRoom_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getRoom_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getRoom_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Room();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getRoom_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getRoom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getRoom_resultTupleScheme getScheme() {
				return new getRoom_resultTupleScheme();
			}

		}

		private static class getRoom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRoom_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getRoom_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getRoom_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Room();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getMessage_args implements org.apache.thrift.TBase<getMessage_args, getMessage_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getMessage_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMessage_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMessage_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMessage_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgRefMessage form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgRefMessage")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessage_args.class, metaDataMap);
		}

		public getMessage_args() {
		}

		public getMessage_args(ArgRefMessage form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMessage_args(getMessage_args other) {
			if (other.isSetForm()) {
				this.form = new ArgRefMessage(other.form);
			}
		}

		public getMessage_args deepCopy() {
			return new getMessage_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgRefMessage getForm() {
			return this.form;
		}

		public getMessage_args setForm(@org.apache.thrift.annotation.Nullable ArgRefMessage form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgRefMessage) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMessage_args)
				return this.equals((getMessage_args) that);
			return false;
		}

		public boolean equals(getMessage_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMessage_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMessage_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getMessage_argsStandardScheme getScheme() {
				return new getMessage_argsStandardScheme();
			}

		}

		private static class getMessage_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMessage_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMessage_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgRefMessage();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMessage_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getMessage_argsTupleScheme getScheme() {
				return new getMessage_argsTupleScheme();
			}

		}

		private static class getMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMessage_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMessage_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMessage_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgRefMessage();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getMessage_result
			implements org.apache.thrift.TBase<getMessage_result, getMessage_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMessage_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMessage_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMessage_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMessage_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Message success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Message.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessage_result.class, metaDataMap);
		}

		public getMessage_result() {
		}

		public getMessage_result(Message success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMessage_result(getMessage_result other) {
			if (other.isSetSuccess()) {
				this.success = new Message(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getMessage_result deepCopy() {
			return new getMessage_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Message getSuccess() {
			return this.success;
		}

		public getMessage_result setSuccess(@org.apache.thrift.annotation.Nullable Message success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getMessage_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Message) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMessage_result)
				return this.equals((getMessage_result) that);
			return false;
		}

		public boolean equals(getMessage_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMessage_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMessage_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getMessage_resultStandardScheme getScheme() {
				return new getMessage_resultStandardScheme();
			}

		}

		private static class getMessage_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMessage_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMessage_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Message();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMessage_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getMessage_resultTupleScheme getScheme() {
				return new getMessage_resultTupleScheme();
			}

		}

		private static class getMessage_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMessage_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMessage_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMessage_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Message();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getMessageList_args
			implements org.apache.thrift.TBase<getMessageList_args, getMessageList_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<getMessageList_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMessageList_args");

		private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"query", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMessageList_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMessageList_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			QUERY((short) 1, "query");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // QUERY
					return QUERY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.QUERY,
					new org.apache.thrift.meta_data.FieldMetaData("query",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.ArgQuery.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessageList_args.class, metaDataMap);
		}

		public getMessageList_args() {
		}

		public getMessageList_args(com.suboat.contrib.rpc.base.ArgQuery query) {
			this();
			this.query = query;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMessageList_args(getMessageList_args other) {
			if (other.isSetQuery()) {
				this.query = new com.suboat.contrib.rpc.base.ArgQuery(other.query);
			}
		}

		public getMessageList_args deepCopy() {
			return new getMessageList_args(this);
		}

		@Override
		public void clear() {
			this.query = null;
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.ArgQuery getQuery() {
			return this.query;
		}

		public getMessageList_args setQuery(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.ArgQuery query) {
			this.query = query;
			return this;
		}

		public void unsetQuery() {
			this.query = null;
		}

		/**
		 * Returns true if field query is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetQuery() {
			return this.query != null;
		}

		public void setQueryIsSet(boolean value) {
			if (!value) {
				this.query = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case QUERY:
				if (value == null) {
					unsetQuery();
				}
				else {
					setQuery((com.suboat.contrib.rpc.base.ArgQuery) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case QUERY:
				return getQuery();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case QUERY:
				return isSetQuery();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMessageList_args)
				return this.equals((getMessageList_args) that);
			return false;
		}

		public boolean equals(getMessageList_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_query = true && this.isSetQuery();
			boolean that_present_query = true && that.isSetQuery();
			if (this_present_query || that_present_query) {
				if (!(this_present_query && that_present_query))
					return false;
				if (!this.query.equals(that.query))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
			if (isSetQuery())
				hashCode = hashCode * 8191 + query.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMessageList_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetQuery()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMessageList_args(");
			boolean first = true;

			sb.append("query:");
			if (this.query == null) {
				sb.append("null");
			}
			else {
				sb.append(this.query);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (query != null) {
				query.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMessageList_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getMessageList_argsStandardScheme getScheme() {
				return new getMessageList_argsStandardScheme();
			}

		}

		private static class getMessageList_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMessageList_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMessageList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // QUERY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
							struct.query.read(iprot);
							struct.setQueryIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMessageList_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.query != null) {
					oprot.writeFieldBegin(QUERY_FIELD_DESC);
					struct.query.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMessageList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getMessageList_argsTupleScheme getScheme() {
				return new getMessageList_argsTupleScheme();
			}

		}

		private static class getMessageList_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMessageList_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMessageList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetQuery()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetQuery()) {
					struct.query.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMessageList_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.query = new com.suboat.contrib.rpc.base.ArgQuery();
					struct.query.read(iprot);
					struct.setQueryIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getMessageList_result
			implements org.apache.thrift.TBase<getMessageList_result, getMessageList_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getMessageList_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getMessageList_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMessageList_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMessageList_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultMessage success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultMessage")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessageList_result.class, metaDataMap);
		}

		public getMessageList_result() {
		}

		public getMessageList_result(ResultMessage success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getMessageList_result(getMessageList_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultMessage(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getMessageList_result deepCopy() {
			return new getMessageList_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultMessage getSuccess() {
			return this.success;
		}

		public getMessageList_result setSuccess(@org.apache.thrift.annotation.Nullable ResultMessage success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getMessageList_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultMessage) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getMessageList_result)
				return this.equals((getMessageList_result) that);
			return false;
		}

		public boolean equals(getMessageList_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getMessageList_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getMessageList_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getMessageList_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getMessageList_resultStandardScheme getScheme() {
				return new getMessageList_resultStandardScheme();
			}

		}

		private static class getMessageList_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getMessageList_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getMessageList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultMessage();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getMessageList_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getMessageList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getMessageList_resultTupleScheme getScheme() {
				return new getMessageList_resultTupleScheme();
			}

		}

		private static class getMessageList_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getMessageList_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getMessageList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getMessageList_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultMessage();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class ensureUser_args implements org.apache.thrift.TBase<ensureUser_args, ensureUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<ensureUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ensureUser_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUser form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureUser_args.class, metaDataMap);
		}

		public ensureUser_args() {
		}

		public ensureUser_args(ArgUser form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ensureUser_args(ensureUser_args other) {
			if (other.isSetForm()) {
				this.form = new ArgUser(other.form);
			}
		}

		public ensureUser_args deepCopy() {
			return new ensureUser_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getForm() {
			return this.form;
		}

		public ensureUser_args setForm(@org.apache.thrift.annotation.Nullable ArgUser form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof ensureUser_args)
				return this.equals((ensureUser_args) that);
			return false;
		}

		public boolean equals(ensureUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(ensureUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureUser_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ensureUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureUser_argsStandardScheme getScheme() {
				return new ensureUser_argsStandardScheme();
			}

		}

		private static class ensureUser_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<ensureUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ensureUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgUser();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ensureUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ensureUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureUser_argsTupleScheme getScheme() {
				return new ensureUser_argsTupleScheme();
			}

		}

		private static class ensureUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ensureUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ensureUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ensureUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgUser();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class ensureUser_result
			implements org.apache.thrift.TBase<ensureUser_result, ensureUser_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<ensureUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"ensureUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ensureUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ensureUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ensureUser_result.class, metaDataMap);
		}

		public ensureUser_result() {
		}

		public ensureUser_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public ensureUser_result(ensureUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public ensureUser_result deepCopy() {
			return new ensureUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public ensureUser_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public ensureUser_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof ensureUser_result)
				return this.equals((ensureUser_result) that);
			return false;
		}

		public boolean equals(ensureUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(ensureUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("ensureUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class ensureUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureUser_resultStandardScheme getScheme() {
				return new ensureUser_resultStandardScheme();
			}

		}

		private static class ensureUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<ensureUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, ensureUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, ensureUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class ensureUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public ensureUser_resultTupleScheme getScheme() {
				return new ensureUser_resultTupleScheme();
			}

		}

		private static class ensureUser_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<ensureUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, ensureUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, ensureUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getContactClass_args
			implements org.apache.thrift.TBase<getContactClass_args, getContactClass_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<getContactClass_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getContactClass_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CLS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsName", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getContactClass_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getContactClass_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsName; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CLS_NAME((short) 2, "clsName");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CLS_NAME
					return CLS_NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_NAME, new org.apache.thrift.meta_data.FieldMetaData("clsName",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContactClass_args.class, metaDataMap);
		}

		public getContactClass_args() {
		}

		public getContactClass_args(java.lang.String uid, java.lang.String clsName) {
			this();
			this.uid = uid;
			this.clsName = clsName;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getContactClass_args(getContactClass_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetClsName()) {
				this.clsName = other.clsName;
			}
		}

		public getContactClass_args deepCopy() {
			return new getContactClass_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.clsName = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public getContactClass_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsName() {
			return this.clsName;
		}

		public getContactClass_args setClsName(@org.apache.thrift.annotation.Nullable java.lang.String clsName) {
			this.clsName = clsName;
			return this;
		}

		public void unsetClsName() {
			this.clsName = null;
		}

		/**
		 * Returns true if field clsName is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsName() {
			return this.clsName != null;
		}

		public void setClsNameIsSet(boolean value) {
			if (!value) {
				this.clsName = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CLS_NAME:
				if (value == null) {
					unsetClsName();
				}
				else {
					setClsName((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CLS_NAME:
				return getClsName();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CLS_NAME:
				return isSetClsName();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getContactClass_args)
				return this.equals((getContactClass_args) that);
			return false;
		}

		public boolean equals(getContactClass_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_clsName = true && this.isSetClsName();
			boolean that_present_clsName = true && that.isSetClsName();
			if (this_present_clsName || that_present_clsName) {
				if (!(this_present_clsName && that_present_clsName))
					return false;
				if (!this.clsName.equals(that.clsName))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsName()) ? 131071 : 524287);
			if (isSetClsName())
				hashCode = hashCode * 8191 + clsName.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getContactClass_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsName()).compareTo(other.isSetClsName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsName, other.clsName);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getContactClass_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsName:");
			if (this.clsName == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsName);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getContactClass_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getContactClass_argsStandardScheme getScheme() {
				return new getContactClass_argsStandardScheme();
			}

		}

		private static class getContactClass_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getContactClass_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CLS_NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsName = iprot.readString();
							struct.setClsNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getContactClass_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.clsName != null) {
					oprot.writeFieldBegin(CLS_NAME_FIELD_DESC);
					oprot.writeString(struct.clsName);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getContactClass_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public getContactClass_argsTupleScheme getScheme() {
				return new getContactClass_argsTupleScheme();
			}

		}

		private static class getContactClass_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getContactClass_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetClsName()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetClsName()) {
					oprot.writeString(struct.clsName);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.clsName = iprot.readString();
					struct.setClsNameIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class getContactClass_result
			implements org.apache.thrift.TBase<getContactClass_result, getContactClass_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<getContactClass_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"getContactClass_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getContactClass_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getContactClass_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ContactClass success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ContactClass.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getContactClass_result.class, metaDataMap);
		}

		public getContactClass_result() {
		}

		public getContactClass_result(ContactClass success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public getContactClass_result(getContactClass_result other) {
			if (other.isSetSuccess()) {
				this.success = new ContactClass(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public getContactClass_result deepCopy() {
			return new getContactClass_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ContactClass getSuccess() {
			return this.success;
		}

		public getContactClass_result setSuccess(@org.apache.thrift.annotation.Nullable ContactClass success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public getContactClass_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ContactClass) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof getContactClass_result)
				return this.equals((getContactClass_result) that);
			return false;
		}

		public boolean equals(getContactClass_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(getContactClass_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("getContactClass_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class getContactClass_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getContactClass_resultStandardScheme getScheme() {
				return new getContactClass_resultStandardScheme();
			}

		}

		private static class getContactClass_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<getContactClass_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, getContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ContactClass();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, getContactClass_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class getContactClass_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public getContactClass_resultTupleScheme getScheme() {
				return new getContactClass_resultTupleScheme();
			}

		}

		private static class getContactClass_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<getContactClass_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, getContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, getContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ContactClass();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createAndSend_args
			implements org.apache.thrift.TBase<createAndSend_args, createAndSend_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<createAndSend_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createAndSend_args");

		private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"msg", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAndSend_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAndSend_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgMessage msg; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			MSG((short) 1, "msg");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // MSG
					return MSG;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.MSG,
					new org.apache.thrift.meta_data.FieldMetaData("msg",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgMessage")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAndSend_args.class, metaDataMap);
		}

		public createAndSend_args() {
		}

		public createAndSend_args(ArgMessage msg) {
			this();
			this.msg = msg;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createAndSend_args(createAndSend_args other) {
			if (other.isSetMsg()) {
				this.msg = new ArgMessage(other.msg);
			}
		}

		public createAndSend_args deepCopy() {
			return new createAndSend_args(this);
		}

		@Override
		public void clear() {
			this.msg = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgMessage getMsg() {
			return this.msg;
		}

		public createAndSend_args setMsg(@org.apache.thrift.annotation.Nullable ArgMessage msg) {
			this.msg = msg;
			return this;
		}

		public void unsetMsg() {
			this.msg = null;
		}

		/**
		 * Returns true if field msg is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetMsg() {
			return this.msg != null;
		}

		public void setMsgIsSet(boolean value) {
			if (!value) {
				this.msg = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case MSG:
				if (value == null) {
					unsetMsg();
				}
				else {
					setMsg((ArgMessage) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case MSG:
				return getMsg();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case MSG:
				return isSetMsg();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createAndSend_args)
				return this.equals((createAndSend_args) that);
			return false;
		}

		public boolean equals(createAndSend_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_msg = true && this.isSetMsg();
			boolean that_present_msg = true && that.isSetMsg();
			if (this_present_msg || that_present_msg) {
				if (!(this_present_msg && that_present_msg))
					return false;
				if (!this.msg.equals(that.msg))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
			if (isSetMsg())
				hashCode = hashCode * 8191 + msg.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createAndSend_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMsg()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createAndSend_args(");
			boolean first = true;

			sb.append("msg:");
			if (this.msg == null) {
				sb.append("null");
			}
			else {
				sb.append(this.msg);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createAndSend_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createAndSend_argsStandardScheme getScheme() {
				return new createAndSend_argsStandardScheme();
			}

		}

		private static class createAndSend_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createAndSend_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createAndSend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // MSG
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.msg = new ArgMessage();
							struct.msg.read(iprot);
							struct.setMsgIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createAndSend_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.msg != null) {
					oprot.writeFieldBegin(MSG_FIELD_DESC);
					struct.msg.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createAndSend_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createAndSend_argsTupleScheme getScheme() {
				return new createAndSend_argsTupleScheme();
			}

		}

		private static class createAndSend_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<createAndSend_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createAndSend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetMsg()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetMsg()) {
					struct.msg.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createAndSend_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.msg = new ArgMessage();
					struct.msg.read(iprot);
					struct.setMsgIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class createAndSend_result
			implements org.apache.thrift.TBase<createAndSend_result, createAndSend_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<createAndSend_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"createAndSend_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAndSend_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAndSend_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ResultSend success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ResultSend")));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAndSend_result.class, metaDataMap);
		}

		public createAndSend_result() {
		}

		public createAndSend_result(ResultSend success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public createAndSend_result(createAndSend_result other) {
			if (other.isSetSuccess()) {
				this.success = new ResultSend(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public createAndSend_result deepCopy() {
			return new createAndSend_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ResultSend getSuccess() {
			return this.success;
		}

		public createAndSend_result setSuccess(@org.apache.thrift.annotation.Nullable ResultSend success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public createAndSend_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ResultSend) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof createAndSend_result)
				return this.equals((createAndSend_result) that);
			return false;
		}

		public boolean equals(createAndSend_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(createAndSend_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("createAndSend_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class createAndSend_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public createAndSend_resultStandardScheme getScheme() {
				return new createAndSend_resultStandardScheme();
			}

		}

		private static class createAndSend_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<createAndSend_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, createAndSend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ResultSend();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, createAndSend_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class createAndSend_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public createAndSend_resultTupleScheme getScheme() {
				return new createAndSend_resultTupleScheme();
			}

		}

		private static class createAndSend_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<createAndSend_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, createAndSend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, createAndSend_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ResultSend();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addContact_args implements org.apache.thrift.TBase<addContact_args, addContact_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<addContact_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addContact_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tid", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addContact_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addContact_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String tid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), TID((short) 2, "tid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // TID
					return TID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContact_args.class, metaDataMap);
		}

		public addContact_args() {
		}

		public addContact_args(java.lang.String uid, java.lang.String tid) {
			this();
			this.uid = uid;
			this.tid = tid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addContact_args(addContact_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetTid()) {
				this.tid = other.tid;
			}
		}

		public addContact_args deepCopy() {
			return new addContact_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.tid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public addContact_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getTid() {
			return this.tid;
		}

		public addContact_args setTid(@org.apache.thrift.annotation.Nullable java.lang.String tid) {
			this.tid = tid;
			return this;
		}

		public void unsetTid() {
			this.tid = null;
		}

		/**
		 * Returns true if field tid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetTid() {
			return this.tid != null;
		}

		public void setTidIsSet(boolean value) {
			if (!value) {
				this.tid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case TID:
				if (value == null) {
					unsetTid();
				}
				else {
					setTid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case TID:
				return getTid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case TID:
				return isSetTid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addContact_args)
				return this.equals((addContact_args) that);
			return false;
		}

		public boolean equals(addContact_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_tid = true && this.isSetTid();
			boolean that_present_tid = true && that.isSetTid();
			if (this_present_tid || that_present_tid) {
				if (!(this_present_tid && that_present_tid))
					return false;
				if (!this.tid.equals(that.tid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetTid()) ? 131071 : 524287);
			if (isSetTid())
				hashCode = hashCode * 8191 + tid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addContact_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addContact_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			if (this.tid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.tid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addContact_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addContact_argsStandardScheme getScheme() {
				return new addContact_argsStandardScheme();
			}

		}

		private static class addContact_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addContact_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addContact_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.tid = iprot.readString();
							struct.setTidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addContact_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.tid != null) {
					oprot.writeFieldBegin(TID_FIELD_DESC);
					oprot.writeString(struct.tid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addContact_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addContact_argsTupleScheme getScheme() {
				return new addContact_argsTupleScheme();
			}

		}

		private static class addContact_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addContact_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addContact_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetTid()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetTid()) {
					oprot.writeString(struct.tid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addContact_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.tid = iprot.readString();
					struct.setTidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addContact_result
			implements org.apache.thrift.TBase<addContact_result, addContact_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<addContact_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addContact_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addContact_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addContact_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Contact success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Contact.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContact_result.class, metaDataMap);
		}

		public addContact_result() {
		}

		public addContact_result(Contact success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addContact_result(addContact_result other) {
			if (other.isSetSuccess()) {
				this.success = new Contact(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public addContact_result deepCopy() {
			return new addContact_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Contact getSuccess() {
			return this.success;
		}

		public addContact_result setSuccess(@org.apache.thrift.annotation.Nullable Contact success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public addContact_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Contact) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addContact_result)
				return this.equals((addContact_result) that);
			return false;
		}

		public boolean equals(addContact_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addContact_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addContact_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addContact_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addContact_resultStandardScheme getScheme() {
				return new addContact_resultStandardScheme();
			}

		}

		private static class addContact_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addContact_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addContact_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Contact();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addContact_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addContact_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addContact_resultTupleScheme getScheme() {
				return new addContact_resultTupleScheme();
			}

		}

		private static class addContact_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<addContact_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addContact_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addContact_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Contact();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class delContact_args implements org.apache.thrift.TBase<delContact_args, delContact_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<delContact_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"delContact_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tid", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delContact_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delContact_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String tid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), TID((short) 2, "tid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // TID
					return TID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delContact_args.class, metaDataMap);
		}

		public delContact_args() {
		}

		public delContact_args(java.lang.String uid, java.lang.String tid) {
			this();
			this.uid = uid;
			this.tid = tid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public delContact_args(delContact_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetTid()) {
				this.tid = other.tid;
			}
		}

		public delContact_args deepCopy() {
			return new delContact_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.tid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public delContact_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getTid() {
			return this.tid;
		}

		public delContact_args setTid(@org.apache.thrift.annotation.Nullable java.lang.String tid) {
			this.tid = tid;
			return this;
		}

		public void unsetTid() {
			this.tid = null;
		}

		/**
		 * Returns true if field tid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetTid() {
			return this.tid != null;
		}

		public void setTidIsSet(boolean value) {
			if (!value) {
				this.tid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case TID:
				if (value == null) {
					unsetTid();
				}
				else {
					setTid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case TID:
				return getTid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case TID:
				return isSetTid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof delContact_args)
				return this.equals((delContact_args) that);
			return false;
		}

		public boolean equals(delContact_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_tid = true && this.isSetTid();
			boolean that_present_tid = true && that.isSetTid();
			if (this_present_tid || that_present_tid) {
				if (!(this_present_tid && that_present_tid))
					return false;
				if (!this.tid.equals(that.tid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetTid()) ? 131071 : 524287);
			if (isSetTid())
				hashCode = hashCode * 8191 + tid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(delContact_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("delContact_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			if (this.tid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.tid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class delContact_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delContact_argsStandardScheme getScheme() {
				return new delContact_argsStandardScheme();
			}

		}

		private static class delContact_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<delContact_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, delContact_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.tid = iprot.readString();
							struct.setTidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, delContact_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.tid != null) {
					oprot.writeFieldBegin(TID_FIELD_DESC);
					oprot.writeString(struct.tid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class delContact_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delContact_argsTupleScheme getScheme() {
				return new delContact_argsTupleScheme();
			}

		}

		private static class delContact_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<delContact_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, delContact_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetTid()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetTid()) {
					oprot.writeString(struct.tid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, delContact_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.tid = iprot.readString();
					struct.setTidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class delContact_result
			implements org.apache.thrift.TBase<delContact_result, delContact_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<delContact_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"delContact_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delContact_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delContact_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Contact success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Contact.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delContact_result.class, metaDataMap);
		}

		public delContact_result() {
		}

		public delContact_result(Contact success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public delContact_result(delContact_result other) {
			if (other.isSetSuccess()) {
				this.success = new Contact(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public delContact_result deepCopy() {
			return new delContact_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Contact getSuccess() {
			return this.success;
		}

		public delContact_result setSuccess(@org.apache.thrift.annotation.Nullable Contact success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public delContact_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Contact) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof delContact_result)
				return this.equals((delContact_result) that);
			return false;
		}

		public boolean equals(delContact_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(delContact_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("delContact_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class delContact_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delContact_resultStandardScheme getScheme() {
				return new delContact_resultStandardScheme();
			}

		}

		private static class delContact_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<delContact_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, delContact_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Contact();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, delContact_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class delContact_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delContact_resultTupleScheme getScheme() {
				return new delContact_resultTupleScheme();
			}

		}

		private static class delContact_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<delContact_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, delContact_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, delContact_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Contact();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setContactAlias_args
			implements org.apache.thrift.TBase<setContactAlias_args, setContactAlias_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setContactAlias_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setContactAlias_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tid", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.protocol.TField NAME_ALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"nameAlias", org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setContactAlias_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setContactAlias_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String tid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String nameAlias; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), TID((short) 2, "tid"), NAME_ALIAS((short) 3, "nameAlias");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // TID
					return TID;
				case 3: // NAME_ALIAS
					return NAME_ALIAS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.NAME_ALIAS, new org.apache.thrift.meta_data.FieldMetaData("nameAlias",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setContactAlias_args.class, metaDataMap);
		}

		public setContactAlias_args() {
		}

		public setContactAlias_args(java.lang.String uid, java.lang.String tid, java.lang.String nameAlias) {
			this();
			this.uid = uid;
			this.tid = tid;
			this.nameAlias = nameAlias;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setContactAlias_args(setContactAlias_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetTid()) {
				this.tid = other.tid;
			}
			if (other.isSetNameAlias()) {
				this.nameAlias = other.nameAlias;
			}
		}

		public setContactAlias_args deepCopy() {
			return new setContactAlias_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.tid = null;
			this.nameAlias = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public setContactAlias_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getTid() {
			return this.tid;
		}

		public setContactAlias_args setTid(@org.apache.thrift.annotation.Nullable java.lang.String tid) {
			this.tid = tid;
			return this;
		}

		public void unsetTid() {
			this.tid = null;
		}

		/**
		 * Returns true if field tid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetTid() {
			return this.tid != null;
		}

		public void setTidIsSet(boolean value) {
			if (!value) {
				this.tid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getNameAlias() {
			return this.nameAlias;
		}

		public setContactAlias_args setNameAlias(@org.apache.thrift.annotation.Nullable java.lang.String nameAlias) {
			this.nameAlias = nameAlias;
			return this;
		}

		public void unsetNameAlias() {
			this.nameAlias = null;
		}

		/**
		 * Returns true if field nameAlias is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetNameAlias() {
			return this.nameAlias != null;
		}

		public void setNameAliasIsSet(boolean value) {
			if (!value) {
				this.nameAlias = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case TID:
				if (value == null) {
					unsetTid();
				}
				else {
					setTid((java.lang.String) value);
				}
				break;

			case NAME_ALIAS:
				if (value == null) {
					unsetNameAlias();
				}
				else {
					setNameAlias((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case TID:
				return getTid();

			case NAME_ALIAS:
				return getNameAlias();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case TID:
				return isSetTid();
			case NAME_ALIAS:
				return isSetNameAlias();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setContactAlias_args)
				return this.equals((setContactAlias_args) that);
			return false;
		}

		public boolean equals(setContactAlias_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_tid = true && this.isSetTid();
			boolean that_present_tid = true && that.isSetTid();
			if (this_present_tid || that_present_tid) {
				if (!(this_present_tid && that_present_tid))
					return false;
				if (!this.tid.equals(that.tid))
					return false;
			}

			boolean this_present_nameAlias = true && this.isSetNameAlias();
			boolean that_present_nameAlias = true && that.isSetNameAlias();
			if (this_present_nameAlias || that_present_nameAlias) {
				if (!(this_present_nameAlias && that_present_nameAlias))
					return false;
				if (!this.nameAlias.equals(that.nameAlias))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetTid()) ? 131071 : 524287);
			if (isSetTid())
				hashCode = hashCode * 8191 + tid.hashCode();

			hashCode = hashCode * 8191 + ((isSetNameAlias()) ? 131071 : 524287);
			if (isSetNameAlias())
				hashCode = hashCode * 8191 + nameAlias.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setContactAlias_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetNameAlias()).compareTo(other.isSetNameAlias());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetNameAlias()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameAlias, other.nameAlias);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setContactAlias_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			if (this.tid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.tid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("nameAlias:");
			if (this.nameAlias == null) {
				sb.append("null");
			}
			else {
				sb.append(this.nameAlias);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setContactAlias_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactAlias_argsStandardScheme getScheme() {
				return new setContactAlias_argsStandardScheme();
			}

		}

		private static class setContactAlias_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setContactAlias_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setContactAlias_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.tid = iprot.readString();
							struct.setTidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // NAME_ALIAS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.nameAlias = iprot.readString();
							struct.setNameAliasIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setContactAlias_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.tid != null) {
					oprot.writeFieldBegin(TID_FIELD_DESC);
					oprot.writeString(struct.tid);
					oprot.writeFieldEnd();
				}
				if (struct.nameAlias != null) {
					oprot.writeFieldBegin(NAME_ALIAS_FIELD_DESC);
					oprot.writeString(struct.nameAlias);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setContactAlias_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setContactAlias_argsTupleScheme getScheme() {
				return new setContactAlias_argsTupleScheme();
			}

		}

		private static class setContactAlias_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setContactAlias_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setContactAlias_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetTid()) {
					optionals.set(1);
				}
				if (struct.isSetNameAlias()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetTid()) {
					oprot.writeString(struct.tid);
				}
				if (struct.isSetNameAlias()) {
					oprot.writeString(struct.nameAlias);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setContactAlias_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.tid = iprot.readString();
					struct.setTidIsSet(true);
				}
				if (incoming.get(2)) {
					struct.nameAlias = iprot.readString();
					struct.setNameAliasIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setContactAlias_result
			implements org.apache.thrift.TBase<setContactAlias_result, setContactAlias_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setContactAlias_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setContactAlias_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setContactAlias_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setContactAlias_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Contact success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Contact.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setContactAlias_result.class, metaDataMap);
		}

		public setContactAlias_result() {
		}

		public setContactAlias_result(Contact success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setContactAlias_result(setContactAlias_result other) {
			if (other.isSetSuccess()) {
				this.success = new Contact(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setContactAlias_result deepCopy() {
			return new setContactAlias_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Contact getSuccess() {
			return this.success;
		}

		public setContactAlias_result setSuccess(@org.apache.thrift.annotation.Nullable Contact success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setContactAlias_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Contact) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setContactAlias_result)
				return this.equals((setContactAlias_result) that);
			return false;
		}

		public boolean equals(setContactAlias_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setContactAlias_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setContactAlias_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setContactAlias_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactAlias_resultStandardScheme getScheme() {
				return new setContactAlias_resultStandardScheme();
			}

		}

		private static class setContactAlias_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setContactAlias_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setContactAlias_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Contact();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setContactAlias_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setContactAlias_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactAlias_resultTupleScheme getScheme() {
				return new setContactAlias_resultTupleScheme();
			}

		}

		private static class setContactAlias_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setContactAlias_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setContactAlias_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setContactAlias_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Contact();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class emptyContactClass_args
			implements org.apache.thrift.TBase<emptyContactClass_args, emptyContactClass_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<emptyContactClass_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"emptyContactClass_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CLS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsName", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new emptyContactClass_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new emptyContactClass_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsName; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CLS_NAME((short) 2, "clsName");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CLS_NAME
					return CLS_NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_NAME, new org.apache.thrift.meta_data.FieldMetaData("clsName",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(emptyContactClass_args.class, metaDataMap);
		}

		public emptyContactClass_args() {
		}

		public emptyContactClass_args(java.lang.String uid, java.lang.String clsName) {
			this();
			this.uid = uid;
			this.clsName = clsName;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public emptyContactClass_args(emptyContactClass_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetClsName()) {
				this.clsName = other.clsName;
			}
		}

		public emptyContactClass_args deepCopy() {
			return new emptyContactClass_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.clsName = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public emptyContactClass_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsName() {
			return this.clsName;
		}

		public emptyContactClass_args setClsName(@org.apache.thrift.annotation.Nullable java.lang.String clsName) {
			this.clsName = clsName;
			return this;
		}

		public void unsetClsName() {
			this.clsName = null;
		}

		/**
		 * Returns true if field clsName is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsName() {
			return this.clsName != null;
		}

		public void setClsNameIsSet(boolean value) {
			if (!value) {
				this.clsName = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CLS_NAME:
				if (value == null) {
					unsetClsName();
				}
				else {
					setClsName((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CLS_NAME:
				return getClsName();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CLS_NAME:
				return isSetClsName();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof emptyContactClass_args)
				return this.equals((emptyContactClass_args) that);
			return false;
		}

		public boolean equals(emptyContactClass_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_clsName = true && this.isSetClsName();
			boolean that_present_clsName = true && that.isSetClsName();
			if (this_present_clsName || that_present_clsName) {
				if (!(this_present_clsName && that_present_clsName))
					return false;
				if (!this.clsName.equals(that.clsName))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsName()) ? 131071 : 524287);
			if (isSetClsName())
				hashCode = hashCode * 8191 + clsName.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(emptyContactClass_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsName()).compareTo(other.isSetClsName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsName, other.clsName);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("emptyContactClass_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsName:");
			if (this.clsName == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsName);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class emptyContactClass_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public emptyContactClass_argsStandardScheme getScheme() {
				return new emptyContactClass_argsStandardScheme();
			}

		}

		private static class emptyContactClass_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<emptyContactClass_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, emptyContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CLS_NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsName = iprot.readString();
							struct.setClsNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, emptyContactClass_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.clsName != null) {
					oprot.writeFieldBegin(CLS_NAME_FIELD_DESC);
					oprot.writeString(struct.clsName);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class emptyContactClass_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public emptyContactClass_argsTupleScheme getScheme() {
				return new emptyContactClass_argsTupleScheme();
			}

		}

		private static class emptyContactClass_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<emptyContactClass_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, emptyContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetClsName()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetClsName()) {
					oprot.writeString(struct.clsName);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, emptyContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.clsName = iprot.readString();
					struct.setClsNameIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class emptyContactClass_result
			implements org.apache.thrift.TBase<emptyContactClass_result, emptyContactClass_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<emptyContactClass_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"emptyContactClass_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new emptyContactClass_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new emptyContactClass_resultTupleSchemeFactory();

		public int success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(emptyContactClass_result.class, metaDataMap);
		}

		public emptyContactClass_result() {
		}

		public emptyContactClass_result(int success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public emptyContactClass_result(emptyContactClass_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public emptyContactClass_result deepCopy() {
			return new emptyContactClass_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
			this.err = null;
		}

		public int getSuccess() {
			return this.success;
		}

		public emptyContactClass_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public emptyContactClass_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.lang.Integer) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof emptyContactClass_result)
				return this.equals((emptyContactClass_result) that);
			return false;
		}

		public boolean equals(emptyContactClass_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + success;

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(emptyContactClass_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("emptyContactClass_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class emptyContactClass_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public emptyContactClass_resultStandardScheme getScheme() {
				return new emptyContactClass_resultStandardScheme();
			}

		}

		private static class emptyContactClass_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<emptyContactClass_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, emptyContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, emptyContactClass_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class emptyContactClass_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public emptyContactClass_resultTupleScheme getScheme() {
				return new emptyContactClass_resultTupleScheme();
			}

		}

		private static class emptyContactClass_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<emptyContactClass_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, emptyContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, emptyContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addContactClass_args
			implements org.apache.thrift.TBase<addContactClass_args, addContactClass_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<addContactClass_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addContactClass_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CLS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsName", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.protocol.TField CLS_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsParent", org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"priority", org.apache.thrift.protocol.TType.I32, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addContactClass_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addContactClass_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsName; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsParent; // required

		public int priority; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CLS_NAME((short) 2, "clsName"), CLS_PARENT((short) 3,
					"clsParent"), PRIORITY((short) 4, "priority");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CLS_NAME
					return CLS_NAME;
				case 3: // CLS_PARENT
					return CLS_PARENT;
				case 4: // PRIORITY
					return PRIORITY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __PRIORITY_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_NAME, new org.apache.thrift.meta_data.FieldMetaData("clsName",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_PARENT, new org.apache.thrift.meta_data.FieldMetaData("clsParent",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PRIORITY,
					new org.apache.thrift.meta_data.FieldMetaData("priority",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContactClass_args.class, metaDataMap);
		}

		public addContactClass_args() {
		}

		public addContactClass_args(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority) {
			this();
			this.uid = uid;
			this.clsName = clsName;
			this.clsParent = clsParent;
			this.priority = priority;
			setPriorityIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addContactClass_args(addContactClass_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetClsName()) {
				this.clsName = other.clsName;
			}
			if (other.isSetClsParent()) {
				this.clsParent = other.clsParent;
			}
			this.priority = other.priority;
		}

		public addContactClass_args deepCopy() {
			return new addContactClass_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.clsName = null;
			this.clsParent = null;
			setPriorityIsSet(false);
			this.priority = 0;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public addContactClass_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsName() {
			return this.clsName;
		}

		public addContactClass_args setClsName(@org.apache.thrift.annotation.Nullable java.lang.String clsName) {
			this.clsName = clsName;
			return this;
		}

		public void unsetClsName() {
			this.clsName = null;
		}

		/**
		 * Returns true if field clsName is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsName() {
			return this.clsName != null;
		}

		public void setClsNameIsSet(boolean value) {
			if (!value) {
				this.clsName = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsParent() {
			return this.clsParent;
		}

		public addContactClass_args setClsParent(@org.apache.thrift.annotation.Nullable java.lang.String clsParent) {
			this.clsParent = clsParent;
			return this;
		}

		public void unsetClsParent() {
			this.clsParent = null;
		}

		/**
		 * Returns true if field clsParent is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsParent() {
			return this.clsParent != null;
		}

		public void setClsParentIsSet(boolean value) {
			if (!value) {
				this.clsParent = null;
			}
		}

		public int getPriority() {
			return this.priority;
		}

		public addContactClass_args setPriority(int priority) {
			this.priority = priority;
			setPriorityIsSet(true);
			return this;
		}

		public void unsetPriority() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		/**
		 * Returns true if field priority is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPriority() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		public void setPriorityIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CLS_NAME:
				if (value == null) {
					unsetClsName();
				}
				else {
					setClsName((java.lang.String) value);
				}
				break;

			case CLS_PARENT:
				if (value == null) {
					unsetClsParent();
				}
				else {
					setClsParent((java.lang.String) value);
				}
				break;

			case PRIORITY:
				if (value == null) {
					unsetPriority();
				}
				else {
					setPriority((java.lang.Integer) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CLS_NAME:
				return getClsName();

			case CLS_PARENT:
				return getClsParent();

			case PRIORITY:
				return getPriority();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CLS_NAME:
				return isSetClsName();
			case CLS_PARENT:
				return isSetClsParent();
			case PRIORITY:
				return isSetPriority();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addContactClass_args)
				return this.equals((addContactClass_args) that);
			return false;
		}

		public boolean equals(addContactClass_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_clsName = true && this.isSetClsName();
			boolean that_present_clsName = true && that.isSetClsName();
			if (this_present_clsName || that_present_clsName) {
				if (!(this_present_clsName && that_present_clsName))
					return false;
				if (!this.clsName.equals(that.clsName))
					return false;
			}

			boolean this_present_clsParent = true && this.isSetClsParent();
			boolean that_present_clsParent = true && that.isSetClsParent();
			if (this_present_clsParent || that_present_clsParent) {
				if (!(this_present_clsParent && that_present_clsParent))
					return false;
				if (!this.clsParent.equals(that.clsParent))
					return false;
			}

			boolean this_present_priority = true;
			boolean that_present_priority = true;
			if (this_present_priority || that_present_priority) {
				if (!(this_present_priority && that_present_priority))
					return false;
				if (this.priority != that.priority)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsName()) ? 131071 : 524287);
			if (isSetClsName())
				hashCode = hashCode * 8191 + clsName.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsParent()) ? 131071 : 524287);
			if (isSetClsParent())
				hashCode = hashCode * 8191 + clsParent.hashCode();

			hashCode = hashCode * 8191 + priority;

			return hashCode;
		}

		@Override
		public int compareTo(addContactClass_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsName()).compareTo(other.isSetClsName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsName, other.clsName);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsParent()).compareTo(other.isSetClsParent());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsParent()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsParent, other.clsParent);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPriority()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addContactClass_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsName:");
			if (this.clsName == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsName);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsParent:");
			if (this.clsParent == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsParent);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("priority:");
			sb.append(this.priority);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addContactClass_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public addContactClass_argsStandardScheme getScheme() {
				return new addContactClass_argsStandardScheme();
			}

		}

		private static class addContactClass_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addContactClass_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CLS_NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsName = iprot.readString();
							struct.setClsNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // CLS_PARENT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsParent = iprot.readString();
							struct.setClsParentIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // PRIORITY
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.priority = iprot.readI32();
							struct.setPriorityIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addContactClass_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.clsName != null) {
					oprot.writeFieldBegin(CLS_NAME_FIELD_DESC);
					oprot.writeString(struct.clsName);
					oprot.writeFieldEnd();
				}
				if (struct.clsParent != null) {
					oprot.writeFieldBegin(CLS_PARENT_FIELD_DESC);
					oprot.writeString(struct.clsParent);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
				oprot.writeI32(struct.priority);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addContactClass_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addContactClass_argsTupleScheme getScheme() {
				return new addContactClass_argsTupleScheme();
			}

		}

		private static class addContactClass_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<addContactClass_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetClsName()) {
					optionals.set(1);
				}
				if (struct.isSetClsParent()) {
					optionals.set(2);
				}
				if (struct.isSetPriority()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetClsName()) {
					oprot.writeString(struct.clsName);
				}
				if (struct.isSetClsParent()) {
					oprot.writeString(struct.clsParent);
				}
				if (struct.isSetPriority()) {
					oprot.writeI32(struct.priority);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.clsName = iprot.readString();
					struct.setClsNameIsSet(true);
				}
				if (incoming.get(2)) {
					struct.clsParent = iprot.readString();
					struct.setClsParentIsSet(true);
				}
				if (incoming.get(3)) {
					struct.priority = iprot.readI32();
					struct.setPriorityIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addContactClass_result
			implements org.apache.thrift.TBase<addContactClass_result, addContactClass_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<addContactClass_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addContactClass_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addContactClass_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addContactClass_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ContactClass success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ContactClass.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addContactClass_result.class, metaDataMap);
		}

		public addContactClass_result() {
		}

		public addContactClass_result(ContactClass success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addContactClass_result(addContactClass_result other) {
			if (other.isSetSuccess()) {
				this.success = new ContactClass(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public addContactClass_result deepCopy() {
			return new addContactClass_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ContactClass getSuccess() {
			return this.success;
		}

		public addContactClass_result setSuccess(@org.apache.thrift.annotation.Nullable ContactClass success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public addContactClass_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ContactClass) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addContactClass_result)
				return this.equals((addContactClass_result) that);
			return false;
		}

		public boolean equals(addContactClass_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addContactClass_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addContactClass_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addContactClass_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public addContactClass_resultStandardScheme getScheme() {
				return new addContactClass_resultStandardScheme();
			}

		}

		private static class addContactClass_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addContactClass_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ContactClass();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addContactClass_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addContactClass_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public addContactClass_resultTupleScheme getScheme() {
				return new addContactClass_resultTupleScheme();
			}

		}

		private static class addContactClass_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<addContactClass_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ContactClass();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class delContactClass_args
			implements org.apache.thrift.TBase<delContactClass_args, delContactClass_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<delContactClass_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"delContactClass_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CLS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsName", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delContactClass_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delContactClass_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsName; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CLS_NAME((short) 2, "clsName");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CLS_NAME
					return CLS_NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_NAME, new org.apache.thrift.meta_data.FieldMetaData("clsName",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delContactClass_args.class, metaDataMap);
		}

		public delContactClass_args() {
		}

		public delContactClass_args(java.lang.String uid, java.lang.String clsName) {
			this();
			this.uid = uid;
			this.clsName = clsName;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public delContactClass_args(delContactClass_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetClsName()) {
				this.clsName = other.clsName;
			}
		}

		public delContactClass_args deepCopy() {
			return new delContactClass_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.clsName = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public delContactClass_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsName() {
			return this.clsName;
		}

		public delContactClass_args setClsName(@org.apache.thrift.annotation.Nullable java.lang.String clsName) {
			this.clsName = clsName;
			return this;
		}

		public void unsetClsName() {
			this.clsName = null;
		}

		/**
		 * Returns true if field clsName is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsName() {
			return this.clsName != null;
		}

		public void setClsNameIsSet(boolean value) {
			if (!value) {
				this.clsName = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CLS_NAME:
				if (value == null) {
					unsetClsName();
				}
				else {
					setClsName((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CLS_NAME:
				return getClsName();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CLS_NAME:
				return isSetClsName();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof delContactClass_args)
				return this.equals((delContactClass_args) that);
			return false;
		}

		public boolean equals(delContactClass_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_clsName = true && this.isSetClsName();
			boolean that_present_clsName = true && that.isSetClsName();
			if (this_present_clsName || that_present_clsName) {
				if (!(this_present_clsName && that_present_clsName))
					return false;
				if (!this.clsName.equals(that.clsName))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsName()) ? 131071 : 524287);
			if (isSetClsName())
				hashCode = hashCode * 8191 + clsName.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(delContactClass_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsName()).compareTo(other.isSetClsName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsName, other.clsName);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("delContactClass_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsName:");
			if (this.clsName == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsName);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class delContactClass_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public delContactClass_argsStandardScheme getScheme() {
				return new delContactClass_argsStandardScheme();
			}

		}

		private static class delContactClass_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<delContactClass_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, delContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CLS_NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsName = iprot.readString();
							struct.setClsNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, delContactClass_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.clsName != null) {
					oprot.writeFieldBegin(CLS_NAME_FIELD_DESC);
					oprot.writeString(struct.clsName);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class delContactClass_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delContactClass_argsTupleScheme getScheme() {
				return new delContactClass_argsTupleScheme();
			}

		}

		private static class delContactClass_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<delContactClass_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, delContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetClsName()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetClsName()) {
					oprot.writeString(struct.clsName);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, delContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.clsName = iprot.readString();
					struct.setClsNameIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class delContactClass_result
			implements org.apache.thrift.TBase<delContactClass_result, delContactClass_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<delContactClass_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"delContactClass_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.I32, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delContactClass_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delContactClass_resultTupleSchemeFactory();

		public int success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delContactClass_result.class, metaDataMap);
		}

		public delContactClass_result() {
		}

		public delContactClass_result(int success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			setSuccessIsSet(true);
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public delContactClass_result(delContactClass_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public delContactClass_result deepCopy() {
			return new delContactClass_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = 0;
			this.err = null;
		}

		public int getSuccess() {
			return this.success;
		}

		public delContactClass_result setSuccess(int success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public delContactClass_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((java.lang.Integer) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof delContactClass_result)
				return this.equals((delContactClass_result) that);
			return false;
		}

		public boolean equals(delContactClass_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + success;

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(delContactClass_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("delContactClass_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class delContactClass_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public delContactClass_resultStandardScheme getScheme() {
				return new delContactClass_resultStandardScheme();
			}

		}

		private static class delContactClass_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<delContactClass_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, delContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.success = iprot.readI32();
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, delContactClass_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeI32(struct.success);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class delContactClass_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public delContactClass_resultTupleScheme getScheme() {
				return new delContactClass_resultTupleScheme();
			}

		}

		private static class delContactClass_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<delContactClass_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, delContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					oprot.writeI32(struct.success);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, delContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = iprot.readI32();
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setContactClass_args
			implements org.apache.thrift.TBase<setContactClass_args, setContactClass_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setContactClass_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setContactClass_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CLS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsName", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.protocol.TField CLS_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsParent", org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"priority", org.apache.thrift.protocol.TType.I32, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setContactClass_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setContactClass_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsName; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsParent; // required

		public int priority; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CLS_NAME((short) 2, "clsName"), CLS_PARENT((short) 3,
					"clsParent"), PRIORITY((short) 4, "priority");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CLS_NAME
					return CLS_NAME;
				case 3: // CLS_PARENT
					return CLS_PARENT;
				case 4: // PRIORITY
					return PRIORITY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __PRIORITY_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_NAME, new org.apache.thrift.meta_data.FieldMetaData("clsName",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_PARENT, new org.apache.thrift.meta_data.FieldMetaData("clsParent",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.PRIORITY,
					new org.apache.thrift.meta_data.FieldMetaData("priority",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setContactClass_args.class, metaDataMap);
		}

		public setContactClass_args() {
		}

		public setContactClass_args(java.lang.String uid, java.lang.String clsName, java.lang.String clsParent,
				int priority) {
			this();
			this.uid = uid;
			this.clsName = clsName;
			this.clsParent = clsParent;
			this.priority = priority;
			setPriorityIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setContactClass_args(setContactClass_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetClsName()) {
				this.clsName = other.clsName;
			}
			if (other.isSetClsParent()) {
				this.clsParent = other.clsParent;
			}
			this.priority = other.priority;
		}

		public setContactClass_args deepCopy() {
			return new setContactClass_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.clsName = null;
			this.clsParent = null;
			setPriorityIsSet(false);
			this.priority = 0;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public setContactClass_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsName() {
			return this.clsName;
		}

		public setContactClass_args setClsName(@org.apache.thrift.annotation.Nullable java.lang.String clsName) {
			this.clsName = clsName;
			return this;
		}

		public void unsetClsName() {
			this.clsName = null;
		}

		/**
		 * Returns true if field clsName is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsName() {
			return this.clsName != null;
		}

		public void setClsNameIsSet(boolean value) {
			if (!value) {
				this.clsName = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsParent() {
			return this.clsParent;
		}

		public setContactClass_args setClsParent(@org.apache.thrift.annotation.Nullable java.lang.String clsParent) {
			this.clsParent = clsParent;
			return this;
		}

		public void unsetClsParent() {
			this.clsParent = null;
		}

		/**
		 * Returns true if field clsParent is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsParent() {
			return this.clsParent != null;
		}

		public void setClsParentIsSet(boolean value) {
			if (!value) {
				this.clsParent = null;
			}
		}

		public int getPriority() {
			return this.priority;
		}

		public setContactClass_args setPriority(int priority) {
			this.priority = priority;
			setPriorityIsSet(true);
			return this;
		}

		public void unsetPriority() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		/**
		 * Returns true if field priority is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetPriority() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
		}

		public void setPriorityIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CLS_NAME:
				if (value == null) {
					unsetClsName();
				}
				else {
					setClsName((java.lang.String) value);
				}
				break;

			case CLS_PARENT:
				if (value == null) {
					unsetClsParent();
				}
				else {
					setClsParent((java.lang.String) value);
				}
				break;

			case PRIORITY:
				if (value == null) {
					unsetPriority();
				}
				else {
					setPriority((java.lang.Integer) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CLS_NAME:
				return getClsName();

			case CLS_PARENT:
				return getClsParent();

			case PRIORITY:
				return getPriority();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CLS_NAME:
				return isSetClsName();
			case CLS_PARENT:
				return isSetClsParent();
			case PRIORITY:
				return isSetPriority();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setContactClass_args)
				return this.equals((setContactClass_args) that);
			return false;
		}

		public boolean equals(setContactClass_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_clsName = true && this.isSetClsName();
			boolean that_present_clsName = true && that.isSetClsName();
			if (this_present_clsName || that_present_clsName) {
				if (!(this_present_clsName && that_present_clsName))
					return false;
				if (!this.clsName.equals(that.clsName))
					return false;
			}

			boolean this_present_clsParent = true && this.isSetClsParent();
			boolean that_present_clsParent = true && that.isSetClsParent();
			if (this_present_clsParent || that_present_clsParent) {
				if (!(this_present_clsParent && that_present_clsParent))
					return false;
				if (!this.clsParent.equals(that.clsParent))
					return false;
			}

			boolean this_present_priority = true;
			boolean that_present_priority = true;
			if (this_present_priority || that_present_priority) {
				if (!(this_present_priority && that_present_priority))
					return false;
				if (this.priority != that.priority)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsName()) ? 131071 : 524287);
			if (isSetClsName())
				hashCode = hashCode * 8191 + clsName.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsParent()) ? 131071 : 524287);
			if (isSetClsParent())
				hashCode = hashCode * 8191 + clsParent.hashCode();

			hashCode = hashCode * 8191 + priority;

			return hashCode;
		}

		@Override
		public int compareTo(setContactClass_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsName()).compareTo(other.isSetClsName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsName, other.clsName);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsParent()).compareTo(other.isSetClsParent());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsParent()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsParent, other.clsParent);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetPriority()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setContactClass_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsName:");
			if (this.clsName == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsName);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsParent:");
			if (this.clsParent == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsParent);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("priority:");
			sb.append(this.priority);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setContactClass_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactClass_argsStandardScheme getScheme() {
				return new setContactClass_argsStandardScheme();
			}

		}

		private static class setContactClass_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setContactClass_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CLS_NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsName = iprot.readString();
							struct.setClsNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // CLS_PARENT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsParent = iprot.readString();
							struct.setClsParentIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // PRIORITY
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.priority = iprot.readI32();
							struct.setPriorityIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setContactClass_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.clsName != null) {
					oprot.writeFieldBegin(CLS_NAME_FIELD_DESC);
					oprot.writeString(struct.clsName);
					oprot.writeFieldEnd();
				}
				if (struct.clsParent != null) {
					oprot.writeFieldBegin(CLS_PARENT_FIELD_DESC);
					oprot.writeString(struct.clsParent);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
				oprot.writeI32(struct.priority);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setContactClass_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setContactClass_argsTupleScheme getScheme() {
				return new setContactClass_argsTupleScheme();
			}

		}

		private static class setContactClass_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setContactClass_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetClsName()) {
					optionals.set(1);
				}
				if (struct.isSetClsParent()) {
					optionals.set(2);
				}
				if (struct.isSetPriority()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetClsName()) {
					oprot.writeString(struct.clsName);
				}
				if (struct.isSetClsParent()) {
					oprot.writeString(struct.clsParent);
				}
				if (struct.isSetPriority()) {
					oprot.writeI32(struct.priority);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.clsName = iprot.readString();
					struct.setClsNameIsSet(true);
				}
				if (incoming.get(2)) {
					struct.clsParent = iprot.readString();
					struct.setClsParentIsSet(true);
				}
				if (incoming.get(3)) {
					struct.priority = iprot.readI32();
					struct.setPriorityIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setContactClass_result
			implements org.apache.thrift.TBase<setContactClass_result, setContactClass_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setContactClass_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setContactClass_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setContactClass_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setContactClass_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ContactClass success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ContactClass.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setContactClass_result.class, metaDataMap);
		}

		public setContactClass_result() {
		}

		public setContactClass_result(ContactClass success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setContactClass_result(setContactClass_result other) {
			if (other.isSetSuccess()) {
				this.success = new ContactClass(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setContactClass_result deepCopy() {
			return new setContactClass_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ContactClass getSuccess() {
			return this.success;
		}

		public setContactClass_result setSuccess(@org.apache.thrift.annotation.Nullable ContactClass success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setContactClass_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ContactClass) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setContactClass_result)
				return this.equals((setContactClass_result) that);
			return false;
		}

		public boolean equals(setContactClass_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setContactClass_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setContactClass_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setContactClass_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactClass_resultStandardScheme getScheme() {
				return new setContactClass_resultStandardScheme();
			}

		}

		private static class setContactClass_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setContactClass_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ContactClass();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setContactClass_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setContactClass_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactClass_resultTupleScheme getScheme() {
				return new setContactClass_resultTupleScheme();
			}

		}

		private static class setContactClass_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setContactClass_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ContactClass();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setContactClassAlias_args
			implements org.apache.thrift.TBase<setContactClassAlias_args, setContactClassAlias_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setContactClassAlias_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setContactClassAlias_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField CLS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsName", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.protocol.TField CLS_ALIAS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsAlias", org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setContactClassAlias_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setContactClassAlias_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsName; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsAlias; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), CLS_NAME((short) 2, "clsName"), CLS_ALIAS((short) 3, "clsAlias");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // CLS_NAME
					return CLS_NAME;
				case 3: // CLS_ALIAS
					return CLS_ALIAS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_NAME, new org.apache.thrift.meta_data.FieldMetaData("clsName",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_ALIAS, new org.apache.thrift.meta_data.FieldMetaData("clsAlias",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setContactClassAlias_args.class,
					metaDataMap);
		}

		public setContactClassAlias_args() {
		}

		public setContactClassAlias_args(java.lang.String uid, java.lang.String clsName, java.lang.String clsAlias) {
			this();
			this.uid = uid;
			this.clsName = clsName;
			this.clsAlias = clsAlias;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setContactClassAlias_args(setContactClassAlias_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetClsName()) {
				this.clsName = other.clsName;
			}
			if (other.isSetClsAlias()) {
				this.clsAlias = other.clsAlias;
			}
		}

		public setContactClassAlias_args deepCopy() {
			return new setContactClassAlias_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.clsName = null;
			this.clsAlias = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public setContactClassAlias_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsName() {
			return this.clsName;
		}

		public setContactClassAlias_args setClsName(@org.apache.thrift.annotation.Nullable java.lang.String clsName) {
			this.clsName = clsName;
			return this;
		}

		public void unsetClsName() {
			this.clsName = null;
		}

		/**
		 * Returns true if field clsName is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsName() {
			return this.clsName != null;
		}

		public void setClsNameIsSet(boolean value) {
			if (!value) {
				this.clsName = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsAlias() {
			return this.clsAlias;
		}

		public setContactClassAlias_args setClsAlias(@org.apache.thrift.annotation.Nullable java.lang.String clsAlias) {
			this.clsAlias = clsAlias;
			return this;
		}

		public void unsetClsAlias() {
			this.clsAlias = null;
		}

		/**
		 * Returns true if field clsAlias is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsAlias() {
			return this.clsAlias != null;
		}

		public void setClsAliasIsSet(boolean value) {
			if (!value) {
				this.clsAlias = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case CLS_NAME:
				if (value == null) {
					unsetClsName();
				}
				else {
					setClsName((java.lang.String) value);
				}
				break;

			case CLS_ALIAS:
				if (value == null) {
					unsetClsAlias();
				}
				else {
					setClsAlias((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case CLS_NAME:
				return getClsName();

			case CLS_ALIAS:
				return getClsAlias();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case CLS_NAME:
				return isSetClsName();
			case CLS_ALIAS:
				return isSetClsAlias();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setContactClassAlias_args)
				return this.equals((setContactClassAlias_args) that);
			return false;
		}

		public boolean equals(setContactClassAlias_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_clsName = true && this.isSetClsName();
			boolean that_present_clsName = true && that.isSetClsName();
			if (this_present_clsName || that_present_clsName) {
				if (!(this_present_clsName && that_present_clsName))
					return false;
				if (!this.clsName.equals(that.clsName))
					return false;
			}

			boolean this_present_clsAlias = true && this.isSetClsAlias();
			boolean that_present_clsAlias = true && that.isSetClsAlias();
			if (this_present_clsAlias || that_present_clsAlias) {
				if (!(this_present_clsAlias && that_present_clsAlias))
					return false;
				if (!this.clsAlias.equals(that.clsAlias))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsName()) ? 131071 : 524287);
			if (isSetClsName())
				hashCode = hashCode * 8191 + clsName.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsAlias()) ? 131071 : 524287);
			if (isSetClsAlias())
				hashCode = hashCode * 8191 + clsAlias.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setContactClassAlias_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsName()).compareTo(other.isSetClsName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsName, other.clsName);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsAlias()).compareTo(other.isSetClsAlias());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsAlias()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsAlias, other.clsAlias);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setContactClassAlias_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsName:");
			if (this.clsName == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsName);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsAlias:");
			if (this.clsAlias == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsAlias);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setContactClassAlias_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactClassAlias_argsStandardScheme getScheme() {
				return new setContactClassAlias_argsStandardScheme();
			}

		}

		private static class setContactClassAlias_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setContactClassAlias_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setContactClassAlias_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CLS_NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsName = iprot.readString();
							struct.setClsNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // CLS_ALIAS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsAlias = iprot.readString();
							struct.setClsAliasIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setContactClassAlias_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.clsName != null) {
					oprot.writeFieldBegin(CLS_NAME_FIELD_DESC);
					oprot.writeString(struct.clsName);
					oprot.writeFieldEnd();
				}
				if (struct.clsAlias != null) {
					oprot.writeFieldBegin(CLS_ALIAS_FIELD_DESC);
					oprot.writeString(struct.clsAlias);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setContactClassAlias_argsTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactClassAlias_argsTupleScheme getScheme() {
				return new setContactClassAlias_argsTupleScheme();
			}

		}

		private static class setContactClassAlias_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setContactClassAlias_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setContactClassAlias_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetClsName()) {
					optionals.set(1);
				}
				if (struct.isSetClsAlias()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetClsName()) {
					oprot.writeString(struct.clsName);
				}
				if (struct.isSetClsAlias()) {
					oprot.writeString(struct.clsAlias);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setContactClassAlias_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.clsName = iprot.readString();
					struct.setClsNameIsSet(true);
				}
				if (incoming.get(2)) {
					struct.clsAlias = iprot.readString();
					struct.setClsAliasIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setContactClassAlias_result
			implements org.apache.thrift.TBase<setContactClassAlias_result, setContactClassAlias_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setContactClassAlias_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setContactClassAlias_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setContactClassAlias_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setContactClassAlias_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ContactClass success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									ContactClass.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setContactClassAlias_result.class,
					metaDataMap);
		}

		public setContactClassAlias_result() {
		}

		public setContactClassAlias_result(ContactClass success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setContactClassAlias_result(setContactClassAlias_result other) {
			if (other.isSetSuccess()) {
				this.success = new ContactClass(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setContactClassAlias_result deepCopy() {
			return new setContactClassAlias_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ContactClass getSuccess() {
			return this.success;
		}

		public setContactClassAlias_result setSuccess(@org.apache.thrift.annotation.Nullable ContactClass success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setContactClassAlias_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((ContactClass) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setContactClassAlias_result)
				return this.equals((setContactClassAlias_result) that);
			return false;
		}

		public boolean equals(setContactClassAlias_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setContactClassAlias_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setContactClassAlias_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setContactClassAlias_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactClassAlias_resultStandardScheme getScheme() {
				return new setContactClassAlias_resultStandardScheme();
			}

		}

		private static class setContactClassAlias_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setContactClassAlias_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setContactClassAlias_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new ContactClass();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setContactClassAlias_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setContactClassAlias_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public setContactClassAlias_resultTupleScheme getScheme() {
				return new setContactClassAlias_resultTupleScheme();
			}

		}

		private static class setContactClassAlias_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setContactClassAlias_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setContactClassAlias_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setContactClassAlias_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new ContactClass();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class joinContactClass_args
			implements org.apache.thrift.TBase<joinContactClass_args, joinContactClass_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<joinContactClass_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"joinContactClass_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tid", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.protocol.TField CLS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"clsName", org.apache.thrift.protocol.TType.STRING, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinContactClass_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinContactClass_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String tid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String clsName; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), TID((short) 2, "tid"), CLS_NAME((short) 3, "clsName");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // TID
					return TID;
				case 3: // CLS_NAME
					return CLS_NAME;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.CLS_NAME, new org.apache.thrift.meta_data.FieldMetaData("clsName",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinContactClass_args.class, metaDataMap);
		}

		public joinContactClass_args() {
		}

		public joinContactClass_args(java.lang.String uid, java.lang.String tid, java.lang.String clsName) {
			this();
			this.uid = uid;
			this.tid = tid;
			this.clsName = clsName;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public joinContactClass_args(joinContactClass_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetTid()) {
				this.tid = other.tid;
			}
			if (other.isSetClsName()) {
				this.clsName = other.clsName;
			}
		}

		public joinContactClass_args deepCopy() {
			return new joinContactClass_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.tid = null;
			this.clsName = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public joinContactClass_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getTid() {
			return this.tid;
		}

		public joinContactClass_args setTid(@org.apache.thrift.annotation.Nullable java.lang.String tid) {
			this.tid = tid;
			return this;
		}

		public void unsetTid() {
			this.tid = null;
		}

		/**
		 * Returns true if field tid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetTid() {
			return this.tid != null;
		}

		public void setTidIsSet(boolean value) {
			if (!value) {
				this.tid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getClsName() {
			return this.clsName;
		}

		public joinContactClass_args setClsName(@org.apache.thrift.annotation.Nullable java.lang.String clsName) {
			this.clsName = clsName;
			return this;
		}

		public void unsetClsName() {
			this.clsName = null;
		}

		/**
		 * Returns true if field clsName is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetClsName() {
			return this.clsName != null;
		}

		public void setClsNameIsSet(boolean value) {
			if (!value) {
				this.clsName = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case TID:
				if (value == null) {
					unsetTid();
				}
				else {
					setTid((java.lang.String) value);
				}
				break;

			case CLS_NAME:
				if (value == null) {
					unsetClsName();
				}
				else {
					setClsName((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case TID:
				return getTid();

			case CLS_NAME:
				return getClsName();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case TID:
				return isSetTid();
			case CLS_NAME:
				return isSetClsName();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof joinContactClass_args)
				return this.equals((joinContactClass_args) that);
			return false;
		}

		public boolean equals(joinContactClass_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_tid = true && this.isSetTid();
			boolean that_present_tid = true && that.isSetTid();
			if (this_present_tid || that_present_tid) {
				if (!(this_present_tid && that_present_tid))
					return false;
				if (!this.tid.equals(that.tid))
					return false;
			}

			boolean this_present_clsName = true && this.isSetClsName();
			boolean that_present_clsName = true && that.isSetClsName();
			if (this_present_clsName || that_present_clsName) {
				if (!(this_present_clsName && that_present_clsName))
					return false;
				if (!this.clsName.equals(that.clsName))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetTid()) ? 131071 : 524287);
			if (isSetTid())
				hashCode = hashCode * 8191 + tid.hashCode();

			hashCode = hashCode * 8191 + ((isSetClsName()) ? 131071 : 524287);
			if (isSetClsName())
				hashCode = hashCode * 8191 + clsName.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(joinContactClass_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetClsName()).compareTo(other.isSetClsName());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetClsName()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clsName, other.clsName);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("joinContactClass_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			if (this.tid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.tid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("clsName:");
			if (this.clsName == null) {
				sb.append("null");
			}
			else {
				sb.append(this.clsName);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class joinContactClass_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public joinContactClass_argsStandardScheme getScheme() {
				return new joinContactClass_argsStandardScheme();
			}

		}

		private static class joinContactClass_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<joinContactClass_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, joinContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.tid = iprot.readString();
							struct.setTidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // CLS_NAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.clsName = iprot.readString();
							struct.setClsNameIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, joinContactClass_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.tid != null) {
					oprot.writeFieldBegin(TID_FIELD_DESC);
					oprot.writeString(struct.tid);
					oprot.writeFieldEnd();
				}
				if (struct.clsName != null) {
					oprot.writeFieldBegin(CLS_NAME_FIELD_DESC);
					oprot.writeString(struct.clsName);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class joinContactClass_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public joinContactClass_argsTupleScheme getScheme() {
				return new joinContactClass_argsTupleScheme();
			}

		}

		private static class joinContactClass_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<joinContactClass_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, joinContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetTid()) {
					optionals.set(1);
				}
				if (struct.isSetClsName()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetTid()) {
					oprot.writeString(struct.tid);
				}
				if (struct.isSetClsName()) {
					oprot.writeString(struct.clsName);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, joinContactClass_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.tid = iprot.readString();
					struct.setTidIsSet(true);
				}
				if (incoming.get(2)) {
					struct.clsName = iprot.readString();
					struct.setClsNameIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class joinContactClass_result
			implements org.apache.thrift.TBase<joinContactClass_result, joinContactClass_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<joinContactClass_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"joinContactClass_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new joinContactClass_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new joinContactClass_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Contact success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Contact.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(joinContactClass_result.class, metaDataMap);
		}

		public joinContactClass_result() {
		}

		public joinContactClass_result(Contact success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public joinContactClass_result(joinContactClass_result other) {
			if (other.isSetSuccess()) {
				this.success = new Contact(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public joinContactClass_result deepCopy() {
			return new joinContactClass_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Contact getSuccess() {
			return this.success;
		}

		public joinContactClass_result setSuccess(@org.apache.thrift.annotation.Nullable Contact success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public joinContactClass_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Contact) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof joinContactClass_result)
				return this.equals((joinContactClass_result) that);
			return false;
		}

		public boolean equals(joinContactClass_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(joinContactClass_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("joinContactClass_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class joinContactClass_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public joinContactClass_resultStandardScheme getScheme() {
				return new joinContactClass_resultStandardScheme();
			}

		}

		private static class joinContactClass_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<joinContactClass_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, joinContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Contact();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, joinContactClass_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class joinContactClass_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public joinContactClass_resultTupleScheme getScheme() {
				return new joinContactClass_resultTupleScheme();
			}

		}

		private static class joinContactClass_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<joinContactClass_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, joinContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, joinContactClass_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Contact();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addRecent_args implements org.apache.thrift.TBase<addRecent_args, addRecent_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<addRecent_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addRecent_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tid", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addRecent_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addRecent_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String tid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), TID((short) 2, "tid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // TID
					return TID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRecent_args.class, metaDataMap);
		}

		public addRecent_args() {
		}

		public addRecent_args(java.lang.String uid, java.lang.String tid) {
			this();
			this.uid = uid;
			this.tid = tid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addRecent_args(addRecent_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetTid()) {
				this.tid = other.tid;
			}
		}

		public addRecent_args deepCopy() {
			return new addRecent_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.tid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public addRecent_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getTid() {
			return this.tid;
		}

		public addRecent_args setTid(@org.apache.thrift.annotation.Nullable java.lang.String tid) {
			this.tid = tid;
			return this;
		}

		public void unsetTid() {
			this.tid = null;
		}

		/**
		 * Returns true if field tid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetTid() {
			return this.tid != null;
		}

		public void setTidIsSet(boolean value) {
			if (!value) {
				this.tid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case TID:
				if (value == null) {
					unsetTid();
				}
				else {
					setTid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case TID:
				return getTid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case TID:
				return isSetTid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addRecent_args)
				return this.equals((addRecent_args) that);
			return false;
		}

		public boolean equals(addRecent_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_tid = true && this.isSetTid();
			boolean that_present_tid = true && that.isSetTid();
			if (this_present_tid || that_present_tid) {
				if (!(this_present_tid && that_present_tid))
					return false;
				if (!this.tid.equals(that.tid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetTid()) ? 131071 : 524287);
			if (isSetTid())
				hashCode = hashCode * 8191 + tid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addRecent_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addRecent_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			if (this.tid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.tid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addRecent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addRecent_argsStandardScheme getScheme() {
				return new addRecent_argsStandardScheme();
			}

		}

		private static class addRecent_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addRecent_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addRecent_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.tid = iprot.readString();
							struct.setTidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addRecent_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.tid != null) {
					oprot.writeFieldBegin(TID_FIELD_DESC);
					oprot.writeString(struct.tid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addRecent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addRecent_argsTupleScheme getScheme() {
				return new addRecent_argsTupleScheme();
			}

		}

		private static class addRecent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addRecent_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addRecent_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetTid()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetTid()) {
					oprot.writeString(struct.tid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addRecent_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.tid = iprot.readString();
					struct.setTidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addRecent_result implements org.apache.thrift.TBase<addRecent_result, addRecent_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<addRecent_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addRecent_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addRecent_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addRecent_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Recent success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Recent.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRecent_result.class, metaDataMap);
		}

		public addRecent_result() {
		}

		public addRecent_result(Recent success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addRecent_result(addRecent_result other) {
			if (other.isSetSuccess()) {
				this.success = new Recent(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public addRecent_result deepCopy() {
			return new addRecent_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Recent getSuccess() {
			return this.success;
		}

		public addRecent_result setSuccess(@org.apache.thrift.annotation.Nullable Recent success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public addRecent_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Recent) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addRecent_result)
				return this.equals((addRecent_result) that);
			return false;
		}

		public boolean equals(addRecent_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addRecent_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addRecent_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addRecent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addRecent_resultStandardScheme getScheme() {
				return new addRecent_resultStandardScheme();
			}

		}

		private static class addRecent_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addRecent_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addRecent_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Recent();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addRecent_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addRecent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addRecent_resultTupleScheme getScheme() {
				return new addRecent_resultTupleScheme();
			}

		}

		private static class addRecent_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<addRecent_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addRecent_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addRecent_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Recent();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class delRecent_args implements org.apache.thrift.TBase<delRecent_args, delRecent_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<delRecent_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"delRecent_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tid", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delRecent_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delRecent_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String tid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), TID((short) 2, "tid");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // TID
					return TID;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRecent_args.class, metaDataMap);
		}

		public delRecent_args() {
		}

		public delRecent_args(java.lang.String uid, java.lang.String tid) {
			this();
			this.uid = uid;
			this.tid = tid;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public delRecent_args(delRecent_args other) {
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetTid()) {
				this.tid = other.tid;
			}
		}

		public delRecent_args deepCopy() {
			return new delRecent_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.tid = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public delRecent_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getTid() {
			return this.tid;
		}

		public delRecent_args setTid(@org.apache.thrift.annotation.Nullable java.lang.String tid) {
			this.tid = tid;
			return this;
		}

		public void unsetTid() {
			this.tid = null;
		}

		/**
		 * Returns true if field tid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetTid() {
			return this.tid != null;
		}

		public void setTidIsSet(boolean value) {
			if (!value) {
				this.tid = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case TID:
				if (value == null) {
					unsetTid();
				}
				else {
					setTid((java.lang.String) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case TID:
				return getTid();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case TID:
				return isSetTid();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof delRecent_args)
				return this.equals((delRecent_args) that);
			return false;
		}

		public boolean equals(delRecent_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_tid = true && this.isSetTid();
			boolean that_present_tid = true && that.isSetTid();
			if (this_present_tid || that_present_tid) {
				if (!(this_present_tid && that_present_tid))
					return false;
				if (!this.tid.equals(that.tid))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetTid()) ? 131071 : 524287);
			if (isSetTid())
				hashCode = hashCode * 8191 + tid.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(delRecent_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("delRecent_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			if (this.tid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.tid);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class delRecent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delRecent_argsStandardScheme getScheme() {
				return new delRecent_argsStandardScheme();
			}

		}

		private static class delRecent_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<delRecent_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, delRecent_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.tid = iprot.readString();
							struct.setTidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, delRecent_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.tid != null) {
					oprot.writeFieldBegin(TID_FIELD_DESC);
					oprot.writeString(struct.tid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class delRecent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delRecent_argsTupleScheme getScheme() {
				return new delRecent_argsTupleScheme();
			}

		}

		private static class delRecent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<delRecent_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, delRecent_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetTid()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetTid()) {
					oprot.writeString(struct.tid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, delRecent_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.tid = iprot.readString();
					struct.setTidIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class delRecent_result implements org.apache.thrift.TBase<delRecent_result, delRecent_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<delRecent_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"delRecent_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delRecent_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delRecent_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Recent success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Recent.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRecent_result.class, metaDataMap);
		}

		public delRecent_result() {
		}

		public delRecent_result(Recent success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public delRecent_result(delRecent_result other) {
			if (other.isSetSuccess()) {
				this.success = new Recent(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public delRecent_result deepCopy() {
			return new delRecent_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Recent getSuccess() {
			return this.success;
		}

		public delRecent_result setSuccess(@org.apache.thrift.annotation.Nullable Recent success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public delRecent_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Recent) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof delRecent_result)
				return this.equals((delRecent_result) that);
			return false;
		}

		public boolean equals(delRecent_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(delRecent_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("delRecent_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class delRecent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delRecent_resultStandardScheme getScheme() {
				return new delRecent_resultStandardScheme();
			}

		}

		private static class delRecent_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<delRecent_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, delRecent_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Recent();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, delRecent_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class delRecent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delRecent_resultTupleScheme getScheme() {
				return new delRecent_resultTupleScheme();
			}

		}

		private static class delRecent_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<delRecent_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, delRecent_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, delRecent_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Recent();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class prependRecent_args
			implements org.apache.thrift.TBase<prependRecent_args, prependRecent_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<prependRecent_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"prependRecent_args");

		private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uid", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tid", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.protocol.TField TRY_BOTH_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tryBoth", org.apache.thrift.protocol.TType.BOOL, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prependRecent_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prependRecent_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

		public @org.apache.thrift.annotation.Nullable java.lang.String tid; // required

		public boolean tryBoth; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			UID((short) 1, "uid"), TID((short) 2, "tid"), TRY_BOTH((short) 3, "tryBoth");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // UID
					return UID;
				case 2: // TID
					return TID;
				case 3: // TRY_BOTH
					return TRY_BOTH;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		private static final int __TRYBOTH_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TRY_BOTH,
					new org.apache.thrift.meta_data.FieldMetaData("tryBoth",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prependRecent_args.class, metaDataMap);
		}

		public prependRecent_args() {
		}

		public prependRecent_args(java.lang.String uid, java.lang.String tid, boolean tryBoth) {
			this();
			this.uid = uid;
			this.tid = tid;
			this.tryBoth = tryBoth;
			setTryBothIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public prependRecent_args(prependRecent_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetUid()) {
				this.uid = other.uid;
			}
			if (other.isSetTid()) {
				this.tid = other.tid;
			}
			this.tryBoth = other.tryBoth;
		}

		public prependRecent_args deepCopy() {
			return new prependRecent_args(this);
		}

		@Override
		public void clear() {
			this.uid = null;
			this.tid = null;
			setTryBothIsSet(false);
			this.tryBoth = false;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getUid() {
			return this.uid;
		}

		public prependRecent_args setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
			this.uid = uid;
			return this;
		}

		public void unsetUid() {
			this.uid = null;
		}

		/**
		 * Returns true if field uid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUid() {
			return this.uid != null;
		}

		public void setUidIsSet(boolean value) {
			if (!value) {
				this.uid = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getTid() {
			return this.tid;
		}

		public prependRecent_args setTid(@org.apache.thrift.annotation.Nullable java.lang.String tid) {
			this.tid = tid;
			return this;
		}

		public void unsetTid() {
			this.tid = null;
		}

		/**
		 * Returns true if field tid is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetTid() {
			return this.tid != null;
		}

		public void setTidIsSet(boolean value) {
			if (!value) {
				this.tid = null;
			}
		}

		public boolean isTryBoth() {
			return this.tryBoth;
		}

		public prependRecent_args setTryBoth(boolean tryBoth) {
			this.tryBoth = tryBoth;
			setTryBothIsSet(true);
			return this;
		}

		public void unsetTryBoth() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRYBOTH_ISSET_ID);
		}

		/**
		 * Returns true if field tryBoth is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetTryBoth() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRYBOTH_ISSET_ID);
		}

		public void setTryBothIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRYBOTH_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case UID:
				if (value == null) {
					unsetUid();
				}
				else {
					setUid((java.lang.String) value);
				}
				break;

			case TID:
				if (value == null) {
					unsetTid();
				}
				else {
					setTid((java.lang.String) value);
				}
				break;

			case TRY_BOTH:
				if (value == null) {
					unsetTryBoth();
				}
				else {
					setTryBoth((java.lang.Boolean) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case UID:
				return getUid();

			case TID:
				return getTid();

			case TRY_BOTH:
				return isTryBoth();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case UID:
				return isSetUid();
			case TID:
				return isSetTid();
			case TRY_BOTH:
				return isSetTryBoth();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof prependRecent_args)
				return this.equals((prependRecent_args) that);
			return false;
		}

		public boolean equals(prependRecent_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_uid = true && this.isSetUid();
			boolean that_present_uid = true && that.isSetUid();
			if (this_present_uid || that_present_uid) {
				if (!(this_present_uid && that_present_uid))
					return false;
				if (!this.uid.equals(that.uid))
					return false;
			}

			boolean this_present_tid = true && this.isSetTid();
			boolean that_present_tid = true && that.isSetTid();
			if (this_present_tid || that_present_tid) {
				if (!(this_present_tid && that_present_tid))
					return false;
				if (!this.tid.equals(that.tid))
					return false;
			}

			boolean this_present_tryBoth = true;
			boolean that_present_tryBoth = true;
			if (this_present_tryBoth || that_present_tryBoth) {
				if (!(this_present_tryBoth && that_present_tryBoth))
					return false;
				if (this.tryBoth != that.tryBoth)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
			if (isSetUid())
				hashCode = hashCode * 8191 + uid.hashCode();

			hashCode = hashCode * 8191 + ((isSetTid()) ? 131071 : 524287);
			if (isSetTid())
				hashCode = hashCode * 8191 + tid.hashCode();

			hashCode = hashCode * 8191 + ((tryBoth) ? 131071 : 524287);

			return hashCode;
		}

		@Override
		public int compareTo(prependRecent_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetTid()).compareTo(other.isSetTid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, other.tid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetTryBoth()).compareTo(other.isSetTryBoth());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTryBoth()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tryBoth, other.tryBoth);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("prependRecent_args(");
			boolean first = true;

			sb.append("uid:");
			if (this.uid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			if (this.tid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.tid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tryBoth:");
			sb.append(this.tryBoth);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization
				// is wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class prependRecent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public prependRecent_argsStandardScheme getScheme() {
				return new prependRecent_argsStandardScheme();
			}

		}

		private static class prependRecent_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<prependRecent_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, prependRecent_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // UID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.uid = iprot.readString();
							struct.setUidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.tid = iprot.readString();
							struct.setTidIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // TRY_BOTH
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.tryBoth = iprot.readBool();
							struct.setTryBothIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, prependRecent_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.uid != null) {
					oprot.writeFieldBegin(UID_FIELD_DESC);
					oprot.writeString(struct.uid);
					oprot.writeFieldEnd();
				}
				if (struct.tid != null) {
					oprot.writeFieldBegin(TID_FIELD_DESC);
					oprot.writeString(struct.tid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(TRY_BOTH_FIELD_DESC);
				oprot.writeBool(struct.tryBoth);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class prependRecent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public prependRecent_argsTupleScheme getScheme() {
				return new prependRecent_argsTupleScheme();
			}

		}

		private static class prependRecent_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<prependRecent_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, prependRecent_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetUid()) {
					optionals.set(0);
				}
				if (struct.isSetTid()) {
					optionals.set(1);
				}
				if (struct.isSetTryBoth()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetUid()) {
					oprot.writeString(struct.uid);
				}
				if (struct.isSetTid()) {
					oprot.writeString(struct.tid);
				}
				if (struct.isSetTryBoth()) {
					oprot.writeBool(struct.tryBoth);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, prependRecent_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.uid = iprot.readString();
					struct.setUidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.tid = iprot.readString();
					struct.setTidIsSet(true);
				}
				if (incoming.get(2)) {
					struct.tryBoth = iprot.readBool();
					struct.setTryBothIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class prependRecent_result
			implements org.apache.thrift.TBase<prependRecent_result, prependRecent_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<prependRecent_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"prependRecent_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prependRecent_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prependRecent_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Recent success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Recent.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prependRecent_result.class, metaDataMap);
		}

		public prependRecent_result() {
		}

		public prependRecent_result(Recent success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public prependRecent_result(prependRecent_result other) {
			if (other.isSetSuccess()) {
				this.success = new Recent(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public prependRecent_result deepCopy() {
			return new prependRecent_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Recent getSuccess() {
			return this.success;
		}

		public prependRecent_result setSuccess(@org.apache.thrift.annotation.Nullable Recent success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public prependRecent_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Recent) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof prependRecent_result)
				return this.equals((prependRecent_result) that);
			return false;
		}

		public boolean equals(prependRecent_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(prependRecent_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("prependRecent_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class prependRecent_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public prependRecent_resultStandardScheme getScheme() {
				return new prependRecent_resultStandardScheme();
			}

		}

		private static class prependRecent_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<prependRecent_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, prependRecent_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Recent();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, prependRecent_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class prependRecent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public prependRecent_resultTupleScheme getScheme() {
				return new prependRecent_resultTupleScheme();
			}

		}

		private static class prependRecent_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<prependRecent_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, prependRecent_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, prependRecent_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Recent();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addGroup_args implements org.apache.thrift.TBase<addGroup_args, addGroup_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<addGroup_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addGroup_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addGroup_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addGroup_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgGroupNew form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgGroupNew")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGroup_args.class, metaDataMap);
		}

		public addGroup_args() {
		}

		public addGroup_args(ArgGroupNew form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addGroup_args(addGroup_args other) {
			if (other.isSetForm()) {
				this.form = new ArgGroupNew(other.form);
			}
		}

		public addGroup_args deepCopy() {
			return new addGroup_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgGroupNew getForm() {
			return this.form;
		}

		public addGroup_args setForm(@org.apache.thrift.annotation.Nullable ArgGroupNew form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgGroupNew) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addGroup_args)
				return this.equals((addGroup_args) that);
			return false;
		}

		public boolean equals(addGroup_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addGroup_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addGroup_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addGroup_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addGroup_argsStandardScheme getScheme() {
				return new addGroup_argsStandardScheme();
			}

		}

		private static class addGroup_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addGroup_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addGroup_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgGroupNew();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addGroup_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addGroup_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addGroup_argsTupleScheme getScheme() {
				return new addGroup_argsTupleScheme();
			}

		}

		private static class addGroup_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addGroup_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addGroup_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addGroup_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgGroupNew();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addGroup_result implements org.apache.thrift.TBase<addGroup_result, addGroup_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<addGroup_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addGroup_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addGroup_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addGroup_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Room success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Room.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGroup_result.class, metaDataMap);
		}

		public addGroup_result() {
		}

		public addGroup_result(Room success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addGroup_result(addGroup_result other) {
			if (other.isSetSuccess()) {
				this.success = new Room(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public addGroup_result deepCopy() {
			return new addGroup_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Room getSuccess() {
			return this.success;
		}

		public addGroup_result setSuccess(@org.apache.thrift.annotation.Nullable Room success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public addGroup_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Room) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addGroup_result)
				return this.equals((addGroup_result) that);
			return false;
		}

		public boolean equals(addGroup_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addGroup_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addGroup_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addGroup_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addGroup_resultStandardScheme getScheme() {
				return new addGroup_resultStandardScheme();
			}

		}

		private static class addGroup_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addGroup_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addGroup_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Room();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addGroup_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addGroup_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addGroup_resultTupleScheme getScheme() {
				return new addGroup_resultTupleScheme();
			}

		}

		private static class addGroup_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addGroup_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addGroup_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addGroup_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Room();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addGroupMember_args
			implements org.apache.thrift.TBase<addGroupMember_args, addGroupMember_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<addGroupMember_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addGroupMember_args");

		private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"roomId", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField UID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uidList", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addGroupMember_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addGroupMember_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String roomId; // required

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> uidList; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			ROOM_ID((short) 1, "roomId"), UID_LIST((short) 2, "uidList");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ROOM_ID
					return ROOM_ID;
				case 2: // UID_LIST
					return UID_LIST;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.UID_LIST,
					new org.apache.thrift.meta_data.FieldMetaData("uidList",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGroupMember_args.class, metaDataMap);
		}

		public addGroupMember_args() {
		}

		public addGroupMember_args(java.lang.String roomId, java.util.List<java.lang.String> uidList) {
			this();
			this.roomId = roomId;
			this.uidList = uidList;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addGroupMember_args(addGroupMember_args other) {
			if (other.isSetRoomId()) {
				this.roomId = other.roomId;
			}
			if (other.isSetUidList()) {
				java.util.List<java.lang.String> __this__uidList = new java.util.ArrayList<java.lang.String>(
						other.uidList);
				this.uidList = __this__uidList;
			}
		}

		public addGroupMember_args deepCopy() {
			return new addGroupMember_args(this);
		}

		@Override
		public void clear() {
			this.roomId = null;
			this.uidList = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getRoomId() {
			return this.roomId;
		}

		public addGroupMember_args setRoomId(@org.apache.thrift.annotation.Nullable java.lang.String roomId) {
			this.roomId = roomId;
			return this;
		}

		public void unsetRoomId() {
			this.roomId = null;
		}

		/**
		 * Returns true if field roomId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRoomId() {
			return this.roomId != null;
		}

		public void setRoomIdIsSet(boolean value) {
			if (!value) {
				this.roomId = null;
			}
		}

		public int getUidListSize() {
			return (this.uidList == null) ? 0 : this.uidList.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getUidListIterator() {
			return (this.uidList == null) ? null : this.uidList.iterator();
		}

		public void addToUidList(java.lang.String elem) {
			if (this.uidList == null) {
				this.uidList = new java.util.ArrayList<java.lang.String>();
			}
			this.uidList.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getUidList() {
			return this.uidList;
		}

		public addGroupMember_args setUidList(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> uidList) {
			this.uidList = uidList;
			return this;
		}

		public void unsetUidList() {
			this.uidList = null;
		}

		/**
		 * Returns true if field uidList is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUidList() {
			return this.uidList != null;
		}

		public void setUidListIsSet(boolean value) {
			if (!value) {
				this.uidList = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case ROOM_ID:
				if (value == null) {
					unsetRoomId();
				}
				else {
					setRoomId((java.lang.String) value);
				}
				break;

			case UID_LIST:
				if (value == null) {
					unsetUidList();
				}
				else {
					setUidList((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ROOM_ID:
				return getRoomId();

			case UID_LIST:
				return getUidList();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ROOM_ID:
				return isSetRoomId();
			case UID_LIST:
				return isSetUidList();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addGroupMember_args)
				return this.equals((addGroupMember_args) that);
			return false;
		}

		public boolean equals(addGroupMember_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_roomId = true && this.isSetRoomId();
			boolean that_present_roomId = true && that.isSetRoomId();
			if (this_present_roomId || that_present_roomId) {
				if (!(this_present_roomId && that_present_roomId))
					return false;
				if (!this.roomId.equals(that.roomId))
					return false;
			}

			boolean this_present_uidList = true && this.isSetUidList();
			boolean that_present_uidList = true && that.isSetUidList();
			if (this_present_uidList || that_present_uidList) {
				if (!(this_present_uidList && that_present_uidList))
					return false;
				if (!this.uidList.equals(that.uidList))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetRoomId()) ? 131071 : 524287);
			if (isSetRoomId())
				hashCode = hashCode * 8191 + roomId.hashCode();

			hashCode = hashCode * 8191 + ((isSetUidList()) ? 131071 : 524287);
			if (isSetUidList())
				hashCode = hashCode * 8191 + uidList.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addGroupMember_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRoomId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetUidList()).compareTo(other.isSetUidList());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUidList()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidList, other.uidList);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addGroupMember_args(");
			boolean first = true;

			sb.append("roomId:");
			if (this.roomId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.roomId);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("uidList:");
			if (this.uidList == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uidList);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addGroupMember_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public addGroupMember_argsStandardScheme getScheme() {
				return new addGroupMember_argsStandardScheme();
			}

		}

		private static class addGroupMember_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addGroupMember_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addGroupMember_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ROOM_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.roomId = iprot.readString();
							struct.setRoomIdIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // UID_LIST
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
								struct.uidList = new java.util.ArrayList<java.lang.String>(_list48.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem49;
								for (int _i50 = 0; _i50 < _list48.size; ++_i50) {
									_elem49 = iprot.readString();
									struct.uidList.add(_elem49);
								}
								iprot.readListEnd();
							}
							struct.setUidListIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addGroupMember_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.roomId != null) {
					oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
					oprot.writeString(struct.roomId);
					oprot.writeFieldEnd();
				}
				if (struct.uidList != null) {
					oprot.writeFieldBegin(UID_LIST_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.uidList.size()));
						for (java.lang.String _iter51 : struct.uidList) {
							oprot.writeString(_iter51);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addGroupMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addGroupMember_argsTupleScheme getScheme() {
				return new addGroupMember_argsTupleScheme();
			}

		}

		private static class addGroupMember_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<addGroupMember_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addGroupMember_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetRoomId()) {
					optionals.set(0);
				}
				if (struct.isSetUidList()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetRoomId()) {
					oprot.writeString(struct.roomId);
				}
				if (struct.isSetUidList()) {
					{
						oprot.writeI32(struct.uidList.size());
						for (java.lang.String _iter52 : struct.uidList) {
							oprot.writeString(_iter52);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addGroupMember_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.roomId = iprot.readString();
					struct.setRoomIdIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.uidList = new java.util.ArrayList<java.lang.String>(_list53.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem54;
						for (int _i55 = 0; _i55 < _list53.size; ++_i55) {
							_elem54 = iprot.readString();
							struct.uidList.add(_elem54);
						}
					}
					struct.setUidListIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class addGroupMember_result
			implements org.apache.thrift.TBase<addGroupMember_result, addGroupMember_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<addGroupMember_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"addGroupMember_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addGroupMember_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addGroupMember_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Room success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Room.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGroupMember_result.class, metaDataMap);
		}

		public addGroupMember_result() {
		}

		public addGroupMember_result(Room success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public addGroupMember_result(addGroupMember_result other) {
			if (other.isSetSuccess()) {
				this.success = new Room(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public addGroupMember_result deepCopy() {
			return new addGroupMember_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Room getSuccess() {
			return this.success;
		}

		public addGroupMember_result setSuccess(@org.apache.thrift.annotation.Nullable Room success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public addGroupMember_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Room) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof addGroupMember_result)
				return this.equals((addGroupMember_result) that);
			return false;
		}

		public boolean equals(addGroupMember_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(addGroupMember_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("addGroupMember_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class addGroupMember_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public addGroupMember_resultStandardScheme getScheme() {
				return new addGroupMember_resultStandardScheme();
			}

		}

		private static class addGroupMember_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<addGroupMember_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, addGroupMember_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Room();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, addGroupMember_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class addGroupMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public addGroupMember_resultTupleScheme getScheme() {
				return new addGroupMember_resultTupleScheme();
			}

		}

		private static class addGroupMember_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<addGroupMember_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, addGroupMember_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, addGroupMember_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Room();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class delGroupMember_args
			implements org.apache.thrift.TBase<delGroupMember_args, delGroupMember_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<delGroupMember_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"delGroupMember_args");

		private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"roomId", org.apache.thrift.protocol.TType.STRING, (short) 1);

		private static final org.apache.thrift.protocol.TField UID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"uidList", org.apache.thrift.protocol.TType.LIST, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delGroupMember_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delGroupMember_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable java.lang.String roomId; // required

		public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> uidList; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			ROOM_ID((short) 1, "roomId"), UID_LIST((short) 2, "uidList");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ROOM_ID
					return ROOM_ID;
				case 2: // UID_LIST
					return UID_LIST;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.UID_LIST,
					new org.apache.thrift.meta_data.FieldMetaData("uidList",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
									new org.apache.thrift.meta_data.FieldValueMetaData(
											org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delGroupMember_args.class, metaDataMap);
		}

		public delGroupMember_args() {
		}

		public delGroupMember_args(java.lang.String roomId, java.util.List<java.lang.String> uidList) {
			this();
			this.roomId = roomId;
			this.uidList = uidList;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public delGroupMember_args(delGroupMember_args other) {
			if (other.isSetRoomId()) {
				this.roomId = other.roomId;
			}
			if (other.isSetUidList()) {
				java.util.List<java.lang.String> __this__uidList = new java.util.ArrayList<java.lang.String>(
						other.uidList);
				this.uidList = __this__uidList;
			}
		}

		public delGroupMember_args deepCopy() {
			return new delGroupMember_args(this);
		}

		@Override
		public void clear() {
			this.roomId = null;
			this.uidList = null;
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.String getRoomId() {
			return this.roomId;
		}

		public delGroupMember_args setRoomId(@org.apache.thrift.annotation.Nullable java.lang.String roomId) {
			this.roomId = roomId;
			return this;
		}

		public void unsetRoomId() {
			this.roomId = null;
		}

		/**
		 * Returns true if field roomId is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRoomId() {
			return this.roomId != null;
		}

		public void setRoomIdIsSet(boolean value) {
			if (!value) {
				this.roomId = null;
			}
		}

		public int getUidListSize() {
			return (this.uidList == null) ? 0 : this.uidList.size();
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.Iterator<java.lang.String> getUidListIterator() {
			return (this.uidList == null) ? null : this.uidList.iterator();
		}

		public void addToUidList(java.lang.String elem) {
			if (this.uidList == null) {
				this.uidList = new java.util.ArrayList<java.lang.String>();
			}
			this.uidList.add(elem);
		}

		@org.apache.thrift.annotation.Nullable
		public java.util.List<java.lang.String> getUidList() {
			return this.uidList;
		}

		public delGroupMember_args setUidList(
				@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> uidList) {
			this.uidList = uidList;
			return this;
		}

		public void unsetUidList() {
			this.uidList = null;
		}

		/**
		 * Returns true if field uidList is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetUidList() {
			return this.uidList != null;
		}

		public void setUidListIsSet(boolean value) {
			if (!value) {
				this.uidList = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case ROOM_ID:
				if (value == null) {
					unsetRoomId();
				}
				else {
					setRoomId((java.lang.String) value);
				}
				break;

			case UID_LIST:
				if (value == null) {
					unsetUidList();
				}
				else {
					setUidList((java.util.List<java.lang.String>) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ROOM_ID:
				return getRoomId();

			case UID_LIST:
				return getUidList();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ROOM_ID:
				return isSetRoomId();
			case UID_LIST:
				return isSetUidList();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof delGroupMember_args)
				return this.equals((delGroupMember_args) that);
			return false;
		}

		public boolean equals(delGroupMember_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_roomId = true && this.isSetRoomId();
			boolean that_present_roomId = true && that.isSetRoomId();
			if (this_present_roomId || that_present_roomId) {
				if (!(this_present_roomId && that_present_roomId))
					return false;
				if (!this.roomId.equals(that.roomId))
					return false;
			}

			boolean this_present_uidList = true && this.isSetUidList();
			boolean that_present_uidList = true && that.isSetUidList();
			if (this_present_uidList || that_present_uidList) {
				if (!(this_present_uidList && that_present_uidList))
					return false;
				if (!this.uidList.equals(that.uidList))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetRoomId()) ? 131071 : 524287);
			if (isSetRoomId())
				hashCode = hashCode * 8191 + roomId.hashCode();

			hashCode = hashCode * 8191 + ((isSetUidList()) ? 131071 : 524287);
			if (isSetUidList())
				hashCode = hashCode * 8191 + uidList.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(delGroupMember_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRoomId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetUidList()).compareTo(other.isSetUidList());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetUidList()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidList, other.uidList);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("delGroupMember_args(");
			boolean first = true;

			sb.append("roomId:");
			if (this.roomId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.roomId);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("uidList:");
			if (this.uidList == null) {
				sb.append("null");
			}
			else {
				sb.append(this.uidList);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class delGroupMember_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public delGroupMember_argsStandardScheme getScheme() {
				return new delGroupMember_argsStandardScheme();
			}

		}

		private static class delGroupMember_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<delGroupMember_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, delGroupMember_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ROOM_ID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.roomId = iprot.readString();
							struct.setRoomIdIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // UID_LIST
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
								struct.uidList = new java.util.ArrayList<java.lang.String>(_list56.size);
								@org.apache.thrift.annotation.Nullable
								java.lang.String _elem57;
								for (int _i58 = 0; _i58 < _list56.size; ++_i58) {
									_elem57 = iprot.readString();
									struct.uidList.add(_elem57);
								}
								iprot.readListEnd();
							}
							struct.setUidListIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, delGroupMember_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.roomId != null) {
					oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
					oprot.writeString(struct.roomId);
					oprot.writeFieldEnd();
				}
				if (struct.uidList != null) {
					oprot.writeFieldBegin(UID_LIST_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.uidList.size()));
						for (java.lang.String _iter59 : struct.uidList) {
							oprot.writeString(_iter59);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class delGroupMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delGroupMember_argsTupleScheme getScheme() {
				return new delGroupMember_argsTupleScheme();
			}

		}

		private static class delGroupMember_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<delGroupMember_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, delGroupMember_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetRoomId()) {
					optionals.set(0);
				}
				if (struct.isSetUidList()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetRoomId()) {
					oprot.writeString(struct.roomId);
				}
				if (struct.isSetUidList()) {
					{
						oprot.writeI32(struct.uidList.size());
						for (java.lang.String _iter60 : struct.uidList) {
							oprot.writeString(_iter60);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, delGroupMember_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.roomId = iprot.readString();
					struct.setRoomIdIsSet(true);
				}
				if (incoming.get(1)) {
					{
						org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.uidList = new java.util.ArrayList<java.lang.String>(_list61.size);
						@org.apache.thrift.annotation.Nullable
						java.lang.String _elem62;
						for (int _i63 = 0; _i63 < _list61.size; ++_i63) {
							_elem62 = iprot.readString();
							struct.uidList.add(_elem62);
						}
					}
					struct.setUidListIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class delGroupMember_result
			implements org.apache.thrift.TBase<delGroupMember_result, delGroupMember_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<delGroupMember_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"delGroupMember_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new delGroupMember_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new delGroupMember_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable Room success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									Room.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delGroupMember_result.class, metaDataMap);
		}

		public delGroupMember_result() {
		}

		public delGroupMember_result(Room success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public delGroupMember_result(delGroupMember_result other) {
			if (other.isSetSuccess()) {
				this.success = new Room(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public delGroupMember_result deepCopy() {
			return new delGroupMember_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public Room getSuccess() {
			return this.success;
		}

		public delGroupMember_result setSuccess(@org.apache.thrift.annotation.Nullable Room success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public delGroupMember_result setErr(
				@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((Room) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof delGroupMember_result)
				return this.equals((delGroupMember_result) that);
			return false;
		}

		public boolean equals(delGroupMember_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(delGroupMember_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("delGroupMember_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class delGroupMember_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {

			public delGroupMember_resultStandardScheme getScheme() {
				return new delGroupMember_resultStandardScheme();
			}

		}

		private static class delGroupMember_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<delGroupMember_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, delGroupMember_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new Room();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, delGroupMember_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class delGroupMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public delGroupMember_resultTupleScheme getScheme() {
				return new delGroupMember_resultTupleScheme();
			}

		}

		private static class delGroupMember_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<delGroupMember_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, delGroupMember_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, delGroupMember_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new Room();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUser_args implements org.apache.thrift.TBase<setUser_args, setUser_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUser_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUser_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUser_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUser_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUser form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUser")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUser_args.class, metaDataMap);
		}

		public setUser_args() {
		}

		public setUser_args(ArgUser form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUser_args(setUser_args other) {
			if (other.isSetForm()) {
				this.form = new ArgUser(other.form);
			}
		}

		public setUser_args deepCopy() {
			return new setUser_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUser getForm() {
			return this.form;
		}

		public setUser_args setForm(@org.apache.thrift.annotation.Nullable ArgUser form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgUser) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUser_args)
				return this.equals((setUser_args) that);
			return false;
		}

		public boolean equals(setUser_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUser_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUser_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUser_argsStandardScheme getScheme() {
				return new setUser_argsStandardScheme();
			}

		}

		private static class setUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setUser_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgUser();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUser_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUser_argsTupleScheme getScheme() {
				return new setUser_argsTupleScheme();
			}

		}

		private static class setUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUser_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUser_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgUser();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUser_result implements org.apache.thrift.TBase<setUser_result, setUser_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUser_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUser_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUser_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUser_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable User success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									User.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUser_result.class, metaDataMap);
		}

		public setUser_result() {
		}

		public setUser_result(User success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUser_result(setUser_result other) {
			if (other.isSetSuccess()) {
				this.success = new User(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setUser_result deepCopy() {
			return new setUser_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public User getSuccess() {
			return this.success;
		}

		public setUser_result setSuccess(@org.apache.thrift.annotation.Nullable User success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setUser_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((User) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUser_result)
				return this.equals((setUser_result) that);
			return false;
		}

		public boolean equals(setUser_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUser_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUser_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUser_resultStandardScheme getScheme() {
				return new setUser_resultStandardScheme();
			}

		}

		private static class setUser_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUser_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new User();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUser_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUser_resultTupleScheme getScheme() {
				return new setUser_resultTupleScheme();
			}

		}

		private static class setUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUser_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUser_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new User();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserBot_args implements org.apache.thrift.TBase<setUserBot_args, setUserBot_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setUserBot_args> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserBot_args");

		private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"form", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserBot_argsStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserBot_argsTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable ArgUserBot form; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			FORM((short) 1, "form");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // FORM
					return FORM;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FORM,
					new org.apache.thrift.meta_data.FieldMetaData("form",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
									"ArgUserBot")));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserBot_args.class, metaDataMap);
		}

		public setUserBot_args() {
		}

		public setUserBot_args(ArgUserBot form) {
			this();
			this.form = form;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserBot_args(setUserBot_args other) {
			if (other.isSetForm()) {
				this.form = new ArgUserBot(other.form);
			}
		}

		public setUserBot_args deepCopy() {
			return new setUserBot_args(this);
		}

		@Override
		public void clear() {
			this.form = null;
		}

		@org.apache.thrift.annotation.Nullable
		public ArgUserBot getForm() {
			return this.form;
		}

		public setUserBot_args setForm(@org.apache.thrift.annotation.Nullable ArgUserBot form) {
			this.form = form;
			return this;
		}

		public void unsetForm() {
			this.form = null;
		}

		/**
		 * Returns true if field form is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetForm() {
			return this.form != null;
		}

		public void setFormIsSet(boolean value) {
			if (!value) {
				this.form = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case FORM:
				if (value == null) {
					unsetForm();
				}
				else {
					setForm((ArgUserBot) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case FORM:
				return getForm();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case FORM:
				return isSetForm();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserBot_args)
				return this.equals((setUserBot_args) that);
			return false;
		}

		public boolean equals(setUserBot_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_form = true && this.isSetForm();
			boolean that_present_form = true && that.isSetForm();
			if (this_present_form || that_present_form) {
				if (!(this_present_form && that_present_form))
					return false;
				if (!this.form.equals(that.form))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetForm()) ? 131071 : 524287);
			if (isSetForm())
				hashCode = hashCode * 8191 + form.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUserBot_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetForm()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserBot_args(");
			boolean first = true;

			sb.append("form:");
			if (this.form == null) {
				sb.append("null");
			}
			else {
				sb.append(this.form);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserBot_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserBot_argsStandardScheme getScheme() {
				return new setUserBot_argsStandardScheme();
			}

		}

		private static class setUserBot_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserBot_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserBot_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // FORM
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.form = new ArgUserBot();
							struct.form.read(iprot);
							struct.setFormIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserBot_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.form != null) {
					oprot.writeFieldBegin(FORM_FIELD_DESC);
					struct.form.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserBot_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserBot_argsTupleScheme getScheme() {
				return new setUserBot_argsTupleScheme();
			}

		}

		private static class setUserBot_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setUserBot_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserBot_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetForm()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetForm()) {
					struct.form.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserBot_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.form = new ArgUserBot();
					struct.form.read(iprot);
					struct.setFormIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

	public static class setUserBot_result
			implements org.apache.thrift.TBase<setUserBot_result, setUserBot_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<setUserBot_result> {

		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setUserBot_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"err", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setUserBot_resultStandardSchemeFactory();

		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setUserBot_resultTupleSchemeFactory();

		public @org.apache.thrift.annotation.Nullable UserBot success; // required

		public @org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {

			SUCCESS((short) 0, "success"), ERR((short) 1, "err");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // ERR
					return ERR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			@org.apache.thrift.annotation.Nullable
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}

		}

		// isset id assignments
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS,
					new org.apache.thrift.meta_data.FieldMetaData("success",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									UserBot.class)));
			tmpMap.put(_Fields.ERR,
					new org.apache.thrift.meta_data.FieldMetaData("err",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
									com.suboat.contrib.rpc.base.Error.class)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setUserBot_result.class, metaDataMap);
		}

		public setUserBot_result() {
		}

		public setUserBot_result(UserBot success, com.suboat.contrib.rpc.base.Error err) {
			this();
			this.success = success;
			this.err = err;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setUserBot_result(setUserBot_result other) {
			if (other.isSetSuccess()) {
				this.success = new UserBot(other.success);
			}
			if (other.isSetErr()) {
				this.err = new com.suboat.contrib.rpc.base.Error(other.err);
			}
		}

		public setUserBot_result deepCopy() {
			return new setUserBot_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
			this.err = null;
		}

		@org.apache.thrift.annotation.Nullable
		public UserBot getSuccess() {
			return this.success;
		}

		public setUserBot_result setSuccess(@org.apache.thrift.annotation.Nullable UserBot success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		@org.apache.thrift.annotation.Nullable
		public com.suboat.contrib.rpc.base.Error getErr() {
			return this.err;
		}

		public setUserBot_result setErr(@org.apache.thrift.annotation.Nullable com.suboat.contrib.rpc.base.Error err) {
			this.err = err;
			return this;
		}

		public void unsetErr() {
			this.err = null;
		}

		/**
		 * Returns true if field err is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetErr() {
			return this.err != null;
		}

		public void setErrIsSet(boolean value) {
			if (!value) {
				this.err = null;
			}
		}

		public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				}
				else {
					setSuccess((UserBot) value);
				}
				break;

			case ERR:
				if (value == null) {
					unsetErr();
				}
				else {
					setErr((com.suboat.contrib.rpc.base.Error) value);
				}
				break;

			}
		}

		@org.apache.thrift.annotation.Nullable
		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return getSuccess();

			case ERR:
				return getErr();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			case ERR:
				return isSetErr();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setUserBot_result)
				return this.equals((setUserBot_result) that);
			return false;
		}

		public boolean equals(setUserBot_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			boolean this_present_err = true && this.isSetErr();
			boolean that_present_err = true && that.isSetErr();
			if (this_present_err || that_present_err) {
				if (!(this_present_err && that_present_err))
					return false;
				if (!this.err.equals(that.err))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
			if (isSetSuccess())
				hashCode = hashCode * 8191 + success.hashCode();

			hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
			if (isSetErr())
				hashCode = hashCode * 8191 + err.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setUserBot_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetErr()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		@org.apache.thrift.annotation.Nullable
		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setUserBot_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			}
			else {
				sb.append(this.success);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("err:");
			if (this.err == null) {
				sb.append("null");
			}
			else {
				sb.append(this.err);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			}
			catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setUserBot_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserBot_resultStandardScheme getScheme() {
				return new setUserBot_resultStandardScheme();
			}

		}

		private static class setUserBot_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setUserBot_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setUserBot_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.success = new UserBot();
							struct.success.read(iprot);
							struct.setSuccessIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // ERR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.err = new com.suboat.contrib.rpc.base.Error();
							struct.err.read(iprot);
							struct.setErrIsSet(true);
						}
						else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in
				// the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setUserBot_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				if (struct.err != null) {
					oprot.writeFieldBegin(ERR_FIELD_DESC);
					struct.err.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setUserBot_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

			public setUserBot_resultTupleScheme getScheme() {
				return new setUserBot_resultTupleScheme();
			}

		}

		private static class setUserBot_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setUserBot_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setUserBot_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				if (struct.isSetErr()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
				if (struct.isSetErr()) {
					struct.err.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setUserBot_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.success = new UserBot();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
				if (incoming.get(1)) {
					struct.err = new com.suboat.contrib.rpc.base.Error();
					struct.err.read(iprot);
					struct.setErrIsSet(true);
				}
			}

		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}

	}

}
