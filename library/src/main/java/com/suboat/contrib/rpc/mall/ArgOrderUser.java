/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class ArgOrderUser implements org.apache.thrift.TBase<ArgOrderUser, ArgOrderUser._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgOrderUser> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgOrderUser");

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField GOOD_ARR_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"goodArr", org.apache.thrift.protocol.TType.LIST, (short) 2);

	private static final org.apache.thrift.protocol.TField COUPON_ARR_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"couponArr", org.apache.thrift.protocol.TType.LIST, (short) 3);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgOrderUserStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgOrderUserTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.util.List<ArgOrderGood> goodArr; // required

	public @org.apache.thrift.annotation.Nullable java.util.List<ArgCouponUserUpdate> couponArr; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID((short) 1, "uid"), GOOD_ARR((short) 2, "goodArr"), COUPON_ARR((short) 3, "couponArr");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID
				return UID;
			case 2: // GOOD_ARR
				return GOOD_ARR;
			case 3: // COUPON_ARR
				return COUPON_ARR;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.GOOD_ARR, new org.apache.thrift.meta_data.FieldMetaData("goodArr",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"ArgOrderGood"))));
		tmpMap.put(_Fields.COUPON_ARR, new org.apache.thrift.meta_data.FieldMetaData("couponArr",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"ArgCouponUserUpdate"))));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgOrderUser.class, metaDataMap);
	}

	public ArgOrderUser() {
	}

	public ArgOrderUser(java.lang.String uid, java.util.List<ArgOrderGood> goodArr,
			java.util.List<ArgCouponUserUpdate> couponArr) {
		this();
		this.uid = uid;
		this.goodArr = goodArr;
		this.couponArr = couponArr;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgOrderUser(ArgOrderUser other) {
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetGoodArr()) {
			java.util.List<ArgOrderGood> __this__goodArr = new java.util.ArrayList<ArgOrderGood>(other.goodArr.size());
			for (ArgOrderGood other_element : other.goodArr) {
				__this__goodArr.add(new ArgOrderGood(other_element));
			}
			this.goodArr = __this__goodArr;
		}
		if (other.isSetCouponArr()) {
			java.util.List<ArgCouponUserUpdate> __this__couponArr = new java.util.ArrayList<ArgCouponUserUpdate>(
					other.couponArr.size());
			for (ArgCouponUserUpdate other_element : other.couponArr) {
				__this__couponArr.add(new ArgCouponUserUpdate(other_element));
			}
			this.couponArr = __this__couponArr;
		}
	}

	public ArgOrderUser deepCopy() {
		return new ArgOrderUser(this);
	}

	@Override
	public void clear() {
		this.uid = null;
		this.goodArr = null;
		this.couponArr = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public ArgOrderUser setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	public int getGoodArrSize() {
		return (this.goodArr == null) ? 0 : this.goodArr.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<ArgOrderGood> getGoodArrIterator() {
		return (this.goodArr == null) ? null : this.goodArr.iterator();
	}

	public void addToGoodArr(ArgOrderGood elem) {
		if (this.goodArr == null) {
			this.goodArr = new java.util.ArrayList<ArgOrderGood>();
		}
		this.goodArr.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<ArgOrderGood> getGoodArr() {
		return this.goodArr;
	}

	public ArgOrderUser setGoodArr(@org.apache.thrift.annotation.Nullable java.util.List<ArgOrderGood> goodArr) {
		this.goodArr = goodArr;
		return this;
	}

	public void unsetGoodArr() {
		this.goodArr = null;
	}

	/**
	 * Returns true if field goodArr is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetGoodArr() {
		return this.goodArr != null;
	}

	public void setGoodArrIsSet(boolean value) {
		if (!value) {
			this.goodArr = null;
		}
	}

	public int getCouponArrSize() {
		return (this.couponArr == null) ? 0 : this.couponArr.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<ArgCouponUserUpdate> getCouponArrIterator() {
		return (this.couponArr == null) ? null : this.couponArr.iterator();
	}

	public void addToCouponArr(ArgCouponUserUpdate elem) {
		if (this.couponArr == null) {
			this.couponArr = new java.util.ArrayList<ArgCouponUserUpdate>();
		}
		this.couponArr.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<ArgCouponUserUpdate> getCouponArr() {
		return this.couponArr;
	}

	public ArgOrderUser setCouponArr(
			@org.apache.thrift.annotation.Nullable java.util.List<ArgCouponUserUpdate> couponArr) {
		this.couponArr = couponArr;
		return this;
	}

	public void unsetCouponArr() {
		this.couponArr = null;
	}

	/**
	 * Returns true if field couponArr is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCouponArr() {
		return this.couponArr != null;
	}

	public void setCouponArrIsSet(boolean value) {
		if (!value) {
			this.couponArr = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case GOOD_ARR:
			if (value == null) {
				unsetGoodArr();
			}
			else {
				setGoodArr((java.util.List<ArgOrderGood>) value);
			}
			break;

		case COUPON_ARR:
			if (value == null) {
				unsetCouponArr();
			}
			else {
				setCouponArr((java.util.List<ArgCouponUserUpdate>) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID:
			return getUid();

		case GOOD_ARR:
			return getGoodArr();

		case COUPON_ARR:
			return getCouponArr();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID:
			return isSetUid();
		case GOOD_ARR:
			return isSetGoodArr();
		case COUPON_ARR:
			return isSetCouponArr();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgOrderUser)
			return this.equals((ArgOrderUser) that);
		return false;
	}

	public boolean equals(ArgOrderUser that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_goodArr = true && this.isSetGoodArr();
		boolean that_present_goodArr = true && that.isSetGoodArr();
		if (this_present_goodArr || that_present_goodArr) {
			if (!(this_present_goodArr && that_present_goodArr))
				return false;
			if (!this.goodArr.equals(that.goodArr))
				return false;
		}

		boolean this_present_couponArr = true && this.isSetCouponArr();
		boolean that_present_couponArr = true && that.isSetCouponArr();
		if (this_present_couponArr || that_present_couponArr) {
			if (!(this_present_couponArr && that_present_couponArr))
				return false;
			if (!this.couponArr.equals(that.couponArr))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetGoodArr()) ? 131071 : 524287);
		if (isSetGoodArr())
			hashCode = hashCode * 8191 + goodArr.hashCode();

		hashCode = hashCode * 8191 + ((isSetCouponArr()) ? 131071 : 524287);
		if (isSetCouponArr())
			hashCode = hashCode * 8191 + couponArr.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgOrderUser other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetGoodArr()).compareTo(other.isSetGoodArr());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGoodArr()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodArr, other.goodArr);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCouponArr()).compareTo(other.isSetCouponArr());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCouponArr()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.couponArr, other.couponArr);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgOrderUser(");
		boolean first = true;

		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("goodArr:");
		if (this.goodArr == null) {
			sb.append("null");
		}
		else {
			sb.append(this.goodArr);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("couponArr:");
		if (this.couponArr == null) {
			sb.append("null");
		}
		else {
			sb.append(this.couponArr);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgOrderUserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgOrderUserStandardScheme getScheme() {
			return new ArgOrderUserStandardScheme();
		}

	}

	private static class ArgOrderUserStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgOrderUser> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgOrderUser struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // GOOD_ARR
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list286 = iprot.readListBegin();
							struct.goodArr = new java.util.ArrayList<ArgOrderGood>(_list286.size);
							@org.apache.thrift.annotation.Nullable
							ArgOrderGood _elem287;
							for (int _i288 = 0; _i288 < _list286.size; ++_i288) {
								_elem287 = new ArgOrderGood();
								_elem287.read(iprot);
								struct.goodArr.add(_elem287);
							}
							iprot.readListEnd();
						}
						struct.setGoodArrIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // COUPON_ARR
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list289 = iprot.readListBegin();
							struct.couponArr = new java.util.ArrayList<ArgCouponUserUpdate>(_list289.size);
							@org.apache.thrift.annotation.Nullable
							ArgCouponUserUpdate _elem290;
							for (int _i291 = 0; _i291 < _list289.size; ++_i291) {
								_elem290 = new ArgCouponUserUpdate();
								_elem290.read(iprot);
								struct.couponArr.add(_elem290);
							}
							iprot.readListEnd();
						}
						struct.setCouponArrIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgOrderUser struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.goodArr != null) {
				oprot.writeFieldBegin(GOOD_ARR_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
							struct.goodArr.size()));
					for (ArgOrderGood _iter292 : struct.goodArr) {
						_iter292.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.couponArr != null) {
				oprot.writeFieldBegin(COUPON_ARR_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
							struct.couponArr.size()));
					for (ArgCouponUserUpdate _iter293 : struct.couponArr) {
						_iter293.write(oprot);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgOrderUserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgOrderUserTupleScheme getScheme() {
			return new ArgOrderUserTupleScheme();
		}

	}

	private static class ArgOrderUserTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgOrderUser> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgOrderUser struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUid()) {
				optionals.set(0);
			}
			if (struct.isSetGoodArr()) {
				optionals.set(1);
			}
			if (struct.isSetCouponArr()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetGoodArr()) {
				{
					oprot.writeI32(struct.goodArr.size());
					for (ArgOrderGood _iter294 : struct.goodArr) {
						_iter294.write(oprot);
					}
				}
			}
			if (struct.isSetCouponArr()) {
				{
					oprot.writeI32(struct.couponArr.size());
					for (ArgCouponUserUpdate _iter295 : struct.couponArr) {
						_iter295.write(oprot);
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgOrderUser struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(1)) {
				{
					org.apache.thrift.protocol.TList _list296 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
					struct.goodArr = new java.util.ArrayList<ArgOrderGood>(_list296.size);
					@org.apache.thrift.annotation.Nullable
					ArgOrderGood _elem297;
					for (int _i298 = 0; _i298 < _list296.size; ++_i298) {
						_elem297 = new ArgOrderGood();
						_elem297.read(iprot);
						struct.goodArr.add(_elem297);
					}
				}
				struct.setGoodArrIsSet(true);
			}
			if (incoming.get(2)) {
				{
					org.apache.thrift.protocol.TList _list299 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
					struct.couponArr = new java.util.ArrayList<ArgCouponUserUpdate>(_list299.size);
					@org.apache.thrift.annotation.Nullable
					ArgCouponUserUpdate _elem300;
					for (int _i301 = 0; _i301 < _list299.size; ++_i301) {
						_elem300 = new ArgCouponUserUpdate();
						_elem300.read(iprot);
						struct.couponArr.add(_elem300);
					}
				}
				struct.setCouponArrIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
