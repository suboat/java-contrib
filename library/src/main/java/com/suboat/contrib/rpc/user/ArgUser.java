/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 用户名 有效条件: 用户名、电话、邮箱至少填一个 注意: 1.verify参数仅当填写时验证 2.ensure方法不验证verify参数
 */
public class ArgUser implements org.apache.thrift.TBase<ArgUser, ArgUser._Fields>, java.io.Serializable, Cloneable,
		Comparable<ArgUser> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgUser");

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"username", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"phone", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"email", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField UNIQUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"unique", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField BIND_APP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bindApp", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField BIND_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bindKey", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField BIND_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bindVal", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField LOC_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"locNum", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField VERIFY_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"verifyPhone", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField VERIFY_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"verifyEmail", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"source", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField BIND_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bindCode", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField IS_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isAbstract", org.apache.thrift.protocol.TType.BOOL, (short) 16);

	private static final org.apache.thrift.protocol.TField ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"roles", org.apache.thrift.protocol.TType.LIST, (short) 14);

	private static final org.apache.thrift.protocol.TField AREAS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"areas", org.apache.thrift.protocol.TType.LIST, (short) 15);

	private static final org.apache.thrift.protocol.TField IS_DEL_ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isDelRoles", org.apache.thrift.protocol.TType.BOOL, (short) 17);

	private static final org.apache.thrift.protocol.TField IS_DEL_AREAS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isDelAreas", org.apache.thrift.protocol.TType.BOOL, (short) 18);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgUserStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgUserTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String username; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String phone; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String email; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String unique; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String bindApp; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String bindKey; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String bindVal; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String locNum; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String verifyPhone; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String verifyEmail; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String source; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String bindCode; // optional

	public boolean isAbstract; // optional

	public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roles; // optional

	public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> areas; // optional

	public boolean isDelRoles; // optional

	public boolean isDelAreas; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID((short) 1, "uid"), USERNAME((short) 2, "username"), PHONE((short) 3, "phone"), EMAIL((short) 4,
				"email"), UNIQUE((short) 5, "unique"), BIND_APP((short) 6, "bindApp"), BIND_KEY((short) 7,
						"bindKey"), BIND_VAL((short) 8, "bindVal"), LOC_NUM((short) 9,
								"locNum"), VERIFY_PHONE((short) 10, "verifyPhone"), VERIFY_EMAIL((short) 11,
										"verifyEmail"), SOURCE((short) 12, "source"), BIND_CODE((short) 13,
												"bindCode"), IS_ABSTRACT((short) 16, "isAbstract"), ROLES((short) 14,
														"roles"), AREAS((short) 15, "areas"), IS_DEL_ROLES((short) 17,
																"isDelRoles"), IS_DEL_AREAS((short) 18, "isDelAreas");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID
				return UID;
			case 2: // USERNAME
				return USERNAME;
			case 3: // PHONE
				return PHONE;
			case 4: // EMAIL
				return EMAIL;
			case 5: // UNIQUE
				return UNIQUE;
			case 6: // BIND_APP
				return BIND_APP;
			case 7: // BIND_KEY
				return BIND_KEY;
			case 8: // BIND_VAL
				return BIND_VAL;
			case 9: // LOC_NUM
				return LOC_NUM;
			case 10: // VERIFY_PHONE
				return VERIFY_PHONE;
			case 11: // VERIFY_EMAIL
				return VERIFY_EMAIL;
			case 12: // SOURCE
				return SOURCE;
			case 13: // BIND_CODE
				return BIND_CODE;
			case 16: // IS_ABSTRACT
				return IS_ABSTRACT;
			case 14: // ROLES
				return ROLES;
			case 15: // AREAS
				return AREAS;
			case 17: // IS_DEL_ROLES
				return IS_DEL_ROLES;
			case 18: // IS_DEL_AREAS
				return IS_DEL_AREAS;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISABSTRACT_ISSET_ID = 0;

	private static final int __ISDELROLES_ISSET_ID = 1;

	private static final int __ISDELAREAS_ISSET_ID = 2;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.USERNAME, _Fields.PHONE, _Fields.EMAIL, _Fields.UNIQUE,
			_Fields.BIND_APP, _Fields.BIND_KEY, _Fields.BIND_VAL, _Fields.LOC_NUM, _Fields.VERIFY_PHONE,
			_Fields.VERIFY_EMAIL, _Fields.SOURCE, _Fields.BIND_CODE, _Fields.IS_ABSTRACT, _Fields.ROLES, _Fields.AREAS,
			_Fields.IS_DEL_ROLES, _Fields.IS_DEL_AREAS };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.USERNAME,
				new org.apache.thrift.meta_data.FieldMetaData("username",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.PHONE,
				new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EMAIL,
				new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UNIQUE,
				new org.apache.thrift.meta_data.FieldMetaData("unique",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BIND_APP,
				new org.apache.thrift.meta_data.FieldMetaData("bindApp",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BIND_KEY,
				new org.apache.thrift.meta_data.FieldMetaData("bindKey",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BIND_VAL,
				new org.apache.thrift.meta_data.FieldMetaData("bindVal",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LOC_NUM,
				new org.apache.thrift.meta_data.FieldMetaData("locNum",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.VERIFY_PHONE,
				new org.apache.thrift.meta_data.FieldMetaData("verifyPhone",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.VERIFY_EMAIL,
				new org.apache.thrift.meta_data.FieldMetaData("verifyEmail",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SOURCE,
				new org.apache.thrift.meta_data.FieldMetaData("source",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BIND_CODE,
				new org.apache.thrift.meta_data.FieldMetaData("bindCode",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_ABSTRACT,
				new org.apache.thrift.meta_data.FieldMetaData("isAbstract",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.ROLES, new org.apache.thrift.meta_data.FieldMetaData("roles",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		tmpMap.put(_Fields.AREAS, new org.apache.thrift.meta_data.FieldMetaData("areas",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		tmpMap.put(_Fields.IS_DEL_ROLES,
				new org.apache.thrift.meta_data.FieldMetaData("isDelRoles",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_DEL_AREAS,
				new org.apache.thrift.meta_data.FieldMetaData("isDelAreas",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgUser.class, metaDataMap);
	}

	public ArgUser() {
	}

	public ArgUser(java.lang.String uid) {
		this();
		this.uid = uid;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgUser(ArgUser other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetUsername()) {
			this.username = other.username;
		}
		if (other.isSetPhone()) {
			this.phone = other.phone;
		}
		if (other.isSetEmail()) {
			this.email = other.email;
		}
		if (other.isSetUnique()) {
			this.unique = other.unique;
		}
		if (other.isSetBindApp()) {
			this.bindApp = other.bindApp;
		}
		if (other.isSetBindKey()) {
			this.bindKey = other.bindKey;
		}
		if (other.isSetBindVal()) {
			this.bindVal = other.bindVal;
		}
		if (other.isSetLocNum()) {
			this.locNum = other.locNum;
		}
		if (other.isSetVerifyPhone()) {
			this.verifyPhone = other.verifyPhone;
		}
		if (other.isSetVerifyEmail()) {
			this.verifyEmail = other.verifyEmail;
		}
		if (other.isSetSource()) {
			this.source = other.source;
		}
		if (other.isSetBindCode()) {
			this.bindCode = other.bindCode;
		}
		this.isAbstract = other.isAbstract;
		if (other.isSetRoles()) {
			java.util.List<java.lang.String> __this__roles = new java.util.ArrayList<java.lang.String>(other.roles);
			this.roles = __this__roles;
		}
		if (other.isSetAreas()) {
			java.util.List<java.lang.String> __this__areas = new java.util.ArrayList<java.lang.String>(other.areas);
			this.areas = __this__areas;
		}
		this.isDelRoles = other.isDelRoles;
		this.isDelAreas = other.isDelAreas;
	}

	public ArgUser deepCopy() {
		return new ArgUser(this);
	}

	@Override
	public void clear() {
		this.uid = null;
		this.username = null;
		this.phone = null;
		this.email = null;
		this.unique = null;
		this.bindApp = null;
		this.bindKey = null;
		this.bindVal = null;
		this.locNum = null;
		this.verifyPhone = null;
		this.verifyEmail = null;
		this.source = null;
		this.bindCode = null;
		setIsAbstractIsSet(false);
		this.isAbstract = false;
		this.roles = null;
		this.areas = null;
		setIsDelRolesIsSet(false);
		this.isDelRoles = false;
		setIsDelAreasIsSet(false);
		this.isDelAreas = false;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public ArgUser setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUsername() {
		return this.username;
	}

	public ArgUser setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
		this.username = username;
		return this;
	}

	public void unsetUsername() {
		this.username = null;
	}

	/**
	 * Returns true if field username is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUsername() {
		return this.username != null;
	}

	public void setUsernameIsSet(boolean value) {
		if (!value) {
			this.username = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getPhone() {
		return this.phone;
	}

	public ArgUser setPhone(@org.apache.thrift.annotation.Nullable java.lang.String phone) {
		this.phone = phone;
		return this;
	}

	public void unsetPhone() {
		this.phone = null;
	}

	/**
	 * Returns true if field phone is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPhone() {
		return this.phone != null;
	}

	public void setPhoneIsSet(boolean value) {
		if (!value) {
			this.phone = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getEmail() {
		return this.email;
	}

	public ArgUser setEmail(@org.apache.thrift.annotation.Nullable java.lang.String email) {
		this.email = email;
		return this;
	}

	public void unsetEmail() {
		this.email = null;
	}

	/**
	 * Returns true if field email is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetEmail() {
		return this.email != null;
	}

	public void setEmailIsSet(boolean value) {
		if (!value) {
			this.email = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUnique() {
		return this.unique;
	}

	public ArgUser setUnique(@org.apache.thrift.annotation.Nullable java.lang.String unique) {
		this.unique = unique;
		return this;
	}

	public void unsetUnique() {
		this.unique = null;
	}

	/**
	 * Returns true if field unique is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUnique() {
		return this.unique != null;
	}

	public void setUniqueIsSet(boolean value) {
		if (!value) {
			this.unique = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBindApp() {
		return this.bindApp;
	}

	public ArgUser setBindApp(@org.apache.thrift.annotation.Nullable java.lang.String bindApp) {
		this.bindApp = bindApp;
		return this;
	}

	public void unsetBindApp() {
		this.bindApp = null;
	}

	/**
	 * Returns true if field bindApp is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBindApp() {
		return this.bindApp != null;
	}

	public void setBindAppIsSet(boolean value) {
		if (!value) {
			this.bindApp = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBindKey() {
		return this.bindKey;
	}

	public ArgUser setBindKey(@org.apache.thrift.annotation.Nullable java.lang.String bindKey) {
		this.bindKey = bindKey;
		return this;
	}

	public void unsetBindKey() {
		this.bindKey = null;
	}

	/**
	 * Returns true if field bindKey is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBindKey() {
		return this.bindKey != null;
	}

	public void setBindKeyIsSet(boolean value) {
		if (!value) {
			this.bindKey = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBindVal() {
		return this.bindVal;
	}

	public ArgUser setBindVal(@org.apache.thrift.annotation.Nullable java.lang.String bindVal) {
		this.bindVal = bindVal;
		return this;
	}

	public void unsetBindVal() {
		this.bindVal = null;
	}

	/**
	 * Returns true if field bindVal is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBindVal() {
		return this.bindVal != null;
	}

	public void setBindValIsSet(boolean value) {
		if (!value) {
			this.bindVal = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLocNum() {
		return this.locNum;
	}

	public ArgUser setLocNum(@org.apache.thrift.annotation.Nullable java.lang.String locNum) {
		this.locNum = locNum;
		return this;
	}

	public void unsetLocNum() {
		this.locNum = null;
	}

	/**
	 * Returns true if field locNum is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLocNum() {
		return this.locNum != null;
	}

	public void setLocNumIsSet(boolean value) {
		if (!value) {
			this.locNum = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getVerifyPhone() {
		return this.verifyPhone;
	}

	public ArgUser setVerifyPhone(@org.apache.thrift.annotation.Nullable java.lang.String verifyPhone) {
		this.verifyPhone = verifyPhone;
		return this;
	}

	public void unsetVerifyPhone() {
		this.verifyPhone = null;
	}

	/**
	 * Returns true if field verifyPhone is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetVerifyPhone() {
		return this.verifyPhone != null;
	}

	public void setVerifyPhoneIsSet(boolean value) {
		if (!value) {
			this.verifyPhone = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getVerifyEmail() {
		return this.verifyEmail;
	}

	public ArgUser setVerifyEmail(@org.apache.thrift.annotation.Nullable java.lang.String verifyEmail) {
		this.verifyEmail = verifyEmail;
		return this;
	}

	public void unsetVerifyEmail() {
		this.verifyEmail = null;
	}

	/**
	 * Returns true if field verifyEmail is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetVerifyEmail() {
		return this.verifyEmail != null;
	}

	public void setVerifyEmailIsSet(boolean value) {
		if (!value) {
			this.verifyEmail = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSource() {
		return this.source;
	}

	public ArgUser setSource(@org.apache.thrift.annotation.Nullable java.lang.String source) {
		this.source = source;
		return this;
	}

	public void unsetSource() {
		this.source = null;
	}

	/**
	 * Returns true if field source is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSource() {
		return this.source != null;
	}

	public void setSourceIsSet(boolean value) {
		if (!value) {
			this.source = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBindCode() {
		return this.bindCode;
	}

	public ArgUser setBindCode(@org.apache.thrift.annotation.Nullable java.lang.String bindCode) {
		this.bindCode = bindCode;
		return this;
	}

	public void unsetBindCode() {
		this.bindCode = null;
	}

	/**
	 * Returns true if field bindCode is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBindCode() {
		return this.bindCode != null;
	}

	public void setBindCodeIsSet(boolean value) {
		if (!value) {
			this.bindCode = null;
		}
	}

	public boolean isIsAbstract() {
		return this.isAbstract;
	}

	public ArgUser setIsAbstract(boolean isAbstract) {
		this.isAbstract = isAbstract;
		setIsAbstractIsSet(true);
		return this;
	}

	public void unsetIsAbstract() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
	}

	/**
	 * Returns true if field isAbstract is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsAbstract() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISABSTRACT_ISSET_ID);
	}

	public void setIsAbstractIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISABSTRACT_ISSET_ID, value);
	}

	public int getRolesSize() {
		return (this.roles == null) ? 0 : this.roles.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<java.lang.String> getRolesIterator() {
		return (this.roles == null) ? null : this.roles.iterator();
	}

	public void addToRoles(java.lang.String elem) {
		if (this.roles == null) {
			this.roles = new java.util.ArrayList<java.lang.String>();
		}
		this.roles.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<java.lang.String> getRoles() {
		return this.roles;
	}

	public ArgUser setRoles(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> roles) {
		this.roles = roles;
		return this;
	}

	public void unsetRoles() {
		this.roles = null;
	}

	/**
	 * Returns true if field roles is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRoles() {
		return this.roles != null;
	}

	public void setRolesIsSet(boolean value) {
		if (!value) {
			this.roles = null;
		}
	}

	public int getAreasSize() {
		return (this.areas == null) ? 0 : this.areas.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<java.lang.String> getAreasIterator() {
		return (this.areas == null) ? null : this.areas.iterator();
	}

	public void addToAreas(java.lang.String elem) {
		if (this.areas == null) {
			this.areas = new java.util.ArrayList<java.lang.String>();
		}
		this.areas.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<java.lang.String> getAreas() {
		return this.areas;
	}

	public ArgUser setAreas(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> areas) {
		this.areas = areas;
		return this;
	}

	public void unsetAreas() {
		this.areas = null;
	}

	/**
	 * Returns true if field areas is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAreas() {
		return this.areas != null;
	}

	public void setAreasIsSet(boolean value) {
		if (!value) {
			this.areas = null;
		}
	}

	public boolean isIsDelRoles() {
		return this.isDelRoles;
	}

	public ArgUser setIsDelRoles(boolean isDelRoles) {
		this.isDelRoles = isDelRoles;
		setIsDelRolesIsSet(true);
		return this;
	}

	public void unsetIsDelRoles() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDELROLES_ISSET_ID);
	}

	/**
	 * Returns true if field isDelRoles is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsDelRoles() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDELROLES_ISSET_ID);
	}

	public void setIsDelRolesIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDELROLES_ISSET_ID, value);
	}

	public boolean isIsDelAreas() {
		return this.isDelAreas;
	}

	public ArgUser setIsDelAreas(boolean isDelAreas) {
		this.isDelAreas = isDelAreas;
		setIsDelAreasIsSet(true);
		return this;
	}

	public void unsetIsDelAreas() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDELAREAS_ISSET_ID);
	}

	/**
	 * Returns true if field isDelAreas is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsDelAreas() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDELAREAS_ISSET_ID);
	}

	public void setIsDelAreasIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDELAREAS_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case USERNAME:
			if (value == null) {
				unsetUsername();
			}
			else {
				setUsername((java.lang.String) value);
			}
			break;

		case PHONE:
			if (value == null) {
				unsetPhone();
			}
			else {
				setPhone((java.lang.String) value);
			}
			break;

		case EMAIL:
			if (value == null) {
				unsetEmail();
			}
			else {
				setEmail((java.lang.String) value);
			}
			break;

		case UNIQUE:
			if (value == null) {
				unsetUnique();
			}
			else {
				setUnique((java.lang.String) value);
			}
			break;

		case BIND_APP:
			if (value == null) {
				unsetBindApp();
			}
			else {
				setBindApp((java.lang.String) value);
			}
			break;

		case BIND_KEY:
			if (value == null) {
				unsetBindKey();
			}
			else {
				setBindKey((java.lang.String) value);
			}
			break;

		case BIND_VAL:
			if (value == null) {
				unsetBindVal();
			}
			else {
				setBindVal((java.lang.String) value);
			}
			break;

		case LOC_NUM:
			if (value == null) {
				unsetLocNum();
			}
			else {
				setLocNum((java.lang.String) value);
			}
			break;

		case VERIFY_PHONE:
			if (value == null) {
				unsetVerifyPhone();
			}
			else {
				setVerifyPhone((java.lang.String) value);
			}
			break;

		case VERIFY_EMAIL:
			if (value == null) {
				unsetVerifyEmail();
			}
			else {
				setVerifyEmail((java.lang.String) value);
			}
			break;

		case SOURCE:
			if (value == null) {
				unsetSource();
			}
			else {
				setSource((java.lang.String) value);
			}
			break;

		case BIND_CODE:
			if (value == null) {
				unsetBindCode();
			}
			else {
				setBindCode((java.lang.String) value);
			}
			break;

		case IS_ABSTRACT:
			if (value == null) {
				unsetIsAbstract();
			}
			else {
				setIsAbstract((java.lang.Boolean) value);
			}
			break;

		case ROLES:
			if (value == null) {
				unsetRoles();
			}
			else {
				setRoles((java.util.List<java.lang.String>) value);
			}
			break;

		case AREAS:
			if (value == null) {
				unsetAreas();
			}
			else {
				setAreas((java.util.List<java.lang.String>) value);
			}
			break;

		case IS_DEL_ROLES:
			if (value == null) {
				unsetIsDelRoles();
			}
			else {
				setIsDelRoles((java.lang.Boolean) value);
			}
			break;

		case IS_DEL_AREAS:
			if (value == null) {
				unsetIsDelAreas();
			}
			else {
				setIsDelAreas((java.lang.Boolean) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID:
			return getUid();

		case USERNAME:
			return getUsername();

		case PHONE:
			return getPhone();

		case EMAIL:
			return getEmail();

		case UNIQUE:
			return getUnique();

		case BIND_APP:
			return getBindApp();

		case BIND_KEY:
			return getBindKey();

		case BIND_VAL:
			return getBindVal();

		case LOC_NUM:
			return getLocNum();

		case VERIFY_PHONE:
			return getVerifyPhone();

		case VERIFY_EMAIL:
			return getVerifyEmail();

		case SOURCE:
			return getSource();

		case BIND_CODE:
			return getBindCode();

		case IS_ABSTRACT:
			return isIsAbstract();

		case ROLES:
			return getRoles();

		case AREAS:
			return getAreas();

		case IS_DEL_ROLES:
			return isIsDelRoles();

		case IS_DEL_AREAS:
			return isIsDelAreas();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID:
			return isSetUid();
		case USERNAME:
			return isSetUsername();
		case PHONE:
			return isSetPhone();
		case EMAIL:
			return isSetEmail();
		case UNIQUE:
			return isSetUnique();
		case BIND_APP:
			return isSetBindApp();
		case BIND_KEY:
			return isSetBindKey();
		case BIND_VAL:
			return isSetBindVal();
		case LOC_NUM:
			return isSetLocNum();
		case VERIFY_PHONE:
			return isSetVerifyPhone();
		case VERIFY_EMAIL:
			return isSetVerifyEmail();
		case SOURCE:
			return isSetSource();
		case BIND_CODE:
			return isSetBindCode();
		case IS_ABSTRACT:
			return isSetIsAbstract();
		case ROLES:
			return isSetRoles();
		case AREAS:
			return isSetAreas();
		case IS_DEL_ROLES:
			return isSetIsDelRoles();
		case IS_DEL_AREAS:
			return isSetIsDelAreas();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgUser)
			return this.equals((ArgUser) that);
		return false;
	}

	public boolean equals(ArgUser that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_username = true && this.isSetUsername();
		boolean that_present_username = true && that.isSetUsername();
		if (this_present_username || that_present_username) {
			if (!(this_present_username && that_present_username))
				return false;
			if (!this.username.equals(that.username))
				return false;
		}

		boolean this_present_phone = true && this.isSetPhone();
		boolean that_present_phone = true && that.isSetPhone();
		if (this_present_phone || that_present_phone) {
			if (!(this_present_phone && that_present_phone))
				return false;
			if (!this.phone.equals(that.phone))
				return false;
		}

		boolean this_present_email = true && this.isSetEmail();
		boolean that_present_email = true && that.isSetEmail();
		if (this_present_email || that_present_email) {
			if (!(this_present_email && that_present_email))
				return false;
			if (!this.email.equals(that.email))
				return false;
		}

		boolean this_present_unique = true && this.isSetUnique();
		boolean that_present_unique = true && that.isSetUnique();
		if (this_present_unique || that_present_unique) {
			if (!(this_present_unique && that_present_unique))
				return false;
			if (!this.unique.equals(that.unique))
				return false;
		}

		boolean this_present_bindApp = true && this.isSetBindApp();
		boolean that_present_bindApp = true && that.isSetBindApp();
		if (this_present_bindApp || that_present_bindApp) {
			if (!(this_present_bindApp && that_present_bindApp))
				return false;
			if (!this.bindApp.equals(that.bindApp))
				return false;
		}

		boolean this_present_bindKey = true && this.isSetBindKey();
		boolean that_present_bindKey = true && that.isSetBindKey();
		if (this_present_bindKey || that_present_bindKey) {
			if (!(this_present_bindKey && that_present_bindKey))
				return false;
			if (!this.bindKey.equals(that.bindKey))
				return false;
		}

		boolean this_present_bindVal = true && this.isSetBindVal();
		boolean that_present_bindVal = true && that.isSetBindVal();
		if (this_present_bindVal || that_present_bindVal) {
			if (!(this_present_bindVal && that_present_bindVal))
				return false;
			if (!this.bindVal.equals(that.bindVal))
				return false;
		}

		boolean this_present_locNum = true && this.isSetLocNum();
		boolean that_present_locNum = true && that.isSetLocNum();
		if (this_present_locNum || that_present_locNum) {
			if (!(this_present_locNum && that_present_locNum))
				return false;
			if (!this.locNum.equals(that.locNum))
				return false;
		}

		boolean this_present_verifyPhone = true && this.isSetVerifyPhone();
		boolean that_present_verifyPhone = true && that.isSetVerifyPhone();
		if (this_present_verifyPhone || that_present_verifyPhone) {
			if (!(this_present_verifyPhone && that_present_verifyPhone))
				return false;
			if (!this.verifyPhone.equals(that.verifyPhone))
				return false;
		}

		boolean this_present_verifyEmail = true && this.isSetVerifyEmail();
		boolean that_present_verifyEmail = true && that.isSetVerifyEmail();
		if (this_present_verifyEmail || that_present_verifyEmail) {
			if (!(this_present_verifyEmail && that_present_verifyEmail))
				return false;
			if (!this.verifyEmail.equals(that.verifyEmail))
				return false;
		}

		boolean this_present_source = true && this.isSetSource();
		boolean that_present_source = true && that.isSetSource();
		if (this_present_source || that_present_source) {
			if (!(this_present_source && that_present_source))
				return false;
			if (!this.source.equals(that.source))
				return false;
		}

		boolean this_present_bindCode = true && this.isSetBindCode();
		boolean that_present_bindCode = true && that.isSetBindCode();
		if (this_present_bindCode || that_present_bindCode) {
			if (!(this_present_bindCode && that_present_bindCode))
				return false;
			if (!this.bindCode.equals(that.bindCode))
				return false;
		}

		boolean this_present_isAbstract = true && this.isSetIsAbstract();
		boolean that_present_isAbstract = true && that.isSetIsAbstract();
		if (this_present_isAbstract || that_present_isAbstract) {
			if (!(this_present_isAbstract && that_present_isAbstract))
				return false;
			if (this.isAbstract != that.isAbstract)
				return false;
		}

		boolean this_present_roles = true && this.isSetRoles();
		boolean that_present_roles = true && that.isSetRoles();
		if (this_present_roles || that_present_roles) {
			if (!(this_present_roles && that_present_roles))
				return false;
			if (!this.roles.equals(that.roles))
				return false;
		}

		boolean this_present_areas = true && this.isSetAreas();
		boolean that_present_areas = true && that.isSetAreas();
		if (this_present_areas || that_present_areas) {
			if (!(this_present_areas && that_present_areas))
				return false;
			if (!this.areas.equals(that.areas))
				return false;
		}

		boolean this_present_isDelRoles = true && this.isSetIsDelRoles();
		boolean that_present_isDelRoles = true && that.isSetIsDelRoles();
		if (this_present_isDelRoles || that_present_isDelRoles) {
			if (!(this_present_isDelRoles && that_present_isDelRoles))
				return false;
			if (this.isDelRoles != that.isDelRoles)
				return false;
		}

		boolean this_present_isDelAreas = true && this.isSetIsDelAreas();
		boolean that_present_isDelAreas = true && that.isSetIsDelAreas();
		if (this_present_isDelAreas || that_present_isDelAreas) {
			if (!(this_present_isDelAreas && that_present_isDelAreas))
				return false;
			if (this.isDelAreas != that.isDelAreas)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
		if (isSetUsername())
			hashCode = hashCode * 8191 + username.hashCode();

		hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
		if (isSetPhone())
			hashCode = hashCode * 8191 + phone.hashCode();

		hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
		if (isSetEmail())
			hashCode = hashCode * 8191 + email.hashCode();

		hashCode = hashCode * 8191 + ((isSetUnique()) ? 131071 : 524287);
		if (isSetUnique())
			hashCode = hashCode * 8191 + unique.hashCode();

		hashCode = hashCode * 8191 + ((isSetBindApp()) ? 131071 : 524287);
		if (isSetBindApp())
			hashCode = hashCode * 8191 + bindApp.hashCode();

		hashCode = hashCode * 8191 + ((isSetBindKey()) ? 131071 : 524287);
		if (isSetBindKey())
			hashCode = hashCode * 8191 + bindKey.hashCode();

		hashCode = hashCode * 8191 + ((isSetBindVal()) ? 131071 : 524287);
		if (isSetBindVal())
			hashCode = hashCode * 8191 + bindVal.hashCode();

		hashCode = hashCode * 8191 + ((isSetLocNum()) ? 131071 : 524287);
		if (isSetLocNum())
			hashCode = hashCode * 8191 + locNum.hashCode();

		hashCode = hashCode * 8191 + ((isSetVerifyPhone()) ? 131071 : 524287);
		if (isSetVerifyPhone())
			hashCode = hashCode * 8191 + verifyPhone.hashCode();

		hashCode = hashCode * 8191 + ((isSetVerifyEmail()) ? 131071 : 524287);
		if (isSetVerifyEmail())
			hashCode = hashCode * 8191 + verifyEmail.hashCode();

		hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
		if (isSetSource())
			hashCode = hashCode * 8191 + source.hashCode();

		hashCode = hashCode * 8191 + ((isSetBindCode()) ? 131071 : 524287);
		if (isSetBindCode())
			hashCode = hashCode * 8191 + bindCode.hashCode();

		hashCode = hashCode * 8191 + ((isSetIsAbstract()) ? 131071 : 524287);
		if (isSetIsAbstract())
			hashCode = hashCode * 8191 + ((isAbstract) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetRoles()) ? 131071 : 524287);
		if (isSetRoles())
			hashCode = hashCode * 8191 + roles.hashCode();

		hashCode = hashCode * 8191 + ((isSetAreas()) ? 131071 : 524287);
		if (isSetAreas())
			hashCode = hashCode * 8191 + areas.hashCode();

		hashCode = hashCode * 8191 + ((isSetIsDelRoles()) ? 131071 : 524287);
		if (isSetIsDelRoles())
			hashCode = hashCode * 8191 + ((isDelRoles) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetIsDelAreas()) ? 131071 : 524287);
		if (isSetIsDelAreas())
			hashCode = hashCode * 8191 + ((isDelAreas) ? 131071 : 524287);

		return hashCode;
	}

	@Override
	public int compareTo(ArgUser other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUsername()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPhone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEmail()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUnique()).compareTo(other.isSetUnique());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUnique()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unique, other.unique);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBindApp()).compareTo(other.isSetBindApp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBindApp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindApp, other.bindApp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBindKey()).compareTo(other.isSetBindKey());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBindKey()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindKey, other.bindKey);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBindVal()).compareTo(other.isSetBindVal());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBindVal()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindVal, other.bindVal);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLocNum()).compareTo(other.isSetLocNum());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLocNum()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locNum, other.locNum);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetVerifyPhone()).compareTo(other.isSetVerifyPhone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVerifyPhone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyPhone, other.verifyPhone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetVerifyEmail()).compareTo(other.isSetVerifyEmail());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVerifyEmail()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyEmail, other.verifyEmail);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSource()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBindCode()).compareTo(other.isSetBindCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBindCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindCode, other.bindCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsAbstract()).compareTo(other.isSetIsAbstract());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsAbstract()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAbstract, other.isAbstract);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRoles()).compareTo(other.isSetRoles());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRoles()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roles, other.roles);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAreas()).compareTo(other.isSetAreas());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAreas()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areas, other.areas);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsDelRoles()).compareTo(other.isSetIsDelRoles());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsDelRoles()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelRoles, other.isDelRoles);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsDelAreas()).compareTo(other.isSetIsDelAreas());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsDelAreas()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDelAreas, other.isDelAreas);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgUser(");
		boolean first = true;

		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (isSetUsername()) {
			if (!first)
				sb.append(", ");
			sb.append("username:");
			if (this.username == null) {
				sb.append("null");
			}
			else {
				sb.append(this.username);
			}
			first = false;
		}
		if (isSetPhone()) {
			if (!first)
				sb.append(", ");
			sb.append("phone:");
			if (this.phone == null) {
				sb.append("null");
			}
			else {
				sb.append(this.phone);
			}
			first = false;
		}
		if (isSetEmail()) {
			if (!first)
				sb.append(", ");
			sb.append("email:");
			if (this.email == null) {
				sb.append("null");
			}
			else {
				sb.append(this.email);
			}
			first = false;
		}
		if (isSetUnique()) {
			if (!first)
				sb.append(", ");
			sb.append("unique:");
			if (this.unique == null) {
				sb.append("null");
			}
			else {
				sb.append(this.unique);
			}
			first = false;
		}
		if (isSetBindApp()) {
			if (!first)
				sb.append(", ");
			sb.append("bindApp:");
			if (this.bindApp == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bindApp);
			}
			first = false;
		}
		if (isSetBindKey()) {
			if (!first)
				sb.append(", ");
			sb.append("bindKey:");
			if (this.bindKey == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bindKey);
			}
			first = false;
		}
		if (isSetBindVal()) {
			if (!first)
				sb.append(", ");
			sb.append("bindVal:");
			if (this.bindVal == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bindVal);
			}
			first = false;
		}
		if (isSetLocNum()) {
			if (!first)
				sb.append(", ");
			sb.append("locNum:");
			if (this.locNum == null) {
				sb.append("null");
			}
			else {
				sb.append(this.locNum);
			}
			first = false;
		}
		if (isSetVerifyPhone()) {
			if (!first)
				sb.append(", ");
			sb.append("verifyPhone:");
			if (this.verifyPhone == null) {
				sb.append("null");
			}
			else {
				sb.append(this.verifyPhone);
			}
			first = false;
		}
		if (isSetVerifyEmail()) {
			if (!first)
				sb.append(", ");
			sb.append("verifyEmail:");
			if (this.verifyEmail == null) {
				sb.append("null");
			}
			else {
				sb.append(this.verifyEmail);
			}
			first = false;
		}
		if (isSetSource()) {
			if (!first)
				sb.append(", ");
			sb.append("source:");
			if (this.source == null) {
				sb.append("null");
			}
			else {
				sb.append(this.source);
			}
			first = false;
		}
		if (isSetBindCode()) {
			if (!first)
				sb.append(", ");
			sb.append("bindCode:");
			if (this.bindCode == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bindCode);
			}
			first = false;
		}
		if (isSetIsAbstract()) {
			if (!first)
				sb.append(", ");
			sb.append("isAbstract:");
			sb.append(this.isAbstract);
			first = false;
		}
		if (isSetRoles()) {
			if (!first)
				sb.append(", ");
			sb.append("roles:");
			if (this.roles == null) {
				sb.append("null");
			}
			else {
				sb.append(this.roles);
			}
			first = false;
		}
		if (isSetAreas()) {
			if (!first)
				sb.append(", ");
			sb.append("areas:");
			if (this.areas == null) {
				sb.append("null");
			}
			else {
				sb.append(this.areas);
			}
			first = false;
		}
		if (isSetIsDelRoles()) {
			if (!first)
				sb.append(", ");
			sb.append("isDelRoles:");
			sb.append(this.isDelRoles);
			first = false;
		}
		if (isSetIsDelAreas()) {
			if (!first)
				sb.append(", ");
			sb.append("isDelAreas:");
			sb.append(this.isDelAreas);
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgUserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgUserStandardScheme getScheme() {
			return new ArgUserStandardScheme();
		}

	}

	private static class ArgUserStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgUser> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgUser struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // USERNAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.username = iprot.readString();
						struct.setUsernameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // PHONE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.phone = iprot.readString();
						struct.setPhoneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // EMAIL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.email = iprot.readString();
						struct.setEmailIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // UNIQUE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.unique = iprot.readString();
						struct.setUniqueIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // BIND_APP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bindApp = iprot.readString();
						struct.setBindAppIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // BIND_KEY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bindKey = iprot.readString();
						struct.setBindKeyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // BIND_VAL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bindVal = iprot.readString();
						struct.setBindValIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // LOC_NUM
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.locNum = iprot.readString();
						struct.setLocNumIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // VERIFY_PHONE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.verifyPhone = iprot.readString();
						struct.setVerifyPhoneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // VERIFY_EMAIL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.verifyEmail = iprot.readString();
						struct.setVerifyEmailIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // SOURCE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.source = iprot.readString();
						struct.setSourceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // BIND_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bindCode = iprot.readString();
						struct.setBindCodeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // IS_ABSTRACT
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isAbstract = iprot.readBool();
						struct.setIsAbstractIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // ROLES
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
							struct.roles = new java.util.ArrayList<java.lang.String>(_list110.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _elem111;
							for (int _i112 = 0; _i112 < _list110.size; ++_i112) {
								_elem111 = iprot.readString();
								struct.roles.add(_elem111);
							}
							iprot.readListEnd();
						}
						struct.setRolesIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // AREAS
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list113 = iprot.readListBegin();
							struct.areas = new java.util.ArrayList<java.lang.String>(_list113.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _elem114;
							for (int _i115 = 0; _i115 < _list113.size; ++_i115) {
								_elem114 = iprot.readString();
								struct.areas.add(_elem114);
							}
							iprot.readListEnd();
						}
						struct.setAreasIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // IS_DEL_ROLES
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isDelRoles = iprot.readBool();
						struct.setIsDelRolesIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // IS_DEL_AREAS
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isDelAreas = iprot.readBool();
						struct.setIsDelAreasIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgUser struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.username != null) {
				if (struct.isSetUsername()) {
					oprot.writeFieldBegin(USERNAME_FIELD_DESC);
					oprot.writeString(struct.username);
					oprot.writeFieldEnd();
				}
			}
			if (struct.phone != null) {
				if (struct.isSetPhone()) {
					oprot.writeFieldBegin(PHONE_FIELD_DESC);
					oprot.writeString(struct.phone);
					oprot.writeFieldEnd();
				}
			}
			if (struct.email != null) {
				if (struct.isSetEmail()) {
					oprot.writeFieldBegin(EMAIL_FIELD_DESC);
					oprot.writeString(struct.email);
					oprot.writeFieldEnd();
				}
			}
			if (struct.unique != null) {
				if (struct.isSetUnique()) {
					oprot.writeFieldBegin(UNIQUE_FIELD_DESC);
					oprot.writeString(struct.unique);
					oprot.writeFieldEnd();
				}
			}
			if (struct.bindApp != null) {
				if (struct.isSetBindApp()) {
					oprot.writeFieldBegin(BIND_APP_FIELD_DESC);
					oprot.writeString(struct.bindApp);
					oprot.writeFieldEnd();
				}
			}
			if (struct.bindKey != null) {
				if (struct.isSetBindKey()) {
					oprot.writeFieldBegin(BIND_KEY_FIELD_DESC);
					oprot.writeString(struct.bindKey);
					oprot.writeFieldEnd();
				}
			}
			if (struct.bindVal != null) {
				if (struct.isSetBindVal()) {
					oprot.writeFieldBegin(BIND_VAL_FIELD_DESC);
					oprot.writeString(struct.bindVal);
					oprot.writeFieldEnd();
				}
			}
			if (struct.locNum != null) {
				if (struct.isSetLocNum()) {
					oprot.writeFieldBegin(LOC_NUM_FIELD_DESC);
					oprot.writeString(struct.locNum);
					oprot.writeFieldEnd();
				}
			}
			if (struct.verifyPhone != null) {
				if (struct.isSetVerifyPhone()) {
					oprot.writeFieldBegin(VERIFY_PHONE_FIELD_DESC);
					oprot.writeString(struct.verifyPhone);
					oprot.writeFieldEnd();
				}
			}
			if (struct.verifyEmail != null) {
				if (struct.isSetVerifyEmail()) {
					oprot.writeFieldBegin(VERIFY_EMAIL_FIELD_DESC);
					oprot.writeString(struct.verifyEmail);
					oprot.writeFieldEnd();
				}
			}
			if (struct.source != null) {
				if (struct.isSetSource()) {
					oprot.writeFieldBegin(SOURCE_FIELD_DESC);
					oprot.writeString(struct.source);
					oprot.writeFieldEnd();
				}
			}
			if (struct.bindCode != null) {
				if (struct.isSetBindCode()) {
					oprot.writeFieldBegin(BIND_CODE_FIELD_DESC);
					oprot.writeString(struct.bindCode);
					oprot.writeFieldEnd();
				}
			}
			if (struct.roles != null) {
				if (struct.isSetRoles()) {
					oprot.writeFieldBegin(ROLES_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.roles.size()));
						for (java.lang.String _iter116 : struct.roles) {
							oprot.writeString(_iter116);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
			}
			if (struct.areas != null) {
				if (struct.isSetAreas()) {
					oprot.writeFieldBegin(AREAS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.areas.size()));
						for (java.lang.String _iter117 : struct.areas) {
							oprot.writeString(_iter117);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetIsAbstract()) {
				oprot.writeFieldBegin(IS_ABSTRACT_FIELD_DESC);
				oprot.writeBool(struct.isAbstract);
				oprot.writeFieldEnd();
			}
			if (struct.isSetIsDelRoles()) {
				oprot.writeFieldBegin(IS_DEL_ROLES_FIELD_DESC);
				oprot.writeBool(struct.isDelRoles);
				oprot.writeFieldEnd();
			}
			if (struct.isSetIsDelAreas()) {
				oprot.writeFieldBegin(IS_DEL_AREAS_FIELD_DESC);
				oprot.writeBool(struct.isDelAreas);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgUserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgUserTupleScheme getScheme() {
			return new ArgUserTupleScheme();
		}

	}

	private static class ArgUserTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgUser> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgUser struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUid()) {
				optionals.set(0);
			}
			if (struct.isSetUsername()) {
				optionals.set(1);
			}
			if (struct.isSetPhone()) {
				optionals.set(2);
			}
			if (struct.isSetEmail()) {
				optionals.set(3);
			}
			if (struct.isSetUnique()) {
				optionals.set(4);
			}
			if (struct.isSetBindApp()) {
				optionals.set(5);
			}
			if (struct.isSetBindKey()) {
				optionals.set(6);
			}
			if (struct.isSetBindVal()) {
				optionals.set(7);
			}
			if (struct.isSetLocNum()) {
				optionals.set(8);
			}
			if (struct.isSetVerifyPhone()) {
				optionals.set(9);
			}
			if (struct.isSetVerifyEmail()) {
				optionals.set(10);
			}
			if (struct.isSetSource()) {
				optionals.set(11);
			}
			if (struct.isSetBindCode()) {
				optionals.set(12);
			}
			if (struct.isSetIsAbstract()) {
				optionals.set(13);
			}
			if (struct.isSetRoles()) {
				optionals.set(14);
			}
			if (struct.isSetAreas()) {
				optionals.set(15);
			}
			if (struct.isSetIsDelRoles()) {
				optionals.set(16);
			}
			if (struct.isSetIsDelAreas()) {
				optionals.set(17);
			}
			oprot.writeBitSet(optionals, 18);
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetUsername()) {
				oprot.writeString(struct.username);
			}
			if (struct.isSetPhone()) {
				oprot.writeString(struct.phone);
			}
			if (struct.isSetEmail()) {
				oprot.writeString(struct.email);
			}
			if (struct.isSetUnique()) {
				oprot.writeString(struct.unique);
			}
			if (struct.isSetBindApp()) {
				oprot.writeString(struct.bindApp);
			}
			if (struct.isSetBindKey()) {
				oprot.writeString(struct.bindKey);
			}
			if (struct.isSetBindVal()) {
				oprot.writeString(struct.bindVal);
			}
			if (struct.isSetLocNum()) {
				oprot.writeString(struct.locNum);
			}
			if (struct.isSetVerifyPhone()) {
				oprot.writeString(struct.verifyPhone);
			}
			if (struct.isSetVerifyEmail()) {
				oprot.writeString(struct.verifyEmail);
			}
			if (struct.isSetSource()) {
				oprot.writeString(struct.source);
			}
			if (struct.isSetBindCode()) {
				oprot.writeString(struct.bindCode);
			}
			if (struct.isSetIsAbstract()) {
				oprot.writeBool(struct.isAbstract);
			}
			if (struct.isSetRoles()) {
				{
					oprot.writeI32(struct.roles.size());
					for (java.lang.String _iter118 : struct.roles) {
						oprot.writeString(_iter118);
					}
				}
			}
			if (struct.isSetAreas()) {
				{
					oprot.writeI32(struct.areas.size());
					for (java.lang.String _iter119 : struct.areas) {
						oprot.writeString(_iter119);
					}
				}
			}
			if (struct.isSetIsDelRoles()) {
				oprot.writeBool(struct.isDelRoles);
			}
			if (struct.isSetIsDelAreas()) {
				oprot.writeBool(struct.isDelAreas);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgUser struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(18);
			if (incoming.get(0)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.username = iprot.readString();
				struct.setUsernameIsSet(true);
			}
			if (incoming.get(2)) {
				struct.phone = iprot.readString();
				struct.setPhoneIsSet(true);
			}
			if (incoming.get(3)) {
				struct.email = iprot.readString();
				struct.setEmailIsSet(true);
			}
			if (incoming.get(4)) {
				struct.unique = iprot.readString();
				struct.setUniqueIsSet(true);
			}
			if (incoming.get(5)) {
				struct.bindApp = iprot.readString();
				struct.setBindAppIsSet(true);
			}
			if (incoming.get(6)) {
				struct.bindKey = iprot.readString();
				struct.setBindKeyIsSet(true);
			}
			if (incoming.get(7)) {
				struct.bindVal = iprot.readString();
				struct.setBindValIsSet(true);
			}
			if (incoming.get(8)) {
				struct.locNum = iprot.readString();
				struct.setLocNumIsSet(true);
			}
			if (incoming.get(9)) {
				struct.verifyPhone = iprot.readString();
				struct.setVerifyPhoneIsSet(true);
			}
			if (incoming.get(10)) {
				struct.verifyEmail = iprot.readString();
				struct.setVerifyEmailIsSet(true);
			}
			if (incoming.get(11)) {
				struct.source = iprot.readString();
				struct.setSourceIsSet(true);
			}
			if (incoming.get(12)) {
				struct.bindCode = iprot.readString();
				struct.setBindCodeIsSet(true);
			}
			if (incoming.get(13)) {
				struct.isAbstract = iprot.readBool();
				struct.setIsAbstractIsSet(true);
			}
			if (incoming.get(14)) {
				{
					org.apache.thrift.protocol.TList _list120 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.roles = new java.util.ArrayList<java.lang.String>(_list120.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _elem121;
					for (int _i122 = 0; _i122 < _list120.size; ++_i122) {
						_elem121 = iprot.readString();
						struct.roles.add(_elem121);
					}
				}
				struct.setRolesIsSet(true);
			}
			if (incoming.get(15)) {
				{
					org.apache.thrift.protocol.TList _list123 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.areas = new java.util.ArrayList<java.lang.String>(_list123.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _elem124;
					for (int _i125 = 0; _i125 < _list123.size; ++_i125) {
						_elem124 = iprot.readString();
						struct.areas.add(_elem124);
					}
				}
				struct.setAreasIsSet(true);
			}
			if (incoming.get(16)) {
				struct.isDelRoles = iprot.readBool();
				struct.setIsDelRolesIsSet(true);
			}
			if (incoming.get(17)) {
				struct.isDelAreas = iprot.readBool();
				struct.setIsDelAreasIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
