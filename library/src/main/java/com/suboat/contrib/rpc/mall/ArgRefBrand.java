/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-05-11")
public class ArgRefBrand implements org.apache.thrift.TBase<ArgRefBrand, ArgRefBrand._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgRefBrand> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgRefBrand");

	private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgRefBrandStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgRefBrandTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String bid; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String key; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		BID((short) 1, "bid"), SID((short) 2, "sid"), KEY((short) 3, "key");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // BID
				return BID;
			case 2: // SID
				return SID;
			case 3: // KEY
				return KEY;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final _Fields optionals[] = { _Fields.BID, _Fields.SID, _Fields.KEY };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.BID,
				new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.KEY,
				new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgRefBrand.class, metaDataMap);
	}

	public ArgRefBrand() {
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgRefBrand(ArgRefBrand other) {
		if (other.isSetBid()) {
			this.bid = other.bid;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetKey()) {
			this.key = other.key;
		}
	}

	public ArgRefBrand deepCopy() {
		return new ArgRefBrand(this);
	}

	@Override
	public void clear() {
		this.bid = null;
		this.sid = null;
		this.key = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBid() {
		return this.bid;
	}

	public ArgRefBrand setBid(@org.apache.thrift.annotation.Nullable java.lang.String bid) {
		this.bid = bid;
		return this;
	}

	public void unsetBid() {
		this.bid = null;
	}

	/**
	 * Returns true if field bid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetBid() {
		return this.bid != null;
	}

	public void setBidIsSet(boolean value) {
		if (!value) {
			this.bid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public ArgRefBrand setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getKey() {
		return this.key;
	}

	public ArgRefBrand setKey(@org.apache.thrift.annotation.Nullable java.lang.String key) {
		this.key = key;
		return this;
	}

	public void unsetKey() {
		this.key = null;
	}

	/**
	 * Returns true if field key is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetKey() {
		return this.key != null;
	}

	public void setKeyIsSet(boolean value) {
		if (!value) {
			this.key = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case BID:
			if (value == null) {
				unsetBid();
			}
			else {
				setBid((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case KEY:
			if (value == null) {
				unsetKey();
			}
			else {
				setKey((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case BID:
			return getBid();

		case SID:
			return getSid();

		case KEY:
			return getKey();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case BID:
			return isSetBid();
		case SID:
			return isSetSid();
		case KEY:
			return isSetKey();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgRefBrand)
			return this.equals((ArgRefBrand) that);
		return false;
	}

	public boolean equals(ArgRefBrand that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_bid = true && this.isSetBid();
		boolean that_present_bid = true && that.isSetBid();
		if (this_present_bid || that_present_bid) {
			if (!(this_present_bid && that_present_bid))
				return false;
			if (!this.bid.equals(that.bid))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_key = true && this.isSetKey();
		boolean that_present_key = true && that.isSetKey();
		if (this_present_key || that_present_key) {
			if (!(this_present_key && that_present_key))
				return false;
			if (!this.key.equals(that.key))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetBid()) ? 131071 : 524287);
		if (isSetBid())
			hashCode = hashCode * 8191 + bid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
		if (isSetKey())
			hashCode = hashCode * 8191 + key.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgRefBrand other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetBid()).compareTo(other.isSetBid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetKey()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgRefBrand(");
		boolean first = true;

		if (isSetBid()) {
			sb.append("bid:");
			if (this.bid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bid);
			}
			first = false;
		}
		if (isSetSid()) {
			if (!first)
				sb.append(", ");
			sb.append("sid:");
			if (this.sid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.sid);
			}
			first = false;
		}
		if (isSetKey()) {
			if (!first)
				sb.append(", ");
			sb.append("key:");
			if (this.key == null) {
				sb.append("null");
			}
			else {
				sb.append(this.key);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgRefBrandStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgRefBrandStandardScheme getScheme() {
			return new ArgRefBrandStandardScheme();
		}

	}

	private static class ArgRefBrandStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgRefBrand> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgRefBrand struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // BID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bid = iprot.readString();
						struct.setBidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // KEY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.key = iprot.readString();
						struct.setKeyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgRefBrand struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.bid != null) {
				if (struct.isSetBid()) {
					oprot.writeFieldBegin(BID_FIELD_DESC);
					oprot.writeString(struct.bid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.sid != null) {
				if (struct.isSetSid()) {
					oprot.writeFieldBegin(SID_FIELD_DESC);
					oprot.writeString(struct.sid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.key != null) {
				if (struct.isSetKey()) {
					oprot.writeFieldBegin(KEY_FIELD_DESC);
					oprot.writeString(struct.key);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgRefBrandTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgRefBrandTupleScheme getScheme() {
			return new ArgRefBrandTupleScheme();
		}

	}

	private static class ArgRefBrandTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgRefBrand> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgRefBrand struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetBid()) {
				optionals.set(0);
			}
			if (struct.isSetSid()) {
				optionals.set(1);
			}
			if (struct.isSetKey()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetBid()) {
				oprot.writeString(struct.bid);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetKey()) {
				oprot.writeString(struct.key);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgRefBrand struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.bid = iprot.readString();
				struct.setBidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.key = iprot.readString();
				struct.setKeyIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
