/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 钱包余额过期统计记录
 */
public class WalletExpire implements org.apache.thrift.TBase<WalletExpire, WalletExpire._Fields>, java.io.Serializable,
		Cloneable, Comparable<WalletExpire> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"WalletExpire");

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField EXPIRE_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTag", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField FREQ_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"freq", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"balance", org.apache.thrift.protocol.TType.DOUBLE, (short) 9);

	private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amount", org.apache.thrift.protocol.TType.DOUBLE, (short) 10);

	private static final org.apache.thrift.protocol.TField FREEZING_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"freezing", org.apache.thrift.protocol.TType.DOUBLE, (short) 11);

	private static final org.apache.thrift.protocol.TField NUM_WF_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numWf", org.apache.thrift.protocol.TType.I32, (short) 12);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WalletExpireStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WalletExpireTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTag; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String freq; // required

	public double balance; // required

	public double amount; // required

	public double freezing; // required

	public int numWf; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		UID((short) 1, "uid"), CATEGORY((short) 2, "category"), EXPIRE_TAG((short) 3, "expireTag"), EXPIRE_TIME(
				(short) 4,
				"expireTime"), CREATE_TIME((short) 5, "createTime"), UPDATE_TIME((short) 6, "updateTime"), STATUS(
						(short) 7, "status"), FREQ((short) 8, "freq"), BALANCE((short) 9, "balance"), AMOUNT((short) 10,
								"amount"), FREEZING((short) 11, "freezing"), NUM_WF((short) 12, "numWf");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // UID
				return UID;
			case 2: // CATEGORY
				return CATEGORY;
			case 3: // EXPIRE_TAG
				return EXPIRE_TAG;
			case 4: // EXPIRE_TIME
				return EXPIRE_TIME;
			case 5: // CREATE_TIME
				return CREATE_TIME;
			case 6: // UPDATE_TIME
				return UPDATE_TIME;
			case 7: // STATUS
				return STATUS;
			case 8: // FREQ
				return FREQ;
			case 9: // BALANCE
				return BALANCE;
			case 10: // AMOUNT
				return AMOUNT;
			case 11: // FREEZING
				return FREEZING;
			case 12: // NUM_WF
				return NUM_WF;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;

	private static final int __BALANCE_ISSET_ID = 1;

	private static final int __AMOUNT_ISSET_ID = 2;

	private static final int __FREEZING_ISSET_ID = 3;

	private static final int __NUMWF_ISSET_ID = 4;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EXPIRE_TAG,
				new org.apache.thrift.meta_data.FieldMetaData("expireTag",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.FREQ,
				new org.apache.thrift.meta_data.FieldMetaData("freq", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BALANCE,
				new org.apache.thrift.meta_data.FieldMetaData("balance",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.AMOUNT,
				new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.FREEZING,
				new org.apache.thrift.meta_data.FieldMetaData("freezing",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.NUM_WF,
				new org.apache.thrift.meta_data.FieldMetaData("numWf", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WalletExpire.class, metaDataMap);
	}

	public WalletExpire() {
	}

	public WalletExpire(java.lang.String uid, java.lang.String category, java.lang.String expireTag,
			java.lang.String expireTime, java.lang.String createTime, java.lang.String updateTime, int status,
			java.lang.String freq, double balance, double amount, double freezing, int numWf) {
		this();
		this.uid = uid;
		this.category = category;
		this.expireTag = expireTag;
		this.expireTime = expireTime;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.status = status;
		setStatusIsSet(true);
		this.freq = freq;
		this.balance = balance;
		setBalanceIsSet(true);
		this.amount = amount;
		setAmountIsSet(true);
		this.freezing = freezing;
		setFreezingIsSet(true);
		this.numWf = numWf;
		setNumWfIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public WalletExpire(WalletExpire other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		if (other.isSetExpireTag()) {
			this.expireTag = other.expireTag;
		}
		if (other.isSetExpireTime()) {
			this.expireTime = other.expireTime;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.status = other.status;
		if (other.isSetFreq()) {
			this.freq = other.freq;
		}
		this.balance = other.balance;
		this.amount = other.amount;
		this.freezing = other.freezing;
		this.numWf = other.numWf;
	}

	public WalletExpire deepCopy() {
		return new WalletExpire(this);
	}

	@Override
	public void clear() {
		this.uid = null;
		this.category = null;
		this.expireTag = null;
		this.expireTime = null;
		this.createTime = null;
		this.updateTime = null;
		setStatusIsSet(false);
		this.status = 0;
		this.freq = null;
		setBalanceIsSet(false);
		this.balance = 0.0;
		setAmountIsSet(false);
		this.amount = 0.0;
		setFreezingIsSet(false);
		this.freezing = 0.0;
		setNumWfIsSet(false);
		this.numWf = 0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public WalletExpire setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public WalletExpire setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTag() {
		return this.expireTag;
	}

	public WalletExpire setExpireTag(@org.apache.thrift.annotation.Nullable java.lang.String expireTag) {
		this.expireTag = expireTag;
		return this;
	}

	public void unsetExpireTag() {
		this.expireTag = null;
	}

	/**
	 * Returns true if field expireTag is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTag() {
		return this.expireTag != null;
	}

	public void setExpireTagIsSet(boolean value) {
		if (!value) {
			this.expireTag = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTime() {
		return this.expireTime;
	}

	public WalletExpire setExpireTime(@org.apache.thrift.annotation.Nullable java.lang.String expireTime) {
		this.expireTime = expireTime;
		return this;
	}

	public void unsetExpireTime() {
		this.expireTime = null;
	}

	/**
	 * Returns true if field expireTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTime() {
		return this.expireTime != null;
	}

	public void setExpireTimeIsSet(boolean value) {
		if (!value) {
			this.expireTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public WalletExpire setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public WalletExpire setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public WalletExpire setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getFreq() {
		return this.freq;
	}

	public WalletExpire setFreq(@org.apache.thrift.annotation.Nullable java.lang.String freq) {
		this.freq = freq;
		return this;
	}

	public void unsetFreq() {
		this.freq = null;
	}

	/**
	 * Returns true if field freq is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetFreq() {
		return this.freq != null;
	}

	public void setFreqIsSet(boolean value) {
		if (!value) {
			this.freq = null;
		}
	}

	public double getBalance() {
		return this.balance;
	}

	public WalletExpire setBalance(double balance) {
		this.balance = balance;
		setBalanceIsSet(true);
		return this;
	}

	public void unsetBalance() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
	}

	/**
	 * Returns true if field balance is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBalance() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
	}

	public void setBalanceIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
	}

	public double getAmount() {
		return this.amount;
	}

	public WalletExpire setAmount(double amount) {
		this.amount = amount;
		setAmountIsSet(true);
		return this;
	}

	public void unsetAmount() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field amount is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAmount() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	public void setAmountIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
	}

	public double getFreezing() {
		return this.freezing;
	}

	public WalletExpire setFreezing(double freezing) {
		this.freezing = freezing;
		setFreezingIsSet(true);
		return this;
	}

	public void unsetFreezing() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREEZING_ISSET_ID);
	}

	/**
	 * Returns true if field freezing is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetFreezing() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREEZING_ISSET_ID);
	}

	public void setFreezingIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREEZING_ISSET_ID, value);
	}

	public int getNumWf() {
		return this.numWf;
	}

	public WalletExpire setNumWf(int numWf) {
		this.numWf = numWf;
		setNumWfIsSet(true);
		return this;
	}

	public void unsetNumWf() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMWF_ISSET_ID);
	}

	/**
	 * Returns true if field numWf is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetNumWf() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMWF_ISSET_ID);
	}

	public void setNumWfIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMWF_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case EXPIRE_TAG:
			if (value == null) {
				unsetExpireTag();
			}
			else {
				setExpireTag((java.lang.String) value);
			}
			break;

		case EXPIRE_TIME:
			if (value == null) {
				unsetExpireTime();
			}
			else {
				setExpireTime((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case FREQ:
			if (value == null) {
				unsetFreq();
			}
			else {
				setFreq((java.lang.String) value);
			}
			break;

		case BALANCE:
			if (value == null) {
				unsetBalance();
			}
			else {
				setBalance((java.lang.Double) value);
			}
			break;

		case AMOUNT:
			if (value == null) {
				unsetAmount();
			}
			else {
				setAmount((java.lang.Double) value);
			}
			break;

		case FREEZING:
			if (value == null) {
				unsetFreezing();
			}
			else {
				setFreezing((java.lang.Double) value);
			}
			break;

		case NUM_WF:
			if (value == null) {
				unsetNumWf();
			}
			else {
				setNumWf((java.lang.Integer) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case UID:
			return getUid();

		case CATEGORY:
			return getCategory();

		case EXPIRE_TAG:
			return getExpireTag();

		case EXPIRE_TIME:
			return getExpireTime();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case STATUS:
			return getStatus();

		case FREQ:
			return getFreq();

		case BALANCE:
			return getBalance();

		case AMOUNT:
			return getAmount();

		case FREEZING:
			return getFreezing();

		case NUM_WF:
			return getNumWf();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case UID:
			return isSetUid();
		case CATEGORY:
			return isSetCategory();
		case EXPIRE_TAG:
			return isSetExpireTag();
		case EXPIRE_TIME:
			return isSetExpireTime();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case STATUS:
			return isSetStatus();
		case FREQ:
			return isSetFreq();
		case BALANCE:
			return isSetBalance();
		case AMOUNT:
			return isSetAmount();
		case FREEZING:
			return isSetFreezing();
		case NUM_WF:
			return isSetNumWf();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof WalletExpire)
			return this.equals((WalletExpire) that);
		return false;
	}

	public boolean equals(WalletExpire that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_expireTag = true && this.isSetExpireTag();
		boolean that_present_expireTag = true && that.isSetExpireTag();
		if (this_present_expireTag || that_present_expireTag) {
			if (!(this_present_expireTag && that_present_expireTag))
				return false;
			if (!this.expireTag.equals(that.expireTag))
				return false;
		}

		boolean this_present_expireTime = true && this.isSetExpireTime();
		boolean that_present_expireTime = true && that.isSetExpireTime();
		if (this_present_expireTime || that_present_expireTime) {
			if (!(this_present_expireTime && that_present_expireTime))
				return false;
			if (!this.expireTime.equals(that.expireTime))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_freq = true && this.isSetFreq();
		boolean that_present_freq = true && that.isSetFreq();
		if (this_present_freq || that_present_freq) {
			if (!(this_present_freq && that_present_freq))
				return false;
			if (!this.freq.equals(that.freq))
				return false;
		}

		boolean this_present_balance = true;
		boolean that_present_balance = true;
		if (this_present_balance || that_present_balance) {
			if (!(this_present_balance && that_present_balance))
				return false;
			if (this.balance != that.balance)
				return false;
		}

		boolean this_present_amount = true;
		boolean that_present_amount = true;
		if (this_present_amount || that_present_amount) {
			if (!(this_present_amount && that_present_amount))
				return false;
			if (this.amount != that.amount)
				return false;
		}

		boolean this_present_freezing = true;
		boolean that_present_freezing = true;
		if (this_present_freezing || that_present_freezing) {
			if (!(this_present_freezing && that_present_freezing))
				return false;
			if (this.freezing != that.freezing)
				return false;
		}

		boolean this_present_numWf = true;
		boolean that_present_numWf = true;
		if (this_present_numWf || that_present_numWf) {
			if (!(this_present_numWf && that_present_numWf))
				return false;
			if (this.numWf != that.numWf)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTag()) ? 131071 : 524287);
		if (isSetExpireTag())
			hashCode = hashCode * 8191 + expireTag.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTime()) ? 131071 : 524287);
		if (isSetExpireTime())
			hashCode = hashCode * 8191 + expireTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetFreq()) ? 131071 : 524287);
		if (isSetFreq())
			hashCode = hashCode * 8191 + freq.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(balance);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(freezing);

		hashCode = hashCode * 8191 + numWf;

		return hashCode;
	}

	@Override
	public int compareTo(WalletExpire other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTag()).compareTo(other.isSetExpireTag());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTag()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTag, other.expireTag);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFreq()).compareTo(other.isSetFreq());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFreq()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freq, other.freq);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBalance()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFreezing()).compareTo(other.isSetFreezing());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFreezing()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezing, other.freezing);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumWf()).compareTo(other.isSetNumWf());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumWf()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numWf, other.numWf);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("WalletExpire(");
		boolean first = true;

		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("expireTag:");
		if (this.expireTag == null) {
			sb.append("null");
		}
		else {
			sb.append(this.expireTag);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("expireTime:");
		if (this.expireTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.expireTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("freq:");
		if (this.freq == null) {
			sb.append("null");
		}
		else {
			sb.append(this.freq);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("balance:");
		sb.append(this.balance);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amount:");
		sb.append(this.amount);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("freezing:");
		sb.append(this.freezing);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numWf:");
		sb.append(this.numWf);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class WalletExpireStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletExpireStandardScheme getScheme() {
			return new WalletExpireStandardScheme();
		}

	}

	private static class WalletExpireStandardScheme extends org.apache.thrift.scheme.StandardScheme<WalletExpire> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, WalletExpire struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // EXPIRE_TAG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTag = iprot.readString();
						struct.setExpireTagIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // EXPIRE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTime = iprot.readString();
						struct.setExpireTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // FREQ
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.freq = iprot.readString();
						struct.setFreqIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // BALANCE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.balance = iprot.readDouble();
						struct.setBalanceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // AMOUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amount = iprot.readDouble();
						struct.setAmountIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // FREEZING
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.freezing = iprot.readDouble();
						struct.setFreezingIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // NUM_WF
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numWf = iprot.readI32();
						struct.setNumWfIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, WalletExpire struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			if (struct.expireTag != null) {
				oprot.writeFieldBegin(EXPIRE_TAG_FIELD_DESC);
				oprot.writeString(struct.expireTag);
				oprot.writeFieldEnd();
			}
			if (struct.expireTime != null) {
				oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
				oprot.writeString(struct.expireTime);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.freq != null) {
				oprot.writeFieldBegin(FREQ_FIELD_DESC);
				oprot.writeString(struct.freq);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(BALANCE_FIELD_DESC);
			oprot.writeDouble(struct.balance);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
			oprot.writeDouble(struct.amount);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(FREEZING_FIELD_DESC);
			oprot.writeDouble(struct.freezing);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(NUM_WF_FIELD_DESC);
			oprot.writeI32(struct.numWf);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class WalletExpireTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletExpireTupleScheme getScheme() {
			return new WalletExpireTupleScheme();
		}

	}

	private static class WalletExpireTupleScheme extends org.apache.thrift.scheme.TupleScheme<WalletExpire> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, WalletExpire struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetUid()) {
				optionals.set(0);
			}
			if (struct.isSetCategory()) {
				optionals.set(1);
			}
			if (struct.isSetExpireTag()) {
				optionals.set(2);
			}
			if (struct.isSetExpireTime()) {
				optionals.set(3);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(4);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(5);
			}
			if (struct.isSetStatus()) {
				optionals.set(6);
			}
			if (struct.isSetFreq()) {
				optionals.set(7);
			}
			if (struct.isSetBalance()) {
				optionals.set(8);
			}
			if (struct.isSetAmount()) {
				optionals.set(9);
			}
			if (struct.isSetFreezing()) {
				optionals.set(10);
			}
			if (struct.isSetNumWf()) {
				optionals.set(11);
			}
			oprot.writeBitSet(optionals, 12);
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetExpireTag()) {
				oprot.writeString(struct.expireTag);
			}
			if (struct.isSetExpireTime()) {
				oprot.writeString(struct.expireTime);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetFreq()) {
				oprot.writeString(struct.freq);
			}
			if (struct.isSetBalance()) {
				oprot.writeDouble(struct.balance);
			}
			if (struct.isSetAmount()) {
				oprot.writeDouble(struct.amount);
			}
			if (struct.isSetFreezing()) {
				oprot.writeDouble(struct.freezing);
			}
			if (struct.isSetNumWf()) {
				oprot.writeI32(struct.numWf);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, WalletExpire struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(12);
			if (incoming.get(0)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(2)) {
				struct.expireTag = iprot.readString();
				struct.setExpireTagIsSet(true);
			}
			if (incoming.get(3)) {
				struct.expireTime = iprot.readString();
				struct.setExpireTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(6)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(7)) {
				struct.freq = iprot.readString();
				struct.setFreqIsSet(true);
			}
			if (incoming.get(8)) {
				struct.balance = iprot.readDouble();
				struct.setBalanceIsSet(true);
			}
			if (incoming.get(9)) {
				struct.amount = iprot.readDouble();
				struct.setAmountIsSet(true);
			}
			if (incoming.get(10)) {
				struct.freezing = iprot.readDouble();
				struct.setFreezingIsSet(true);
			}
			if (incoming.get(11)) {
				struct.numWf = iprot.readI32();
				struct.setNumWfIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
