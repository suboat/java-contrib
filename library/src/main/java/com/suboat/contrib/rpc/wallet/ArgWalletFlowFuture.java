/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 一笔未来资金设定 有效条件: 必填项必填 注: isIncome=false的情景下, 用户实际被扣金额=amount+fee
 */
public class ArgWalletFlowFuture implements org.apache.thrift.TBase<ArgWalletFlowFuture, ArgWalletFlowFuture._Fields>,
		java.io.Serializable, Cloneable, Comparable<ArgWalletFlowFuture> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgWalletFlowFuture");

	private static final org.apache.thrift.protocol.TField APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"applyTime", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField IS_FREEZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isFreeze", org.apache.thrift.protocol.TType.BOOL, (short) 2);

	private static final org.apache.thrift.protocol.TField IS_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isIncome", org.apache.thrift.protocol.TType.BOOL, (short) 3);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField WALLET_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"wallet", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"action", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amount", org.apache.thrift.protocol.TType.DOUBLE, (short) 7);

	private static final org.apache.thrift.protocol.TField FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("fee",
			org.apache.thrift.protocol.TType.DOUBLE, (short) 8);

	private static final org.apache.thrift.protocol.TField COMMENT_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"commentTag", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField COMMENT_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"commentJson", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"trigger", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField REL_UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"relUid", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField AMOUNT_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amountInt", org.apache.thrift.protocol.TType.I64, (short) 13);

	private static final org.apache.thrift.protocol.TField FEE_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"feeInt", org.apache.thrift.protocol.TType.I64, (short) 14);

	private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"taskId", org.apache.thrift.protocol.TType.STRING, (short) 15);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgWalletFlowFutureStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgWalletFlowFutureTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String applyTime; // required

	public boolean isFreeze; // required

	public boolean isIncome; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String wallet; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String action; // required

	public double amount; // required

	public double fee; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String commentTag; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String commentJson; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String trigger; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String relUid; // optional

	public long amountInt; // optional

	public long feeInt; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String taskId; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		APPLY_TIME((short) 1, "applyTime"), IS_FREEZE((short) 2, "isFreeze"), IS_INCOME((short) 3, "isIncome"), UID(
				(short) 4, "uid"), WALLET((short) 5, "wallet"), ACTION((short) 6, "action"), AMOUNT((short) 7,
						"amount"), FEE((short) 8, "fee"), COMMENT_TAG((short) 9, "commentTag"), COMMENT_JSON((short) 10,
								"commentJson"), TRIGGER((short) 11, "trigger"), REL_UID((short) 12,
										"relUid"), AMOUNT_INT((short) 13, "amountInt"), FEE_INT((short) 14,
												"feeInt"), TASK_ID((short) 15, "taskId");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // APPLY_TIME
				return APPLY_TIME;
			case 2: // IS_FREEZE
				return IS_FREEZE;
			case 3: // IS_INCOME
				return IS_INCOME;
			case 4: // UID
				return UID;
			case 5: // WALLET
				return WALLET;
			case 6: // ACTION
				return ACTION;
			case 7: // AMOUNT
				return AMOUNT;
			case 8: // FEE
				return FEE;
			case 9: // COMMENT_TAG
				return COMMENT_TAG;
			case 10: // COMMENT_JSON
				return COMMENT_JSON;
			case 11: // TRIGGER
				return TRIGGER;
			case 12: // REL_UID
				return REL_UID;
			case 13: // AMOUNT_INT
				return AMOUNT_INT;
			case 14: // FEE_INT
				return FEE_INT;
			case 15: // TASK_ID
				return TASK_ID;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISFREEZE_ISSET_ID = 0;

	private static final int __ISINCOME_ISSET_ID = 1;

	private static final int __AMOUNT_ISSET_ID = 2;

	private static final int __FEE_ISSET_ID = 3;

	private static final int __AMOUNTINT_ISSET_ID = 4;

	private static final int __FEEINT_ISSET_ID = 5;

	private byte __isset_bitfield = 0;

	private static final _Fields optionals[] = { _Fields.FEE, _Fields.COMMENT_TAG, _Fields.COMMENT_JSON,
			_Fields.TRIGGER, _Fields.REL_UID, _Fields.AMOUNT_INT, _Fields.FEE_INT, _Fields.TASK_ID };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("applyTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_FREEZE,
				new org.apache.thrift.meta_data.FieldMetaData("isFreeze",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_INCOME,
				new org.apache.thrift.meta_data.FieldMetaData("isIncome",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WALLET,
				new org.apache.thrift.meta_data.FieldMetaData("wallet", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ACTION,
				new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AMOUNT,
				new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.FEE,
				new org.apache.thrift.meta_data.FieldMetaData("fee", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COMMENT_TAG,
				new org.apache.thrift.meta_data.FieldMetaData("commentTag",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMMENT_JSON,
				new org.apache.thrift.meta_data.FieldMetaData("commentJson",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TRIGGER,
				new org.apache.thrift.meta_data.FieldMetaData("trigger",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REL_UID,
				new org.apache.thrift.meta_data.FieldMetaData("relUid",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AMOUNT_INT,
				new org.apache.thrift.meta_data.FieldMetaData("amountInt",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.FEE_INT,
				new org.apache.thrift.meta_data.FieldMetaData("feeInt",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.TASK_ID,
				new org.apache.thrift.meta_data.FieldMetaData("taskId",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgWalletFlowFuture.class, metaDataMap);
	}

	public ArgWalletFlowFuture() {
	}

	public ArgWalletFlowFuture(java.lang.String applyTime, boolean isFreeze, boolean isIncome, java.lang.String uid,
			java.lang.String wallet, java.lang.String action, double amount) {
		this();
		this.applyTime = applyTime;
		this.isFreeze = isFreeze;
		setIsFreezeIsSet(true);
		this.isIncome = isIncome;
		setIsIncomeIsSet(true);
		this.uid = uid;
		this.wallet = wallet;
		this.action = action;
		this.amount = amount;
		setAmountIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgWalletFlowFuture(ArgWalletFlowFuture other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetApplyTime()) {
			this.applyTime = other.applyTime;
		}
		this.isFreeze = other.isFreeze;
		this.isIncome = other.isIncome;
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetWallet()) {
			this.wallet = other.wallet;
		}
		if (other.isSetAction()) {
			this.action = other.action;
		}
		this.amount = other.amount;
		this.fee = other.fee;
		if (other.isSetCommentTag()) {
			this.commentTag = other.commentTag;
		}
		if (other.isSetCommentJson()) {
			this.commentJson = other.commentJson;
		}
		if (other.isSetTrigger()) {
			this.trigger = other.trigger;
		}
		if (other.isSetRelUid()) {
			this.relUid = other.relUid;
		}
		this.amountInt = other.amountInt;
		this.feeInt = other.feeInt;
		if (other.isSetTaskId()) {
			this.taskId = other.taskId;
		}
	}

	public ArgWalletFlowFuture deepCopy() {
		return new ArgWalletFlowFuture(this);
	}

	@Override
	public void clear() {
		this.applyTime = null;
		setIsFreezeIsSet(false);
		this.isFreeze = false;
		setIsIncomeIsSet(false);
		this.isIncome = false;
		this.uid = null;
		this.wallet = null;
		this.action = null;
		setAmountIsSet(false);
		this.amount = 0.0;
		setFeeIsSet(false);
		this.fee = 0.0;
		this.commentTag = null;
		this.commentJson = null;
		this.trigger = null;
		this.relUid = null;
		setAmountIntIsSet(false);
		this.amountInt = 0;
		setFeeIntIsSet(false);
		this.feeInt = 0;
		this.taskId = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getApplyTime() {
		return this.applyTime;
	}

	public ArgWalletFlowFuture setApplyTime(@org.apache.thrift.annotation.Nullable java.lang.String applyTime) {
		this.applyTime = applyTime;
		return this;
	}

	public void unsetApplyTime() {
		this.applyTime = null;
	}

	/**
	 * Returns true if field applyTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetApplyTime() {
		return this.applyTime != null;
	}

	public void setApplyTimeIsSet(boolean value) {
		if (!value) {
			this.applyTime = null;
		}
	}

	public boolean isIsFreeze() {
		return this.isFreeze;
	}

	public ArgWalletFlowFuture setIsFreeze(boolean isFreeze) {
		this.isFreeze = isFreeze;
		setIsFreezeIsSet(true);
		return this;
	}

	public void unsetIsFreeze() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFREEZE_ISSET_ID);
	}

	/**
	 * Returns true if field isFreeze is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsFreeze() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFREEZE_ISSET_ID);
	}

	public void setIsFreezeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFREEZE_ISSET_ID, value);
	}

	public boolean isIsIncome() {
		return this.isIncome;
	}

	public ArgWalletFlowFuture setIsIncome(boolean isIncome) {
		this.isIncome = isIncome;
		setIsIncomeIsSet(true);
		return this;
	}

	public void unsetIsIncome() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINCOME_ISSET_ID);
	}

	/**
	 * Returns true if field isIncome is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsIncome() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINCOME_ISSET_ID);
	}

	public void setIsIncomeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINCOME_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public ArgWalletFlowFuture setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getWallet() {
		return this.wallet;
	}

	public ArgWalletFlowFuture setWallet(@org.apache.thrift.annotation.Nullable java.lang.String wallet) {
		this.wallet = wallet;
		return this;
	}

	public void unsetWallet() {
		this.wallet = null;
	}

	/**
	 * Returns true if field wallet is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetWallet() {
		return this.wallet != null;
	}

	public void setWalletIsSet(boolean value) {
		if (!value) {
			this.wallet = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAction() {
		return this.action;
	}

	public ArgWalletFlowFuture setAction(@org.apache.thrift.annotation.Nullable java.lang.String action) {
		this.action = action;
		return this;
	}

	public void unsetAction() {
		this.action = null;
	}

	/**
	 * Returns true if field action is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAction() {
		return this.action != null;
	}

	public void setActionIsSet(boolean value) {
		if (!value) {
			this.action = null;
		}
	}

	public double getAmount() {
		return this.amount;
	}

	public ArgWalletFlowFuture setAmount(double amount) {
		this.amount = amount;
		setAmountIsSet(true);
		return this;
	}

	public void unsetAmount() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field amount is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAmount() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	public void setAmountIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
	}

	public double getFee() {
		return this.fee;
	}

	public ArgWalletFlowFuture setFee(double fee) {
		this.fee = fee;
		setFeeIsSet(true);
		return this;
	}

	public void unsetFee() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEE_ISSET_ID);
	}

	/**
	 * Returns true if field fee is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetFee() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEE_ISSET_ID);
	}

	public void setFeeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCommentTag() {
		return this.commentTag;
	}

	public ArgWalletFlowFuture setCommentTag(@org.apache.thrift.annotation.Nullable java.lang.String commentTag) {
		this.commentTag = commentTag;
		return this;
	}

	public void unsetCommentTag() {
		this.commentTag = null;
	}

	/**
	 * Returns true if field commentTag is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCommentTag() {
		return this.commentTag != null;
	}

	public void setCommentTagIsSet(boolean value) {
		if (!value) {
			this.commentTag = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCommentJson() {
		return this.commentJson;
	}

	public ArgWalletFlowFuture setCommentJson(@org.apache.thrift.annotation.Nullable java.lang.String commentJson) {
		this.commentJson = commentJson;
		return this;
	}

	public void unsetCommentJson() {
		this.commentJson = null;
	}

	/**
	 * Returns true if field commentJson is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCommentJson() {
		return this.commentJson != null;
	}

	public void setCommentJsonIsSet(boolean value) {
		if (!value) {
			this.commentJson = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTrigger() {
		return this.trigger;
	}

	public ArgWalletFlowFuture setTrigger(@org.apache.thrift.annotation.Nullable java.lang.String trigger) {
		this.trigger = trigger;
		return this;
	}

	public void unsetTrigger() {
		this.trigger = null;
	}

	/**
	 * Returns true if field trigger is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTrigger() {
		return this.trigger != null;
	}

	public void setTriggerIsSet(boolean value) {
		if (!value) {
			this.trigger = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRelUid() {
		return this.relUid;
	}

	public ArgWalletFlowFuture setRelUid(@org.apache.thrift.annotation.Nullable java.lang.String relUid) {
		this.relUid = relUid;
		return this;
	}

	public void unsetRelUid() {
		this.relUid = null;
	}

	/**
	 * Returns true if field relUid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRelUid() {
		return this.relUid != null;
	}

	public void setRelUidIsSet(boolean value) {
		if (!value) {
			this.relUid = null;
		}
	}

	public long getAmountInt() {
		return this.amountInt;
	}

	public ArgWalletFlowFuture setAmountInt(long amountInt) {
		this.amountInt = amountInt;
		setAmountIntIsSet(true);
		return this;
	}

	public void unsetAmountInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNTINT_ISSET_ID);
	}

	/**
	 * Returns true if field amountInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAmountInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNTINT_ISSET_ID);
	}

	public void setAmountIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNTINT_ISSET_ID, value);
	}

	public long getFeeInt() {
		return this.feeInt;
	}

	public ArgWalletFlowFuture setFeeInt(long feeInt) {
		this.feeInt = feeInt;
		setFeeIntIsSet(true);
		return this;
	}

	public void unsetFeeInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEEINT_ISSET_ID);
	}

	/**
	 * Returns true if field feeInt is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetFeeInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEEINT_ISSET_ID);
	}

	public void setFeeIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEEINT_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTaskId() {
		return this.taskId;
	}

	public ArgWalletFlowFuture setTaskId(@org.apache.thrift.annotation.Nullable java.lang.String taskId) {
		this.taskId = taskId;
		return this;
	}

	public void unsetTaskId() {
		this.taskId = null;
	}

	/**
	 * Returns true if field taskId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTaskId() {
		return this.taskId != null;
	}

	public void setTaskIdIsSet(boolean value) {
		if (!value) {
			this.taskId = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case APPLY_TIME:
			if (value == null) {
				unsetApplyTime();
			}
			else {
				setApplyTime((java.lang.String) value);
			}
			break;

		case IS_FREEZE:
			if (value == null) {
				unsetIsFreeze();
			}
			else {
				setIsFreeze((java.lang.Boolean) value);
			}
			break;

		case IS_INCOME:
			if (value == null) {
				unsetIsIncome();
			}
			else {
				setIsIncome((java.lang.Boolean) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case WALLET:
			if (value == null) {
				unsetWallet();
			}
			else {
				setWallet((java.lang.String) value);
			}
			break;

		case ACTION:
			if (value == null) {
				unsetAction();
			}
			else {
				setAction((java.lang.String) value);
			}
			break;

		case AMOUNT:
			if (value == null) {
				unsetAmount();
			}
			else {
				setAmount((java.lang.Double) value);
			}
			break;

		case FEE:
			if (value == null) {
				unsetFee();
			}
			else {
				setFee((java.lang.Double) value);
			}
			break;

		case COMMENT_TAG:
			if (value == null) {
				unsetCommentTag();
			}
			else {
				setCommentTag((java.lang.String) value);
			}
			break;

		case COMMENT_JSON:
			if (value == null) {
				unsetCommentJson();
			}
			else {
				setCommentJson((java.lang.String) value);
			}
			break;

		case TRIGGER:
			if (value == null) {
				unsetTrigger();
			}
			else {
				setTrigger((java.lang.String) value);
			}
			break;

		case REL_UID:
			if (value == null) {
				unsetRelUid();
			}
			else {
				setRelUid((java.lang.String) value);
			}
			break;

		case AMOUNT_INT:
			if (value == null) {
				unsetAmountInt();
			}
			else {
				setAmountInt((java.lang.Long) value);
			}
			break;

		case FEE_INT:
			if (value == null) {
				unsetFeeInt();
			}
			else {
				setFeeInt((java.lang.Long) value);
			}
			break;

		case TASK_ID:
			if (value == null) {
				unsetTaskId();
			}
			else {
				setTaskId((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case APPLY_TIME:
			return getApplyTime();

		case IS_FREEZE:
			return isIsFreeze();

		case IS_INCOME:
			return isIsIncome();

		case UID:
			return getUid();

		case WALLET:
			return getWallet();

		case ACTION:
			return getAction();

		case AMOUNT:
			return getAmount();

		case FEE:
			return getFee();

		case COMMENT_TAG:
			return getCommentTag();

		case COMMENT_JSON:
			return getCommentJson();

		case TRIGGER:
			return getTrigger();

		case REL_UID:
			return getRelUid();

		case AMOUNT_INT:
			return getAmountInt();

		case FEE_INT:
			return getFeeInt();

		case TASK_ID:
			return getTaskId();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case APPLY_TIME:
			return isSetApplyTime();
		case IS_FREEZE:
			return isSetIsFreeze();
		case IS_INCOME:
			return isSetIsIncome();
		case UID:
			return isSetUid();
		case WALLET:
			return isSetWallet();
		case ACTION:
			return isSetAction();
		case AMOUNT:
			return isSetAmount();
		case FEE:
			return isSetFee();
		case COMMENT_TAG:
			return isSetCommentTag();
		case COMMENT_JSON:
			return isSetCommentJson();
		case TRIGGER:
			return isSetTrigger();
		case REL_UID:
			return isSetRelUid();
		case AMOUNT_INT:
			return isSetAmountInt();
		case FEE_INT:
			return isSetFeeInt();
		case TASK_ID:
			return isSetTaskId();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgWalletFlowFuture)
			return this.equals((ArgWalletFlowFuture) that);
		return false;
	}

	public boolean equals(ArgWalletFlowFuture that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_applyTime = true && this.isSetApplyTime();
		boolean that_present_applyTime = true && that.isSetApplyTime();
		if (this_present_applyTime || that_present_applyTime) {
			if (!(this_present_applyTime && that_present_applyTime))
				return false;
			if (!this.applyTime.equals(that.applyTime))
				return false;
		}

		boolean this_present_isFreeze = true;
		boolean that_present_isFreeze = true;
		if (this_present_isFreeze || that_present_isFreeze) {
			if (!(this_present_isFreeze && that_present_isFreeze))
				return false;
			if (this.isFreeze != that.isFreeze)
				return false;
		}

		boolean this_present_isIncome = true;
		boolean that_present_isIncome = true;
		if (this_present_isIncome || that_present_isIncome) {
			if (!(this_present_isIncome && that_present_isIncome))
				return false;
			if (this.isIncome != that.isIncome)
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_wallet = true && this.isSetWallet();
		boolean that_present_wallet = true && that.isSetWallet();
		if (this_present_wallet || that_present_wallet) {
			if (!(this_present_wallet && that_present_wallet))
				return false;
			if (!this.wallet.equals(that.wallet))
				return false;
		}

		boolean this_present_action = true && this.isSetAction();
		boolean that_present_action = true && that.isSetAction();
		if (this_present_action || that_present_action) {
			if (!(this_present_action && that_present_action))
				return false;
			if (!this.action.equals(that.action))
				return false;
		}

		boolean this_present_amount = true;
		boolean that_present_amount = true;
		if (this_present_amount || that_present_amount) {
			if (!(this_present_amount && that_present_amount))
				return false;
			if (this.amount != that.amount)
				return false;
		}

		boolean this_present_fee = true && this.isSetFee();
		boolean that_present_fee = true && that.isSetFee();
		if (this_present_fee || that_present_fee) {
			if (!(this_present_fee && that_present_fee))
				return false;
			if (this.fee != that.fee)
				return false;
		}

		boolean this_present_commentTag = true && this.isSetCommentTag();
		boolean that_present_commentTag = true && that.isSetCommentTag();
		if (this_present_commentTag || that_present_commentTag) {
			if (!(this_present_commentTag && that_present_commentTag))
				return false;
			if (!this.commentTag.equals(that.commentTag))
				return false;
		}

		boolean this_present_commentJson = true && this.isSetCommentJson();
		boolean that_present_commentJson = true && that.isSetCommentJson();
		if (this_present_commentJson || that_present_commentJson) {
			if (!(this_present_commentJson && that_present_commentJson))
				return false;
			if (!this.commentJson.equals(that.commentJson))
				return false;
		}

		boolean this_present_trigger = true && this.isSetTrigger();
		boolean that_present_trigger = true && that.isSetTrigger();
		if (this_present_trigger || that_present_trigger) {
			if (!(this_present_trigger && that_present_trigger))
				return false;
			if (!this.trigger.equals(that.trigger))
				return false;
		}

		boolean this_present_relUid = true && this.isSetRelUid();
		boolean that_present_relUid = true && that.isSetRelUid();
		if (this_present_relUid || that_present_relUid) {
			if (!(this_present_relUid && that_present_relUid))
				return false;
			if (!this.relUid.equals(that.relUid))
				return false;
		}

		boolean this_present_amountInt = true && this.isSetAmountInt();
		boolean that_present_amountInt = true && that.isSetAmountInt();
		if (this_present_amountInt || that_present_amountInt) {
			if (!(this_present_amountInt && that_present_amountInt))
				return false;
			if (this.amountInt != that.amountInt)
				return false;
		}

		boolean this_present_feeInt = true && this.isSetFeeInt();
		boolean that_present_feeInt = true && that.isSetFeeInt();
		if (this_present_feeInt || that_present_feeInt) {
			if (!(this_present_feeInt && that_present_feeInt))
				return false;
			if (this.feeInt != that.feeInt)
				return false;
		}

		boolean this_present_taskId = true && this.isSetTaskId();
		boolean that_present_taskId = true && that.isSetTaskId();
		if (this_present_taskId || that_present_taskId) {
			if (!(this_present_taskId && that_present_taskId))
				return false;
			if (!this.taskId.equals(that.taskId))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetApplyTime()) ? 131071 : 524287);
		if (isSetApplyTime())
			hashCode = hashCode * 8191 + applyTime.hashCode();

		hashCode = hashCode * 8191 + ((isFreeze) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isIncome) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetWallet()) ? 131071 : 524287);
		if (isSetWallet())
			hashCode = hashCode * 8191 + wallet.hashCode();

		hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
		if (isSetAction())
			hashCode = hashCode * 8191 + action.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

		hashCode = hashCode * 8191 + ((isSetFee()) ? 131071 : 524287);
		if (isSetFee())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fee);

		hashCode = hashCode * 8191 + ((isSetCommentTag()) ? 131071 : 524287);
		if (isSetCommentTag())
			hashCode = hashCode * 8191 + commentTag.hashCode();

		hashCode = hashCode * 8191 + ((isSetCommentJson()) ? 131071 : 524287);
		if (isSetCommentJson())
			hashCode = hashCode * 8191 + commentJson.hashCode();

		hashCode = hashCode * 8191 + ((isSetTrigger()) ? 131071 : 524287);
		if (isSetTrigger())
			hashCode = hashCode * 8191 + trigger.hashCode();

		hashCode = hashCode * 8191 + ((isSetRelUid()) ? 131071 : 524287);
		if (isSetRelUid())
			hashCode = hashCode * 8191 + relUid.hashCode();

		hashCode = hashCode * 8191 + ((isSetAmountInt()) ? 131071 : 524287);
		if (isSetAmountInt())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amountInt);

		hashCode = hashCode * 8191 + ((isSetFeeInt()) ? 131071 : 524287);
		if (isSetFeeInt())
			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(feeInt);

		hashCode = hashCode * 8191 + ((isSetTaskId()) ? 131071 : 524287);
		if (isSetTaskId())
			hashCode = hashCode * 8191 + taskId.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgWalletFlowFuture other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetApplyTime()).compareTo(other.isSetApplyTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApplyTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTime, other.applyTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsFreeze()).compareTo(other.isSetIsFreeze());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsFreeze()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFreeze, other.isFreeze);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsIncome()).compareTo(other.isSetIsIncome());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsIncome()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isIncome, other.isIncome);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWallet()).compareTo(other.isSetWallet());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWallet()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wallet, other.wallet);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAction()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFee()).compareTo(other.isSetFee());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFee()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fee, other.fee);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCommentTag()).compareTo(other.isSetCommentTag());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCommentTag()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentTag, other.commentTag);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCommentJson()).compareTo(other.isSetCommentJson());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCommentJson()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentJson, other.commentJson);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTrigger()).compareTo(other.isSetTrigger());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTrigger()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trigger, other.trigger);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRelUid()).compareTo(other.isSetRelUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRelUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relUid, other.relUid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmountInt()).compareTo(other.isSetAmountInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmountInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountInt, other.amountInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFeeInt()).compareTo(other.isSetFeeInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFeeInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeInt, other.feeInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTaskId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgWalletFlowFuture(");
		boolean first = true;

		sb.append("applyTime:");
		if (this.applyTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.applyTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isFreeze:");
		sb.append(this.isFreeze);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isIncome:");
		sb.append(this.isIncome);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("wallet:");
		if (this.wallet == null) {
			sb.append("null");
		}
		else {
			sb.append(this.wallet);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("action:");
		if (this.action == null) {
			sb.append("null");
		}
		else {
			sb.append(this.action);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amount:");
		sb.append(this.amount);
		first = false;
		if (isSetFee()) {
			if (!first)
				sb.append(", ");
			sb.append("fee:");
			sb.append(this.fee);
			first = false;
		}
		if (isSetCommentTag()) {
			if (!first)
				sb.append(", ");
			sb.append("commentTag:");
			if (this.commentTag == null) {
				sb.append("null");
			}
			else {
				sb.append(this.commentTag);
			}
			first = false;
		}
		if (isSetCommentJson()) {
			if (!first)
				sb.append(", ");
			sb.append("commentJson:");
			if (this.commentJson == null) {
				sb.append("null");
			}
			else {
				sb.append(this.commentJson);
			}
			first = false;
		}
		if (isSetTrigger()) {
			if (!first)
				sb.append(", ");
			sb.append("trigger:");
			if (this.trigger == null) {
				sb.append("null");
			}
			else {
				sb.append(this.trigger);
			}
			first = false;
		}
		if (isSetRelUid()) {
			if (!first)
				sb.append(", ");
			sb.append("relUid:");
			if (this.relUid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.relUid);
			}
			first = false;
		}
		if (isSetAmountInt()) {
			if (!first)
				sb.append(", ");
			sb.append("amountInt:");
			sb.append(this.amountInt);
			first = false;
		}
		if (isSetFeeInt()) {
			if (!first)
				sb.append(", ");
			sb.append("feeInt:");
			sb.append(this.feeInt);
			first = false;
		}
		if (isSetTaskId()) {
			if (!first)
				sb.append(", ");
			sb.append("taskId:");
			if (this.taskId == null) {
				sb.append("null");
			}
			else {
				sb.append(this.taskId);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgWalletFlowFutureStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgWalletFlowFutureStandardScheme getScheme() {
			return new ArgWalletFlowFutureStandardScheme();
		}

	}

	private static class ArgWalletFlowFutureStandardScheme
			extends org.apache.thrift.scheme.StandardScheme<ArgWalletFlowFuture> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgWalletFlowFuture struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // APPLY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.applyTime = iprot.readString();
						struct.setApplyTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // IS_FREEZE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isFreeze = iprot.readBool();
						struct.setIsFreezeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // IS_INCOME
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isIncome = iprot.readBool();
						struct.setIsIncomeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // WALLET
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.wallet = iprot.readString();
						struct.setWalletIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // ACTION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.action = iprot.readString();
						struct.setActionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // AMOUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amount = iprot.readDouble();
						struct.setAmountIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // FEE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.fee = iprot.readDouble();
						struct.setFeeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // COMMENT_TAG
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.commentTag = iprot.readString();
						struct.setCommentTagIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // COMMENT_JSON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.commentJson = iprot.readString();
						struct.setCommentJsonIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // TRIGGER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.trigger = iprot.readString();
						struct.setTriggerIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // REL_UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.relUid = iprot.readString();
						struct.setRelUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // AMOUNT_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.amountInt = iprot.readI64();
						struct.setAmountIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // FEE_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.feeInt = iprot.readI64();
						struct.setFeeIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // TASK_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.taskId = iprot.readString();
						struct.setTaskIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgWalletFlowFuture struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.applyTime != null) {
				oprot.writeFieldBegin(APPLY_TIME_FIELD_DESC);
				oprot.writeString(struct.applyTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_FREEZE_FIELD_DESC);
			oprot.writeBool(struct.isFreeze);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_INCOME_FIELD_DESC);
			oprot.writeBool(struct.isIncome);
			oprot.writeFieldEnd();
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.wallet != null) {
				oprot.writeFieldBegin(WALLET_FIELD_DESC);
				oprot.writeString(struct.wallet);
				oprot.writeFieldEnd();
			}
			if (struct.action != null) {
				oprot.writeFieldBegin(ACTION_FIELD_DESC);
				oprot.writeString(struct.action);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
			oprot.writeDouble(struct.amount);
			oprot.writeFieldEnd();
			if (struct.isSetFee()) {
				oprot.writeFieldBegin(FEE_FIELD_DESC);
				oprot.writeDouble(struct.fee);
				oprot.writeFieldEnd();
			}
			if (struct.commentTag != null) {
				if (struct.isSetCommentTag()) {
					oprot.writeFieldBegin(COMMENT_TAG_FIELD_DESC);
					oprot.writeString(struct.commentTag);
					oprot.writeFieldEnd();
				}
			}
			if (struct.commentJson != null) {
				if (struct.isSetCommentJson()) {
					oprot.writeFieldBegin(COMMENT_JSON_FIELD_DESC);
					oprot.writeString(struct.commentJson);
					oprot.writeFieldEnd();
				}
			}
			if (struct.trigger != null) {
				if (struct.isSetTrigger()) {
					oprot.writeFieldBegin(TRIGGER_FIELD_DESC);
					oprot.writeString(struct.trigger);
					oprot.writeFieldEnd();
				}
			}
			if (struct.relUid != null) {
				if (struct.isSetRelUid()) {
					oprot.writeFieldBegin(REL_UID_FIELD_DESC);
					oprot.writeString(struct.relUid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetAmountInt()) {
				oprot.writeFieldBegin(AMOUNT_INT_FIELD_DESC);
				oprot.writeI64(struct.amountInt);
				oprot.writeFieldEnd();
			}
			if (struct.isSetFeeInt()) {
				oprot.writeFieldBegin(FEE_INT_FIELD_DESC);
				oprot.writeI64(struct.feeInt);
				oprot.writeFieldEnd();
			}
			if (struct.taskId != null) {
				if (struct.isSetTaskId()) {
					oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
					oprot.writeString(struct.taskId);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgWalletFlowFutureTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgWalletFlowFutureTupleScheme getScheme() {
			return new ArgWalletFlowFutureTupleScheme();
		}

	}

	private static class ArgWalletFlowFutureTupleScheme
			extends org.apache.thrift.scheme.TupleScheme<ArgWalletFlowFuture> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgWalletFlowFuture struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetApplyTime()) {
				optionals.set(0);
			}
			if (struct.isSetIsFreeze()) {
				optionals.set(1);
			}
			if (struct.isSetIsIncome()) {
				optionals.set(2);
			}
			if (struct.isSetUid()) {
				optionals.set(3);
			}
			if (struct.isSetWallet()) {
				optionals.set(4);
			}
			if (struct.isSetAction()) {
				optionals.set(5);
			}
			if (struct.isSetAmount()) {
				optionals.set(6);
			}
			if (struct.isSetFee()) {
				optionals.set(7);
			}
			if (struct.isSetCommentTag()) {
				optionals.set(8);
			}
			if (struct.isSetCommentJson()) {
				optionals.set(9);
			}
			if (struct.isSetTrigger()) {
				optionals.set(10);
			}
			if (struct.isSetRelUid()) {
				optionals.set(11);
			}
			if (struct.isSetAmountInt()) {
				optionals.set(12);
			}
			if (struct.isSetFeeInt()) {
				optionals.set(13);
			}
			if (struct.isSetTaskId()) {
				optionals.set(14);
			}
			oprot.writeBitSet(optionals, 15);
			if (struct.isSetApplyTime()) {
				oprot.writeString(struct.applyTime);
			}
			if (struct.isSetIsFreeze()) {
				oprot.writeBool(struct.isFreeze);
			}
			if (struct.isSetIsIncome()) {
				oprot.writeBool(struct.isIncome);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetWallet()) {
				oprot.writeString(struct.wallet);
			}
			if (struct.isSetAction()) {
				oprot.writeString(struct.action);
			}
			if (struct.isSetAmount()) {
				oprot.writeDouble(struct.amount);
			}
			if (struct.isSetFee()) {
				oprot.writeDouble(struct.fee);
			}
			if (struct.isSetCommentTag()) {
				oprot.writeString(struct.commentTag);
			}
			if (struct.isSetCommentJson()) {
				oprot.writeString(struct.commentJson);
			}
			if (struct.isSetTrigger()) {
				oprot.writeString(struct.trigger);
			}
			if (struct.isSetRelUid()) {
				oprot.writeString(struct.relUid);
			}
			if (struct.isSetAmountInt()) {
				oprot.writeI64(struct.amountInt);
			}
			if (struct.isSetFeeInt()) {
				oprot.writeI64(struct.feeInt);
			}
			if (struct.isSetTaskId()) {
				oprot.writeString(struct.taskId);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgWalletFlowFuture struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(15);
			if (incoming.get(0)) {
				struct.applyTime = iprot.readString();
				struct.setApplyTimeIsSet(true);
			}
			if (incoming.get(1)) {
				struct.isFreeze = iprot.readBool();
				struct.setIsFreezeIsSet(true);
			}
			if (incoming.get(2)) {
				struct.isIncome = iprot.readBool();
				struct.setIsIncomeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(4)) {
				struct.wallet = iprot.readString();
				struct.setWalletIsSet(true);
			}
			if (incoming.get(5)) {
				struct.action = iprot.readString();
				struct.setActionIsSet(true);
			}
			if (incoming.get(6)) {
				struct.amount = iprot.readDouble();
				struct.setAmountIsSet(true);
			}
			if (incoming.get(7)) {
				struct.fee = iprot.readDouble();
				struct.setFeeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.commentTag = iprot.readString();
				struct.setCommentTagIsSet(true);
			}
			if (incoming.get(9)) {
				struct.commentJson = iprot.readString();
				struct.setCommentJsonIsSet(true);
			}
			if (incoming.get(10)) {
				struct.trigger = iprot.readString();
				struct.setTriggerIsSet(true);
			}
			if (incoming.get(11)) {
				struct.relUid = iprot.readString();
				struct.setRelUidIsSet(true);
			}
			if (incoming.get(12)) {
				struct.amountInt = iprot.readI64();
				struct.setAmountIntIsSet(true);
			}
			if (incoming.get(13)) {
				struct.feeInt = iprot.readI64();
				struct.setFeeIntIsSet(true);
			}
			if (incoming.get(14)) {
				struct.taskId = iprot.readString();
				struct.setTaskIdIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
