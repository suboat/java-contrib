/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 钱包实例
 */
public class Wallet implements org.apache.thrift.TBase<Wallet, Wallet._Fields>, java.io.Serializable, Cloneable,
		Comparable<Wallet> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Wallet");

	private static final org.apache.thrift.protocol.TField ACCESSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"accession", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isActive", org.apache.thrift.protocol.TType.BOOL, (short) 3);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 6);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"currency", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amount", org.apache.thrift.protocol.TType.DOUBLE, (short) 9);

	private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"balance", org.apache.thrift.protocol.TType.DOUBLE, (short) 10);

	private static final org.apache.thrift.protocol.TField FREEZING_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"freezing", org.apache.thrift.protocol.TType.DOUBLE, (short) 11);

	private static final org.apache.thrift.protocol.TField OVERDRAFT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"overdraft", org.apache.thrift.protocol.TType.DOUBLE, (short) 12);

	private static final org.apache.thrift.protocol.TField CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"capacity", org.apache.thrift.protocol.TType.DOUBLE, (short) 13);

	private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comment", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField COMMENT_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"commentJson", org.apache.thrift.protocol.TType.STRING, (short) 15);

	private static final org.apache.thrift.protocol.TField ROUND_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"roundInt", org.apache.thrift.protocol.TType.I16, (short) 16);

	private static final org.apache.thrift.protocol.TField AMOUNT_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amountInt", org.apache.thrift.protocol.TType.I64, (short) 17);

	private static final org.apache.thrift.protocol.TField BALANCE_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"balanceInt", org.apache.thrift.protocol.TType.I64, (short) 18);

	private static final org.apache.thrift.protocol.TField FREEZING_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"freezingInt", org.apache.thrift.protocol.TType.I64, (short) 19);

	private static final org.apache.thrift.protocol.TField OVERDRAFT_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"overdraftInt", org.apache.thrift.protocol.TType.I64, (short) 20);

	private static final org.apache.thrift.protocol.TField CAPACITY_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"capacityInt", org.apache.thrift.protocol.TType.I64, (short) 21);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WalletStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WalletTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String accession; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public boolean isActive; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String currency; // required

	public double amount; // required

	public double balance; // required

	public double freezing; // required

	public double overdraft; // required

	public double capacity; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String comment; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String commentJson; // required

	public short roundInt; // required

	public long amountInt; // required

	public long balanceInt; // required

	public long freezingInt; // required

	public long overdraftInt; // required

	public long capacityInt; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		ACCESSION((short) 1, "accession"), UID((short) 2, "uid"), IS_ACTIVE((short) 3, "isActive"), CREATE_TIME(
				(short) 4, "createTime"), UPDATE_TIME((short) 5, "updateTime"), STATUS((short) 6,
						"status"), CATEGORY((short) 7, "category"), CURRENCY((short) 8, "currency"), AMOUNT((short) 9,
								"amount"), BALANCE((short) 10, "balance"), FREEZING((short) 11, "freezing"), OVERDRAFT(
										(short) 12, "overdraft"), CAPACITY((short) 13, "capacity"), COMMENT((short) 14,
												"comment"), COMMENT_JSON((short) 15, "commentJson"), ROUND_INT(
														(short) 16,
														"roundInt"), AMOUNT_INT((short) 17, "amountInt"), BALANCE_INT(
																(short) 18, "balanceInt"), FREEZING_INT((short) 19,
																		"freezingInt"), OVERDRAFT_INT((short) 20,
																				"overdraftInt"), CAPACITY_INT(
																						(short) 21, "capacityInt");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ACCESSION
				return ACCESSION;
			case 2: // UID
				return UID;
			case 3: // IS_ACTIVE
				return IS_ACTIVE;
			case 4: // CREATE_TIME
				return CREATE_TIME;
			case 5: // UPDATE_TIME
				return UPDATE_TIME;
			case 6: // STATUS
				return STATUS;
			case 7: // CATEGORY
				return CATEGORY;
			case 8: // CURRENCY
				return CURRENCY;
			case 9: // AMOUNT
				return AMOUNT;
			case 10: // BALANCE
				return BALANCE;
			case 11: // FREEZING
				return FREEZING;
			case 12: // OVERDRAFT
				return OVERDRAFT;
			case 13: // CAPACITY
				return CAPACITY;
			case 14: // COMMENT
				return COMMENT;
			case 15: // COMMENT_JSON
				return COMMENT_JSON;
			case 16: // ROUND_INT
				return ROUND_INT;
			case 17: // AMOUNT_INT
				return AMOUNT_INT;
			case 18: // BALANCE_INT
				return BALANCE_INT;
			case 19: // FREEZING_INT
				return FREEZING_INT;
			case 20: // OVERDRAFT_INT
				return OVERDRAFT_INT;
			case 21: // CAPACITY_INT
				return CAPACITY_INT;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISACTIVE_ISSET_ID = 0;

	private static final int __STATUS_ISSET_ID = 1;

	private static final int __AMOUNT_ISSET_ID = 2;

	private static final int __BALANCE_ISSET_ID = 3;

	private static final int __FREEZING_ISSET_ID = 4;

	private static final int __OVERDRAFT_ISSET_ID = 5;

	private static final int __CAPACITY_ISSET_ID = 6;

	private static final int __ROUNDINT_ISSET_ID = 7;

	private static final int __AMOUNTINT_ISSET_ID = 8;

	private static final int __BALANCEINT_ISSET_ID = 9;

	private static final int __FREEZINGINT_ISSET_ID = 10;

	private static final int __OVERDRAFTINT_ISSET_ID = 11;

	private static final int __CAPACITYINT_ISSET_ID = 12;

	private short __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ACCESSION,
				new org.apache.thrift.meta_data.FieldMetaData("accession",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_ACTIVE,
				new org.apache.thrift.meta_data.FieldMetaData("isActive",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CURRENCY,
				new org.apache.thrift.meta_data.FieldMetaData("currency",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AMOUNT,
				new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.BALANCE,
				new org.apache.thrift.meta_data.FieldMetaData("balance",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.FREEZING,
				new org.apache.thrift.meta_data.FieldMetaData("freezing",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.OVERDRAFT,
				new org.apache.thrift.meta_data.FieldMetaData("overdraft",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.CAPACITY,
				new org.apache.thrift.meta_data.FieldMetaData("capacity",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("comment",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMMENT_JSON,
				new org.apache.thrift.meta_data.FieldMetaData("commentJson",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ROUND_INT,
				new org.apache.thrift.meta_data.FieldMetaData("roundInt",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
		tmpMap.put(_Fields.AMOUNT_INT,
				new org.apache.thrift.meta_data.FieldMetaData("amountInt",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.BALANCE_INT,
				new org.apache.thrift.meta_data.FieldMetaData("balanceInt",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.FREEZING_INT,
				new org.apache.thrift.meta_data.FieldMetaData("freezingInt",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.OVERDRAFT_INT,
				new org.apache.thrift.meta_data.FieldMetaData("overdraftInt",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.CAPACITY_INT,
				new org.apache.thrift.meta_data.FieldMetaData("capacityInt",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Wallet.class, metaDataMap);
	}

	public Wallet() {
	}

	public Wallet(java.lang.String accession, java.lang.String uid, boolean isActive, java.lang.String createTime,
			java.lang.String updateTime, int status, java.lang.String category, java.lang.String currency,
			double amount, double balance, double freezing, double overdraft, double capacity, java.lang.String comment,
			java.lang.String commentJson, short roundInt, long amountInt, long balanceInt, long freezingInt,
			long overdraftInt, long capacityInt) {
		this();
		this.accession = accession;
		this.uid = uid;
		this.isActive = isActive;
		setIsActiveIsSet(true);
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.status = status;
		setStatusIsSet(true);
		this.category = category;
		this.currency = currency;
		this.amount = amount;
		setAmountIsSet(true);
		this.balance = balance;
		setBalanceIsSet(true);
		this.freezing = freezing;
		setFreezingIsSet(true);
		this.overdraft = overdraft;
		setOverdraftIsSet(true);
		this.capacity = capacity;
		setCapacityIsSet(true);
		this.comment = comment;
		this.commentJson = commentJson;
		this.roundInt = roundInt;
		setRoundIntIsSet(true);
		this.amountInt = amountInt;
		setAmountIntIsSet(true);
		this.balanceInt = balanceInt;
		setBalanceIntIsSet(true);
		this.freezingInt = freezingInt;
		setFreezingIntIsSet(true);
		this.overdraftInt = overdraftInt;
		setOverdraftIntIsSet(true);
		this.capacityInt = capacityInt;
		setCapacityIntIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Wallet(Wallet other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetAccession()) {
			this.accession = other.accession;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		this.isActive = other.isActive;
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.status = other.status;
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		if (other.isSetCurrency()) {
			this.currency = other.currency;
		}
		this.amount = other.amount;
		this.balance = other.balance;
		this.freezing = other.freezing;
		this.overdraft = other.overdraft;
		this.capacity = other.capacity;
		if (other.isSetComment()) {
			this.comment = other.comment;
		}
		if (other.isSetCommentJson()) {
			this.commentJson = other.commentJson;
		}
		this.roundInt = other.roundInt;
		this.amountInt = other.amountInt;
		this.balanceInt = other.balanceInt;
		this.freezingInt = other.freezingInt;
		this.overdraftInt = other.overdraftInt;
		this.capacityInt = other.capacityInt;
	}

	public Wallet deepCopy() {
		return new Wallet(this);
	}

	@Override
	public void clear() {
		this.accession = null;
		this.uid = null;
		setIsActiveIsSet(false);
		this.isActive = false;
		this.createTime = null;
		this.updateTime = null;
		setStatusIsSet(false);
		this.status = 0;
		this.category = null;
		this.currency = null;
		setAmountIsSet(false);
		this.amount = 0.0;
		setBalanceIsSet(false);
		this.balance = 0.0;
		setFreezingIsSet(false);
		this.freezing = 0.0;
		setOverdraftIsSet(false);
		this.overdraft = 0.0;
		setCapacityIsSet(false);
		this.capacity = 0.0;
		this.comment = null;
		this.commentJson = null;
		setRoundIntIsSet(false);
		this.roundInt = 0;
		setAmountIntIsSet(false);
		this.amountInt = 0;
		setBalanceIntIsSet(false);
		this.balanceInt = 0;
		setFreezingIntIsSet(false);
		this.freezingInt = 0;
		setOverdraftIntIsSet(false);
		this.overdraftInt = 0;
		setCapacityIntIsSet(false);
		this.capacityInt = 0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAccession() {
		return this.accession;
	}

	public Wallet setAccession(@org.apache.thrift.annotation.Nullable java.lang.String accession) {
		this.accession = accession;
		return this;
	}

	public void unsetAccession() {
		this.accession = null;
	}

	/**
	 * Returns true if field accession is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAccession() {
		return this.accession != null;
	}

	public void setAccessionIsSet(boolean value) {
		if (!value) {
			this.accession = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public Wallet setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	public boolean isIsActive() {
		return this.isActive;
	}

	public Wallet setIsActive(boolean isActive) {
		this.isActive = isActive;
		setIsActiveIsSet(true);
		return this;
	}

	public void unsetIsActive() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	/**
	 * Returns true if field isActive is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsActive() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISACTIVE_ISSET_ID);
	}

	public void setIsActiveIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISACTIVE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Wallet setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Wallet setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public Wallet setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public Wallet setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCurrency() {
		return this.currency;
	}

	public Wallet setCurrency(@org.apache.thrift.annotation.Nullable java.lang.String currency) {
		this.currency = currency;
		return this;
	}

	public void unsetCurrency() {
		this.currency = null;
	}

	/**
	 * Returns true if field currency is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCurrency() {
		return this.currency != null;
	}

	public void setCurrencyIsSet(boolean value) {
		if (!value) {
			this.currency = null;
		}
	}

	public double getAmount() {
		return this.amount;
	}

	public Wallet setAmount(double amount) {
		this.amount = amount;
		setAmountIsSet(true);
		return this;
	}

	public void unsetAmount() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field amount is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAmount() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	public void setAmountIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
	}

	public double getBalance() {
		return this.balance;
	}

	public Wallet setBalance(double balance) {
		this.balance = balance;
		setBalanceIsSet(true);
		return this;
	}

	public void unsetBalance() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
	}

	/**
	 * Returns true if field balance is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBalance() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
	}

	public void setBalanceIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
	}

	public double getFreezing() {
		return this.freezing;
	}

	public Wallet setFreezing(double freezing) {
		this.freezing = freezing;
		setFreezingIsSet(true);
		return this;
	}

	public void unsetFreezing() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREEZING_ISSET_ID);
	}

	/**
	 * Returns true if field freezing is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetFreezing() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREEZING_ISSET_ID);
	}

	public void setFreezingIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREEZING_ISSET_ID, value);
	}

	public double getOverdraft() {
		return this.overdraft;
	}

	public Wallet setOverdraft(double overdraft) {
		this.overdraft = overdraft;
		setOverdraftIsSet(true);
		return this;
	}

	public void unsetOverdraft() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERDRAFT_ISSET_ID);
	}

	/**
	 * Returns true if field overdraft is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetOverdraft() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERDRAFT_ISSET_ID);
	}

	public void setOverdraftIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERDRAFT_ISSET_ID, value);
	}

	public double getCapacity() {
		return this.capacity;
	}

	public Wallet setCapacity(double capacity) {
		this.capacity = capacity;
		setCapacityIsSet(true);
		return this;
	}

	public void unsetCapacity() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAPACITY_ISSET_ID);
	}

	/**
	 * Returns true if field capacity is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCapacity() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAPACITY_ISSET_ID);
	}

	public void setCapacityIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAPACITY_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getComment() {
		return this.comment;
	}

	public Wallet setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
		this.comment = comment;
		return this;
	}

	public void unsetComment() {
		this.comment = null;
	}

	/**
	 * Returns true if field comment is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComment() {
		return this.comment != null;
	}

	public void setCommentIsSet(boolean value) {
		if (!value) {
			this.comment = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCommentJson() {
		return this.commentJson;
	}

	public Wallet setCommentJson(@org.apache.thrift.annotation.Nullable java.lang.String commentJson) {
		this.commentJson = commentJson;
		return this;
	}

	public void unsetCommentJson() {
		this.commentJson = null;
	}

	/**
	 * Returns true if field commentJson is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCommentJson() {
		return this.commentJson != null;
	}

	public void setCommentJsonIsSet(boolean value) {
		if (!value) {
			this.commentJson = null;
		}
	}

	public short getRoundInt() {
		return this.roundInt;
	}

	public Wallet setRoundInt(short roundInt) {
		this.roundInt = roundInt;
		setRoundIntIsSet(true);
		return this;
	}

	public void unsetRoundInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROUNDINT_ISSET_ID);
	}

	/**
	 * Returns true if field roundInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetRoundInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROUNDINT_ISSET_ID);
	}

	public void setRoundIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROUNDINT_ISSET_ID, value);
	}

	public long getAmountInt() {
		return this.amountInt;
	}

	public Wallet setAmountInt(long amountInt) {
		this.amountInt = amountInt;
		setAmountIntIsSet(true);
		return this;
	}

	public void unsetAmountInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNTINT_ISSET_ID);
	}

	/**
	 * Returns true if field amountInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAmountInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNTINT_ISSET_ID);
	}

	public void setAmountIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNTINT_ISSET_ID, value);
	}

	public long getBalanceInt() {
		return this.balanceInt;
	}

	public Wallet setBalanceInt(long balanceInt) {
		this.balanceInt = balanceInt;
		setBalanceIntIsSet(true);
		return this;
	}

	public void unsetBalanceInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BALANCEINT_ISSET_ID);
	}

	/**
	 * Returns true if field balanceInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBalanceInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BALANCEINT_ISSET_ID);
	}

	public void setBalanceIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BALANCEINT_ISSET_ID, value);
	}

	public long getFreezingInt() {
		return this.freezingInt;
	}

	public Wallet setFreezingInt(long freezingInt) {
		this.freezingInt = freezingInt;
		setFreezingIntIsSet(true);
		return this;
	}

	public void unsetFreezingInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREEZINGINT_ISSET_ID);
	}

	/**
	 * Returns true if field freezingInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetFreezingInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREEZINGINT_ISSET_ID);
	}

	public void setFreezingIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREEZINGINT_ISSET_ID, value);
	}

	public long getOverdraftInt() {
		return this.overdraftInt;
	}

	public Wallet setOverdraftInt(long overdraftInt) {
		this.overdraftInt = overdraftInt;
		setOverdraftIntIsSet(true);
		return this;
	}

	public void unsetOverdraftInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OVERDRAFTINT_ISSET_ID);
	}

	/**
	 * Returns true if field overdraftInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetOverdraftInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OVERDRAFTINT_ISSET_ID);
	}

	public void setOverdraftIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OVERDRAFTINT_ISSET_ID, value);
	}

	public long getCapacityInt() {
		return this.capacityInt;
	}

	public Wallet setCapacityInt(long capacityInt) {
		this.capacityInt = capacityInt;
		setCapacityIntIsSet(true);
		return this;
	}

	public void unsetCapacityInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAPACITYINT_ISSET_ID);
	}

	/**
	 * Returns true if field capacityInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCapacityInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAPACITYINT_ISSET_ID);
	}

	public void setCapacityIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAPACITYINT_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case ACCESSION:
			if (value == null) {
				unsetAccession();
			}
			else {
				setAccession((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case IS_ACTIVE:
			if (value == null) {
				unsetIsActive();
			}
			else {
				setIsActive((java.lang.Boolean) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case CURRENCY:
			if (value == null) {
				unsetCurrency();
			}
			else {
				setCurrency((java.lang.String) value);
			}
			break;

		case AMOUNT:
			if (value == null) {
				unsetAmount();
			}
			else {
				setAmount((java.lang.Double) value);
			}
			break;

		case BALANCE:
			if (value == null) {
				unsetBalance();
			}
			else {
				setBalance((java.lang.Double) value);
			}
			break;

		case FREEZING:
			if (value == null) {
				unsetFreezing();
			}
			else {
				setFreezing((java.lang.Double) value);
			}
			break;

		case OVERDRAFT:
			if (value == null) {
				unsetOverdraft();
			}
			else {
				setOverdraft((java.lang.Double) value);
			}
			break;

		case CAPACITY:
			if (value == null) {
				unsetCapacity();
			}
			else {
				setCapacity((java.lang.Double) value);
			}
			break;

		case COMMENT:
			if (value == null) {
				unsetComment();
			}
			else {
				setComment((java.lang.String) value);
			}
			break;

		case COMMENT_JSON:
			if (value == null) {
				unsetCommentJson();
			}
			else {
				setCommentJson((java.lang.String) value);
			}
			break;

		case ROUND_INT:
			if (value == null) {
				unsetRoundInt();
			}
			else {
				setRoundInt((java.lang.Short) value);
			}
			break;

		case AMOUNT_INT:
			if (value == null) {
				unsetAmountInt();
			}
			else {
				setAmountInt((java.lang.Long) value);
			}
			break;

		case BALANCE_INT:
			if (value == null) {
				unsetBalanceInt();
			}
			else {
				setBalanceInt((java.lang.Long) value);
			}
			break;

		case FREEZING_INT:
			if (value == null) {
				unsetFreezingInt();
			}
			else {
				setFreezingInt((java.lang.Long) value);
			}
			break;

		case OVERDRAFT_INT:
			if (value == null) {
				unsetOverdraftInt();
			}
			else {
				setOverdraftInt((java.lang.Long) value);
			}
			break;

		case CAPACITY_INT:
			if (value == null) {
				unsetCapacityInt();
			}
			else {
				setCapacityInt((java.lang.Long) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ACCESSION:
			return getAccession();

		case UID:
			return getUid();

		case IS_ACTIVE:
			return isIsActive();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case STATUS:
			return getStatus();

		case CATEGORY:
			return getCategory();

		case CURRENCY:
			return getCurrency();

		case AMOUNT:
			return getAmount();

		case BALANCE:
			return getBalance();

		case FREEZING:
			return getFreezing();

		case OVERDRAFT:
			return getOverdraft();

		case CAPACITY:
			return getCapacity();

		case COMMENT:
			return getComment();

		case COMMENT_JSON:
			return getCommentJson();

		case ROUND_INT:
			return getRoundInt();

		case AMOUNT_INT:
			return getAmountInt();

		case BALANCE_INT:
			return getBalanceInt();

		case FREEZING_INT:
			return getFreezingInt();

		case OVERDRAFT_INT:
			return getOverdraftInt();

		case CAPACITY_INT:
			return getCapacityInt();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ACCESSION:
			return isSetAccession();
		case UID:
			return isSetUid();
		case IS_ACTIVE:
			return isSetIsActive();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case STATUS:
			return isSetStatus();
		case CATEGORY:
			return isSetCategory();
		case CURRENCY:
			return isSetCurrency();
		case AMOUNT:
			return isSetAmount();
		case BALANCE:
			return isSetBalance();
		case FREEZING:
			return isSetFreezing();
		case OVERDRAFT:
			return isSetOverdraft();
		case CAPACITY:
			return isSetCapacity();
		case COMMENT:
			return isSetComment();
		case COMMENT_JSON:
			return isSetCommentJson();
		case ROUND_INT:
			return isSetRoundInt();
		case AMOUNT_INT:
			return isSetAmountInt();
		case BALANCE_INT:
			return isSetBalanceInt();
		case FREEZING_INT:
			return isSetFreezingInt();
		case OVERDRAFT_INT:
			return isSetOverdraftInt();
		case CAPACITY_INT:
			return isSetCapacityInt();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Wallet)
			return this.equals((Wallet) that);
		return false;
	}

	public boolean equals(Wallet that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_accession = true && this.isSetAccession();
		boolean that_present_accession = true && that.isSetAccession();
		if (this_present_accession || that_present_accession) {
			if (!(this_present_accession && that_present_accession))
				return false;
			if (!this.accession.equals(that.accession))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_isActive = true;
		boolean that_present_isActive = true;
		if (this_present_isActive || that_present_isActive) {
			if (!(this_present_isActive && that_present_isActive))
				return false;
			if (this.isActive != that.isActive)
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_currency = true && this.isSetCurrency();
		boolean that_present_currency = true && that.isSetCurrency();
		if (this_present_currency || that_present_currency) {
			if (!(this_present_currency && that_present_currency))
				return false;
			if (!this.currency.equals(that.currency))
				return false;
		}

		boolean this_present_amount = true;
		boolean that_present_amount = true;
		if (this_present_amount || that_present_amount) {
			if (!(this_present_amount && that_present_amount))
				return false;
			if (this.amount != that.amount)
				return false;
		}

		boolean this_present_balance = true;
		boolean that_present_balance = true;
		if (this_present_balance || that_present_balance) {
			if (!(this_present_balance && that_present_balance))
				return false;
			if (this.balance != that.balance)
				return false;
		}

		boolean this_present_freezing = true;
		boolean that_present_freezing = true;
		if (this_present_freezing || that_present_freezing) {
			if (!(this_present_freezing && that_present_freezing))
				return false;
			if (this.freezing != that.freezing)
				return false;
		}

		boolean this_present_overdraft = true;
		boolean that_present_overdraft = true;
		if (this_present_overdraft || that_present_overdraft) {
			if (!(this_present_overdraft && that_present_overdraft))
				return false;
			if (this.overdraft != that.overdraft)
				return false;
		}

		boolean this_present_capacity = true;
		boolean that_present_capacity = true;
		if (this_present_capacity || that_present_capacity) {
			if (!(this_present_capacity && that_present_capacity))
				return false;
			if (this.capacity != that.capacity)
				return false;
		}

		boolean this_present_comment = true && this.isSetComment();
		boolean that_present_comment = true && that.isSetComment();
		if (this_present_comment || that_present_comment) {
			if (!(this_present_comment && that_present_comment))
				return false;
			if (!this.comment.equals(that.comment))
				return false;
		}

		boolean this_present_commentJson = true && this.isSetCommentJson();
		boolean that_present_commentJson = true && that.isSetCommentJson();
		if (this_present_commentJson || that_present_commentJson) {
			if (!(this_present_commentJson && that_present_commentJson))
				return false;
			if (!this.commentJson.equals(that.commentJson))
				return false;
		}

		boolean this_present_roundInt = true;
		boolean that_present_roundInt = true;
		if (this_present_roundInt || that_present_roundInt) {
			if (!(this_present_roundInt && that_present_roundInt))
				return false;
			if (this.roundInt != that.roundInt)
				return false;
		}

		boolean this_present_amountInt = true;
		boolean that_present_amountInt = true;
		if (this_present_amountInt || that_present_amountInt) {
			if (!(this_present_amountInt && that_present_amountInt))
				return false;
			if (this.amountInt != that.amountInt)
				return false;
		}

		boolean this_present_balanceInt = true;
		boolean that_present_balanceInt = true;
		if (this_present_balanceInt || that_present_balanceInt) {
			if (!(this_present_balanceInt && that_present_balanceInt))
				return false;
			if (this.balanceInt != that.balanceInt)
				return false;
		}

		boolean this_present_freezingInt = true;
		boolean that_present_freezingInt = true;
		if (this_present_freezingInt || that_present_freezingInt) {
			if (!(this_present_freezingInt && that_present_freezingInt))
				return false;
			if (this.freezingInt != that.freezingInt)
				return false;
		}

		boolean this_present_overdraftInt = true;
		boolean that_present_overdraftInt = true;
		if (this_present_overdraftInt || that_present_overdraftInt) {
			if (!(this_present_overdraftInt && that_present_overdraftInt))
				return false;
			if (this.overdraftInt != that.overdraftInt)
				return false;
		}

		boolean this_present_capacityInt = true;
		boolean that_present_capacityInt = true;
		if (this_present_capacityInt || that_present_capacityInt) {
			if (!(this_present_capacityInt && that_present_capacityInt))
				return false;
			if (this.capacityInt != that.capacityInt)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetAccession()) ? 131071 : 524287);
		if (isSetAccession())
			hashCode = hashCode * 8191 + accession.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isActive) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + ((isSetCurrency()) ? 131071 : 524287);
		if (isSetCurrency())
			hashCode = hashCode * 8191 + currency.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(balance);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(freezing);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(overdraft);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(capacity);

		hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
		if (isSetComment())
			hashCode = hashCode * 8191 + comment.hashCode();

		hashCode = hashCode * 8191 + ((isSetCommentJson()) ? 131071 : 524287);
		if (isSetCommentJson())
			hashCode = hashCode * 8191 + commentJson.hashCode();

		hashCode = hashCode * 8191 + roundInt;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amountInt);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(balanceInt);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(freezingInt);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(overdraftInt);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(capacityInt);

		return hashCode;
	}

	@Override
	public int compareTo(Wallet other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetAccession()).compareTo(other.isSetAccession());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAccession()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accession, other.accession);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsActive()).compareTo(other.isSetIsActive());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsActive()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCurrency()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBalance()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFreezing()).compareTo(other.isSetFreezing());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFreezing()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezing, other.freezing);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetOverdraft()).compareTo(other.isSetOverdraft());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOverdraft()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdraft, other.overdraft);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCapacity()).compareTo(other.isSetCapacity());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCapacity()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacity, other.capacity);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCommentJson()).compareTo(other.isSetCommentJson());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCommentJson()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentJson, other.commentJson);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRoundInt()).compareTo(other.isSetRoundInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRoundInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roundInt, other.roundInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmountInt()).compareTo(other.isSetAmountInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmountInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amountInt, other.amountInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBalanceInt()).compareTo(other.isSetBalanceInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBalanceInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balanceInt, other.balanceInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFreezingInt()).compareTo(other.isSetFreezingInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFreezingInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezingInt, other.freezingInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetOverdraftInt()).compareTo(other.isSetOverdraftInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOverdraftInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdraftInt, other.overdraftInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCapacityInt()).compareTo(other.isSetCapacityInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCapacityInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capacityInt, other.capacityInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Wallet(");
		boolean first = true;

		sb.append("accession:");
		if (this.accession == null) {
			sb.append("null");
		}
		else {
			sb.append(this.accession);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isActive:");
		sb.append(this.isActive);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("currency:");
		if (this.currency == null) {
			sb.append("null");
		}
		else {
			sb.append(this.currency);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amount:");
		sb.append(this.amount);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("balance:");
		sb.append(this.balance);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("freezing:");
		sb.append(this.freezing);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("overdraft:");
		sb.append(this.overdraft);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("capacity:");
		sb.append(this.capacity);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("comment:");
		if (this.comment == null) {
			sb.append("null");
		}
		else {
			sb.append(this.comment);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("commentJson:");
		if (this.commentJson == null) {
			sb.append("null");
		}
		else {
			sb.append(this.commentJson);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("roundInt:");
		sb.append(this.roundInt);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amountInt:");
		sb.append(this.amountInt);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("balanceInt:");
		sb.append(this.balanceInt);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("freezingInt:");
		sb.append(this.freezingInt);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("overdraftInt:");
		sb.append(this.overdraftInt);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("capacityInt:");
		sb.append(this.capacityInt);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class WalletStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletStandardScheme getScheme() {
			return new WalletStandardScheme();
		}

	}

	private static class WalletStandardScheme extends org.apache.thrift.scheme.StandardScheme<Wallet> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Wallet struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ACCESSION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.accession = iprot.readString();
						struct.setAccessionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // IS_ACTIVE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isActive = iprot.readBool();
						struct.setIsActiveIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // CURRENCY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.currency = iprot.readString();
						struct.setCurrencyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // AMOUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amount = iprot.readDouble();
						struct.setAmountIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // BALANCE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.balance = iprot.readDouble();
						struct.setBalanceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // FREEZING
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.freezing = iprot.readDouble();
						struct.setFreezingIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // OVERDRAFT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.overdraft = iprot.readDouble();
						struct.setOverdraftIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // CAPACITY
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.capacity = iprot.readDouble();
						struct.setCapacityIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.comment = iprot.readString();
						struct.setCommentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // COMMENT_JSON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.commentJson = iprot.readString();
						struct.setCommentJsonIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // ROUND_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
						struct.roundInt = iprot.readI16();
						struct.setRoundIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // AMOUNT_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.amountInt = iprot.readI64();
						struct.setAmountIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // BALANCE_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.balanceInt = iprot.readI64();
						struct.setBalanceIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // FREEZING_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.freezingInt = iprot.readI64();
						struct.setFreezingIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // OVERDRAFT_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.overdraftInt = iprot.readI64();
						struct.setOverdraftIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // CAPACITY_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.capacityInt = iprot.readI64();
						struct.setCapacityIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Wallet struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.accession != null) {
				oprot.writeFieldBegin(ACCESSION_FIELD_DESC);
				oprot.writeString(struct.accession);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
			oprot.writeBool(struct.isActive);
			oprot.writeFieldEnd();
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			if (struct.currency != null) {
				oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
				oprot.writeString(struct.currency);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
			oprot.writeDouble(struct.amount);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(BALANCE_FIELD_DESC);
			oprot.writeDouble(struct.balance);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(FREEZING_FIELD_DESC);
			oprot.writeDouble(struct.freezing);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(OVERDRAFT_FIELD_DESC);
			oprot.writeDouble(struct.overdraft);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CAPACITY_FIELD_DESC);
			oprot.writeDouble(struct.capacity);
			oprot.writeFieldEnd();
			if (struct.comment != null) {
				oprot.writeFieldBegin(COMMENT_FIELD_DESC);
				oprot.writeString(struct.comment);
				oprot.writeFieldEnd();
			}
			if (struct.commentJson != null) {
				oprot.writeFieldBegin(COMMENT_JSON_FIELD_DESC);
				oprot.writeString(struct.commentJson);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(ROUND_INT_FIELD_DESC);
			oprot.writeI16(struct.roundInt);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(AMOUNT_INT_FIELD_DESC);
			oprot.writeI64(struct.amountInt);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(BALANCE_INT_FIELD_DESC);
			oprot.writeI64(struct.balanceInt);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(FREEZING_INT_FIELD_DESC);
			oprot.writeI64(struct.freezingInt);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(OVERDRAFT_INT_FIELD_DESC);
			oprot.writeI64(struct.overdraftInt);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(CAPACITY_INT_FIELD_DESC);
			oprot.writeI64(struct.capacityInt);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class WalletTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletTupleScheme getScheme() {
			return new WalletTupleScheme();
		}

	}

	private static class WalletTupleScheme extends org.apache.thrift.scheme.TupleScheme<Wallet> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Wallet struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetAccession()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetIsActive()) {
				optionals.set(2);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(3);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(4);
			}
			if (struct.isSetStatus()) {
				optionals.set(5);
			}
			if (struct.isSetCategory()) {
				optionals.set(6);
			}
			if (struct.isSetCurrency()) {
				optionals.set(7);
			}
			if (struct.isSetAmount()) {
				optionals.set(8);
			}
			if (struct.isSetBalance()) {
				optionals.set(9);
			}
			if (struct.isSetFreezing()) {
				optionals.set(10);
			}
			if (struct.isSetOverdraft()) {
				optionals.set(11);
			}
			if (struct.isSetCapacity()) {
				optionals.set(12);
			}
			if (struct.isSetComment()) {
				optionals.set(13);
			}
			if (struct.isSetCommentJson()) {
				optionals.set(14);
			}
			if (struct.isSetRoundInt()) {
				optionals.set(15);
			}
			if (struct.isSetAmountInt()) {
				optionals.set(16);
			}
			if (struct.isSetBalanceInt()) {
				optionals.set(17);
			}
			if (struct.isSetFreezingInt()) {
				optionals.set(18);
			}
			if (struct.isSetOverdraftInt()) {
				optionals.set(19);
			}
			if (struct.isSetCapacityInt()) {
				optionals.set(20);
			}
			oprot.writeBitSet(optionals, 21);
			if (struct.isSetAccession()) {
				oprot.writeString(struct.accession);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetIsActive()) {
				oprot.writeBool(struct.isActive);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetCurrency()) {
				oprot.writeString(struct.currency);
			}
			if (struct.isSetAmount()) {
				oprot.writeDouble(struct.amount);
			}
			if (struct.isSetBalance()) {
				oprot.writeDouble(struct.balance);
			}
			if (struct.isSetFreezing()) {
				oprot.writeDouble(struct.freezing);
			}
			if (struct.isSetOverdraft()) {
				oprot.writeDouble(struct.overdraft);
			}
			if (struct.isSetCapacity()) {
				oprot.writeDouble(struct.capacity);
			}
			if (struct.isSetComment()) {
				oprot.writeString(struct.comment);
			}
			if (struct.isSetCommentJson()) {
				oprot.writeString(struct.commentJson);
			}
			if (struct.isSetRoundInt()) {
				oprot.writeI16(struct.roundInt);
			}
			if (struct.isSetAmountInt()) {
				oprot.writeI64(struct.amountInt);
			}
			if (struct.isSetBalanceInt()) {
				oprot.writeI64(struct.balanceInt);
			}
			if (struct.isSetFreezingInt()) {
				oprot.writeI64(struct.freezingInt);
			}
			if (struct.isSetOverdraftInt()) {
				oprot.writeI64(struct.overdraftInt);
			}
			if (struct.isSetCapacityInt()) {
				oprot.writeI64(struct.capacityInt);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Wallet struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(21);
			if (incoming.get(0)) {
				struct.accession = iprot.readString();
				struct.setAccessionIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.isActive = iprot.readBool();
				struct.setIsActiveIsSet(true);
			}
			if (incoming.get(3)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(6)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(7)) {
				struct.currency = iprot.readString();
				struct.setCurrencyIsSet(true);
			}
			if (incoming.get(8)) {
				struct.amount = iprot.readDouble();
				struct.setAmountIsSet(true);
			}
			if (incoming.get(9)) {
				struct.balance = iprot.readDouble();
				struct.setBalanceIsSet(true);
			}
			if (incoming.get(10)) {
				struct.freezing = iprot.readDouble();
				struct.setFreezingIsSet(true);
			}
			if (incoming.get(11)) {
				struct.overdraft = iprot.readDouble();
				struct.setOverdraftIsSet(true);
			}
			if (incoming.get(12)) {
				struct.capacity = iprot.readDouble();
				struct.setCapacityIsSet(true);
			}
			if (incoming.get(13)) {
				struct.comment = iprot.readString();
				struct.setCommentIsSet(true);
			}
			if (incoming.get(14)) {
				struct.commentJson = iprot.readString();
				struct.setCommentJsonIsSet(true);
			}
			if (incoming.get(15)) {
				struct.roundInt = iprot.readI16();
				struct.setRoundIntIsSet(true);
			}
			if (incoming.get(16)) {
				struct.amountInt = iprot.readI64();
				struct.setAmountIntIsSet(true);
			}
			if (incoming.get(17)) {
				struct.balanceInt = iprot.readI64();
				struct.setBalanceIntIsSet(true);
			}
			if (incoming.get(18)) {
				struct.freezingInt = iprot.readI64();
				struct.setFreezingIntIsSet(true);
			}
			if (incoming.get(19)) {
				struct.overdraftInt = iprot.readI64();
				struct.setOverdraftIntIsSet(true);
			}
			if (incoming.get(20)) {
				struct.capacityInt = iprot.readI64();
				struct.setCapacityIntIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
