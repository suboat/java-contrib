/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class ArgRefGoods implements org.apache.thrift.TBase<ArgRefGoods, ArgRefGoods._Fields>, java.io.Serializable,
		Cloneable, Comparable<ArgRefGoods> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgRefGoods");

	private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField SPU_FIELD_DESC = new org.apache.thrift.protocol.TField("spu",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgRefGoodsStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgRefGoodsTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String mid; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String spu; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		MID((short) 1, "mid"), SID((short) 2, "sid"), SPU((short) 3, "spu");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // MID
				return MID;
			case 2: // SID
				return SID;
			case 3: // SPU
				return SPU;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final _Fields optionals[] = { _Fields.MID, _Fields.SID, _Fields.SPU };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.MID,
				new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SPU,
				new org.apache.thrift.meta_data.FieldMetaData("spu", org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgRefGoods.class, metaDataMap);
	}

	public ArgRefGoods() {
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgRefGoods(ArgRefGoods other) {
		if (other.isSetMid()) {
			this.mid = other.mid;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetSpu()) {
			this.spu = other.spu;
		}
	}

	public ArgRefGoods deepCopy() {
		return new ArgRefGoods(this);
	}

	@Override
	public void clear() {
		this.mid = null;
		this.sid = null;
		this.spu = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMid() {
		return this.mid;
	}

	public ArgRefGoods setMid(@org.apache.thrift.annotation.Nullable java.lang.String mid) {
		this.mid = mid;
		return this;
	}

	public void unsetMid() {
		this.mid = null;
	}

	/**
	 * Returns true if field mid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetMid() {
		return this.mid != null;
	}

	public void setMidIsSet(boolean value) {
		if (!value) {
			this.mid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public ArgRefGoods setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSpu() {
		return this.spu;
	}

	public ArgRefGoods setSpu(@org.apache.thrift.annotation.Nullable java.lang.String spu) {
		this.spu = spu;
		return this;
	}

	public void unsetSpu() {
		this.spu = null;
	}

	/**
	 * Returns true if field spu is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSpu() {
		return this.spu != null;
	}

	public void setSpuIsSet(boolean value) {
		if (!value) {
			this.spu = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case MID:
			if (value == null) {
				unsetMid();
			}
			else {
				setMid((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case SPU:
			if (value == null) {
				unsetSpu();
			}
			else {
				setSpu((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case MID:
			return getMid();

		case SID:
			return getSid();

		case SPU:
			return getSpu();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case MID:
			return isSetMid();
		case SID:
			return isSetSid();
		case SPU:
			return isSetSpu();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgRefGoods)
			return this.equals((ArgRefGoods) that);
		return false;
	}

	public boolean equals(ArgRefGoods that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_mid = true && this.isSetMid();
		boolean that_present_mid = true && that.isSetMid();
		if (this_present_mid || that_present_mid) {
			if (!(this_present_mid && that_present_mid))
				return false;
			if (!this.mid.equals(that.mid))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_spu = true && this.isSetSpu();
		boolean that_present_spu = true && that.isSetSpu();
		if (this_present_spu || that_present_spu) {
			if (!(this_present_spu && that_present_spu))
				return false;
			if (!this.spu.equals(that.spu))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
		if (isSetMid())
			hashCode = hashCode * 8191 + mid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSpu()) ? 131071 : 524287);
		if (isSetSpu())
			hashCode = hashCode * 8191 + spu.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgRefGoods other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSpu()).compareTo(other.isSetSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spu, other.spu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgRefGoods(");
		boolean first = true;

		if (isSetMid()) {
			sb.append("mid:");
			if (this.mid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.mid);
			}
			first = false;
		}
		if (isSetSid()) {
			if (!first)
				sb.append(", ");
			sb.append("sid:");
			if (this.sid == null) {
				sb.append("null");
			}
			else {
				sb.append(this.sid);
			}
			first = false;
		}
		if (isSetSpu()) {
			if (!first)
				sb.append(", ");
			sb.append("spu:");
			if (this.spu == null) {
				sb.append("null");
			}
			else {
				sb.append(this.spu);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgRefGoodsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgRefGoodsStandardScheme getScheme() {
			return new ArgRefGoodsStandardScheme();
		}

	}

	private static class ArgRefGoodsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgRefGoods> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgRefGoods struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // MID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mid = iprot.readString();
						struct.setMidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.spu = iprot.readString();
						struct.setSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgRefGoods struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.mid != null) {
				if (struct.isSetMid()) {
					oprot.writeFieldBegin(MID_FIELD_DESC);
					oprot.writeString(struct.mid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.sid != null) {
				if (struct.isSetSid()) {
					oprot.writeFieldBegin(SID_FIELD_DESC);
					oprot.writeString(struct.sid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.spu != null) {
				if (struct.isSetSpu()) {
					oprot.writeFieldBegin(SPU_FIELD_DESC);
					oprot.writeString(struct.spu);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgRefGoodsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgRefGoodsTupleScheme getScheme() {
			return new ArgRefGoodsTupleScheme();
		}

	}

	private static class ArgRefGoodsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgRefGoods> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgRefGoods struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetMid()) {
				optionals.set(0);
			}
			if (struct.isSetSid()) {
				optionals.set(1);
			}
			if (struct.isSetSpu()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetMid()) {
				oprot.writeString(struct.mid);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetSpu()) {
				oprot.writeString(struct.spu);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgRefGoods struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.mid = iprot.readString();
				struct.setMidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.spu = iprot.readString();
				struct.setSpuIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
