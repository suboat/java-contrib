/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Good
		implements org.apache.thrift.TBase<Good, Good._Fields>, java.io.Serializable, Cloneable, Comparable<Good> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Good");

	private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField SPU_FIELD_DESC = new org.apache.thrift.protocol.TField("spu",
			org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"label", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField KIND_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"kind", org.apache.thrift.protocol.TType.STRING, (short) 26);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"applyTime", org.apache.thrift.protocol.TType.STRING, (short) 27);

	private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"expireTime", org.apache.thrift.protocol.TType.STRING, (short) 28);

	private static final org.apache.thrift.protocol.TField IS_SAMPLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isSample", org.apache.thrift.protocol.TType.BOOL, (short) 9);

	private static final org.apache.thrift.protocol.TField IS_ATTACH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isAttach", org.apache.thrift.protocol.TType.BOOL, (short) 10);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 11);

	private static final org.apache.thrift.protocol.TField NAME_SKU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"nameSku", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField ICON_SKU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"iconSku", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField DESC_SKU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"descSku", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"weight", org.apache.thrift.protocol.TType.DOUBLE, (short) 15);

	private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"volume", org.apache.thrift.protocol.TType.DOUBLE, (short) 16);

	private static final org.apache.thrift.protocol.TField LABELS_TXT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"labelsTxt", org.apache.thrift.protocol.TType.LIST, (short) 24);

	private static final org.apache.thrift.protocol.TField LABELS_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"labelsTag", org.apache.thrift.protocol.TType.LIST, (short) 25);

	private static final org.apache.thrift.protocol.TField STOCK_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"stock", org.apache.thrift.protocol.TType.I32, (short) 17);

	private static final org.apache.thrift.protocol.TField STOCK_INIT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"stockInit", org.apache.thrift.protocol.TType.I32, (short) 29);

	private static final org.apache.thrift.protocol.TField STOCK_OVER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"stockOver", org.apache.thrift.protocol.TType.I32, (short) 30);

	private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"price", org.apache.thrift.protocol.TType.DOUBLE, (short) 18);

	private static final org.apache.thrift.protocol.TField PRICE_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceOld", org.apache.thrift.protocol.TType.DOUBLE, (short) 19);

	private static final org.apache.thrift.protocol.TField PRICE_COST_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceCost", org.apache.thrift.protocol.TType.DOUBLE, (short) 20);

	private static final org.apache.thrift.protocol.TField PRICE_ADVICE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceAdviceFrom", org.apache.thrift.protocol.TType.DOUBLE, (short) 22);

	private static final org.apache.thrift.protocol.TField PRICE_ADVICE_TO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceAdviceTo", org.apache.thrift.protocol.TType.DOUBLE, (short) 23);

	private static final org.apache.thrift.protocol.TField PAY_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMethod", org.apache.thrift.protocol.TType.LIST, (short) 21);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GoodStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GoodTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String gid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String mid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String spu; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String label; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String kind; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String applyTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String expireTime; // required

	public boolean isSample; // required

	public boolean isAttach; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String nameSku; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String iconSku; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String descSku; // required

	public double weight; // required

	public double volume; // required

	public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> labelsTxt; // required

	public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> labelsTag; // required

	public int stock; // required

	public int stockInit; // required

	public int stockOver; // required

	public double price; // required

	public double priceOld; // required

	public double priceCost; // required

	public double priceAdviceFrom; // required

	public double priceAdviceTo; // required

	public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String, java.lang.Double>> payMethod; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		GID((short) 1, "gid"), SID((short) 2, "sid"), MID((short) 3, "mid"), UID((short) 4, "uid"), SPU((short) 5,
				"spu"), LABEL((short) 6, "label"), KIND((short) 26, "kind"), CREATE_TIME((short) 7,
						"createTime"), UPDATE_TIME((short) 8, "updateTime"), APPLY_TIME((short) 27,
								"applyTime"), EXPIRE_TIME((short) 28, "expireTime"), IS_SAMPLE((short) 9,
										"isSample"), IS_ATTACH((short) 10, "isAttach"), STATUS((short) 11,
												"status"), NAME_SKU((short) 12, "nameSku"), ICON_SKU((short) 13,
														"iconSku"), DESC_SKU((short) 14, "descSku"), WEIGHT((short) 15,
																"weight"), VOLUME((short) 16, "volume"), LABELS_TXT(
																		(short) 24, "labelsTxt"), LABELS_TAG((short) 25,
																				"labelsTag"), STOCK((short) 17,
																						"stock"), STOCK_INIT((short) 29,
																								"stockInit"), STOCK_OVER(
																										(short) 30,
																										"stockOver"), PRICE(
																												(short) 18,
																												"price"), PRICE_OLD(
																														(short) 19,
																														"priceOld"), PRICE_COST(
																																(short) 20,
																																"priceCost"), PRICE_ADVICE_FROM(
																																		(short) 22,
																																		"priceAdviceFrom"), PRICE_ADVICE_TO(
																																				(short) 23,
																																				"priceAdviceTo"), PAY_METHOD(
																																						(short) 21,
																																						"payMethod");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // GID
				return GID;
			case 2: // SID
				return SID;
			case 3: // MID
				return MID;
			case 4: // UID
				return UID;
			case 5: // SPU
				return SPU;
			case 6: // LABEL
				return LABEL;
			case 26: // KIND
				return KIND;
			case 7: // CREATE_TIME
				return CREATE_TIME;
			case 8: // UPDATE_TIME
				return UPDATE_TIME;
			case 27: // APPLY_TIME
				return APPLY_TIME;
			case 28: // EXPIRE_TIME
				return EXPIRE_TIME;
			case 9: // IS_SAMPLE
				return IS_SAMPLE;
			case 10: // IS_ATTACH
				return IS_ATTACH;
			case 11: // STATUS
				return STATUS;
			case 12: // NAME_SKU
				return NAME_SKU;
			case 13: // ICON_SKU
				return ICON_SKU;
			case 14: // DESC_SKU
				return DESC_SKU;
			case 15: // WEIGHT
				return WEIGHT;
			case 16: // VOLUME
				return VOLUME;
			case 24: // LABELS_TXT
				return LABELS_TXT;
			case 25: // LABELS_TAG
				return LABELS_TAG;
			case 17: // STOCK
				return STOCK;
			case 29: // STOCK_INIT
				return STOCK_INIT;
			case 30: // STOCK_OVER
				return STOCK_OVER;
			case 18: // PRICE
				return PRICE;
			case 19: // PRICE_OLD
				return PRICE_OLD;
			case 20: // PRICE_COST
				return PRICE_COST;
			case 22: // PRICE_ADVICE_FROM
				return PRICE_ADVICE_FROM;
			case 23: // PRICE_ADVICE_TO
				return PRICE_ADVICE_TO;
			case 21: // PAY_METHOD
				return PAY_METHOD;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISSAMPLE_ISSET_ID = 0;

	private static final int __ISATTACH_ISSET_ID = 1;

	private static final int __STATUS_ISSET_ID = 2;

	private static final int __WEIGHT_ISSET_ID = 3;

	private static final int __VOLUME_ISSET_ID = 4;

	private static final int __STOCK_ISSET_ID = 5;

	private static final int __STOCKINIT_ISSET_ID = 6;

	private static final int __STOCKOVER_ISSET_ID = 7;

	private static final int __PRICE_ISSET_ID = 8;

	private static final int __PRICEOLD_ISSET_ID = 9;

	private static final int __PRICECOST_ISSET_ID = 10;

	private static final int __PRICEADVICEFROM_ISSET_ID = 11;

	private static final int __PRICEADVICETO_ISSET_ID = 12;

	private short __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.GID,
				new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MID,
				new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SPU,
				new org.apache.thrift.meta_data.FieldMetaData("spu", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LABEL,
				new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.KIND,
				new org.apache.thrift.meta_data.FieldMetaData("kind", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("applyTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_SAMPLE,
				new org.apache.thrift.meta_data.FieldMetaData("isSample",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_ATTACH,
				new org.apache.thrift.meta_data.FieldMetaData("isAttach",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NAME_SKU,
				new org.apache.thrift.meta_data.FieldMetaData("nameSku",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ICON_SKU,
				new org.apache.thrift.meta_data.FieldMetaData("iconSku",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESC_SKU,
				new org.apache.thrift.meta_data.FieldMetaData("descSku",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WEIGHT,
				new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.VOLUME,
				new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.LABELS_TXT, new org.apache.thrift.meta_data.FieldMetaData("labelsTxt",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		tmpMap.put(_Fields.LABELS_TAG, new org.apache.thrift.meta_data.FieldMetaData("labelsTag",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
		tmpMap.put(_Fields.STOCK,
				new org.apache.thrift.meta_data.FieldMetaData("stock", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STOCK_INIT,
				new org.apache.thrift.meta_data.FieldMetaData("stockInit",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STOCK_OVER,
				new org.apache.thrift.meta_data.FieldMetaData("stockOver",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_OLD,
				new org.apache.thrift.meta_data.FieldMetaData("priceOld",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_COST,
				new org.apache.thrift.meta_data.FieldMetaData("priceCost",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_ADVICE_FROM,
				new org.apache.thrift.meta_data.FieldMetaData("priceAdviceFrom",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_ADVICE_TO,
				new org.apache.thrift.meta_data.FieldMetaData("priceAdviceTo",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PAY_METHOD,
				new org.apache.thrift.meta_data.FieldMetaData("payMethod",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
										new org.apache.thrift.meta_data.FieldValueMetaData(
												org.apache.thrift.protocol.TType.STRING),
										new org.apache.thrift.meta_data.FieldValueMetaData(
												org.apache.thrift.protocol.TType.DOUBLE)))));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Good.class, metaDataMap);
	}

	public Good() {
	}

	public Good(java.lang.String gid, java.lang.String sid, java.lang.String mid, java.lang.String uid,
			java.lang.String spu, java.lang.String label, java.lang.String kind, java.lang.String createTime,
			java.lang.String updateTime, java.lang.String applyTime, java.lang.String expireTime, boolean isSample,
			boolean isAttach, int status, java.lang.String nameSku, java.lang.String iconSku, java.lang.String descSku,
			double weight, double volume, java.util.List<java.lang.String> labelsTxt,
			java.util.List<java.lang.String> labelsTag, int stock, int stockInit, int stockOver, double price,
			double priceOld, double priceCost, double priceAdviceFrom, double priceAdviceTo,
			java.util.List<java.util.Map<java.lang.String, java.lang.Double>> payMethod) {
		this();
		this.gid = gid;
		this.sid = sid;
		this.mid = mid;
		this.uid = uid;
		this.spu = spu;
		this.label = label;
		this.kind = kind;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.applyTime = applyTime;
		this.expireTime = expireTime;
		this.isSample = isSample;
		setIsSampleIsSet(true);
		this.isAttach = isAttach;
		setIsAttachIsSet(true);
		this.status = status;
		setStatusIsSet(true);
		this.nameSku = nameSku;
		this.iconSku = iconSku;
		this.descSku = descSku;
		this.weight = weight;
		setWeightIsSet(true);
		this.volume = volume;
		setVolumeIsSet(true);
		this.labelsTxt = labelsTxt;
		this.labelsTag = labelsTag;
		this.stock = stock;
		setStockIsSet(true);
		this.stockInit = stockInit;
		setStockInitIsSet(true);
		this.stockOver = stockOver;
		setStockOverIsSet(true);
		this.price = price;
		setPriceIsSet(true);
		this.priceOld = priceOld;
		setPriceOldIsSet(true);
		this.priceCost = priceCost;
		setPriceCostIsSet(true);
		this.priceAdviceFrom = priceAdviceFrom;
		setPriceAdviceFromIsSet(true);
		this.priceAdviceTo = priceAdviceTo;
		setPriceAdviceToIsSet(true);
		this.payMethod = payMethod;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Good(Good other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetGid()) {
			this.gid = other.gid;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetMid()) {
			this.mid = other.mid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetSpu()) {
			this.spu = other.spu;
		}
		if (other.isSetLabel()) {
			this.label = other.label;
		}
		if (other.isSetKind()) {
			this.kind = other.kind;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		if (other.isSetApplyTime()) {
			this.applyTime = other.applyTime;
		}
		if (other.isSetExpireTime()) {
			this.expireTime = other.expireTime;
		}
		this.isSample = other.isSample;
		this.isAttach = other.isAttach;
		this.status = other.status;
		if (other.isSetNameSku()) {
			this.nameSku = other.nameSku;
		}
		if (other.isSetIconSku()) {
			this.iconSku = other.iconSku;
		}
		if (other.isSetDescSku()) {
			this.descSku = other.descSku;
		}
		this.weight = other.weight;
		this.volume = other.volume;
		if (other.isSetLabelsTxt()) {
			java.util.List<java.lang.String> __this__labelsTxt = new java.util.ArrayList<java.lang.String>(
					other.labelsTxt);
			this.labelsTxt = __this__labelsTxt;
		}
		if (other.isSetLabelsTag()) {
			java.util.List<java.lang.String> __this__labelsTag = new java.util.ArrayList<java.lang.String>(
					other.labelsTag);
			this.labelsTag = __this__labelsTag;
		}
		this.stock = other.stock;
		this.stockInit = other.stockInit;
		this.stockOver = other.stockOver;
		this.price = other.price;
		this.priceOld = other.priceOld;
		this.priceCost = other.priceCost;
		this.priceAdviceFrom = other.priceAdviceFrom;
		this.priceAdviceTo = other.priceAdviceTo;
		if (other.isSetPayMethod()) {
			java.util.List<java.util.Map<java.lang.String, java.lang.Double>> __this__payMethod = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Double>>(
					other.payMethod.size());
			for (java.util.Map<java.lang.String, java.lang.Double> other_element : other.payMethod) {
				java.util.Map<java.lang.String, java.lang.Double> __this__payMethod_copy = new java.util.HashMap<java.lang.String, java.lang.Double>(
						other_element);
				__this__payMethod.add(__this__payMethod_copy);
			}
			this.payMethod = __this__payMethod;
		}
	}

	public Good deepCopy() {
		return new Good(this);
	}

	@Override
	public void clear() {
		this.gid = null;
		this.sid = null;
		this.mid = null;
		this.uid = null;
		this.spu = null;
		this.label = null;
		this.kind = null;
		this.createTime = null;
		this.updateTime = null;
		this.applyTime = null;
		this.expireTime = null;
		setIsSampleIsSet(false);
		this.isSample = false;
		setIsAttachIsSet(false);
		this.isAttach = false;
		setStatusIsSet(false);
		this.status = 0;
		this.nameSku = null;
		this.iconSku = null;
		this.descSku = null;
		setWeightIsSet(false);
		this.weight = 0.0;
		setVolumeIsSet(false);
		this.volume = 0.0;
		this.labelsTxt = null;
		this.labelsTag = null;
		setStockIsSet(false);
		this.stock = 0;
		setStockInitIsSet(false);
		this.stockInit = 0;
		setStockOverIsSet(false);
		this.stockOver = 0;
		setPriceIsSet(false);
		this.price = 0.0;
		setPriceOldIsSet(false);
		this.priceOld = 0.0;
		setPriceCostIsSet(false);
		this.priceCost = 0.0;
		setPriceAdviceFromIsSet(false);
		this.priceAdviceFrom = 0.0;
		setPriceAdviceToIsSet(false);
		this.priceAdviceTo = 0.0;
		this.payMethod = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getGid() {
		return this.gid;
	}

	public Good setGid(@org.apache.thrift.annotation.Nullable java.lang.String gid) {
		this.gid = gid;
		return this;
	}

	public void unsetGid() {
		this.gid = null;
	}

	/**
	 * Returns true if field gid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetGid() {
		return this.gid != null;
	}

	public void setGidIsSet(boolean value) {
		if (!value) {
			this.gid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public Good setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMid() {
		return this.mid;
	}

	public Good setMid(@org.apache.thrift.annotation.Nullable java.lang.String mid) {
		this.mid = mid;
		return this;
	}

	public void unsetMid() {
		this.mid = null;
	}

	/**
	 * Returns true if field mid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetMid() {
		return this.mid != null;
	}

	public void setMidIsSet(boolean value) {
		if (!value) {
			this.mid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public Good setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSpu() {
		return this.spu;
	}

	public Good setSpu(@org.apache.thrift.annotation.Nullable java.lang.String spu) {
		this.spu = spu;
		return this;
	}

	public void unsetSpu() {
		this.spu = null;
	}

	/**
	 * Returns true if field spu is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSpu() {
		return this.spu != null;
	}

	public void setSpuIsSet(boolean value) {
		if (!value) {
			this.spu = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLabel() {
		return this.label;
	}

	public Good setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
		this.label = label;
		return this;
	}

	public void unsetLabel() {
		this.label = null;
	}

	/**
	 * Returns true if field label is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLabel() {
		return this.label != null;
	}

	public void setLabelIsSet(boolean value) {
		if (!value) {
			this.label = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getKind() {
		return this.kind;
	}

	public Good setKind(@org.apache.thrift.annotation.Nullable java.lang.String kind) {
		this.kind = kind;
		return this;
	}

	public void unsetKind() {
		this.kind = null;
	}

	/**
	 * Returns true if field kind is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetKind() {
		return this.kind != null;
	}

	public void setKindIsSet(boolean value) {
		if (!value) {
			this.kind = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Good setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Good setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getApplyTime() {
		return this.applyTime;
	}

	public Good setApplyTime(@org.apache.thrift.annotation.Nullable java.lang.String applyTime) {
		this.applyTime = applyTime;
		return this;
	}

	public void unsetApplyTime() {
		this.applyTime = null;
	}

	/**
	 * Returns true if field applyTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetApplyTime() {
		return this.applyTime != null;
	}

	public void setApplyTimeIsSet(boolean value) {
		if (!value) {
			this.applyTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getExpireTime() {
		return this.expireTime;
	}

	public Good setExpireTime(@org.apache.thrift.annotation.Nullable java.lang.String expireTime) {
		this.expireTime = expireTime;
		return this;
	}

	public void unsetExpireTime() {
		this.expireTime = null;
	}

	/**
	 * Returns true if field expireTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetExpireTime() {
		return this.expireTime != null;
	}

	public void setExpireTimeIsSet(boolean value) {
		if (!value) {
			this.expireTime = null;
		}
	}

	public boolean isIsSample() {
		return this.isSample;
	}

	public Good setIsSample(boolean isSample) {
		this.isSample = isSample;
		setIsSampleIsSet(true);
		return this;
	}

	public void unsetIsSample() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSAMPLE_ISSET_ID);
	}

	/**
	 * Returns true if field isSample is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsSample() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSAMPLE_ISSET_ID);
	}

	public void setIsSampleIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSAMPLE_ISSET_ID, value);
	}

	public boolean isIsAttach() {
		return this.isAttach;
	}

	public Good setIsAttach(boolean isAttach) {
		this.isAttach = isAttach;
		setIsAttachIsSet(true);
		return this;
	}

	public void unsetIsAttach() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISATTACH_ISSET_ID);
	}

	/**
	 * Returns true if field isAttach is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsAttach() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISATTACH_ISSET_ID);
	}

	public void setIsAttachIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISATTACH_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public Good setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNameSku() {
		return this.nameSku;
	}

	public Good setNameSku(@org.apache.thrift.annotation.Nullable java.lang.String nameSku) {
		this.nameSku = nameSku;
		return this;
	}

	public void unsetNameSku() {
		this.nameSku = null;
	}

	/**
	 * Returns true if field nameSku is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNameSku() {
		return this.nameSku != null;
	}

	public void setNameSkuIsSet(boolean value) {
		if (!value) {
			this.nameSku = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIconSku() {
		return this.iconSku;
	}

	public Good setIconSku(@org.apache.thrift.annotation.Nullable java.lang.String iconSku) {
		this.iconSku = iconSku;
		return this;
	}

	public void unsetIconSku() {
		this.iconSku = null;
	}

	/**
	 * Returns true if field iconSku is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIconSku() {
		return this.iconSku != null;
	}

	public void setIconSkuIsSet(boolean value) {
		if (!value) {
			this.iconSku = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDescSku() {
		return this.descSku;
	}

	public Good setDescSku(@org.apache.thrift.annotation.Nullable java.lang.String descSku) {
		this.descSku = descSku;
		return this;
	}

	public void unsetDescSku() {
		this.descSku = null;
	}

	/**
	 * Returns true if field descSku is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDescSku() {
		return this.descSku != null;
	}

	public void setDescSkuIsSet(boolean value) {
		if (!value) {
			this.descSku = null;
		}
	}

	public double getWeight() {
		return this.weight;
	}

	public Good setWeight(double weight) {
		this.weight = weight;
		setWeightIsSet(true);
		return this;
	}

	public void unsetWeight() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
	}

	/**
	 * Returns true if field weight is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetWeight() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
	}

	public void setWeightIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
	}

	public double getVolume() {
		return this.volume;
	}

	public Good setVolume(double volume) {
		this.volume = volume;
		setVolumeIsSet(true);
		return this;
	}

	public void unsetVolume() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
	}

	/**
	 * Returns true if field volume is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetVolume() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
	}

	public void setVolumeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
	}

	public int getLabelsTxtSize() {
		return (this.labelsTxt == null) ? 0 : this.labelsTxt.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<java.lang.String> getLabelsTxtIterator() {
		return (this.labelsTxt == null) ? null : this.labelsTxt.iterator();
	}

	public void addToLabelsTxt(java.lang.String elem) {
		if (this.labelsTxt == null) {
			this.labelsTxt = new java.util.ArrayList<java.lang.String>();
		}
		this.labelsTxt.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<java.lang.String> getLabelsTxt() {
		return this.labelsTxt;
	}

	public Good setLabelsTxt(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> labelsTxt) {
		this.labelsTxt = labelsTxt;
		return this;
	}

	public void unsetLabelsTxt() {
		this.labelsTxt = null;
	}

	/**
	 * Returns true if field labelsTxt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLabelsTxt() {
		return this.labelsTxt != null;
	}

	public void setLabelsTxtIsSet(boolean value) {
		if (!value) {
			this.labelsTxt = null;
		}
	}

	public int getLabelsTagSize() {
		return (this.labelsTag == null) ? 0 : this.labelsTag.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<java.lang.String> getLabelsTagIterator() {
		return (this.labelsTag == null) ? null : this.labelsTag.iterator();
	}

	public void addToLabelsTag(java.lang.String elem) {
		if (this.labelsTag == null) {
			this.labelsTag = new java.util.ArrayList<java.lang.String>();
		}
		this.labelsTag.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<java.lang.String> getLabelsTag() {
		return this.labelsTag;
	}

	public Good setLabelsTag(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> labelsTag) {
		this.labelsTag = labelsTag;
		return this;
	}

	public void unsetLabelsTag() {
		this.labelsTag = null;
	}

	/**
	 * Returns true if field labelsTag is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLabelsTag() {
		return this.labelsTag != null;
	}

	public void setLabelsTagIsSet(boolean value) {
		if (!value) {
			this.labelsTag = null;
		}
	}

	public int getStock() {
		return this.stock;
	}

	public Good setStock(int stock) {
		this.stock = stock;
		setStockIsSet(true);
		return this;
	}

	public void unsetStock() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOCK_ISSET_ID);
	}

	/**
	 * Returns true if field stock is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStock() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOCK_ISSET_ID);
	}

	public void setStockIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOCK_ISSET_ID, value);
	}

	public int getStockInit() {
		return this.stockInit;
	}

	public Good setStockInit(int stockInit) {
		this.stockInit = stockInit;
		setStockInitIsSet(true);
		return this;
	}

	public void unsetStockInit() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOCKINIT_ISSET_ID);
	}

	/**
	 * Returns true if field stockInit is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStockInit() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOCKINIT_ISSET_ID);
	}

	public void setStockInitIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOCKINIT_ISSET_ID, value);
	}

	public int getStockOver() {
		return this.stockOver;
	}

	public Good setStockOver(int stockOver) {
		this.stockOver = stockOver;
		setStockOverIsSet(true);
		return this;
	}

	public void unsetStockOver() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOCKOVER_ISSET_ID);
	}

	/**
	 * Returns true if field stockOver is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetStockOver() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOCKOVER_ISSET_ID);
	}

	public void setStockOverIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOCKOVER_ISSET_ID, value);
	}

	public double getPrice() {
		return this.price;
	}

	public Good setPrice(double price) {
		this.price = price;
		setPriceIsSet(true);
		return this;
	}

	public void unsetPrice() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
	}

	/**
	 * Returns true if field price is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPrice() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
	}

	public void setPriceIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
	}

	public double getPriceOld() {
		return this.priceOld;
	}

	public Good setPriceOld(double priceOld) {
		this.priceOld = priceOld;
		setPriceOldIsSet(true);
		return this;
	}

	public void unsetPriceOld() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEOLD_ISSET_ID);
	}

	/**
	 * Returns true if field priceOld is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceOld() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEOLD_ISSET_ID);
	}

	public void setPriceOldIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEOLD_ISSET_ID, value);
	}

	public double getPriceCost() {
		return this.priceCost;
	}

	public Good setPriceCost(double priceCost) {
		this.priceCost = priceCost;
		setPriceCostIsSet(true);
		return this;
	}

	public void unsetPriceCost() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICECOST_ISSET_ID);
	}

	/**
	 * Returns true if field priceCost is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceCost() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICECOST_ISSET_ID);
	}

	public void setPriceCostIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICECOST_ISSET_ID, value);
	}

	public double getPriceAdviceFrom() {
		return this.priceAdviceFrom;
	}

	public Good setPriceAdviceFrom(double priceAdviceFrom) {
		this.priceAdviceFrom = priceAdviceFrom;
		setPriceAdviceFromIsSet(true);
		return this;
	}

	public void unsetPriceAdviceFrom() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEADVICEFROM_ISSET_ID);
	}

	/**
	 * Returns true if field priceAdviceFrom is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceAdviceFrom() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEADVICEFROM_ISSET_ID);
	}

	public void setPriceAdviceFromIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEADVICEFROM_ISSET_ID, value);
	}

	public double getPriceAdviceTo() {
		return this.priceAdviceTo;
	}

	public Good setPriceAdviceTo(double priceAdviceTo) {
		this.priceAdviceTo = priceAdviceTo;
		setPriceAdviceToIsSet(true);
		return this;
	}

	public void unsetPriceAdviceTo() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEADVICETO_ISSET_ID);
	}

	/**
	 * Returns true if field priceAdviceTo is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceAdviceTo() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEADVICETO_ISSET_ID);
	}

	public void setPriceAdviceToIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEADVICETO_ISSET_ID, value);
	}

	public int getPayMethodSize() {
		return (this.payMethod == null) ? 0 : this.payMethod.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<java.util.Map<java.lang.String, java.lang.Double>> getPayMethodIterator() {
		return (this.payMethod == null) ? null : this.payMethod.iterator();
	}

	public void addToPayMethod(java.util.Map<java.lang.String, java.lang.Double> elem) {
		if (this.payMethod == null) {
			this.payMethod = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Double>>();
		}
		this.payMethod.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<java.util.Map<java.lang.String, java.lang.Double>> getPayMethod() {
		return this.payMethod;
	}

	public Good setPayMethod(
			@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String, java.lang.Double>> payMethod) {
		this.payMethod = payMethod;
		return this;
	}

	public void unsetPayMethod() {
		this.payMethod = null;
	}

	/**
	 * Returns true if field payMethod is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayMethod() {
		return this.payMethod != null;
	}

	public void setPayMethodIsSet(boolean value) {
		if (!value) {
			this.payMethod = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case GID:
			if (value == null) {
				unsetGid();
			}
			else {
				setGid((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case MID:
			if (value == null) {
				unsetMid();
			}
			else {
				setMid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case SPU:
			if (value == null) {
				unsetSpu();
			}
			else {
				setSpu((java.lang.String) value);
			}
			break;

		case LABEL:
			if (value == null) {
				unsetLabel();
			}
			else {
				setLabel((java.lang.String) value);
			}
			break;

		case KIND:
			if (value == null) {
				unsetKind();
			}
			else {
				setKind((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case APPLY_TIME:
			if (value == null) {
				unsetApplyTime();
			}
			else {
				setApplyTime((java.lang.String) value);
			}
			break;

		case EXPIRE_TIME:
			if (value == null) {
				unsetExpireTime();
			}
			else {
				setExpireTime((java.lang.String) value);
			}
			break;

		case IS_SAMPLE:
			if (value == null) {
				unsetIsSample();
			}
			else {
				setIsSample((java.lang.Boolean) value);
			}
			break;

		case IS_ATTACH:
			if (value == null) {
				unsetIsAttach();
			}
			else {
				setIsAttach((java.lang.Boolean) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case NAME_SKU:
			if (value == null) {
				unsetNameSku();
			}
			else {
				setNameSku((java.lang.String) value);
			}
			break;

		case ICON_SKU:
			if (value == null) {
				unsetIconSku();
			}
			else {
				setIconSku((java.lang.String) value);
			}
			break;

		case DESC_SKU:
			if (value == null) {
				unsetDescSku();
			}
			else {
				setDescSku((java.lang.String) value);
			}
			break;

		case WEIGHT:
			if (value == null) {
				unsetWeight();
			}
			else {
				setWeight((java.lang.Double) value);
			}
			break;

		case VOLUME:
			if (value == null) {
				unsetVolume();
			}
			else {
				setVolume((java.lang.Double) value);
			}
			break;

		case LABELS_TXT:
			if (value == null) {
				unsetLabelsTxt();
			}
			else {
				setLabelsTxt((java.util.List<java.lang.String>) value);
			}
			break;

		case LABELS_TAG:
			if (value == null) {
				unsetLabelsTag();
			}
			else {
				setLabelsTag((java.util.List<java.lang.String>) value);
			}
			break;

		case STOCK:
			if (value == null) {
				unsetStock();
			}
			else {
				setStock((java.lang.Integer) value);
			}
			break;

		case STOCK_INIT:
			if (value == null) {
				unsetStockInit();
			}
			else {
				setStockInit((java.lang.Integer) value);
			}
			break;

		case STOCK_OVER:
			if (value == null) {
				unsetStockOver();
			}
			else {
				setStockOver((java.lang.Integer) value);
			}
			break;

		case PRICE:
			if (value == null) {
				unsetPrice();
			}
			else {
				setPrice((java.lang.Double) value);
			}
			break;

		case PRICE_OLD:
			if (value == null) {
				unsetPriceOld();
			}
			else {
				setPriceOld((java.lang.Double) value);
			}
			break;

		case PRICE_COST:
			if (value == null) {
				unsetPriceCost();
			}
			else {
				setPriceCost((java.lang.Double) value);
			}
			break;

		case PRICE_ADVICE_FROM:
			if (value == null) {
				unsetPriceAdviceFrom();
			}
			else {
				setPriceAdviceFrom((java.lang.Double) value);
			}
			break;

		case PRICE_ADVICE_TO:
			if (value == null) {
				unsetPriceAdviceTo();
			}
			else {
				setPriceAdviceTo((java.lang.Double) value);
			}
			break;

		case PAY_METHOD:
			if (value == null) {
				unsetPayMethod();
			}
			else {
				setPayMethod((java.util.List<java.util.Map<java.lang.String, java.lang.Double>>) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case GID:
			return getGid();

		case SID:
			return getSid();

		case MID:
			return getMid();

		case UID:
			return getUid();

		case SPU:
			return getSpu();

		case LABEL:
			return getLabel();

		case KIND:
			return getKind();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case APPLY_TIME:
			return getApplyTime();

		case EXPIRE_TIME:
			return getExpireTime();

		case IS_SAMPLE:
			return isIsSample();

		case IS_ATTACH:
			return isIsAttach();

		case STATUS:
			return getStatus();

		case NAME_SKU:
			return getNameSku();

		case ICON_SKU:
			return getIconSku();

		case DESC_SKU:
			return getDescSku();

		case WEIGHT:
			return getWeight();

		case VOLUME:
			return getVolume();

		case LABELS_TXT:
			return getLabelsTxt();

		case LABELS_TAG:
			return getLabelsTag();

		case STOCK:
			return getStock();

		case STOCK_INIT:
			return getStockInit();

		case STOCK_OVER:
			return getStockOver();

		case PRICE:
			return getPrice();

		case PRICE_OLD:
			return getPriceOld();

		case PRICE_COST:
			return getPriceCost();

		case PRICE_ADVICE_FROM:
			return getPriceAdviceFrom();

		case PRICE_ADVICE_TO:
			return getPriceAdviceTo();

		case PAY_METHOD:
			return getPayMethod();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case GID:
			return isSetGid();
		case SID:
			return isSetSid();
		case MID:
			return isSetMid();
		case UID:
			return isSetUid();
		case SPU:
			return isSetSpu();
		case LABEL:
			return isSetLabel();
		case KIND:
			return isSetKind();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case APPLY_TIME:
			return isSetApplyTime();
		case EXPIRE_TIME:
			return isSetExpireTime();
		case IS_SAMPLE:
			return isSetIsSample();
		case IS_ATTACH:
			return isSetIsAttach();
		case STATUS:
			return isSetStatus();
		case NAME_SKU:
			return isSetNameSku();
		case ICON_SKU:
			return isSetIconSku();
		case DESC_SKU:
			return isSetDescSku();
		case WEIGHT:
			return isSetWeight();
		case VOLUME:
			return isSetVolume();
		case LABELS_TXT:
			return isSetLabelsTxt();
		case LABELS_TAG:
			return isSetLabelsTag();
		case STOCK:
			return isSetStock();
		case STOCK_INIT:
			return isSetStockInit();
		case STOCK_OVER:
			return isSetStockOver();
		case PRICE:
			return isSetPrice();
		case PRICE_OLD:
			return isSetPriceOld();
		case PRICE_COST:
			return isSetPriceCost();
		case PRICE_ADVICE_FROM:
			return isSetPriceAdviceFrom();
		case PRICE_ADVICE_TO:
			return isSetPriceAdviceTo();
		case PAY_METHOD:
			return isSetPayMethod();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Good)
			return this.equals((Good) that);
		return false;
	}

	public boolean equals(Good that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_gid = true && this.isSetGid();
		boolean that_present_gid = true && that.isSetGid();
		if (this_present_gid || that_present_gid) {
			if (!(this_present_gid && that_present_gid))
				return false;
			if (!this.gid.equals(that.gid))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_mid = true && this.isSetMid();
		boolean that_present_mid = true && that.isSetMid();
		if (this_present_mid || that_present_mid) {
			if (!(this_present_mid && that_present_mid))
				return false;
			if (!this.mid.equals(that.mid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_spu = true && this.isSetSpu();
		boolean that_present_spu = true && that.isSetSpu();
		if (this_present_spu || that_present_spu) {
			if (!(this_present_spu && that_present_spu))
				return false;
			if (!this.spu.equals(that.spu))
				return false;
		}

		boolean this_present_label = true && this.isSetLabel();
		boolean that_present_label = true && that.isSetLabel();
		if (this_present_label || that_present_label) {
			if (!(this_present_label && that_present_label))
				return false;
			if (!this.label.equals(that.label))
				return false;
		}

		boolean this_present_kind = true && this.isSetKind();
		boolean that_present_kind = true && that.isSetKind();
		if (this_present_kind || that_present_kind) {
			if (!(this_present_kind && that_present_kind))
				return false;
			if (!this.kind.equals(that.kind))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_applyTime = true && this.isSetApplyTime();
		boolean that_present_applyTime = true && that.isSetApplyTime();
		if (this_present_applyTime || that_present_applyTime) {
			if (!(this_present_applyTime && that_present_applyTime))
				return false;
			if (!this.applyTime.equals(that.applyTime))
				return false;
		}

		boolean this_present_expireTime = true && this.isSetExpireTime();
		boolean that_present_expireTime = true && that.isSetExpireTime();
		if (this_present_expireTime || that_present_expireTime) {
			if (!(this_present_expireTime && that_present_expireTime))
				return false;
			if (!this.expireTime.equals(that.expireTime))
				return false;
		}

		boolean this_present_isSample = true;
		boolean that_present_isSample = true;
		if (this_present_isSample || that_present_isSample) {
			if (!(this_present_isSample && that_present_isSample))
				return false;
			if (this.isSample != that.isSample)
				return false;
		}

		boolean this_present_isAttach = true;
		boolean that_present_isAttach = true;
		if (this_present_isAttach || that_present_isAttach) {
			if (!(this_present_isAttach && that_present_isAttach))
				return false;
			if (this.isAttach != that.isAttach)
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_nameSku = true && this.isSetNameSku();
		boolean that_present_nameSku = true && that.isSetNameSku();
		if (this_present_nameSku || that_present_nameSku) {
			if (!(this_present_nameSku && that_present_nameSku))
				return false;
			if (!this.nameSku.equals(that.nameSku))
				return false;
		}

		boolean this_present_iconSku = true && this.isSetIconSku();
		boolean that_present_iconSku = true && that.isSetIconSku();
		if (this_present_iconSku || that_present_iconSku) {
			if (!(this_present_iconSku && that_present_iconSku))
				return false;
			if (!this.iconSku.equals(that.iconSku))
				return false;
		}

		boolean this_present_descSku = true && this.isSetDescSku();
		boolean that_present_descSku = true && that.isSetDescSku();
		if (this_present_descSku || that_present_descSku) {
			if (!(this_present_descSku && that_present_descSku))
				return false;
			if (!this.descSku.equals(that.descSku))
				return false;
		}

		boolean this_present_weight = true;
		boolean that_present_weight = true;
		if (this_present_weight || that_present_weight) {
			if (!(this_present_weight && that_present_weight))
				return false;
			if (this.weight != that.weight)
				return false;
		}

		boolean this_present_volume = true;
		boolean that_present_volume = true;
		if (this_present_volume || that_present_volume) {
			if (!(this_present_volume && that_present_volume))
				return false;
			if (this.volume != that.volume)
				return false;
		}

		boolean this_present_labelsTxt = true && this.isSetLabelsTxt();
		boolean that_present_labelsTxt = true && that.isSetLabelsTxt();
		if (this_present_labelsTxt || that_present_labelsTxt) {
			if (!(this_present_labelsTxt && that_present_labelsTxt))
				return false;
			if (!this.labelsTxt.equals(that.labelsTxt))
				return false;
		}

		boolean this_present_labelsTag = true && this.isSetLabelsTag();
		boolean that_present_labelsTag = true && that.isSetLabelsTag();
		if (this_present_labelsTag || that_present_labelsTag) {
			if (!(this_present_labelsTag && that_present_labelsTag))
				return false;
			if (!this.labelsTag.equals(that.labelsTag))
				return false;
		}

		boolean this_present_stock = true;
		boolean that_present_stock = true;
		if (this_present_stock || that_present_stock) {
			if (!(this_present_stock && that_present_stock))
				return false;
			if (this.stock != that.stock)
				return false;
		}

		boolean this_present_stockInit = true;
		boolean that_present_stockInit = true;
		if (this_present_stockInit || that_present_stockInit) {
			if (!(this_present_stockInit && that_present_stockInit))
				return false;
			if (this.stockInit != that.stockInit)
				return false;
		}

		boolean this_present_stockOver = true;
		boolean that_present_stockOver = true;
		if (this_present_stockOver || that_present_stockOver) {
			if (!(this_present_stockOver && that_present_stockOver))
				return false;
			if (this.stockOver != that.stockOver)
				return false;
		}

		boolean this_present_price = true;
		boolean that_present_price = true;
		if (this_present_price || that_present_price) {
			if (!(this_present_price && that_present_price))
				return false;
			if (this.price != that.price)
				return false;
		}

		boolean this_present_priceOld = true;
		boolean that_present_priceOld = true;
		if (this_present_priceOld || that_present_priceOld) {
			if (!(this_present_priceOld && that_present_priceOld))
				return false;
			if (this.priceOld != that.priceOld)
				return false;
		}

		boolean this_present_priceCost = true;
		boolean that_present_priceCost = true;
		if (this_present_priceCost || that_present_priceCost) {
			if (!(this_present_priceCost && that_present_priceCost))
				return false;
			if (this.priceCost != that.priceCost)
				return false;
		}

		boolean this_present_priceAdviceFrom = true;
		boolean that_present_priceAdviceFrom = true;
		if (this_present_priceAdviceFrom || that_present_priceAdviceFrom) {
			if (!(this_present_priceAdviceFrom && that_present_priceAdviceFrom))
				return false;
			if (this.priceAdviceFrom != that.priceAdviceFrom)
				return false;
		}

		boolean this_present_priceAdviceTo = true;
		boolean that_present_priceAdviceTo = true;
		if (this_present_priceAdviceTo || that_present_priceAdviceTo) {
			if (!(this_present_priceAdviceTo && that_present_priceAdviceTo))
				return false;
			if (this.priceAdviceTo != that.priceAdviceTo)
				return false;
		}

		boolean this_present_payMethod = true && this.isSetPayMethod();
		boolean that_present_payMethod = true && that.isSetPayMethod();
		if (this_present_payMethod || that_present_payMethod) {
			if (!(this_present_payMethod && that_present_payMethod))
				return false;
			if (!this.payMethod.equals(that.payMethod))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetGid()) ? 131071 : 524287);
		if (isSetGid())
			hashCode = hashCode * 8191 + gid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
		if (isSetMid())
			hashCode = hashCode * 8191 + mid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSpu()) ? 131071 : 524287);
		if (isSetSpu())
			hashCode = hashCode * 8191 + spu.hashCode();

		hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
		if (isSetLabel())
			hashCode = hashCode * 8191 + label.hashCode();

		hashCode = hashCode * 8191 + ((isSetKind()) ? 131071 : 524287);
		if (isSetKind())
			hashCode = hashCode * 8191 + kind.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetApplyTime()) ? 131071 : 524287);
		if (isSetApplyTime())
			hashCode = hashCode * 8191 + applyTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetExpireTime()) ? 131071 : 524287);
		if (isSetExpireTime())
			hashCode = hashCode * 8191 + expireTime.hashCode();

		hashCode = hashCode * 8191 + ((isSample) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isAttach) ? 131071 : 524287);

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetNameSku()) ? 131071 : 524287);
		if (isSetNameSku())
			hashCode = hashCode * 8191 + nameSku.hashCode();

		hashCode = hashCode * 8191 + ((isSetIconSku()) ? 131071 : 524287);
		if (isSetIconSku())
			hashCode = hashCode * 8191 + iconSku.hashCode();

		hashCode = hashCode * 8191 + ((isSetDescSku()) ? 131071 : 524287);
		if (isSetDescSku())
			hashCode = hashCode * 8191 + descSku.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(weight);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(volume);

		hashCode = hashCode * 8191 + ((isSetLabelsTxt()) ? 131071 : 524287);
		if (isSetLabelsTxt())
			hashCode = hashCode * 8191 + labelsTxt.hashCode();

		hashCode = hashCode * 8191 + ((isSetLabelsTag()) ? 131071 : 524287);
		if (isSetLabelsTag())
			hashCode = hashCode * 8191 + labelsTag.hashCode();

		hashCode = hashCode * 8191 + stock;

		hashCode = hashCode * 8191 + stockInit;

		hashCode = hashCode * 8191 + stockOver;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(price);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceOld);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceCost);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceAdviceFrom);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceAdviceTo);

		hashCode = hashCode * 8191 + ((isSetPayMethod()) ? 131071 : 524287);
		if (isSetPayMethod())
			hashCode = hashCode * 8191 + payMethod.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(Good other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, other.gid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSpu()).compareTo(other.isSetSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spu, other.spu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLabel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetKind()).compareTo(other.isSetKind());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetKind()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kind, other.kind);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetApplyTime()).compareTo(other.isSetApplyTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApplyTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTime, other.applyTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetExpireTime()).compareTo(other.isSetExpireTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetExpireTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsSample()).compareTo(other.isSetIsSample());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsSample()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSample, other.isSample);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsAttach()).compareTo(other.isSetIsAttach());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsAttach()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAttach, other.isAttach);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNameSku()).compareTo(other.isSetNameSku());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNameSku()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSku, other.nameSku);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIconSku()).compareTo(other.isSetIconSku());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIconSku()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconSku, other.iconSku);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDescSku()).compareTo(other.isSetDescSku());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDescSku()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descSku, other.descSku);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWeight()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVolume()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLabelsTxt()).compareTo(other.isSetLabelsTxt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLabelsTxt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labelsTxt, other.labelsTxt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLabelsTag()).compareTo(other.isSetLabelsTag());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLabelsTag()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labelsTag, other.labelsTag);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStock()).compareTo(other.isSetStock());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStock()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock, other.stock);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStockInit()).compareTo(other.isSetStockInit());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStockInit()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockInit, other.stockInit);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStockOver()).compareTo(other.isSetStockOver());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStockOver()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stockOver, other.stockOver);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceOld()).compareTo(other.isSetPriceOld());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceOld()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceOld, other.priceOld);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceCost()).compareTo(other.isSetPriceCost());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceCost()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceCost, other.priceCost);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceAdviceFrom()).compareTo(other.isSetPriceAdviceFrom());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceAdviceFrom()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceAdviceFrom, other.priceAdviceFrom);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceAdviceTo()).compareTo(other.isSetPriceAdviceTo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceAdviceTo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceAdviceTo, other.priceAdviceTo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayMethod()).compareTo(other.isSetPayMethod());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMethod()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMethod, other.payMethod);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Good(");
		boolean first = true;

		sb.append("gid:");
		if (this.gid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.gid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("mid:");
		if (this.mid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.mid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("spu:");
		if (this.spu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.spu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("label:");
		if (this.label == null) {
			sb.append("null");
		}
		else {
			sb.append(this.label);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("kind:");
		if (this.kind == null) {
			sb.append("null");
		}
		else {
			sb.append(this.kind);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("applyTime:");
		if (this.applyTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.applyTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("expireTime:");
		if (this.expireTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.expireTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isSample:");
		sb.append(this.isSample);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isAttach:");
		sb.append(this.isAttach);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("nameSku:");
		if (this.nameSku == null) {
			sb.append("null");
		}
		else {
			sb.append(this.nameSku);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("iconSku:");
		if (this.iconSku == null) {
			sb.append("null");
		}
		else {
			sb.append(this.iconSku);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("descSku:");
		if (this.descSku == null) {
			sb.append("null");
		}
		else {
			sb.append(this.descSku);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("weight:");
		sb.append(this.weight);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("volume:");
		sb.append(this.volume);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("labelsTxt:");
		if (this.labelsTxt == null) {
			sb.append("null");
		}
		else {
			sb.append(this.labelsTxt);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("labelsTag:");
		if (this.labelsTag == null) {
			sb.append("null");
		}
		else {
			sb.append(this.labelsTag);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("stock:");
		sb.append(this.stock);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("stockInit:");
		sb.append(this.stockInit);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("stockOver:");
		sb.append(this.stockOver);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("price:");
		sb.append(this.price);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceOld:");
		sb.append(this.priceOld);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceCost:");
		sb.append(this.priceCost);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceAdviceFrom:");
		sb.append(this.priceAdviceFrom);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceAdviceTo:");
		sb.append(this.priceAdviceTo);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payMethod:");
		if (this.payMethod == null) {
			sb.append("null");
		}
		else {
			sb.append(this.payMethod);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class GoodStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public GoodStandardScheme getScheme() {
			return new GoodStandardScheme();
		}

	}

	private static class GoodStandardScheme extends org.apache.thrift.scheme.StandardScheme<Good> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Good struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // GID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.gid = iprot.readString();
						struct.setGidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // MID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mid = iprot.readString();
						struct.setMidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.spu = iprot.readString();
						struct.setSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // LABEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.label = iprot.readString();
						struct.setLabelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 26: // KIND
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.kind = iprot.readString();
						struct.setKindIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 27: // APPLY_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.applyTime = iprot.readString();
						struct.setApplyTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 28: // EXPIRE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.expireTime = iprot.readString();
						struct.setExpireTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_SAMPLE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isSample = iprot.readBool();
						struct.setIsSampleIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // IS_ATTACH
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isAttach = iprot.readBool();
						struct.setIsAttachIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // NAME_SKU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nameSku = iprot.readString();
						struct.setNameSkuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // ICON_SKU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.iconSku = iprot.readString();
						struct.setIconSkuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // DESC_SKU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.descSku = iprot.readString();
						struct.setDescSkuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // WEIGHT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.weight = iprot.readDouble();
						struct.setWeightIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // VOLUME
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.volume = iprot.readDouble();
						struct.setVolumeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 24: // LABELS_TXT
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
							struct.labelsTxt = new java.util.ArrayList<java.lang.String>(_list8.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _elem9;
							for (int _i10 = 0; _i10 < _list8.size; ++_i10) {
								_elem9 = iprot.readString();
								struct.labelsTxt.add(_elem9);
							}
							iprot.readListEnd();
						}
						struct.setLabelsTxtIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 25: // LABELS_TAG
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
							struct.labelsTag = new java.util.ArrayList<java.lang.String>(_list11.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _elem12;
							for (int _i13 = 0; _i13 < _list11.size; ++_i13) {
								_elem12 = iprot.readString();
								struct.labelsTag.add(_elem12);
							}
							iprot.readListEnd();
						}
						struct.setLabelsTagIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // STOCK
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.stock = iprot.readI32();
						struct.setStockIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 29: // STOCK_INIT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.stockInit = iprot.readI32();
						struct.setStockInitIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 30: // STOCK_OVER
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.stockOver = iprot.readI32();
						struct.setStockOverIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.price = iprot.readDouble();
						struct.setPriceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // PRICE_OLD
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceOld = iprot.readDouble();
						struct.setPriceOldIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // PRICE_COST
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceCost = iprot.readDouble();
						struct.setPriceCostIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // PRICE_ADVICE_FROM
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceAdviceFrom = iprot.readDouble();
						struct.setPriceAdviceFromIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // PRICE_ADVICE_TO
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceAdviceTo = iprot.readDouble();
						struct.setPriceAdviceToIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // PAY_METHOD
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
							struct.payMethod = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Double>>(
									_list14.size);
							@org.apache.thrift.annotation.Nullable
							java.util.Map<java.lang.String, java.lang.Double> _elem15;
							for (int _i16 = 0; _i16 < _list14.size; ++_i16) {
								{
									org.apache.thrift.protocol.TMap _map17 = iprot.readMapBegin();
									_elem15 = new java.util.HashMap<java.lang.String, java.lang.Double>(
											2 * _map17.size);
									@org.apache.thrift.annotation.Nullable
									java.lang.String _key18;
									double _val19;
									for (int _i20 = 0; _i20 < _map17.size; ++_i20) {
										_key18 = iprot.readString();
										_val19 = iprot.readDouble();
										_elem15.put(_key18, _val19);
									}
									iprot.readMapEnd();
								}
								struct.payMethod.add(_elem15);
							}
							iprot.readListEnd();
						}
						struct.setPayMethodIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Good struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.gid != null) {
				oprot.writeFieldBegin(GID_FIELD_DESC);
				oprot.writeString(struct.gid);
				oprot.writeFieldEnd();
			}
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.mid != null) {
				oprot.writeFieldBegin(MID_FIELD_DESC);
				oprot.writeString(struct.mid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.spu != null) {
				oprot.writeFieldBegin(SPU_FIELD_DESC);
				oprot.writeString(struct.spu);
				oprot.writeFieldEnd();
			}
			if (struct.label != null) {
				oprot.writeFieldBegin(LABEL_FIELD_DESC);
				oprot.writeString(struct.label);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_SAMPLE_FIELD_DESC);
			oprot.writeBool(struct.isSample);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_ATTACH_FIELD_DESC);
			oprot.writeBool(struct.isAttach);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.nameSku != null) {
				oprot.writeFieldBegin(NAME_SKU_FIELD_DESC);
				oprot.writeString(struct.nameSku);
				oprot.writeFieldEnd();
			}
			if (struct.iconSku != null) {
				oprot.writeFieldBegin(ICON_SKU_FIELD_DESC);
				oprot.writeString(struct.iconSku);
				oprot.writeFieldEnd();
			}
			if (struct.descSku != null) {
				oprot.writeFieldBegin(DESC_SKU_FIELD_DESC);
				oprot.writeString(struct.descSku);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
			oprot.writeDouble(struct.weight);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(VOLUME_FIELD_DESC);
			oprot.writeDouble(struct.volume);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STOCK_FIELD_DESC);
			oprot.writeI32(struct.stock);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_FIELD_DESC);
			oprot.writeDouble(struct.price);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_OLD_FIELD_DESC);
			oprot.writeDouble(struct.priceOld);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_COST_FIELD_DESC);
			oprot.writeDouble(struct.priceCost);
			oprot.writeFieldEnd();
			if (struct.payMethod != null) {
				oprot.writeFieldBegin(PAY_METHOD_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP,
							struct.payMethod.size()));
					for (java.util.Map<java.lang.String, java.lang.Double> _iter21 : struct.payMethod) {
						{
							oprot.writeMapBegin(
									new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
											org.apache.thrift.protocol.TType.DOUBLE, _iter21.size()));
							for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter22 : _iter21.entrySet()) {
								oprot.writeString(_iter22.getKey());
								oprot.writeDouble(_iter22.getValue());
							}
							oprot.writeMapEnd();
						}
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(PRICE_ADVICE_FROM_FIELD_DESC);
			oprot.writeDouble(struct.priceAdviceFrom);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_ADVICE_TO_FIELD_DESC);
			oprot.writeDouble(struct.priceAdviceTo);
			oprot.writeFieldEnd();
			if (struct.labelsTxt != null) {
				oprot.writeFieldBegin(LABELS_TXT_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,
							struct.labelsTxt.size()));
					for (java.lang.String _iter23 : struct.labelsTxt) {
						oprot.writeString(_iter23);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.labelsTag != null) {
				oprot.writeFieldBegin(LABELS_TAG_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,
							struct.labelsTag.size()));
					for (java.lang.String _iter24 : struct.labelsTag) {
						oprot.writeString(_iter24);
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			if (struct.kind != null) {
				oprot.writeFieldBegin(KIND_FIELD_DESC);
				oprot.writeString(struct.kind);
				oprot.writeFieldEnd();
			}
			if (struct.applyTime != null) {
				oprot.writeFieldBegin(APPLY_TIME_FIELD_DESC);
				oprot.writeString(struct.applyTime);
				oprot.writeFieldEnd();
			}
			if (struct.expireTime != null) {
				oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
				oprot.writeString(struct.expireTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STOCK_INIT_FIELD_DESC);
			oprot.writeI32(struct.stockInit);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STOCK_OVER_FIELD_DESC);
			oprot.writeI32(struct.stockOver);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class GoodTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public GoodTupleScheme getScheme() {
			return new GoodTupleScheme();
		}

	}

	private static class GoodTupleScheme extends org.apache.thrift.scheme.TupleScheme<Good> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Good struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetGid()) {
				optionals.set(0);
			}
			if (struct.isSetSid()) {
				optionals.set(1);
			}
			if (struct.isSetMid()) {
				optionals.set(2);
			}
			if (struct.isSetUid()) {
				optionals.set(3);
			}
			if (struct.isSetSpu()) {
				optionals.set(4);
			}
			if (struct.isSetLabel()) {
				optionals.set(5);
			}
			if (struct.isSetKind()) {
				optionals.set(6);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(7);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(8);
			}
			if (struct.isSetApplyTime()) {
				optionals.set(9);
			}
			if (struct.isSetExpireTime()) {
				optionals.set(10);
			}
			if (struct.isSetIsSample()) {
				optionals.set(11);
			}
			if (struct.isSetIsAttach()) {
				optionals.set(12);
			}
			if (struct.isSetStatus()) {
				optionals.set(13);
			}
			if (struct.isSetNameSku()) {
				optionals.set(14);
			}
			if (struct.isSetIconSku()) {
				optionals.set(15);
			}
			if (struct.isSetDescSku()) {
				optionals.set(16);
			}
			if (struct.isSetWeight()) {
				optionals.set(17);
			}
			if (struct.isSetVolume()) {
				optionals.set(18);
			}
			if (struct.isSetLabelsTxt()) {
				optionals.set(19);
			}
			if (struct.isSetLabelsTag()) {
				optionals.set(20);
			}
			if (struct.isSetStock()) {
				optionals.set(21);
			}
			if (struct.isSetStockInit()) {
				optionals.set(22);
			}
			if (struct.isSetStockOver()) {
				optionals.set(23);
			}
			if (struct.isSetPrice()) {
				optionals.set(24);
			}
			if (struct.isSetPriceOld()) {
				optionals.set(25);
			}
			if (struct.isSetPriceCost()) {
				optionals.set(26);
			}
			if (struct.isSetPriceAdviceFrom()) {
				optionals.set(27);
			}
			if (struct.isSetPriceAdviceTo()) {
				optionals.set(28);
			}
			if (struct.isSetPayMethod()) {
				optionals.set(29);
			}
			oprot.writeBitSet(optionals, 30);
			if (struct.isSetGid()) {
				oprot.writeString(struct.gid);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetMid()) {
				oprot.writeString(struct.mid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetSpu()) {
				oprot.writeString(struct.spu);
			}
			if (struct.isSetLabel()) {
				oprot.writeString(struct.label);
			}
			if (struct.isSetKind()) {
				oprot.writeString(struct.kind);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetApplyTime()) {
				oprot.writeString(struct.applyTime);
			}
			if (struct.isSetExpireTime()) {
				oprot.writeString(struct.expireTime);
			}
			if (struct.isSetIsSample()) {
				oprot.writeBool(struct.isSample);
			}
			if (struct.isSetIsAttach()) {
				oprot.writeBool(struct.isAttach);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetNameSku()) {
				oprot.writeString(struct.nameSku);
			}
			if (struct.isSetIconSku()) {
				oprot.writeString(struct.iconSku);
			}
			if (struct.isSetDescSku()) {
				oprot.writeString(struct.descSku);
			}
			if (struct.isSetWeight()) {
				oprot.writeDouble(struct.weight);
			}
			if (struct.isSetVolume()) {
				oprot.writeDouble(struct.volume);
			}
			if (struct.isSetLabelsTxt()) {
				{
					oprot.writeI32(struct.labelsTxt.size());
					for (java.lang.String _iter25 : struct.labelsTxt) {
						oprot.writeString(_iter25);
					}
				}
			}
			if (struct.isSetLabelsTag()) {
				{
					oprot.writeI32(struct.labelsTag.size());
					for (java.lang.String _iter26 : struct.labelsTag) {
						oprot.writeString(_iter26);
					}
				}
			}
			if (struct.isSetStock()) {
				oprot.writeI32(struct.stock);
			}
			if (struct.isSetStockInit()) {
				oprot.writeI32(struct.stockInit);
			}
			if (struct.isSetStockOver()) {
				oprot.writeI32(struct.stockOver);
			}
			if (struct.isSetPrice()) {
				oprot.writeDouble(struct.price);
			}
			if (struct.isSetPriceOld()) {
				oprot.writeDouble(struct.priceOld);
			}
			if (struct.isSetPriceCost()) {
				oprot.writeDouble(struct.priceCost);
			}
			if (struct.isSetPriceAdviceFrom()) {
				oprot.writeDouble(struct.priceAdviceFrom);
			}
			if (struct.isSetPriceAdviceTo()) {
				oprot.writeDouble(struct.priceAdviceTo);
			}
			if (struct.isSetPayMethod()) {
				{
					oprot.writeI32(struct.payMethod.size());
					for (java.util.Map<java.lang.String, java.lang.Double> _iter27 : struct.payMethod) {
						{
							oprot.writeI32(_iter27.size());
							for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter28 : _iter27.entrySet()) {
								oprot.writeString(_iter28.getKey());
								oprot.writeDouble(_iter28.getValue());
							}
						}
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Good struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(30);
			if (incoming.get(0)) {
				struct.gid = iprot.readString();
				struct.setGidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.mid = iprot.readString();
				struct.setMidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(4)) {
				struct.spu = iprot.readString();
				struct.setSpuIsSet(true);
			}
			if (incoming.get(5)) {
				struct.label = iprot.readString();
				struct.setLabelIsSet(true);
			}
			if (incoming.get(6)) {
				struct.kind = iprot.readString();
				struct.setKindIsSet(true);
			}
			if (incoming.get(7)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(9)) {
				struct.applyTime = iprot.readString();
				struct.setApplyTimeIsSet(true);
			}
			if (incoming.get(10)) {
				struct.expireTime = iprot.readString();
				struct.setExpireTimeIsSet(true);
			}
			if (incoming.get(11)) {
				struct.isSample = iprot.readBool();
				struct.setIsSampleIsSet(true);
			}
			if (incoming.get(12)) {
				struct.isAttach = iprot.readBool();
				struct.setIsAttachIsSet(true);
			}
			if (incoming.get(13)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(14)) {
				struct.nameSku = iprot.readString();
				struct.setNameSkuIsSet(true);
			}
			if (incoming.get(15)) {
				struct.iconSku = iprot.readString();
				struct.setIconSkuIsSet(true);
			}
			if (incoming.get(16)) {
				struct.descSku = iprot.readString();
				struct.setDescSkuIsSet(true);
			}
			if (incoming.get(17)) {
				struct.weight = iprot.readDouble();
				struct.setWeightIsSet(true);
			}
			if (incoming.get(18)) {
				struct.volume = iprot.readDouble();
				struct.setVolumeIsSet(true);
			}
			if (incoming.get(19)) {
				{
					org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.labelsTxt = new java.util.ArrayList<java.lang.String>(_list29.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _elem30;
					for (int _i31 = 0; _i31 < _list29.size; ++_i31) {
						_elem30 = iprot.readString();
						struct.labelsTxt.add(_elem30);
					}
				}
				struct.setLabelsTxtIsSet(true);
			}
			if (incoming.get(20)) {
				{
					org.apache.thrift.protocol.TList _list32 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.STRING, iprot.readI32());
					struct.labelsTag = new java.util.ArrayList<java.lang.String>(_list32.size);
					@org.apache.thrift.annotation.Nullable
					java.lang.String _elem33;
					for (int _i34 = 0; _i34 < _list32.size; ++_i34) {
						_elem33 = iprot.readString();
						struct.labelsTag.add(_elem33);
					}
				}
				struct.setLabelsTagIsSet(true);
			}
			if (incoming.get(21)) {
				struct.stock = iprot.readI32();
				struct.setStockIsSet(true);
			}
			if (incoming.get(22)) {
				struct.stockInit = iprot.readI32();
				struct.setStockInitIsSet(true);
			}
			if (incoming.get(23)) {
				struct.stockOver = iprot.readI32();
				struct.setStockOverIsSet(true);
			}
			if (incoming.get(24)) {
				struct.price = iprot.readDouble();
				struct.setPriceIsSet(true);
			}
			if (incoming.get(25)) {
				struct.priceOld = iprot.readDouble();
				struct.setPriceOldIsSet(true);
			}
			if (incoming.get(26)) {
				struct.priceCost = iprot.readDouble();
				struct.setPriceCostIsSet(true);
			}
			if (incoming.get(27)) {
				struct.priceAdviceFrom = iprot.readDouble();
				struct.setPriceAdviceFromIsSet(true);
			}
			if (incoming.get(28)) {
				struct.priceAdviceTo = iprot.readDouble();
				struct.setPriceAdviceToIsSet(true);
			}
			if (incoming.get(29)) {
				{
					org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.MAP, iprot.readI32());
					struct.payMethod = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Double>>(
							_list35.size);
					@org.apache.thrift.annotation.Nullable
					java.util.Map<java.lang.String, java.lang.Double> _elem36;
					for (int _i37 = 0; _i37 < _list35.size; ++_i37) {
						{
							org.apache.thrift.protocol.TMap _map38 = new org.apache.thrift.protocol.TMap(
									org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
									iprot.readI32());
							_elem36 = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map38.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key39;
							double _val40;
							for (int _i41 = 0; _i41 < _map38.size; ++_i41) {
								_key39 = iprot.readString();
								_val40 = iprot.readDouble();
								_elem36.put(_key39, _val40);
							}
						}
						struct.payMethod.add(_elem36);
					}
				}
				struct.setPayMethodIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
