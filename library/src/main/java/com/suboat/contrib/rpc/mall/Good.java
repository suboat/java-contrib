/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.mall;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-05-11")
public class Good
		implements org.apache.thrift.TBase<Good, Good._Fields>, java.io.Serializable, Cloneable, Comparable<Good> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Good");

	private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField SID_FIELD_DESC = new org.apache.thrift.protocol.TField("sid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid",
			org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField SPU_FIELD_DESC = new org.apache.thrift.protocol.TField("spu",
			org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"label", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField IS_SAMPLE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isSample", org.apache.thrift.protocol.TType.BOOL, (short) 9);

	private static final org.apache.thrift.protocol.TField IS_ATTACH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isAttach", org.apache.thrift.protocol.TType.BOOL, (short) 10);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 11);

	private static final org.apache.thrift.protocol.TField NAME_SKU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"nameSku", org.apache.thrift.protocol.TType.STRING, (short) 12);

	private static final org.apache.thrift.protocol.TField ICON_SKU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"iconSku", org.apache.thrift.protocol.TType.STRING, (short) 13);

	private static final org.apache.thrift.protocol.TField DESC_SKU_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"descSku", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"weight", org.apache.thrift.protocol.TType.I32, (short) 15);

	private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"volume", org.apache.thrift.protocol.TType.I32, (short) 16);

	private static final org.apache.thrift.protocol.TField STOCK_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"stock", org.apache.thrift.protocol.TType.I32, (short) 17);

	private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"price", org.apache.thrift.protocol.TType.DOUBLE, (short) 18);

	private static final org.apache.thrift.protocol.TField PRICE_OLD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceOld", org.apache.thrift.protocol.TType.DOUBLE, (short) 19);

	private static final org.apache.thrift.protocol.TField PRICE_COST_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"priceCost", org.apache.thrift.protocol.TType.DOUBLE, (short) 20);

	private static final org.apache.thrift.protocol.TField PAY_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"payMethod", org.apache.thrift.protocol.TType.LIST, (short) 21);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GoodStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GoodTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String gid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String sid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String mid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String spu; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String label; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public boolean isSample; // required

	public boolean isAttach; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String nameSku; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String iconSku; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String descSku; // required

	public int weight; // required

	public int volume; // required

	public int stock; // required

	public double price; // required

	public double priceOld; // required

	public double priceCost; // required

	public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String, java.lang.Double>> payMethod; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		GID((short) 1, "gid"), SID((short) 2, "sid"), MID((short) 3, "mid"), UID((short) 4, "uid"), SPU((short) 5,
				"spu"), LABEL((short) 6, "label"), CREATE_TIME((short) 7, "createTime"), UPDATE_TIME((short) 8,
						"updateTime"), IS_SAMPLE((short) 9, "isSample"), IS_ATTACH((short) 10, "isAttach"), STATUS(
								(short) 11,
								"status"), NAME_SKU((short) 12, "nameSku"), ICON_SKU((short) 13, "iconSku"), DESC_SKU(
										(short) 14, "descSku"), WEIGHT((short) 15, "weight"), VOLUME((short) 16,
												"volume"), STOCK((short) 17, "stock"), PRICE((short) 18,
														"price"), PRICE_OLD((short) 19, "priceOld"), PRICE_COST(
																(short) 20,
																"priceCost"), PAY_METHOD((short) 21, "payMethod");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // GID
				return GID;
			case 2: // SID
				return SID;
			case 3: // MID
				return MID;
			case 4: // UID
				return UID;
			case 5: // SPU
				return SPU;
			case 6: // LABEL
				return LABEL;
			case 7: // CREATE_TIME
				return CREATE_TIME;
			case 8: // UPDATE_TIME
				return UPDATE_TIME;
			case 9: // IS_SAMPLE
				return IS_SAMPLE;
			case 10: // IS_ATTACH
				return IS_ATTACH;
			case 11: // STATUS
				return STATUS;
			case 12: // NAME_SKU
				return NAME_SKU;
			case 13: // ICON_SKU
				return ICON_SKU;
			case 14: // DESC_SKU
				return DESC_SKU;
			case 15: // WEIGHT
				return WEIGHT;
			case 16: // VOLUME
				return VOLUME;
			case 17: // STOCK
				return STOCK;
			case 18: // PRICE
				return PRICE;
			case 19: // PRICE_OLD
				return PRICE_OLD;
			case 20: // PRICE_COST
				return PRICE_COST;
			case 21: // PAY_METHOD
				return PAY_METHOD;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISSAMPLE_ISSET_ID = 0;

	private static final int __ISATTACH_ISSET_ID = 1;

	private static final int __STATUS_ISSET_ID = 2;

	private static final int __WEIGHT_ISSET_ID = 3;

	private static final int __VOLUME_ISSET_ID = 4;

	private static final int __STOCK_ISSET_ID = 5;

	private static final int __PRICE_ISSET_ID = 6;

	private static final int __PRICEOLD_ISSET_ID = 7;

	private static final int __PRICECOST_ISSET_ID = 8;

	private short __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.GID,
				new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SID,
				new org.apache.thrift.meta_data.FieldMetaData("sid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MID,
				new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.SPU,
				new org.apache.thrift.meta_data.FieldMetaData("spu", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LABEL,
				new org.apache.thrift.meta_data.FieldMetaData("label", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_SAMPLE,
				new org.apache.thrift.meta_data.FieldMetaData("isSample",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_ATTACH,
				new org.apache.thrift.meta_data.FieldMetaData("isAttach",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.NAME_SKU,
				new org.apache.thrift.meta_data.FieldMetaData("nameSku",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.ICON_SKU,
				new org.apache.thrift.meta_data.FieldMetaData("iconSku",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESC_SKU,
				new org.apache.thrift.meta_data.FieldMetaData("descSku",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.WEIGHT,
				new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.VOLUME,
				new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STOCK,
				new org.apache.thrift.meta_data.FieldMetaData("stock", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.PRICE,
				new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_OLD,
				new org.apache.thrift.meta_data.FieldMetaData("priceOld",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PRICE_COST,
				new org.apache.thrift.meta_data.FieldMetaData("priceCost",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.PAY_METHOD,
				new org.apache.thrift.meta_data.FieldMetaData("payMethod",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
								new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,
										new org.apache.thrift.meta_data.FieldValueMetaData(
												org.apache.thrift.protocol.TType.STRING),
										new org.apache.thrift.meta_data.FieldValueMetaData(
												org.apache.thrift.protocol.TType.DOUBLE)))));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Good.class, metaDataMap);
	}

	public Good() {
	}

	public Good(java.lang.String gid, java.lang.String sid, java.lang.String mid, java.lang.String uid,
			java.lang.String spu, java.lang.String label, java.lang.String createTime, java.lang.String updateTime,
			boolean isSample, boolean isAttach, int status, java.lang.String nameSku, java.lang.String iconSku,
			java.lang.String descSku, int weight, int volume, int stock, double price, double priceOld,
			double priceCost, java.util.List<java.util.Map<java.lang.String, java.lang.Double>> payMethod) {
		this();
		this.gid = gid;
		this.sid = sid;
		this.mid = mid;
		this.uid = uid;
		this.spu = spu;
		this.label = label;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.isSample = isSample;
		setIsSampleIsSet(true);
		this.isAttach = isAttach;
		setIsAttachIsSet(true);
		this.status = status;
		setStatusIsSet(true);
		this.nameSku = nameSku;
		this.iconSku = iconSku;
		this.descSku = descSku;
		this.weight = weight;
		setWeightIsSet(true);
		this.volume = volume;
		setVolumeIsSet(true);
		this.stock = stock;
		setStockIsSet(true);
		this.price = price;
		setPriceIsSet(true);
		this.priceOld = priceOld;
		setPriceOldIsSet(true);
		this.priceCost = priceCost;
		setPriceCostIsSet(true);
		this.payMethod = payMethod;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Good(Good other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetGid()) {
			this.gid = other.gid;
		}
		if (other.isSetSid()) {
			this.sid = other.sid;
		}
		if (other.isSetMid()) {
			this.mid = other.mid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetSpu()) {
			this.spu = other.spu;
		}
		if (other.isSetLabel()) {
			this.label = other.label;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.isSample = other.isSample;
		this.isAttach = other.isAttach;
		this.status = other.status;
		if (other.isSetNameSku()) {
			this.nameSku = other.nameSku;
		}
		if (other.isSetIconSku()) {
			this.iconSku = other.iconSku;
		}
		if (other.isSetDescSku()) {
			this.descSku = other.descSku;
		}
		this.weight = other.weight;
		this.volume = other.volume;
		this.stock = other.stock;
		this.price = other.price;
		this.priceOld = other.priceOld;
		this.priceCost = other.priceCost;
		if (other.isSetPayMethod()) {
			java.util.List<java.util.Map<java.lang.String, java.lang.Double>> __this__payMethod = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Double>>(
					other.payMethod.size());
			for (java.util.Map<java.lang.String, java.lang.Double> other_element : other.payMethod) {
				java.util.Map<java.lang.String, java.lang.Double> __this__payMethod_copy = new java.util.HashMap<java.lang.String, java.lang.Double>(
						other_element);
				__this__payMethod.add(__this__payMethod_copy);
			}
			this.payMethod = __this__payMethod;
		}
	}

	public Good deepCopy() {
		return new Good(this);
	}

	@Override
	public void clear() {
		this.gid = null;
		this.sid = null;
		this.mid = null;
		this.uid = null;
		this.spu = null;
		this.label = null;
		this.createTime = null;
		this.updateTime = null;
		setIsSampleIsSet(false);
		this.isSample = false;
		setIsAttachIsSet(false);
		this.isAttach = false;
		setStatusIsSet(false);
		this.status = 0;
		this.nameSku = null;
		this.iconSku = null;
		this.descSku = null;
		setWeightIsSet(false);
		this.weight = 0;
		setVolumeIsSet(false);
		this.volume = 0;
		setStockIsSet(false);
		this.stock = 0;
		setPriceIsSet(false);
		this.price = 0.0;
		setPriceOldIsSet(false);
		this.priceOld = 0.0;
		setPriceCostIsSet(false);
		this.priceCost = 0.0;
		this.payMethod = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getGid() {
		return this.gid;
	}

	public Good setGid(@org.apache.thrift.annotation.Nullable java.lang.String gid) {
		this.gid = gid;
		return this;
	}

	public void unsetGid() {
		this.gid = null;
	}

	/**
	 * Returns true if field gid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetGid() {
		return this.gid != null;
	}

	public void setGidIsSet(boolean value) {
		if (!value) {
			this.gid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSid() {
		return this.sid;
	}

	public Good setSid(@org.apache.thrift.annotation.Nullable java.lang.String sid) {
		this.sid = sid;
		return this;
	}

	public void unsetSid() {
		this.sid = null;
	}

	/**
	 * Returns true if field sid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSid() {
		return this.sid != null;
	}

	public void setSidIsSet(boolean value) {
		if (!value) {
			this.sid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getMid() {
		return this.mid;
	}

	public Good setMid(@org.apache.thrift.annotation.Nullable java.lang.String mid) {
		this.mid = mid;
		return this;
	}

	public void unsetMid() {
		this.mid = null;
	}

	/**
	 * Returns true if field mid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetMid() {
		return this.mid != null;
	}

	public void setMidIsSet(boolean value) {
		if (!value) {
			this.mid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public Good setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSpu() {
		return this.spu;
	}

	public Good setSpu(@org.apache.thrift.annotation.Nullable java.lang.String spu) {
		this.spu = spu;
		return this;
	}

	public void unsetSpu() {
		this.spu = null;
	}

	/**
	 * Returns true if field spu is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetSpu() {
		return this.spu != null;
	}

	public void setSpuIsSet(boolean value) {
		if (!value) {
			this.spu = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getLabel() {
		return this.label;
	}

	public Good setLabel(@org.apache.thrift.annotation.Nullable java.lang.String label) {
		this.label = label;
		return this;
	}

	public void unsetLabel() {
		this.label = null;
	}

	/**
	 * Returns true if field label is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetLabel() {
		return this.label != null;
	}

	public void setLabelIsSet(boolean value) {
		if (!value) {
			this.label = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Good setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Good setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public boolean isIsSample() {
		return this.isSample;
	}

	public Good setIsSample(boolean isSample) {
		this.isSample = isSample;
		setIsSampleIsSet(true);
		return this;
	}

	public void unsetIsSample() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSAMPLE_ISSET_ID);
	}

	/**
	 * Returns true if field isSample is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsSample() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSAMPLE_ISSET_ID);
	}

	public void setIsSampleIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSAMPLE_ISSET_ID, value);
	}

	public boolean isIsAttach() {
		return this.isAttach;
	}

	public Good setIsAttach(boolean isAttach) {
		this.isAttach = isAttach;
		setIsAttachIsSet(true);
		return this;
	}

	public void unsetIsAttach() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISATTACH_ISSET_ID);
	}

	/**
	 * Returns true if field isAttach is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsAttach() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISATTACH_ISSET_ID);
	}

	public void setIsAttachIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISATTACH_ISSET_ID, value);
	}

	public int getStatus() {
		return this.status;
	}

	public Good setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getNameSku() {
		return this.nameSku;
	}

	public Good setNameSku(@org.apache.thrift.annotation.Nullable java.lang.String nameSku) {
		this.nameSku = nameSku;
		return this;
	}

	public void unsetNameSku() {
		this.nameSku = null;
	}

	/**
	 * Returns true if field nameSku is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNameSku() {
		return this.nameSku != null;
	}

	public void setNameSkuIsSet(boolean value) {
		if (!value) {
			this.nameSku = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIconSku() {
		return this.iconSku;
	}

	public Good setIconSku(@org.apache.thrift.annotation.Nullable java.lang.String iconSku) {
		this.iconSku = iconSku;
		return this;
	}

	public void unsetIconSku() {
		this.iconSku = null;
	}

	/**
	 * Returns true if field iconSku is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIconSku() {
		return this.iconSku != null;
	}

	public void setIconSkuIsSet(boolean value) {
		if (!value) {
			this.iconSku = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getDescSku() {
		return this.descSku;
	}

	public Good setDescSku(@org.apache.thrift.annotation.Nullable java.lang.String descSku) {
		this.descSku = descSku;
		return this;
	}

	public void unsetDescSku() {
		this.descSku = null;
	}

	/**
	 * Returns true if field descSku is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetDescSku() {
		return this.descSku != null;
	}

	public void setDescSkuIsSet(boolean value) {
		if (!value) {
			this.descSku = null;
		}
	}

	public int getWeight() {
		return this.weight;
	}

	public Good setWeight(int weight) {
		this.weight = weight;
		setWeightIsSet(true);
		return this;
	}

	public void unsetWeight() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
	}

	/**
	 * Returns true if field weight is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetWeight() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
	}

	public void setWeightIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
	}

	public int getVolume() {
		return this.volume;
	}

	public Good setVolume(int volume) {
		this.volume = volume;
		setVolumeIsSet(true);
		return this;
	}

	public void unsetVolume() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
	}

	/**
	 * Returns true if field volume is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetVolume() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
	}

	public void setVolumeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
	}

	public int getStock() {
		return this.stock;
	}

	public Good setStock(int stock) {
		this.stock = stock;
		setStockIsSet(true);
		return this;
	}

	public void unsetStock() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STOCK_ISSET_ID);
	}

	/**
	 * Returns true if field stock is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStock() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STOCK_ISSET_ID);
	}

	public void setStockIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STOCK_ISSET_ID, value);
	}

	public double getPrice() {
		return this.price;
	}

	public Good setPrice(double price) {
		this.price = price;
		setPriceIsSet(true);
		return this;
	}

	public void unsetPrice() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
	}

	/**
	 * Returns true if field price is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetPrice() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
	}

	public void setPriceIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
	}

	public double getPriceOld() {
		return this.priceOld;
	}

	public Good setPriceOld(double priceOld) {
		this.priceOld = priceOld;
		setPriceOldIsSet(true);
		return this;
	}

	public void unsetPriceOld() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICEOLD_ISSET_ID);
	}

	/**
	 * Returns true if field priceOld is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceOld() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICEOLD_ISSET_ID);
	}

	public void setPriceOldIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICEOLD_ISSET_ID, value);
	}

	public double getPriceCost() {
		return this.priceCost;
	}

	public Good setPriceCost(double priceCost) {
		this.priceCost = priceCost;
		setPriceCostIsSet(true);
		return this;
	}

	public void unsetPriceCost() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICECOST_ISSET_ID);
	}

	/**
	 * Returns true if field priceCost is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPriceCost() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICECOST_ISSET_ID);
	}

	public void setPriceCostIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICECOST_ISSET_ID, value);
	}

	public int getPayMethodSize() {
		return (this.payMethod == null) ? 0 : this.payMethod.size();
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.Iterator<java.util.Map<java.lang.String, java.lang.Double>> getPayMethodIterator() {
		return (this.payMethod == null) ? null : this.payMethod.iterator();
	}

	public void addToPayMethod(java.util.Map<java.lang.String, java.lang.Double> elem) {
		if (this.payMethod == null) {
			this.payMethod = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Double>>();
		}
		this.payMethod.add(elem);
	}

	@org.apache.thrift.annotation.Nullable
	public java.util.List<java.util.Map<java.lang.String, java.lang.Double>> getPayMethod() {
		return this.payMethod;
	}

	public Good setPayMethod(
			@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.String, java.lang.Double>> payMethod) {
		this.payMethod = payMethod;
		return this;
	}

	public void unsetPayMethod() {
		this.payMethod = null;
	}

	/**
	 * Returns true if field payMethod is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetPayMethod() {
		return this.payMethod != null;
	}

	public void setPayMethodIsSet(boolean value) {
		if (!value) {
			this.payMethod = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case GID:
			if (value == null) {
				unsetGid();
			}
			else {
				setGid((java.lang.String) value);
			}
			break;

		case SID:
			if (value == null) {
				unsetSid();
			}
			else {
				setSid((java.lang.String) value);
			}
			break;

		case MID:
			if (value == null) {
				unsetMid();
			}
			else {
				setMid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case SPU:
			if (value == null) {
				unsetSpu();
			}
			else {
				setSpu((java.lang.String) value);
			}
			break;

		case LABEL:
			if (value == null) {
				unsetLabel();
			}
			else {
				setLabel((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case IS_SAMPLE:
			if (value == null) {
				unsetIsSample();
			}
			else {
				setIsSample((java.lang.Boolean) value);
			}
			break;

		case IS_ATTACH:
			if (value == null) {
				unsetIsAttach();
			}
			else {
				setIsAttach((java.lang.Boolean) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case NAME_SKU:
			if (value == null) {
				unsetNameSku();
			}
			else {
				setNameSku((java.lang.String) value);
			}
			break;

		case ICON_SKU:
			if (value == null) {
				unsetIconSku();
			}
			else {
				setIconSku((java.lang.String) value);
			}
			break;

		case DESC_SKU:
			if (value == null) {
				unsetDescSku();
			}
			else {
				setDescSku((java.lang.String) value);
			}
			break;

		case WEIGHT:
			if (value == null) {
				unsetWeight();
			}
			else {
				setWeight((java.lang.Integer) value);
			}
			break;

		case VOLUME:
			if (value == null) {
				unsetVolume();
			}
			else {
				setVolume((java.lang.Integer) value);
			}
			break;

		case STOCK:
			if (value == null) {
				unsetStock();
			}
			else {
				setStock((java.lang.Integer) value);
			}
			break;

		case PRICE:
			if (value == null) {
				unsetPrice();
			}
			else {
				setPrice((java.lang.Double) value);
			}
			break;

		case PRICE_OLD:
			if (value == null) {
				unsetPriceOld();
			}
			else {
				setPriceOld((java.lang.Double) value);
			}
			break;

		case PRICE_COST:
			if (value == null) {
				unsetPriceCost();
			}
			else {
				setPriceCost((java.lang.Double) value);
			}
			break;

		case PAY_METHOD:
			if (value == null) {
				unsetPayMethod();
			}
			else {
				setPayMethod((java.util.List<java.util.Map<java.lang.String, java.lang.Double>>) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case GID:
			return getGid();

		case SID:
			return getSid();

		case MID:
			return getMid();

		case UID:
			return getUid();

		case SPU:
			return getSpu();

		case LABEL:
			return getLabel();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case IS_SAMPLE:
			return isIsSample();

		case IS_ATTACH:
			return isIsAttach();

		case STATUS:
			return getStatus();

		case NAME_SKU:
			return getNameSku();

		case ICON_SKU:
			return getIconSku();

		case DESC_SKU:
			return getDescSku();

		case WEIGHT:
			return getWeight();

		case VOLUME:
			return getVolume();

		case STOCK:
			return getStock();

		case PRICE:
			return getPrice();

		case PRICE_OLD:
			return getPriceOld();

		case PRICE_COST:
			return getPriceCost();

		case PAY_METHOD:
			return getPayMethod();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case GID:
			return isSetGid();
		case SID:
			return isSetSid();
		case MID:
			return isSetMid();
		case UID:
			return isSetUid();
		case SPU:
			return isSetSpu();
		case LABEL:
			return isSetLabel();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case IS_SAMPLE:
			return isSetIsSample();
		case IS_ATTACH:
			return isSetIsAttach();
		case STATUS:
			return isSetStatus();
		case NAME_SKU:
			return isSetNameSku();
		case ICON_SKU:
			return isSetIconSku();
		case DESC_SKU:
			return isSetDescSku();
		case WEIGHT:
			return isSetWeight();
		case VOLUME:
			return isSetVolume();
		case STOCK:
			return isSetStock();
		case PRICE:
			return isSetPrice();
		case PRICE_OLD:
			return isSetPriceOld();
		case PRICE_COST:
			return isSetPriceCost();
		case PAY_METHOD:
			return isSetPayMethod();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Good)
			return this.equals((Good) that);
		return false;
	}

	public boolean equals(Good that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_gid = true && this.isSetGid();
		boolean that_present_gid = true && that.isSetGid();
		if (this_present_gid || that_present_gid) {
			if (!(this_present_gid && that_present_gid))
				return false;
			if (!this.gid.equals(that.gid))
				return false;
		}

		boolean this_present_sid = true && this.isSetSid();
		boolean that_present_sid = true && that.isSetSid();
		if (this_present_sid || that_present_sid) {
			if (!(this_present_sid && that_present_sid))
				return false;
			if (!this.sid.equals(that.sid))
				return false;
		}

		boolean this_present_mid = true && this.isSetMid();
		boolean that_present_mid = true && that.isSetMid();
		if (this_present_mid || that_present_mid) {
			if (!(this_present_mid && that_present_mid))
				return false;
			if (!this.mid.equals(that.mid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_spu = true && this.isSetSpu();
		boolean that_present_spu = true && that.isSetSpu();
		if (this_present_spu || that_present_spu) {
			if (!(this_present_spu && that_present_spu))
				return false;
			if (!this.spu.equals(that.spu))
				return false;
		}

		boolean this_present_label = true && this.isSetLabel();
		boolean that_present_label = true && that.isSetLabel();
		if (this_present_label || that_present_label) {
			if (!(this_present_label && that_present_label))
				return false;
			if (!this.label.equals(that.label))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_isSample = true;
		boolean that_present_isSample = true;
		if (this_present_isSample || that_present_isSample) {
			if (!(this_present_isSample && that_present_isSample))
				return false;
			if (this.isSample != that.isSample)
				return false;
		}

		boolean this_present_isAttach = true;
		boolean that_present_isAttach = true;
		if (this_present_isAttach || that_present_isAttach) {
			if (!(this_present_isAttach && that_present_isAttach))
				return false;
			if (this.isAttach != that.isAttach)
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_nameSku = true && this.isSetNameSku();
		boolean that_present_nameSku = true && that.isSetNameSku();
		if (this_present_nameSku || that_present_nameSku) {
			if (!(this_present_nameSku && that_present_nameSku))
				return false;
			if (!this.nameSku.equals(that.nameSku))
				return false;
		}

		boolean this_present_iconSku = true && this.isSetIconSku();
		boolean that_present_iconSku = true && that.isSetIconSku();
		if (this_present_iconSku || that_present_iconSku) {
			if (!(this_present_iconSku && that_present_iconSku))
				return false;
			if (!this.iconSku.equals(that.iconSku))
				return false;
		}

		boolean this_present_descSku = true && this.isSetDescSku();
		boolean that_present_descSku = true && that.isSetDescSku();
		if (this_present_descSku || that_present_descSku) {
			if (!(this_present_descSku && that_present_descSku))
				return false;
			if (!this.descSku.equals(that.descSku))
				return false;
		}

		boolean this_present_weight = true;
		boolean that_present_weight = true;
		if (this_present_weight || that_present_weight) {
			if (!(this_present_weight && that_present_weight))
				return false;
			if (this.weight != that.weight)
				return false;
		}

		boolean this_present_volume = true;
		boolean that_present_volume = true;
		if (this_present_volume || that_present_volume) {
			if (!(this_present_volume && that_present_volume))
				return false;
			if (this.volume != that.volume)
				return false;
		}

		boolean this_present_stock = true;
		boolean that_present_stock = true;
		if (this_present_stock || that_present_stock) {
			if (!(this_present_stock && that_present_stock))
				return false;
			if (this.stock != that.stock)
				return false;
		}

		boolean this_present_price = true;
		boolean that_present_price = true;
		if (this_present_price || that_present_price) {
			if (!(this_present_price && that_present_price))
				return false;
			if (this.price != that.price)
				return false;
		}

		boolean this_present_priceOld = true;
		boolean that_present_priceOld = true;
		if (this_present_priceOld || that_present_priceOld) {
			if (!(this_present_priceOld && that_present_priceOld))
				return false;
			if (this.priceOld != that.priceOld)
				return false;
		}

		boolean this_present_priceCost = true;
		boolean that_present_priceCost = true;
		if (this_present_priceCost || that_present_priceCost) {
			if (!(this_present_priceCost && that_present_priceCost))
				return false;
			if (this.priceCost != that.priceCost)
				return false;
		}

		boolean this_present_payMethod = true && this.isSetPayMethod();
		boolean that_present_payMethod = true && that.isSetPayMethod();
		if (this_present_payMethod || that_present_payMethod) {
			if (!(this_present_payMethod && that_present_payMethod))
				return false;
			if (!this.payMethod.equals(that.payMethod))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetGid()) ? 131071 : 524287);
		if (isSetGid())
			hashCode = hashCode * 8191 + gid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSid()) ? 131071 : 524287);
		if (isSetSid())
			hashCode = hashCode * 8191 + sid.hashCode();

		hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
		if (isSetMid())
			hashCode = hashCode * 8191 + mid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetSpu()) ? 131071 : 524287);
		if (isSetSpu())
			hashCode = hashCode * 8191 + spu.hashCode();

		hashCode = hashCode * 8191 + ((isSetLabel()) ? 131071 : 524287);
		if (isSetLabel())
			hashCode = hashCode * 8191 + label.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isSample) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isAttach) ? 131071 : 524287);

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetNameSku()) ? 131071 : 524287);
		if (isSetNameSku())
			hashCode = hashCode * 8191 + nameSku.hashCode();

		hashCode = hashCode * 8191 + ((isSetIconSku()) ? 131071 : 524287);
		if (isSetIconSku())
			hashCode = hashCode * 8191 + iconSku.hashCode();

		hashCode = hashCode * 8191 + ((isSetDescSku()) ? 131071 : 524287);
		if (isSetDescSku())
			hashCode = hashCode * 8191 + descSku.hashCode();

		hashCode = hashCode * 8191 + weight;

		hashCode = hashCode * 8191 + volume;

		hashCode = hashCode * 8191 + stock;

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(price);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceOld);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(priceCost);

		hashCode = hashCode * 8191 + ((isSetPayMethod()) ? 131071 : 524287);
		if (isSetPayMethod())
			hashCode = hashCode * 8191 + payMethod.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(Good other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, other.gid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSid()).compareTo(other.isSetSid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sid, other.sid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSpu()).compareTo(other.isSetSpu());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSpu()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spu, other.spu);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLabel()).compareTo(other.isSetLabel());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLabel()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.label, other.label);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsSample()).compareTo(other.isSetIsSample());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsSample()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSample, other.isSample);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsAttach()).compareTo(other.isSetIsAttach());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsAttach()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAttach, other.isAttach);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNameSku()).compareTo(other.isSetNameSku());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNameSku()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameSku, other.nameSku);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIconSku()).compareTo(other.isSetIconSku());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIconSku()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iconSku, other.iconSku);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetDescSku()).compareTo(other.isSetDescSku());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDescSku()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.descSku, other.descSku);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetWeight()).compareTo(other.isSetWeight());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetWeight()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetVolume()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStock()).compareTo(other.isSetStock());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStock()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stock, other.stock);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPrice()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceOld()).compareTo(other.isSetPriceOld());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceOld()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceOld, other.priceOld);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPriceCost()).compareTo(other.isSetPriceCost());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPriceCost()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceCost, other.priceCost);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetPayMethod()).compareTo(other.isSetPayMethod());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetPayMethod()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMethod, other.payMethod);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Good(");
		boolean first = true;

		sb.append("gid:");
		if (this.gid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.gid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("sid:");
		if (this.sid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.sid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("mid:");
		if (this.mid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.mid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("spu:");
		if (this.spu == null) {
			sb.append("null");
		}
		else {
			sb.append(this.spu);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("label:");
		if (this.label == null) {
			sb.append("null");
		}
		else {
			sb.append(this.label);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isSample:");
		sb.append(this.isSample);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isAttach:");
		sb.append(this.isAttach);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("nameSku:");
		if (this.nameSku == null) {
			sb.append("null");
		}
		else {
			sb.append(this.nameSku);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("iconSku:");
		if (this.iconSku == null) {
			sb.append("null");
		}
		else {
			sb.append(this.iconSku);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("descSku:");
		if (this.descSku == null) {
			sb.append("null");
		}
		else {
			sb.append(this.descSku);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("weight:");
		sb.append(this.weight);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("volume:");
		sb.append(this.volume);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("stock:");
		sb.append(this.stock);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("price:");
		sb.append(this.price);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceOld:");
		sb.append(this.priceOld);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("priceCost:");
		sb.append(this.priceCost);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("payMethod:");
		if (this.payMethod == null) {
			sb.append("null");
		}
		else {
			sb.append(this.payMethod);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class GoodStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public GoodStandardScheme getScheme() {
			return new GoodStandardScheme();
		}

	}

	private static class GoodStandardScheme extends org.apache.thrift.scheme.StandardScheme<Good> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Good struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // GID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.gid = iprot.readString();
						struct.setGidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // SID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.sid = iprot.readString();
						struct.setSidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // MID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.mid = iprot.readString();
						struct.setMidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // SPU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.spu = iprot.readString();
						struct.setSpuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // LABEL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.label = iprot.readString();
						struct.setLabelIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // IS_SAMPLE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isSample = iprot.readBool();
						struct.setIsSampleIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // IS_ATTACH
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isAttach = iprot.readBool();
						struct.setIsAttachIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // NAME_SKU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.nameSku = iprot.readString();
						struct.setNameSkuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // ICON_SKU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.iconSku = iprot.readString();
						struct.setIconSkuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // DESC_SKU
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.descSku = iprot.readString();
						struct.setDescSkuIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // WEIGHT
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.weight = iprot.readI32();
						struct.setWeightIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // VOLUME
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.volume = iprot.readI32();
						struct.setVolumeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // STOCK
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.stock = iprot.readI32();
						struct.setStockIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // PRICE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.price = iprot.readDouble();
						struct.setPriceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // PRICE_OLD
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceOld = iprot.readDouble();
						struct.setPriceOldIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // PRICE_COST
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.priceCost = iprot.readDouble();
						struct.setPriceCostIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // PAY_METHOD
					if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
						{
							org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
							struct.payMethod = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Double>>(
									_list0.size);
							@org.apache.thrift.annotation.Nullable
							java.util.Map<java.lang.String, java.lang.Double> _elem1;
							for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
								{
									org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
									_elem1 = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map3.size);
									@org.apache.thrift.annotation.Nullable
									java.lang.String _key4;
									double _val5;
									for (int _i6 = 0; _i6 < _map3.size; ++_i6) {
										_key4 = iprot.readString();
										_val5 = iprot.readDouble();
										_elem1.put(_key4, _val5);
									}
									iprot.readMapEnd();
								}
								struct.payMethod.add(_elem1);
							}
							iprot.readListEnd();
						}
						struct.setPayMethodIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Good struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.gid != null) {
				oprot.writeFieldBegin(GID_FIELD_DESC);
				oprot.writeString(struct.gid);
				oprot.writeFieldEnd();
			}
			if (struct.sid != null) {
				oprot.writeFieldBegin(SID_FIELD_DESC);
				oprot.writeString(struct.sid);
				oprot.writeFieldEnd();
			}
			if (struct.mid != null) {
				oprot.writeFieldBegin(MID_FIELD_DESC);
				oprot.writeString(struct.mid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.spu != null) {
				oprot.writeFieldBegin(SPU_FIELD_DESC);
				oprot.writeString(struct.spu);
				oprot.writeFieldEnd();
			}
			if (struct.label != null) {
				oprot.writeFieldBegin(LABEL_FIELD_DESC);
				oprot.writeString(struct.label);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_SAMPLE_FIELD_DESC);
			oprot.writeBool(struct.isSample);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_ATTACH_FIELD_DESC);
			oprot.writeBool(struct.isAttach);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.nameSku != null) {
				oprot.writeFieldBegin(NAME_SKU_FIELD_DESC);
				oprot.writeString(struct.nameSku);
				oprot.writeFieldEnd();
			}
			if (struct.iconSku != null) {
				oprot.writeFieldBegin(ICON_SKU_FIELD_DESC);
				oprot.writeString(struct.iconSku);
				oprot.writeFieldEnd();
			}
			if (struct.descSku != null) {
				oprot.writeFieldBegin(DESC_SKU_FIELD_DESC);
				oprot.writeString(struct.descSku);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
			oprot.writeI32(struct.weight);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(VOLUME_FIELD_DESC);
			oprot.writeI32(struct.volume);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(STOCK_FIELD_DESC);
			oprot.writeI32(struct.stock);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_FIELD_DESC);
			oprot.writeDouble(struct.price);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_OLD_FIELD_DESC);
			oprot.writeDouble(struct.priceOld);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(PRICE_COST_FIELD_DESC);
			oprot.writeDouble(struct.priceCost);
			oprot.writeFieldEnd();
			if (struct.payMethod != null) {
				oprot.writeFieldBegin(PAY_METHOD_FIELD_DESC);
				{
					oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP,
							struct.payMethod.size()));
					for (java.util.Map<java.lang.String, java.lang.Double> _iter7 : struct.payMethod) {
						{
							oprot.writeMapBegin(
									new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,
											org.apache.thrift.protocol.TType.DOUBLE, _iter7.size()));
							for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter8 : _iter7.entrySet()) {
								oprot.writeString(_iter8.getKey());
								oprot.writeDouble(_iter8.getValue());
							}
							oprot.writeMapEnd();
						}
					}
					oprot.writeListEnd();
				}
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class GoodTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public GoodTupleScheme getScheme() {
			return new GoodTupleScheme();
		}

	}

	private static class GoodTupleScheme extends org.apache.thrift.scheme.TupleScheme<Good> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Good struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetGid()) {
				optionals.set(0);
			}
			if (struct.isSetSid()) {
				optionals.set(1);
			}
			if (struct.isSetMid()) {
				optionals.set(2);
			}
			if (struct.isSetUid()) {
				optionals.set(3);
			}
			if (struct.isSetSpu()) {
				optionals.set(4);
			}
			if (struct.isSetLabel()) {
				optionals.set(5);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(6);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(7);
			}
			if (struct.isSetIsSample()) {
				optionals.set(8);
			}
			if (struct.isSetIsAttach()) {
				optionals.set(9);
			}
			if (struct.isSetStatus()) {
				optionals.set(10);
			}
			if (struct.isSetNameSku()) {
				optionals.set(11);
			}
			if (struct.isSetIconSku()) {
				optionals.set(12);
			}
			if (struct.isSetDescSku()) {
				optionals.set(13);
			}
			if (struct.isSetWeight()) {
				optionals.set(14);
			}
			if (struct.isSetVolume()) {
				optionals.set(15);
			}
			if (struct.isSetStock()) {
				optionals.set(16);
			}
			if (struct.isSetPrice()) {
				optionals.set(17);
			}
			if (struct.isSetPriceOld()) {
				optionals.set(18);
			}
			if (struct.isSetPriceCost()) {
				optionals.set(19);
			}
			if (struct.isSetPayMethod()) {
				optionals.set(20);
			}
			oprot.writeBitSet(optionals, 21);
			if (struct.isSetGid()) {
				oprot.writeString(struct.gid);
			}
			if (struct.isSetSid()) {
				oprot.writeString(struct.sid);
			}
			if (struct.isSetMid()) {
				oprot.writeString(struct.mid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetSpu()) {
				oprot.writeString(struct.spu);
			}
			if (struct.isSetLabel()) {
				oprot.writeString(struct.label);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetIsSample()) {
				oprot.writeBool(struct.isSample);
			}
			if (struct.isSetIsAttach()) {
				oprot.writeBool(struct.isAttach);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetNameSku()) {
				oprot.writeString(struct.nameSku);
			}
			if (struct.isSetIconSku()) {
				oprot.writeString(struct.iconSku);
			}
			if (struct.isSetDescSku()) {
				oprot.writeString(struct.descSku);
			}
			if (struct.isSetWeight()) {
				oprot.writeI32(struct.weight);
			}
			if (struct.isSetVolume()) {
				oprot.writeI32(struct.volume);
			}
			if (struct.isSetStock()) {
				oprot.writeI32(struct.stock);
			}
			if (struct.isSetPrice()) {
				oprot.writeDouble(struct.price);
			}
			if (struct.isSetPriceOld()) {
				oprot.writeDouble(struct.priceOld);
			}
			if (struct.isSetPriceCost()) {
				oprot.writeDouble(struct.priceCost);
			}
			if (struct.isSetPayMethod()) {
				{
					oprot.writeI32(struct.payMethod.size());
					for (java.util.Map<java.lang.String, java.lang.Double> _iter9 : struct.payMethod) {
						{
							oprot.writeI32(_iter9.size());
							for (java.util.Map.Entry<java.lang.String, java.lang.Double> _iter10 : _iter9.entrySet()) {
								oprot.writeString(_iter10.getKey());
								oprot.writeDouble(_iter10.getValue());
							}
						}
					}
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Good struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(21);
			if (incoming.get(0)) {
				struct.gid = iprot.readString();
				struct.setGidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.sid = iprot.readString();
				struct.setSidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.mid = iprot.readString();
				struct.setMidIsSet(true);
			}
			if (incoming.get(3)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(4)) {
				struct.spu = iprot.readString();
				struct.setSpuIsSet(true);
			}
			if (incoming.get(5)) {
				struct.label = iprot.readString();
				struct.setLabelIsSet(true);
			}
			if (incoming.get(6)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(8)) {
				struct.isSample = iprot.readBool();
				struct.setIsSampleIsSet(true);
			}
			if (incoming.get(9)) {
				struct.isAttach = iprot.readBool();
				struct.setIsAttachIsSet(true);
			}
			if (incoming.get(10)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(11)) {
				struct.nameSku = iprot.readString();
				struct.setNameSkuIsSet(true);
			}
			if (incoming.get(12)) {
				struct.iconSku = iprot.readString();
				struct.setIconSkuIsSet(true);
			}
			if (incoming.get(13)) {
				struct.descSku = iprot.readString();
				struct.setDescSkuIsSet(true);
			}
			if (incoming.get(14)) {
				struct.weight = iprot.readI32();
				struct.setWeightIsSet(true);
			}
			if (incoming.get(15)) {
				struct.volume = iprot.readI32();
				struct.setVolumeIsSet(true);
			}
			if (incoming.get(16)) {
				struct.stock = iprot.readI32();
				struct.setStockIsSet(true);
			}
			if (incoming.get(17)) {
				struct.price = iprot.readDouble();
				struct.setPriceIsSet(true);
			}
			if (incoming.get(18)) {
				struct.priceOld = iprot.readDouble();
				struct.setPriceOldIsSet(true);
			}
			if (incoming.get(19)) {
				struct.priceCost = iprot.readDouble();
				struct.setPriceCostIsSet(true);
			}
			if (incoming.get(20)) {
				{
					org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(
							org.apache.thrift.protocol.TType.MAP, iprot.readI32());
					struct.payMethod = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Double>>(
							_list11.size);
					@org.apache.thrift.annotation.Nullable
					java.util.Map<java.lang.String, java.lang.Double> _elem12;
					for (int _i13 = 0; _i13 < _list11.size; ++_i13) {
						{
							org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(
									org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE,
									iprot.readI32());
							_elem12 = new java.util.HashMap<java.lang.String, java.lang.Double>(2 * _map14.size);
							@org.apache.thrift.annotation.Nullable
							java.lang.String _key15;
							double _val16;
							for (int _i17 = 0; _i17 < _map14.size; ++_i17) {
								_key15 = iprot.readString();
								_val16 = iprot.readDouble();
								_elem12.put(_key15, _val16);
							}
						}
						struct.payMethod.add(_elem12);
					}
				}
				struct.setPayMethodIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
