/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.msg;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class Organize implements org.apache.thrift.TBase<Organize, Organize._Fields>, java.io.Serializable, Cloneable,
		Comparable<Organize> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"Organize");

	private static final org.apache.thrift.protocol.TField OID_FIELD_DESC = new org.apache.thrift.protocol.TField("oid",
			org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField UID_CREATE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"uidCreate", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"name", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 7);

	private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"icon", org.apache.thrift.protocol.TType.STRING, (short) 8);

	private static final org.apache.thrift.protocol.TField NUM_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"numMember", org.apache.thrift.protocol.TType.I32, (short) 9);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OrganizeStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OrganizeTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String oid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uidCreate; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String name; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String icon; // required

	public int numMember; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		OID((short) 1, "oid"), UID((short) 2, "uid"), UID_CREATE((short) 3, "uidCreate"), NAME((short) 4,
				"name"), CREATE_TIME((short) 5, "createTime"), UPDATE_TIME((short) 6, "updateTime"), STATUS((short) 7,
						"status"), ICON((short) 8, "icon"), NUM_MEMBER((short) 9, "numMember");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // OID
				return OID;
			case 2: // UID
				return UID;
			case 3: // UID_CREATE
				return UID_CREATE;
			case 4: // NAME
				return NAME;
			case 5: // CREATE_TIME
				return CREATE_TIME;
			case 6: // UPDATE_TIME
				return UPDATE_TIME;
			case 7: // STATUS
				return STATUS;
			case 8: // ICON
				return ICON;
			case 9: // NUM_MEMBER
				return NUM_MEMBER;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __STATUS_ISSET_ID = 0;

	private static final int __NUMMEMBER_ISSET_ID = 1;

	private byte __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.OID,
				new org.apache.thrift.meta_data.FieldMetaData("oid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID_CREATE,
				new org.apache.thrift.meta_data.FieldMetaData("uidCreate",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NAME,
				new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ICON,
				new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NUM_MEMBER,
				new org.apache.thrift.meta_data.FieldMetaData("numMember",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Organize.class, metaDataMap);
	}

	public Organize() {
	}

	public Organize(java.lang.String oid, java.lang.String uid, java.lang.String uidCreate, java.lang.String name,
			java.lang.String createTime, java.lang.String updateTime, int status, java.lang.String icon,
			int numMember) {
		this();
		this.oid = oid;
		this.uid = uid;
		this.uidCreate = uidCreate;
		this.name = name;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.status = status;
		setStatusIsSet(true);
		this.icon = icon;
		this.numMember = numMember;
		setNumMemberIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public Organize(Organize other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetOid()) {
			this.oid = other.oid;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetUidCreate()) {
			this.uidCreate = other.uidCreate;
		}
		if (other.isSetName()) {
			this.name = other.name;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.status = other.status;
		if (other.isSetIcon()) {
			this.icon = other.icon;
		}
		this.numMember = other.numMember;
	}

	public Organize deepCopy() {
		return new Organize(this);
	}

	@Override
	public void clear() {
		this.oid = null;
		this.uid = null;
		this.uidCreate = null;
		this.name = null;
		this.createTime = null;
		this.updateTime = null;
		setStatusIsSet(false);
		this.status = 0;
		this.icon = null;
		setNumMemberIsSet(false);
		this.numMember = 0;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getOid() {
		return this.oid;
	}

	public Organize setOid(@org.apache.thrift.annotation.Nullable java.lang.String oid) {
		this.oid = oid;
		return this;
	}

	public void unsetOid() {
		this.oid = null;
	}

	/**
	 * Returns true if field oid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetOid() {
		return this.oid != null;
	}

	public void setOidIsSet(boolean value) {
		if (!value) {
			this.oid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public Organize setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUidCreate() {
		return this.uidCreate;
	}

	public Organize setUidCreate(@org.apache.thrift.annotation.Nullable java.lang.String uidCreate) {
		this.uidCreate = uidCreate;
		return this;
	}

	public void unsetUidCreate() {
		this.uidCreate = null;
	}

	/**
	 * Returns true if field uidCreate is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUidCreate() {
		return this.uidCreate != null;
	}

	public void setUidCreateIsSet(boolean value) {
		if (!value) {
			this.uidCreate = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getName() {
		return this.name;
	}

	public Organize setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
		this.name = name;
		return this;
	}

	public void unsetName() {
		this.name = null;
	}

	/**
	 * Returns true if field name is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetName() {
		return this.name != null;
	}

	public void setNameIsSet(boolean value) {
		if (!value) {
			this.name = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public Organize setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public Organize setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public Organize setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getIcon() {
		return this.icon;
	}

	public Organize setIcon(@org.apache.thrift.annotation.Nullable java.lang.String icon) {
		this.icon = icon;
		return this;
	}

	public void unsetIcon() {
		this.icon = null;
	}

	/**
	 * Returns true if field icon is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIcon() {
		return this.icon != null;
	}

	public void setIconIsSet(boolean value) {
		if (!value) {
			this.icon = null;
		}
	}

	public int getNumMember() {
		return this.numMember;
	}

	public Organize setNumMember(int numMember) {
		this.numMember = numMember;
		setNumMemberIsSet(true);
		return this;
	}

	public void unsetNumMember() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMMEMBER_ISSET_ID);
	}

	/**
	 * Returns true if field numMember is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetNumMember() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMMEMBER_ISSET_ID);
	}

	public void setNumMemberIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMMEMBER_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case OID:
			if (value == null) {
				unsetOid();
			}
			else {
				setOid((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case UID_CREATE:
			if (value == null) {
				unsetUidCreate();
			}
			else {
				setUidCreate((java.lang.String) value);
			}
			break;

		case NAME:
			if (value == null) {
				unsetName();
			}
			else {
				setName((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case ICON:
			if (value == null) {
				unsetIcon();
			}
			else {
				setIcon((java.lang.String) value);
			}
			break;

		case NUM_MEMBER:
			if (value == null) {
				unsetNumMember();
			}
			else {
				setNumMember((java.lang.Integer) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case OID:
			return getOid();

		case UID:
			return getUid();

		case UID_CREATE:
			return getUidCreate();

		case NAME:
			return getName();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case STATUS:
			return getStatus();

		case ICON:
			return getIcon();

		case NUM_MEMBER:
			return getNumMember();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case OID:
			return isSetOid();
		case UID:
			return isSetUid();
		case UID_CREATE:
			return isSetUidCreate();
		case NAME:
			return isSetName();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case STATUS:
			return isSetStatus();
		case ICON:
			return isSetIcon();
		case NUM_MEMBER:
			return isSetNumMember();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof Organize)
			return this.equals((Organize) that);
		return false;
	}

	public boolean equals(Organize that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_oid = true && this.isSetOid();
		boolean that_present_oid = true && that.isSetOid();
		if (this_present_oid || that_present_oid) {
			if (!(this_present_oid && that_present_oid))
				return false;
			if (!this.oid.equals(that.oid))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_uidCreate = true && this.isSetUidCreate();
		boolean that_present_uidCreate = true && that.isSetUidCreate();
		if (this_present_uidCreate || that_present_uidCreate) {
			if (!(this_present_uidCreate && that_present_uidCreate))
				return false;
			if (!this.uidCreate.equals(that.uidCreate))
				return false;
		}

		boolean this_present_name = true && this.isSetName();
		boolean that_present_name = true && that.isSetName();
		if (this_present_name || that_present_name) {
			if (!(this_present_name && that_present_name))
				return false;
			if (!this.name.equals(that.name))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_icon = true && this.isSetIcon();
		boolean that_present_icon = true && that.isSetIcon();
		if (this_present_icon || that_present_icon) {
			if (!(this_present_icon && that_present_icon))
				return false;
			if (!this.icon.equals(that.icon))
				return false;
		}

		boolean this_present_numMember = true;
		boolean that_present_numMember = true;
		if (this_present_numMember || that_present_numMember) {
			if (!(this_present_numMember && that_present_numMember))
				return false;
			if (this.numMember != that.numMember)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetOid()) ? 131071 : 524287);
		if (isSetOid())
			hashCode = hashCode * 8191 + oid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetUidCreate()) ? 131071 : 524287);
		if (isSetUidCreate())
			hashCode = hashCode * 8191 + uidCreate.hashCode();

		hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
		if (isSetName())
			hashCode = hashCode * 8191 + name.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetIcon()) ? 131071 : 524287);
		if (isSetIcon())
			hashCode = hashCode * 8191 + icon.hashCode();

		hashCode = hashCode * 8191 + numMember;

		return hashCode;
	}

	@Override
	public int compareTo(Organize other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetOid()).compareTo(other.isSetOid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oid, other.oid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUidCreate()).compareTo(other.isSetUidCreate());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUidCreate()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uidCreate, other.uidCreate);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetName()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIcon()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetNumMember()).compareTo(other.isSetNumMember());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNumMember()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMember, other.numMember);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("Organize(");
		boolean first = true;

		sb.append("oid:");
		if (this.oid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.oid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uidCreate:");
		if (this.uidCreate == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uidCreate);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("name:");
		if (this.name == null) {
			sb.append("null");
		}
		else {
			sb.append(this.name);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("icon:");
		if (this.icon == null) {
			sb.append("null");
		}
		else {
			sb.append(this.icon);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("numMember:");
		sb.append(this.numMember);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class OrganizeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrganizeStandardScheme getScheme() {
			return new OrganizeStandardScheme();
		}

	}

	private static class OrganizeStandardScheme extends org.apache.thrift.scheme.StandardScheme<Organize> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, Organize struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // OID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.oid = iprot.readString();
						struct.setOidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // UID_CREATE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uidCreate = iprot.readString();
						struct.setUidCreateIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // NAME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.name = iprot.readString();
						struct.setNameIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // ICON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.icon = iprot.readString();
						struct.setIconIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // NUM_MEMBER
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.numMember = iprot.readI32();
						struct.setNumMemberIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, Organize struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.oid != null) {
				oprot.writeFieldBegin(OID_FIELD_DESC);
				oprot.writeString(struct.oid);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.uidCreate != null) {
				oprot.writeFieldBegin(UID_CREATE_FIELD_DESC);
				oprot.writeString(struct.uidCreate);
				oprot.writeFieldEnd();
			}
			if (struct.name != null) {
				oprot.writeFieldBegin(NAME_FIELD_DESC);
				oprot.writeString(struct.name);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.icon != null) {
				oprot.writeFieldBegin(ICON_FIELD_DESC);
				oprot.writeString(struct.icon);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(NUM_MEMBER_FIELD_DESC);
			oprot.writeI32(struct.numMember);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class OrganizeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public OrganizeTupleScheme getScheme() {
			return new OrganizeTupleScheme();
		}

	}

	private static class OrganizeTupleScheme extends org.apache.thrift.scheme.TupleScheme<Organize> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, Organize struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetOid()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetUidCreate()) {
				optionals.set(2);
			}
			if (struct.isSetName()) {
				optionals.set(3);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(4);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(5);
			}
			if (struct.isSetStatus()) {
				optionals.set(6);
			}
			if (struct.isSetIcon()) {
				optionals.set(7);
			}
			if (struct.isSetNumMember()) {
				optionals.set(8);
			}
			oprot.writeBitSet(optionals, 9);
			if (struct.isSetOid()) {
				oprot.writeString(struct.oid);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetUidCreate()) {
				oprot.writeString(struct.uidCreate);
			}
			if (struct.isSetName()) {
				oprot.writeString(struct.name);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetIcon()) {
				oprot.writeString(struct.icon);
			}
			if (struct.isSetNumMember()) {
				oprot.writeI32(struct.numMember);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, Organize struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(9);
			if (incoming.get(0)) {
				struct.oid = iprot.readString();
				struct.setOidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.uidCreate = iprot.readString();
				struct.setUidCreateIsSet(true);
			}
			if (incoming.get(3)) {
				struct.name = iprot.readString();
				struct.setNameIsSet(true);
			}
			if (incoming.get(4)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(5)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(6)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(7)) {
				struct.icon = iprot.readString();
				struct.setIconIsSet(true);
			}
			if (incoming.get(8)) {
				struct.numMember = iprot.readI32();
				struct.setNumMemberIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
