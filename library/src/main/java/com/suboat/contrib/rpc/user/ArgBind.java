/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.user;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 特定参数: 其它平台的ID绑定 有效条件: bindVal,bindCode中必填一值
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-12")
public class ArgBind implements org.apache.thrift.TBase<ArgBind, ArgBind._Fields>, java.io.Serializable, Cloneable,
		Comparable<ArgBind> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"ArgBind");

	private static final org.apache.thrift.protocol.TField BIND_APP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bindApp", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField BIND_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bindKey", org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField BIND_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bindVal", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField BIND_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"bindCode", org.apache.thrift.protocol.TType.STRING, (short) 5);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ArgBindStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ArgBindTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String bindApp; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String bindKey; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String bindVal; // optional

	public @org.apache.thrift.annotation.Nullable java.lang.String bindCode; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		BIND_APP((short) 1, "bindApp"), BIND_KEY((short) 2, "bindKey"), BIND_VAL((short) 3,
				"bindVal"), BIND_CODE((short) 5, "bindCode");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // BIND_APP
				return BIND_APP;
			case 2: // BIND_KEY
				return BIND_KEY;
			case 3: // BIND_VAL
				return BIND_VAL;
			case 5: // BIND_CODE
				return BIND_CODE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final _Fields optionals[] = { _Fields.BIND_VAL, _Fields.BIND_CODE };

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.BIND_APP,
				new org.apache.thrift.meta_data.FieldMetaData("bindApp",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BIND_KEY,
				new org.apache.thrift.meta_data.FieldMetaData("bindKey",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BIND_VAL,
				new org.apache.thrift.meta_data.FieldMetaData("bindVal",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BIND_CODE,
				new org.apache.thrift.meta_data.FieldMetaData("bindCode",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ArgBind.class, metaDataMap);
	}

	public ArgBind() {
	}

	public ArgBind(java.lang.String bindApp, java.lang.String bindKey) {
		this();
		this.bindApp = bindApp;
		this.bindKey = bindKey;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ArgBind(ArgBind other) {
		if (other.isSetBindApp()) {
			this.bindApp = other.bindApp;
		}
		if (other.isSetBindKey()) {
			this.bindKey = other.bindKey;
		}
		if (other.isSetBindVal()) {
			this.bindVal = other.bindVal;
		}
		if (other.isSetBindCode()) {
			this.bindCode = other.bindCode;
		}
	}

	public ArgBind deepCopy() {
		return new ArgBind(this);
	}

	@Override
	public void clear() {
		this.bindApp = null;
		this.bindKey = null;
		this.bindVal = null;
		this.bindCode = null;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBindApp() {
		return this.bindApp;
	}

	public ArgBind setBindApp(@org.apache.thrift.annotation.Nullable java.lang.String bindApp) {
		this.bindApp = bindApp;
		return this;
	}

	public void unsetBindApp() {
		this.bindApp = null;
	}

	/**
	 * Returns true if field bindApp is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBindApp() {
		return this.bindApp != null;
	}

	public void setBindAppIsSet(boolean value) {
		if (!value) {
			this.bindApp = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBindKey() {
		return this.bindKey;
	}

	public ArgBind setBindKey(@org.apache.thrift.annotation.Nullable java.lang.String bindKey) {
		this.bindKey = bindKey;
		return this;
	}

	public void unsetBindKey() {
		this.bindKey = null;
	}

	/**
	 * Returns true if field bindKey is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBindKey() {
		return this.bindKey != null;
	}

	public void setBindKeyIsSet(boolean value) {
		if (!value) {
			this.bindKey = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBindVal() {
		return this.bindVal;
	}

	public ArgBind setBindVal(@org.apache.thrift.annotation.Nullable java.lang.String bindVal) {
		this.bindVal = bindVal;
		return this;
	}

	public void unsetBindVal() {
		this.bindVal = null;
	}

	/**
	 * Returns true if field bindVal is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBindVal() {
		return this.bindVal != null;
	}

	public void setBindValIsSet(boolean value) {
		if (!value) {
			this.bindVal = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getBindCode() {
		return this.bindCode;
	}

	public ArgBind setBindCode(@org.apache.thrift.annotation.Nullable java.lang.String bindCode) {
		this.bindCode = bindCode;
		return this;
	}

	public void unsetBindCode() {
		this.bindCode = null;
	}

	/**
	 * Returns true if field bindCode is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBindCode() {
		return this.bindCode != null;
	}

	public void setBindCodeIsSet(boolean value) {
		if (!value) {
			this.bindCode = null;
		}
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case BIND_APP:
			if (value == null) {
				unsetBindApp();
			}
			else {
				setBindApp((java.lang.String) value);
			}
			break;

		case BIND_KEY:
			if (value == null) {
				unsetBindKey();
			}
			else {
				setBindKey((java.lang.String) value);
			}
			break;

		case BIND_VAL:
			if (value == null) {
				unsetBindVal();
			}
			else {
				setBindVal((java.lang.String) value);
			}
			break;

		case BIND_CODE:
			if (value == null) {
				unsetBindCode();
			}
			else {
				setBindCode((java.lang.String) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case BIND_APP:
			return getBindApp();

		case BIND_KEY:
			return getBindKey();

		case BIND_VAL:
			return getBindVal();

		case BIND_CODE:
			return getBindCode();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case BIND_APP:
			return isSetBindApp();
		case BIND_KEY:
			return isSetBindKey();
		case BIND_VAL:
			return isSetBindVal();
		case BIND_CODE:
			return isSetBindCode();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof ArgBind)
			return this.equals((ArgBind) that);
		return false;
	}

	public boolean equals(ArgBind that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_bindApp = true && this.isSetBindApp();
		boolean that_present_bindApp = true && that.isSetBindApp();
		if (this_present_bindApp || that_present_bindApp) {
			if (!(this_present_bindApp && that_present_bindApp))
				return false;
			if (!this.bindApp.equals(that.bindApp))
				return false;
		}

		boolean this_present_bindKey = true && this.isSetBindKey();
		boolean that_present_bindKey = true && that.isSetBindKey();
		if (this_present_bindKey || that_present_bindKey) {
			if (!(this_present_bindKey && that_present_bindKey))
				return false;
			if (!this.bindKey.equals(that.bindKey))
				return false;
		}

		boolean this_present_bindVal = true && this.isSetBindVal();
		boolean that_present_bindVal = true && that.isSetBindVal();
		if (this_present_bindVal || that_present_bindVal) {
			if (!(this_present_bindVal && that_present_bindVal))
				return false;
			if (!this.bindVal.equals(that.bindVal))
				return false;
		}

		boolean this_present_bindCode = true && this.isSetBindCode();
		boolean that_present_bindCode = true && that.isSetBindCode();
		if (this_present_bindCode || that_present_bindCode) {
			if (!(this_present_bindCode && that_present_bindCode))
				return false;
			if (!this.bindCode.equals(that.bindCode))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetBindApp()) ? 131071 : 524287);
		if (isSetBindApp())
			hashCode = hashCode * 8191 + bindApp.hashCode();

		hashCode = hashCode * 8191 + ((isSetBindKey()) ? 131071 : 524287);
		if (isSetBindKey())
			hashCode = hashCode * 8191 + bindKey.hashCode();

		hashCode = hashCode * 8191 + ((isSetBindVal()) ? 131071 : 524287);
		if (isSetBindVal())
			hashCode = hashCode * 8191 + bindVal.hashCode();

		hashCode = hashCode * 8191 + ((isSetBindCode()) ? 131071 : 524287);
		if (isSetBindCode())
			hashCode = hashCode * 8191 + bindCode.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(ArgBind other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetBindApp()).compareTo(other.isSetBindApp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBindApp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindApp, other.bindApp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBindKey()).compareTo(other.isSetBindKey());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBindKey()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindKey, other.bindKey);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBindVal()).compareTo(other.isSetBindVal());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBindVal()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindVal, other.bindVal);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBindCode()).compareTo(other.isSetBindCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBindCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bindCode, other.bindCode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("ArgBind(");
		boolean first = true;

		sb.append("bindApp:");
		if (this.bindApp == null) {
			sb.append("null");
		}
		else {
			sb.append(this.bindApp);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("bindKey:");
		if (this.bindKey == null) {
			sb.append("null");
		}
		else {
			sb.append(this.bindKey);
		}
		first = false;
		if (isSetBindVal()) {
			if (!first)
				sb.append(", ");
			sb.append("bindVal:");
			if (this.bindVal == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bindVal);
			}
			first = false;
		}
		if (isSetBindCode()) {
			if (!first)
				sb.append(", ");
			sb.append("bindCode:");
			if (this.bindCode == null) {
				sb.append("null");
			}
			else {
				sb.append(this.bindCode);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ArgBindStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgBindStandardScheme getScheme() {
			return new ArgBindStandardScheme();
		}

	}

	private static class ArgBindStandardScheme extends org.apache.thrift.scheme.StandardScheme<ArgBind> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ArgBind struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // BIND_APP
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bindApp = iprot.readString();
						struct.setBindAppIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // BIND_KEY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bindKey = iprot.readString();
						struct.setBindKeyIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // BIND_VAL
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bindVal = iprot.readString();
						struct.setBindValIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // BIND_CODE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.bindCode = iprot.readString();
						struct.setBindCodeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ArgBind struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.bindApp != null) {
				oprot.writeFieldBegin(BIND_APP_FIELD_DESC);
				oprot.writeString(struct.bindApp);
				oprot.writeFieldEnd();
			}
			if (struct.bindKey != null) {
				oprot.writeFieldBegin(BIND_KEY_FIELD_DESC);
				oprot.writeString(struct.bindKey);
				oprot.writeFieldEnd();
			}
			if (struct.bindVal != null) {
				if (struct.isSetBindVal()) {
					oprot.writeFieldBegin(BIND_VAL_FIELD_DESC);
					oprot.writeString(struct.bindVal);
					oprot.writeFieldEnd();
				}
			}
			if (struct.bindCode != null) {
				if (struct.isSetBindCode()) {
					oprot.writeFieldBegin(BIND_CODE_FIELD_DESC);
					oprot.writeString(struct.bindCode);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ArgBindTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public ArgBindTupleScheme getScheme() {
			return new ArgBindTupleScheme();
		}

	}

	private static class ArgBindTupleScheme extends org.apache.thrift.scheme.TupleScheme<ArgBind> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ArgBind struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetBindApp()) {
				optionals.set(0);
			}
			if (struct.isSetBindKey()) {
				optionals.set(1);
			}
			if (struct.isSetBindVal()) {
				optionals.set(2);
			}
			if (struct.isSetBindCode()) {
				optionals.set(3);
			}
			oprot.writeBitSet(optionals, 4);
			if (struct.isSetBindApp()) {
				oprot.writeString(struct.bindApp);
			}
			if (struct.isSetBindKey()) {
				oprot.writeString(struct.bindKey);
			}
			if (struct.isSetBindVal()) {
				oprot.writeString(struct.bindVal);
			}
			if (struct.isSetBindCode()) {
				oprot.writeString(struct.bindCode);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ArgBind struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(4);
			if (incoming.get(0)) {
				struct.bindApp = iprot.readString();
				struct.setBindAppIsSet(true);
			}
			if (incoming.get(1)) {
				struct.bindKey = iprot.readString();
				struct.setBindKeyIsSet(true);
			}
			if (incoming.get(2)) {
				struct.bindVal = iprot.readString();
				struct.setBindValIsSet(true);
			}
			if (incoming.get(3)) {
				struct.bindCode = iprot.readString();
				struct.setBindCodeIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
