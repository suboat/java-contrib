/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.suboat.contrib.rpc.wallet;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
/**
 * 流水实例 30个字段
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-05-11")
public class WalletFlow implements org.apache.thrift.TBase<WalletFlow, WalletFlow._Fields>, java.io.Serializable,
		Cloneable, Comparable<WalletFlow> {

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"WalletFlow");

	private static final org.apache.thrift.protocol.TField ACCESSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"accession", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid",
			org.apache.thrift.protocol.TType.STRING, (short) 2);

	private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"createTime", org.apache.thrift.protocol.TType.STRING, (short) 3);

	private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"updateTime", org.apache.thrift.protocol.TType.STRING, (short) 4);

	private static final org.apache.thrift.protocol.TField IS_FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isFinish", org.apache.thrift.protocol.TType.BOOL, (short) 5);

	private static final org.apache.thrift.protocol.TField PROJECT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"project", org.apache.thrift.protocol.TType.STRING, (short) 6);

	private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"category", org.apache.thrift.protocol.TType.STRING, (short) 7);

	private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"status", org.apache.thrift.protocol.TType.I32, (short) 8);

	private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"action", org.apache.thrift.protocol.TType.STRING, (short) 9);

	private static final org.apache.thrift.protocol.TField FLOW_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"flow", org.apache.thrift.protocol.TType.STRING, (short) 10);

	private static final org.apache.thrift.protocol.TField STAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"stage", org.apache.thrift.protocol.TType.STRING, (short) 11);

	private static final org.apache.thrift.protocol.TField IS_INCOME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isIncome", org.apache.thrift.protocol.TType.BOOL, (short) 12);

	private static final org.apache.thrift.protocol.TField IS_FREEZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isFreeze", org.apache.thrift.protocol.TType.BOOL, (short) 13);

	private static final org.apache.thrift.protocol.TField SERIAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"serialId", org.apache.thrift.protocol.TType.STRING, (short) 14);

	private static final org.apache.thrift.protocol.TField TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"trigger", org.apache.thrift.protocol.TType.STRING, (short) 15);

	private static final org.apache.thrift.protocol.TField REL_ACC_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"relAcc", org.apache.thrift.protocol.TType.STRING, (short) 16);

	private static final org.apache.thrift.protocol.TField REL_UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"relUid", org.apache.thrift.protocol.TType.STRING, (short) 17);

	private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"taskId", org.apache.thrift.protocol.TType.STRING, (short) 18);

	private static final org.apache.thrift.protocol.TField IS_MAJOR_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isMajor", org.apache.thrift.protocol.TType.BOOL, (short) 19);

	private static final org.apache.thrift.protocol.TField IS_MAJOR_DONE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isMajorDone", org.apache.thrift.protocol.TType.BOOL, (short) 20);

	private static final org.apache.thrift.protocol.TField TX_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"txConfirm", org.apache.thrift.protocol.TType.I32, (short) 21);

	private static final org.apache.thrift.protocol.TField TX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"txId", org.apache.thrift.protocol.TType.STRING, (short) 22);

	private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"amount", org.apache.thrift.protocol.TType.DOUBLE, (short) 23);

	private static final org.apache.thrift.protocol.TField TX_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"txFee", org.apache.thrift.protocol.TType.DOUBLE, (short) 24);

	private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"balance", org.apache.thrift.protocol.TType.DOUBLE, (short) 25);

	private static final org.apache.thrift.protocol.TField FREEZING_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"freezing", org.apache.thrift.protocol.TType.DOUBLE, (short) 26);

	private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"comment", org.apache.thrift.protocol.TType.STRING, (short) 27);

	private static final org.apache.thrift.protocol.TField COMMENT_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"commentJson", org.apache.thrift.protocol.TType.STRING, (short) 28);

	private static final org.apache.thrift.protocol.TField TOTAL_INT_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"totalInt", org.apache.thrift.protocol.TType.I64, (short) 29);

	private static final org.apache.thrift.protocol.TField IS_META_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isMeta", org.apache.thrift.protocol.TType.BOOL, (short) 30);

	private static final org.apache.thrift.protocol.TField IS_FOLD_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"isFold", org.apache.thrift.protocol.TType.BOOL, (short) 31);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WalletFlowStandardSchemeFactory();

	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WalletFlowTupleSchemeFactory();

	public @org.apache.thrift.annotation.Nullable java.lang.String accession; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String uid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String createTime; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String updateTime; // required

	public boolean isFinish; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String project; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String category; // required

	public int status; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String action; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String flow; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String stage; // required

	public boolean isIncome; // required

	public boolean isFreeze; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String serialId; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String trigger; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String relAcc; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String relUid; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String taskId; // required

	public boolean isMajor; // required

	public boolean isMajorDone; // required

	public int txConfirm; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String txId; // required

	public double amount; // required

	public double txFee; // required

	public double balance; // required

	public double freezing; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String comment; // required

	public @org.apache.thrift.annotation.Nullable java.lang.String commentJson; // required

	public long totalInt; // required

	public boolean isMeta; // required

	public boolean isFold; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for finding
	 * and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {

		ACCESSION((short) 1, "accession"), UID((short) 2, "uid"), CREATE_TIME((short) 3, "createTime"), UPDATE_TIME(
				(short) 4,
				"updateTime"), IS_FINISH((short) 5, "isFinish"), PROJECT((short) 6, "project"), CATEGORY((short) 7,
						"category"), STATUS((short) 8, "status"), ACTION((short) 9, "action"), FLOW((short) 10,
								"flow"), STAGE((short) 11, "stage"), IS_INCOME((short) 12, "isIncome"), IS_FREEZE(
										(short) 13, "isFreeze"), SERIAL_ID((short) 14, "serialId"), TRIGGER((short) 15,
												"trigger"), REL_ACC((short) 16, "relAcc"), REL_UID((short) 17,
														"relUid"), TASK_ID((short) 18, "taskId"), IS_MAJOR((short) 19,
																"isMajor"), IS_MAJOR_DONE((short) 20,
																		"isMajorDone"), TX_CONFIRM((short) 21,
																				"txConfirm"), TX_ID((short) 22,
																						"txId"), AMOUNT((short) 23,
																								"amount"), TX_FEE(
																										(short) 24,
																										"txFee"), BALANCE(
																												(short) 25,
																												"balance"), FREEZING(
																														(short) 26,
																														"freezing"), COMMENT(
																																(short) 27,
																																"comment"), COMMENT_JSON(
																																		(short) 28,
																																		"commentJson"), TOTAL_INT(
																																				(short) 29,
																																				"totalInt"), IS_META(
																																						(short) 30,
																																						"isMeta"), IS_FOLD(
																																								(short) 31,
																																								"isFold");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ACCESSION
				return ACCESSION;
			case 2: // UID
				return UID;
			case 3: // CREATE_TIME
				return CREATE_TIME;
			case 4: // UPDATE_TIME
				return UPDATE_TIME;
			case 5: // IS_FINISH
				return IS_FINISH;
			case 6: // PROJECT
				return PROJECT;
			case 7: // CATEGORY
				return CATEGORY;
			case 8: // STATUS
				return STATUS;
			case 9: // ACTION
				return ACTION;
			case 10: // FLOW
				return FLOW;
			case 11: // STAGE
				return STAGE;
			case 12: // IS_INCOME
				return IS_INCOME;
			case 13: // IS_FREEZE
				return IS_FREEZE;
			case 14: // SERIAL_ID
				return SERIAL_ID;
			case 15: // TRIGGER
				return TRIGGER;
			case 16: // REL_ACC
				return REL_ACC;
			case 17: // REL_UID
				return REL_UID;
			case 18: // TASK_ID
				return TASK_ID;
			case 19: // IS_MAJOR
				return IS_MAJOR;
			case 20: // IS_MAJOR_DONE
				return IS_MAJOR_DONE;
			case 21: // TX_CONFIRM
				return TX_CONFIRM;
			case 22: // TX_ID
				return TX_ID;
			case 23: // AMOUNT
				return AMOUNT;
			case 24: // TX_FEE
				return TX_FEE;
			case 25: // BALANCE
				return BALANCE;
			case 26: // FREEZING
				return FREEZING;
			case 27: // COMMENT
				return COMMENT;
			case 28: // COMMENT_JSON
				return COMMENT_JSON;
			case 29: // TOTAL_INT
				return TOTAL_INT;
			case 30: // IS_META
				return IS_META;
			case 31: // IS_FOLD
				return IS_FOLD;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is
		 * not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		@org.apache.thrift.annotation.Nullable
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}

	}

	// isset id assignments
	private static final int __ISFINISH_ISSET_ID = 0;

	private static final int __STATUS_ISSET_ID = 1;

	private static final int __ISINCOME_ISSET_ID = 2;

	private static final int __ISFREEZE_ISSET_ID = 3;

	private static final int __ISMAJOR_ISSET_ID = 4;

	private static final int __ISMAJORDONE_ISSET_ID = 5;

	private static final int __TXCONFIRM_ISSET_ID = 6;

	private static final int __AMOUNT_ISSET_ID = 7;

	private static final int __TXFEE_ISSET_ID = 8;

	private static final int __BALANCE_ISSET_ID = 9;

	private static final int __FREEZING_ISSET_ID = 10;

	private static final int __TOTALINT_ISSET_ID = 11;

	private static final int __ISMETA_ISSET_ID = 12;

	private static final int __ISFOLD_ISSET_ID = 13;

	private short __isset_bitfield = 0;

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ACCESSION,
				new org.apache.thrift.meta_data.FieldMetaData("accession",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.UID,
				new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime",
				org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING, "Time")));
		tmpMap.put(_Fields.IS_FINISH,
				new org.apache.thrift.meta_data.FieldMetaData("isFinish",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.PROJECT,
				new org.apache.thrift.meta_data.FieldMetaData("project",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.CATEGORY,
				new org.apache.thrift.meta_data.FieldMetaData("category",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STATUS,
				new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.ACTION,
				new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FLOW,
				new org.apache.thrift.meta_data.FieldMetaData("flow", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STAGE,
				new org.apache.thrift.meta_data.FieldMetaData("stage", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_INCOME,
				new org.apache.thrift.meta_data.FieldMetaData("isIncome",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_FREEZE,
				new org.apache.thrift.meta_data.FieldMetaData("isFreeze",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.SERIAL_ID,
				new org.apache.thrift.meta_data.FieldMetaData("serialId",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TRIGGER,
				new org.apache.thrift.meta_data.FieldMetaData("trigger",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REL_ACC,
				new org.apache.thrift.meta_data.FieldMetaData("relAcc", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.REL_UID,
				new org.apache.thrift.meta_data.FieldMetaData("relUid", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TASK_ID,
				new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.IS_MAJOR,
				new org.apache.thrift.meta_data.FieldMetaData("isMajor",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_MAJOR_DONE,
				new org.apache.thrift.meta_data.FieldMetaData("isMajorDone",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.TX_CONFIRM,
				new org.apache.thrift.meta_data.FieldMetaData("txConfirm",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.TX_ID,
				new org.apache.thrift.meta_data.FieldMetaData("txId", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.AMOUNT,
				new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.TX_FEE,
				new org.apache.thrift.meta_data.FieldMetaData("txFee", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.BALANCE,
				new org.apache.thrift.meta_data.FieldMetaData("balance",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.FREEZING,
				new org.apache.thrift.meta_data.FieldMetaData("freezing",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
		tmpMap.put(_Fields.COMMENT,
				new org.apache.thrift.meta_data.FieldMetaData("comment",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.COMMENT_JSON,
				new org.apache.thrift.meta_data.FieldMetaData("commentJson",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TOTAL_INT,
				new org.apache.thrift.meta_data.FieldMetaData("totalInt",
						org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.IS_META,
				new org.apache.thrift.meta_data.FieldMetaData("isMeta", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.IS_FOLD,
				new org.apache.thrift.meta_data.FieldMetaData("isFold", org.apache.thrift.TFieldRequirementType.DEFAULT,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WalletFlow.class, metaDataMap);
	}

	public WalletFlow() {
	}

	public WalletFlow(java.lang.String accession, java.lang.String uid, java.lang.String createTime,
			java.lang.String updateTime, boolean isFinish, java.lang.String project, java.lang.String category,
			int status, java.lang.String action, java.lang.String flow, java.lang.String stage, boolean isIncome,
			boolean isFreeze, java.lang.String serialId, java.lang.String trigger, java.lang.String relAcc,
			java.lang.String relUid, java.lang.String taskId, boolean isMajor, boolean isMajorDone, int txConfirm,
			java.lang.String txId, double amount, double txFee, double balance, double freezing,
			java.lang.String comment, java.lang.String commentJson, long totalInt, boolean isMeta, boolean isFold) {
		this();
		this.accession = accession;
		this.uid = uid;
		this.createTime = createTime;
		this.updateTime = updateTime;
		this.isFinish = isFinish;
		setIsFinishIsSet(true);
		this.project = project;
		this.category = category;
		this.status = status;
		setStatusIsSet(true);
		this.action = action;
		this.flow = flow;
		this.stage = stage;
		this.isIncome = isIncome;
		setIsIncomeIsSet(true);
		this.isFreeze = isFreeze;
		setIsFreezeIsSet(true);
		this.serialId = serialId;
		this.trigger = trigger;
		this.relAcc = relAcc;
		this.relUid = relUid;
		this.taskId = taskId;
		this.isMajor = isMajor;
		setIsMajorIsSet(true);
		this.isMajorDone = isMajorDone;
		setIsMajorDoneIsSet(true);
		this.txConfirm = txConfirm;
		setTxConfirmIsSet(true);
		this.txId = txId;
		this.amount = amount;
		setAmountIsSet(true);
		this.txFee = txFee;
		setTxFeeIsSet(true);
		this.balance = balance;
		setBalanceIsSet(true);
		this.freezing = freezing;
		setFreezingIsSet(true);
		this.comment = comment;
		this.commentJson = commentJson;
		this.totalInt = totalInt;
		setTotalIntIsSet(true);
		this.isMeta = isMeta;
		setIsMetaIsSet(true);
		this.isFold = isFold;
		setIsFoldIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public WalletFlow(WalletFlow other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetAccession()) {
			this.accession = other.accession;
		}
		if (other.isSetUid()) {
			this.uid = other.uid;
		}
		if (other.isSetCreateTime()) {
			this.createTime = other.createTime;
		}
		if (other.isSetUpdateTime()) {
			this.updateTime = other.updateTime;
		}
		this.isFinish = other.isFinish;
		if (other.isSetProject()) {
			this.project = other.project;
		}
		if (other.isSetCategory()) {
			this.category = other.category;
		}
		this.status = other.status;
		if (other.isSetAction()) {
			this.action = other.action;
		}
		if (other.isSetFlow()) {
			this.flow = other.flow;
		}
		if (other.isSetStage()) {
			this.stage = other.stage;
		}
		this.isIncome = other.isIncome;
		this.isFreeze = other.isFreeze;
		if (other.isSetSerialId()) {
			this.serialId = other.serialId;
		}
		if (other.isSetTrigger()) {
			this.trigger = other.trigger;
		}
		if (other.isSetRelAcc()) {
			this.relAcc = other.relAcc;
		}
		if (other.isSetRelUid()) {
			this.relUid = other.relUid;
		}
		if (other.isSetTaskId()) {
			this.taskId = other.taskId;
		}
		this.isMajor = other.isMajor;
		this.isMajorDone = other.isMajorDone;
		this.txConfirm = other.txConfirm;
		if (other.isSetTxId()) {
			this.txId = other.txId;
		}
		this.amount = other.amount;
		this.txFee = other.txFee;
		this.balance = other.balance;
		this.freezing = other.freezing;
		if (other.isSetComment()) {
			this.comment = other.comment;
		}
		if (other.isSetCommentJson()) {
			this.commentJson = other.commentJson;
		}
		this.totalInt = other.totalInt;
		this.isMeta = other.isMeta;
		this.isFold = other.isFold;
	}

	public WalletFlow deepCopy() {
		return new WalletFlow(this);
	}

	@Override
	public void clear() {
		this.accession = null;
		this.uid = null;
		this.createTime = null;
		this.updateTime = null;
		setIsFinishIsSet(false);
		this.isFinish = false;
		this.project = null;
		this.category = null;
		setStatusIsSet(false);
		this.status = 0;
		this.action = null;
		this.flow = null;
		this.stage = null;
		setIsIncomeIsSet(false);
		this.isIncome = false;
		setIsFreezeIsSet(false);
		this.isFreeze = false;
		this.serialId = null;
		this.trigger = null;
		this.relAcc = null;
		this.relUid = null;
		this.taskId = null;
		setIsMajorIsSet(false);
		this.isMajor = false;
		setIsMajorDoneIsSet(false);
		this.isMajorDone = false;
		setTxConfirmIsSet(false);
		this.txConfirm = 0;
		this.txId = null;
		setAmountIsSet(false);
		this.amount = 0.0;
		setTxFeeIsSet(false);
		this.txFee = 0.0;
		setBalanceIsSet(false);
		this.balance = 0.0;
		setFreezingIsSet(false);
		this.freezing = 0.0;
		this.comment = null;
		this.commentJson = null;
		setTotalIntIsSet(false);
		this.totalInt = 0;
		setIsMetaIsSet(false);
		this.isMeta = false;
		setIsFoldIsSet(false);
		this.isFold = false;
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAccession() {
		return this.accession;
	}

	public WalletFlow setAccession(@org.apache.thrift.annotation.Nullable java.lang.String accession) {
		this.accession = accession;
		return this;
	}

	public void unsetAccession() {
		this.accession = null;
	}

	/**
	 * Returns true if field accession is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAccession() {
		return this.accession != null;
	}

	public void setAccessionIsSet(boolean value) {
		if (!value) {
			this.accession = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUid() {
		return this.uid;
	}

	public WalletFlow setUid(@org.apache.thrift.annotation.Nullable java.lang.String uid) {
		this.uid = uid;
		return this;
	}

	public void unsetUid() {
		this.uid = null;
	}

	/**
	 * Returns true if field uid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetUid() {
		return this.uid != null;
	}

	public void setUidIsSet(boolean value) {
		if (!value) {
			this.uid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCreateTime() {
		return this.createTime;
	}

	public WalletFlow setCreateTime(@org.apache.thrift.annotation.Nullable java.lang.String createTime) {
		this.createTime = createTime;
		return this;
	}

	public void unsetCreateTime() {
		this.createTime = null;
	}

	/**
	 * Returns true if field createTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCreateTime() {
		return this.createTime != null;
	}

	public void setCreateTimeIsSet(boolean value) {
		if (!value) {
			this.createTime = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getUpdateTime() {
		return this.updateTime;
	}

	public WalletFlow setUpdateTime(@org.apache.thrift.annotation.Nullable java.lang.String updateTime) {
		this.updateTime = updateTime;
		return this;
	}

	public void unsetUpdateTime() {
		this.updateTime = null;
	}

	/**
	 * Returns true if field updateTime is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetUpdateTime() {
		return this.updateTime != null;
	}

	public void setUpdateTimeIsSet(boolean value) {
		if (!value) {
			this.updateTime = null;
		}
	}

	public boolean isIsFinish() {
		return this.isFinish;
	}

	public WalletFlow setIsFinish(boolean isFinish) {
		this.isFinish = isFinish;
		setIsFinishIsSet(true);
		return this;
	}

	public void unsetIsFinish() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFINISH_ISSET_ID);
	}

	/**
	 * Returns true if field isFinish is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsFinish() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFINISH_ISSET_ID);
	}

	public void setIsFinishIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFINISH_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getProject() {
		return this.project;
	}

	public WalletFlow setProject(@org.apache.thrift.annotation.Nullable java.lang.String project) {
		this.project = project;
		return this;
	}

	public void unsetProject() {
		this.project = null;
	}

	/**
	 * Returns true if field project is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetProject() {
		return this.project != null;
	}

	public void setProjectIsSet(boolean value) {
		if (!value) {
			this.project = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCategory() {
		return this.category;
	}

	public WalletFlow setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
		this.category = category;
		return this;
	}

	public void unsetCategory() {
		this.category = null;
	}

	/**
	 * Returns true if field category is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCategory() {
		return this.category != null;
	}

	public void setCategoryIsSet(boolean value) {
		if (!value) {
			this.category = null;
		}
	}

	public int getStatus() {
		return this.status;
	}

	public WalletFlow setStatus(int status) {
		this.status = status;
		setStatusIsSet(true);
		return this;
	}

	public void unsetStatus() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	/**
	 * Returns true if field status is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStatus() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
	}

	public void setStatusIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getAction() {
		return this.action;
	}

	public WalletFlow setAction(@org.apache.thrift.annotation.Nullable java.lang.String action) {
		this.action = action;
		return this;
	}

	public void unsetAction() {
		this.action = null;
	}

	/**
	 * Returns true if field action is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAction() {
		return this.action != null;
	}

	public void setActionIsSet(boolean value) {
		if (!value) {
			this.action = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getFlow() {
		return this.flow;
	}

	public WalletFlow setFlow(@org.apache.thrift.annotation.Nullable java.lang.String flow) {
		this.flow = flow;
		return this;
	}

	public void unsetFlow() {
		this.flow = null;
	}

	/**
	 * Returns true if field flow is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetFlow() {
		return this.flow != null;
	}

	public void setFlowIsSet(boolean value) {
		if (!value) {
			this.flow = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getStage() {
		return this.stage;
	}

	public WalletFlow setStage(@org.apache.thrift.annotation.Nullable java.lang.String stage) {
		this.stage = stage;
		return this;
	}

	public void unsetStage() {
		this.stage = null;
	}

	/**
	 * Returns true if field stage is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetStage() {
		return this.stage != null;
	}

	public void setStageIsSet(boolean value) {
		if (!value) {
			this.stage = null;
		}
	}

	public boolean isIsIncome() {
		return this.isIncome;
	}

	public WalletFlow setIsIncome(boolean isIncome) {
		this.isIncome = isIncome;
		setIsIncomeIsSet(true);
		return this;
	}

	public void unsetIsIncome() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISINCOME_ISSET_ID);
	}

	/**
	 * Returns true if field isIncome is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsIncome() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISINCOME_ISSET_ID);
	}

	public void setIsIncomeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISINCOME_ISSET_ID, value);
	}

	public boolean isIsFreeze() {
		return this.isFreeze;
	}

	public WalletFlow setIsFreeze(boolean isFreeze) {
		this.isFreeze = isFreeze;
		setIsFreezeIsSet(true);
		return this;
	}

	public void unsetIsFreeze() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFREEZE_ISSET_ID);
	}

	/**
	 * Returns true if field isFreeze is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsFreeze() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFREEZE_ISSET_ID);
	}

	public void setIsFreezeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFREEZE_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getSerialId() {
		return this.serialId;
	}

	public WalletFlow setSerialId(@org.apache.thrift.annotation.Nullable java.lang.String serialId) {
		this.serialId = serialId;
		return this;
	}

	public void unsetSerialId() {
		this.serialId = null;
	}

	/**
	 * Returns true if field serialId is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetSerialId() {
		return this.serialId != null;
	}

	public void setSerialIdIsSet(boolean value) {
		if (!value) {
			this.serialId = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTrigger() {
		return this.trigger;
	}

	public WalletFlow setTrigger(@org.apache.thrift.annotation.Nullable java.lang.String trigger) {
		this.trigger = trigger;
		return this;
	}

	public void unsetTrigger() {
		this.trigger = null;
	}

	/**
	 * Returns true if field trigger is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTrigger() {
		return this.trigger != null;
	}

	public void setTriggerIsSet(boolean value) {
		if (!value) {
			this.trigger = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRelAcc() {
		return this.relAcc;
	}

	public WalletFlow setRelAcc(@org.apache.thrift.annotation.Nullable java.lang.String relAcc) {
		this.relAcc = relAcc;
		return this;
	}

	public void unsetRelAcc() {
		this.relAcc = null;
	}

	/**
	 * Returns true if field relAcc is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRelAcc() {
		return this.relAcc != null;
	}

	public void setRelAccIsSet(boolean value) {
		if (!value) {
			this.relAcc = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getRelUid() {
		return this.relUid;
	}

	public WalletFlow setRelUid(@org.apache.thrift.annotation.Nullable java.lang.String relUid) {
		this.relUid = relUid;
		return this;
	}

	public void unsetRelUid() {
		this.relUid = null;
	}

	/**
	 * Returns true if field relUid is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetRelUid() {
		return this.relUid != null;
	}

	public void setRelUidIsSet(boolean value) {
		if (!value) {
			this.relUid = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTaskId() {
		return this.taskId;
	}

	public WalletFlow setTaskId(@org.apache.thrift.annotation.Nullable java.lang.String taskId) {
		this.taskId = taskId;
		return this;
	}

	public void unsetTaskId() {
		this.taskId = null;
	}

	/**
	 * Returns true if field taskId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTaskId() {
		return this.taskId != null;
	}

	public void setTaskIdIsSet(boolean value) {
		if (!value) {
			this.taskId = null;
		}
	}

	public boolean isIsMajor() {
		return this.isMajor;
	}

	public WalletFlow setIsMajor(boolean isMajor) {
		this.isMajor = isMajor;
		setIsMajorIsSet(true);
		return this;
	}

	public void unsetIsMajor() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMAJOR_ISSET_ID);
	}

	/**
	 * Returns true if field isMajor is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsMajor() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMAJOR_ISSET_ID);
	}

	public void setIsMajorIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMAJOR_ISSET_ID, value);
	}

	public boolean isIsMajorDone() {
		return this.isMajorDone;
	}

	public WalletFlow setIsMajorDone(boolean isMajorDone) {
		this.isMajorDone = isMajorDone;
		setIsMajorDoneIsSet(true);
		return this;
	}

	public void unsetIsMajorDone() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMAJORDONE_ISSET_ID);
	}

	/**
	 * Returns true if field isMajorDone is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIsMajorDone() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMAJORDONE_ISSET_ID);
	}

	public void setIsMajorDoneIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMAJORDONE_ISSET_ID, value);
	}

	public int getTxConfirm() {
		return this.txConfirm;
	}

	public WalletFlow setTxConfirm(int txConfirm) {
		this.txConfirm = txConfirm;
		setTxConfirmIsSet(true);
		return this;
	}

	public void unsetTxConfirm() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXCONFIRM_ISSET_ID);
	}

	/**
	 * Returns true if field txConfirm is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTxConfirm() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXCONFIRM_ISSET_ID);
	}

	public void setTxConfirmIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXCONFIRM_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getTxId() {
		return this.txId;
	}

	public WalletFlow setTxId(@org.apache.thrift.annotation.Nullable java.lang.String txId) {
		this.txId = txId;
		return this;
	}

	public void unsetTxId() {
		this.txId = null;
	}

	/**
	 * Returns true if field txId is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTxId() {
		return this.txId != null;
	}

	public void setTxIdIsSet(boolean value) {
		if (!value) {
			this.txId = null;
		}
	}

	public double getAmount() {
		return this.amount;
	}

	public WalletFlow setAmount(double amount) {
		this.amount = amount;
		setAmountIsSet(true);
		return this;
	}

	public void unsetAmount() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	/**
	 * Returns true if field amount is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetAmount() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
	}

	public void setAmountIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
	}

	public double getTxFee() {
		return this.txFee;
	}

	public WalletFlow setTxFee(double txFee) {
		this.txFee = txFee;
		setTxFeeIsSet(true);
		return this;
	}

	public void unsetTxFee() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXFEE_ISSET_ID);
	}

	/**
	 * Returns true if field txFee is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetTxFee() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXFEE_ISSET_ID);
	}

	public void setTxFeeIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXFEE_ISSET_ID, value);
	}

	public double getBalance() {
		return this.balance;
	}

	public WalletFlow setBalance(double balance) {
		this.balance = balance;
		setBalanceIsSet(true);
		return this;
	}

	public void unsetBalance() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
	}

	/**
	 * Returns true if field balance is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetBalance() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
	}

	public void setBalanceIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
	}

	public double getFreezing() {
		return this.freezing;
	}

	public WalletFlow setFreezing(double freezing) {
		this.freezing = freezing;
		setFreezingIsSet(true);
		return this;
	}

	public void unsetFreezing() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREEZING_ISSET_ID);
	}

	/**
	 * Returns true if field freezing is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetFreezing() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREEZING_ISSET_ID);
	}

	public void setFreezingIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREEZING_ISSET_ID, value);
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getComment() {
		return this.comment;
	}

	public WalletFlow setComment(@org.apache.thrift.annotation.Nullable java.lang.String comment) {
		this.comment = comment;
		return this;
	}

	public void unsetComment() {
		this.comment = null;
	}

	/**
	 * Returns true if field comment is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetComment() {
		return this.comment != null;
	}

	public void setCommentIsSet(boolean value) {
		if (!value) {
			this.comment = null;
		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.String getCommentJson() {
		return this.commentJson;
	}

	public WalletFlow setCommentJson(@org.apache.thrift.annotation.Nullable java.lang.String commentJson) {
		this.commentJson = commentJson;
		return this;
	}

	public void unsetCommentJson() {
		this.commentJson = null;
	}

	/**
	 * Returns true if field commentJson is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetCommentJson() {
		return this.commentJson != null;
	}

	public void setCommentJsonIsSet(boolean value) {
		if (!value) {
			this.commentJson = null;
		}
	}

	public long getTotalInt() {
		return this.totalInt;
	}

	public WalletFlow setTotalInt(long totalInt) {
		this.totalInt = totalInt;
		setTotalIntIsSet(true);
		return this;
	}

	public void unsetTotalInt() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALINT_ISSET_ID);
	}

	/**
	 * Returns true if field totalInt is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetTotalInt() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALINT_ISSET_ID);
	}

	public void setTotalIntIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALINT_ISSET_ID, value);
	}

	public boolean isIsMeta() {
		return this.isMeta;
	}

	public WalletFlow setIsMeta(boolean isMeta) {
		this.isMeta = isMeta;
		setIsMetaIsSet(true);
		return this;
	}

	public void unsetIsMeta() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISMETA_ISSET_ID);
	}

	/**
	 * Returns true if field isMeta is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsMeta() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISMETA_ISSET_ID);
	}

	public void setIsMetaIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISMETA_ISSET_ID, value);
	}

	public boolean isIsFold() {
		return this.isFold;
	}

	public WalletFlow setIsFold(boolean isFold) {
		this.isFold = isFold;
		setIsFoldIsSet(true);
		return this;
	}

	public void unsetIsFold() {
		__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISFOLD_ISSET_ID);
	}

	/**
	 * Returns true if field isFold is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetIsFold() {
		return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISFOLD_ISSET_ID);
	}

	public void setIsFoldIsSet(boolean value) {
		__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISFOLD_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
		switch (field) {
		case ACCESSION:
			if (value == null) {
				unsetAccession();
			}
			else {
				setAccession((java.lang.String) value);
			}
			break;

		case UID:
			if (value == null) {
				unsetUid();
			}
			else {
				setUid((java.lang.String) value);
			}
			break;

		case CREATE_TIME:
			if (value == null) {
				unsetCreateTime();
			}
			else {
				setCreateTime((java.lang.String) value);
			}
			break;

		case UPDATE_TIME:
			if (value == null) {
				unsetUpdateTime();
			}
			else {
				setUpdateTime((java.lang.String) value);
			}
			break;

		case IS_FINISH:
			if (value == null) {
				unsetIsFinish();
			}
			else {
				setIsFinish((java.lang.Boolean) value);
			}
			break;

		case PROJECT:
			if (value == null) {
				unsetProject();
			}
			else {
				setProject((java.lang.String) value);
			}
			break;

		case CATEGORY:
			if (value == null) {
				unsetCategory();
			}
			else {
				setCategory((java.lang.String) value);
			}
			break;

		case STATUS:
			if (value == null) {
				unsetStatus();
			}
			else {
				setStatus((java.lang.Integer) value);
			}
			break;

		case ACTION:
			if (value == null) {
				unsetAction();
			}
			else {
				setAction((java.lang.String) value);
			}
			break;

		case FLOW:
			if (value == null) {
				unsetFlow();
			}
			else {
				setFlow((java.lang.String) value);
			}
			break;

		case STAGE:
			if (value == null) {
				unsetStage();
			}
			else {
				setStage((java.lang.String) value);
			}
			break;

		case IS_INCOME:
			if (value == null) {
				unsetIsIncome();
			}
			else {
				setIsIncome((java.lang.Boolean) value);
			}
			break;

		case IS_FREEZE:
			if (value == null) {
				unsetIsFreeze();
			}
			else {
				setIsFreeze((java.lang.Boolean) value);
			}
			break;

		case SERIAL_ID:
			if (value == null) {
				unsetSerialId();
			}
			else {
				setSerialId((java.lang.String) value);
			}
			break;

		case TRIGGER:
			if (value == null) {
				unsetTrigger();
			}
			else {
				setTrigger((java.lang.String) value);
			}
			break;

		case REL_ACC:
			if (value == null) {
				unsetRelAcc();
			}
			else {
				setRelAcc((java.lang.String) value);
			}
			break;

		case REL_UID:
			if (value == null) {
				unsetRelUid();
			}
			else {
				setRelUid((java.lang.String) value);
			}
			break;

		case TASK_ID:
			if (value == null) {
				unsetTaskId();
			}
			else {
				setTaskId((java.lang.String) value);
			}
			break;

		case IS_MAJOR:
			if (value == null) {
				unsetIsMajor();
			}
			else {
				setIsMajor((java.lang.Boolean) value);
			}
			break;

		case IS_MAJOR_DONE:
			if (value == null) {
				unsetIsMajorDone();
			}
			else {
				setIsMajorDone((java.lang.Boolean) value);
			}
			break;

		case TX_CONFIRM:
			if (value == null) {
				unsetTxConfirm();
			}
			else {
				setTxConfirm((java.lang.Integer) value);
			}
			break;

		case TX_ID:
			if (value == null) {
				unsetTxId();
			}
			else {
				setTxId((java.lang.String) value);
			}
			break;

		case AMOUNT:
			if (value == null) {
				unsetAmount();
			}
			else {
				setAmount((java.lang.Double) value);
			}
			break;

		case TX_FEE:
			if (value == null) {
				unsetTxFee();
			}
			else {
				setTxFee((java.lang.Double) value);
			}
			break;

		case BALANCE:
			if (value == null) {
				unsetBalance();
			}
			else {
				setBalance((java.lang.Double) value);
			}
			break;

		case FREEZING:
			if (value == null) {
				unsetFreezing();
			}
			else {
				setFreezing((java.lang.Double) value);
			}
			break;

		case COMMENT:
			if (value == null) {
				unsetComment();
			}
			else {
				setComment((java.lang.String) value);
			}
			break;

		case COMMENT_JSON:
			if (value == null) {
				unsetCommentJson();
			}
			else {
				setCommentJson((java.lang.String) value);
			}
			break;

		case TOTAL_INT:
			if (value == null) {
				unsetTotalInt();
			}
			else {
				setTotalInt((java.lang.Long) value);
			}
			break;

		case IS_META:
			if (value == null) {
				unsetIsMeta();
			}
			else {
				setIsMeta((java.lang.Boolean) value);
			}
			break;

		case IS_FOLD:
			if (value == null) {
				unsetIsFold();
			}
			else {
				setIsFold((java.lang.Boolean) value);
			}
			break;

		}
	}

	@org.apache.thrift.annotation.Nullable
	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ACCESSION:
			return getAccession();

		case UID:
			return getUid();

		case CREATE_TIME:
			return getCreateTime();

		case UPDATE_TIME:
			return getUpdateTime();

		case IS_FINISH:
			return isIsFinish();

		case PROJECT:
			return getProject();

		case CATEGORY:
			return getCategory();

		case STATUS:
			return getStatus();

		case ACTION:
			return getAction();

		case FLOW:
			return getFlow();

		case STAGE:
			return getStage();

		case IS_INCOME:
			return isIsIncome();

		case IS_FREEZE:
			return isIsFreeze();

		case SERIAL_ID:
			return getSerialId();

		case TRIGGER:
			return getTrigger();

		case REL_ACC:
			return getRelAcc();

		case REL_UID:
			return getRelUid();

		case TASK_ID:
			return getTaskId();

		case IS_MAJOR:
			return isIsMajor();

		case IS_MAJOR_DONE:
			return isIsMajorDone();

		case TX_CONFIRM:
			return getTxConfirm();

		case TX_ID:
			return getTxId();

		case AMOUNT:
			return getAmount();

		case TX_FEE:
			return getTxFee();

		case BALANCE:
			return getBalance();

		case FREEZING:
			return getFreezing();

		case COMMENT:
			return getComment();

		case COMMENT_JSON:
			return getCommentJson();

		case TOTAL_INT:
			return getTotalInt();

		case IS_META:
			return isIsMeta();

		case IS_FOLD:
			return isIsFold();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value)
	 * and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ACCESSION:
			return isSetAccession();
		case UID:
			return isSetUid();
		case CREATE_TIME:
			return isSetCreateTime();
		case UPDATE_TIME:
			return isSetUpdateTime();
		case IS_FINISH:
			return isSetIsFinish();
		case PROJECT:
			return isSetProject();
		case CATEGORY:
			return isSetCategory();
		case STATUS:
			return isSetStatus();
		case ACTION:
			return isSetAction();
		case FLOW:
			return isSetFlow();
		case STAGE:
			return isSetStage();
		case IS_INCOME:
			return isSetIsIncome();
		case IS_FREEZE:
			return isSetIsFreeze();
		case SERIAL_ID:
			return isSetSerialId();
		case TRIGGER:
			return isSetTrigger();
		case REL_ACC:
			return isSetRelAcc();
		case REL_UID:
			return isSetRelUid();
		case TASK_ID:
			return isSetTaskId();
		case IS_MAJOR:
			return isSetIsMajor();
		case IS_MAJOR_DONE:
			return isSetIsMajorDone();
		case TX_CONFIRM:
			return isSetTxConfirm();
		case TX_ID:
			return isSetTxId();
		case AMOUNT:
			return isSetAmount();
		case TX_FEE:
			return isSetTxFee();
		case BALANCE:
			return isSetBalance();
		case FREEZING:
			return isSetFreezing();
		case COMMENT:
			return isSetComment();
		case COMMENT_JSON:
			return isSetCommentJson();
		case TOTAL_INT:
			return isSetTotalInt();
		case IS_META:
			return isSetIsMeta();
		case IS_FOLD:
			return isSetIsFold();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof WalletFlow)
			return this.equals((WalletFlow) that);
		return false;
	}

	public boolean equals(WalletFlow that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_accession = true && this.isSetAccession();
		boolean that_present_accession = true && that.isSetAccession();
		if (this_present_accession || that_present_accession) {
			if (!(this_present_accession && that_present_accession))
				return false;
			if (!this.accession.equals(that.accession))
				return false;
		}

		boolean this_present_uid = true && this.isSetUid();
		boolean that_present_uid = true && that.isSetUid();
		if (this_present_uid || that_present_uid) {
			if (!(this_present_uid && that_present_uid))
				return false;
			if (!this.uid.equals(that.uid))
				return false;
		}

		boolean this_present_createTime = true && this.isSetCreateTime();
		boolean that_present_createTime = true && that.isSetCreateTime();
		if (this_present_createTime || that_present_createTime) {
			if (!(this_present_createTime && that_present_createTime))
				return false;
			if (!this.createTime.equals(that.createTime))
				return false;
		}

		boolean this_present_updateTime = true && this.isSetUpdateTime();
		boolean that_present_updateTime = true && that.isSetUpdateTime();
		if (this_present_updateTime || that_present_updateTime) {
			if (!(this_present_updateTime && that_present_updateTime))
				return false;
			if (!this.updateTime.equals(that.updateTime))
				return false;
		}

		boolean this_present_isFinish = true;
		boolean that_present_isFinish = true;
		if (this_present_isFinish || that_present_isFinish) {
			if (!(this_present_isFinish && that_present_isFinish))
				return false;
			if (this.isFinish != that.isFinish)
				return false;
		}

		boolean this_present_project = true && this.isSetProject();
		boolean that_present_project = true && that.isSetProject();
		if (this_present_project || that_present_project) {
			if (!(this_present_project && that_present_project))
				return false;
			if (!this.project.equals(that.project))
				return false;
		}

		boolean this_present_category = true && this.isSetCategory();
		boolean that_present_category = true && that.isSetCategory();
		if (this_present_category || that_present_category) {
			if (!(this_present_category && that_present_category))
				return false;
			if (!this.category.equals(that.category))
				return false;
		}

		boolean this_present_status = true;
		boolean that_present_status = true;
		if (this_present_status || that_present_status) {
			if (!(this_present_status && that_present_status))
				return false;
			if (this.status != that.status)
				return false;
		}

		boolean this_present_action = true && this.isSetAction();
		boolean that_present_action = true && that.isSetAction();
		if (this_present_action || that_present_action) {
			if (!(this_present_action && that_present_action))
				return false;
			if (!this.action.equals(that.action))
				return false;
		}

		boolean this_present_flow = true && this.isSetFlow();
		boolean that_present_flow = true && that.isSetFlow();
		if (this_present_flow || that_present_flow) {
			if (!(this_present_flow && that_present_flow))
				return false;
			if (!this.flow.equals(that.flow))
				return false;
		}

		boolean this_present_stage = true && this.isSetStage();
		boolean that_present_stage = true && that.isSetStage();
		if (this_present_stage || that_present_stage) {
			if (!(this_present_stage && that_present_stage))
				return false;
			if (!this.stage.equals(that.stage))
				return false;
		}

		boolean this_present_isIncome = true;
		boolean that_present_isIncome = true;
		if (this_present_isIncome || that_present_isIncome) {
			if (!(this_present_isIncome && that_present_isIncome))
				return false;
			if (this.isIncome != that.isIncome)
				return false;
		}

		boolean this_present_isFreeze = true;
		boolean that_present_isFreeze = true;
		if (this_present_isFreeze || that_present_isFreeze) {
			if (!(this_present_isFreeze && that_present_isFreeze))
				return false;
			if (this.isFreeze != that.isFreeze)
				return false;
		}

		boolean this_present_serialId = true && this.isSetSerialId();
		boolean that_present_serialId = true && that.isSetSerialId();
		if (this_present_serialId || that_present_serialId) {
			if (!(this_present_serialId && that_present_serialId))
				return false;
			if (!this.serialId.equals(that.serialId))
				return false;
		}

		boolean this_present_trigger = true && this.isSetTrigger();
		boolean that_present_trigger = true && that.isSetTrigger();
		if (this_present_trigger || that_present_trigger) {
			if (!(this_present_trigger && that_present_trigger))
				return false;
			if (!this.trigger.equals(that.trigger))
				return false;
		}

		boolean this_present_relAcc = true && this.isSetRelAcc();
		boolean that_present_relAcc = true && that.isSetRelAcc();
		if (this_present_relAcc || that_present_relAcc) {
			if (!(this_present_relAcc && that_present_relAcc))
				return false;
			if (!this.relAcc.equals(that.relAcc))
				return false;
		}

		boolean this_present_relUid = true && this.isSetRelUid();
		boolean that_present_relUid = true && that.isSetRelUid();
		if (this_present_relUid || that_present_relUid) {
			if (!(this_present_relUid && that_present_relUid))
				return false;
			if (!this.relUid.equals(that.relUid))
				return false;
		}

		boolean this_present_taskId = true && this.isSetTaskId();
		boolean that_present_taskId = true && that.isSetTaskId();
		if (this_present_taskId || that_present_taskId) {
			if (!(this_present_taskId && that_present_taskId))
				return false;
			if (!this.taskId.equals(that.taskId))
				return false;
		}

		boolean this_present_isMajor = true;
		boolean that_present_isMajor = true;
		if (this_present_isMajor || that_present_isMajor) {
			if (!(this_present_isMajor && that_present_isMajor))
				return false;
			if (this.isMajor != that.isMajor)
				return false;
		}

		boolean this_present_isMajorDone = true;
		boolean that_present_isMajorDone = true;
		if (this_present_isMajorDone || that_present_isMajorDone) {
			if (!(this_present_isMajorDone && that_present_isMajorDone))
				return false;
			if (this.isMajorDone != that.isMajorDone)
				return false;
		}

		boolean this_present_txConfirm = true;
		boolean that_present_txConfirm = true;
		if (this_present_txConfirm || that_present_txConfirm) {
			if (!(this_present_txConfirm && that_present_txConfirm))
				return false;
			if (this.txConfirm != that.txConfirm)
				return false;
		}

		boolean this_present_txId = true && this.isSetTxId();
		boolean that_present_txId = true && that.isSetTxId();
		if (this_present_txId || that_present_txId) {
			if (!(this_present_txId && that_present_txId))
				return false;
			if (!this.txId.equals(that.txId))
				return false;
		}

		boolean this_present_amount = true;
		boolean that_present_amount = true;
		if (this_present_amount || that_present_amount) {
			if (!(this_present_amount && that_present_amount))
				return false;
			if (this.amount != that.amount)
				return false;
		}

		boolean this_present_txFee = true;
		boolean that_present_txFee = true;
		if (this_present_txFee || that_present_txFee) {
			if (!(this_present_txFee && that_present_txFee))
				return false;
			if (this.txFee != that.txFee)
				return false;
		}

		boolean this_present_balance = true;
		boolean that_present_balance = true;
		if (this_present_balance || that_present_balance) {
			if (!(this_present_balance && that_present_balance))
				return false;
			if (this.balance != that.balance)
				return false;
		}

		boolean this_present_freezing = true;
		boolean that_present_freezing = true;
		if (this_present_freezing || that_present_freezing) {
			if (!(this_present_freezing && that_present_freezing))
				return false;
			if (this.freezing != that.freezing)
				return false;
		}

		boolean this_present_comment = true && this.isSetComment();
		boolean that_present_comment = true && that.isSetComment();
		if (this_present_comment || that_present_comment) {
			if (!(this_present_comment && that_present_comment))
				return false;
			if (!this.comment.equals(that.comment))
				return false;
		}

		boolean this_present_commentJson = true && this.isSetCommentJson();
		boolean that_present_commentJson = true && that.isSetCommentJson();
		if (this_present_commentJson || that_present_commentJson) {
			if (!(this_present_commentJson && that_present_commentJson))
				return false;
			if (!this.commentJson.equals(that.commentJson))
				return false;
		}

		boolean this_present_totalInt = true;
		boolean that_present_totalInt = true;
		if (this_present_totalInt || that_present_totalInt) {
			if (!(this_present_totalInt && that_present_totalInt))
				return false;
			if (this.totalInt != that.totalInt)
				return false;
		}

		boolean this_present_isMeta = true;
		boolean that_present_isMeta = true;
		if (this_present_isMeta || that_present_isMeta) {
			if (!(this_present_isMeta && that_present_isMeta))
				return false;
			if (this.isMeta != that.isMeta)
				return false;
		}

		boolean this_present_isFold = true;
		boolean that_present_isFold = true;
		if (this_present_isFold || that_present_isFold) {
			if (!(this_present_isFold && that_present_isFold))
				return false;
			if (this.isFold != that.isFold)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetAccession()) ? 131071 : 524287);
		if (isSetAccession())
			hashCode = hashCode * 8191 + accession.hashCode();

		hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
		if (isSetUid())
			hashCode = hashCode * 8191 + uid.hashCode();

		hashCode = hashCode * 8191 + ((isSetCreateTime()) ? 131071 : 524287);
		if (isSetCreateTime())
			hashCode = hashCode * 8191 + createTime.hashCode();

		hashCode = hashCode * 8191 + ((isSetUpdateTime()) ? 131071 : 524287);
		if (isSetUpdateTime())
			hashCode = hashCode * 8191 + updateTime.hashCode();

		hashCode = hashCode * 8191 + ((isFinish) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetProject()) ? 131071 : 524287);
		if (isSetProject())
			hashCode = hashCode * 8191 + project.hashCode();

		hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
		if (isSetCategory())
			hashCode = hashCode * 8191 + category.hashCode();

		hashCode = hashCode * 8191 + status;

		hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
		if (isSetAction())
			hashCode = hashCode * 8191 + action.hashCode();

		hashCode = hashCode * 8191 + ((isSetFlow()) ? 131071 : 524287);
		if (isSetFlow())
			hashCode = hashCode * 8191 + flow.hashCode();

		hashCode = hashCode * 8191 + ((isSetStage()) ? 131071 : 524287);
		if (isSetStage())
			hashCode = hashCode * 8191 + stage.hashCode();

		hashCode = hashCode * 8191 + ((isIncome) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isFreeze) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isSetSerialId()) ? 131071 : 524287);
		if (isSetSerialId())
			hashCode = hashCode * 8191 + serialId.hashCode();

		hashCode = hashCode * 8191 + ((isSetTrigger()) ? 131071 : 524287);
		if (isSetTrigger())
			hashCode = hashCode * 8191 + trigger.hashCode();

		hashCode = hashCode * 8191 + ((isSetRelAcc()) ? 131071 : 524287);
		if (isSetRelAcc())
			hashCode = hashCode * 8191 + relAcc.hashCode();

		hashCode = hashCode * 8191 + ((isSetRelUid()) ? 131071 : 524287);
		if (isSetRelUid())
			hashCode = hashCode * 8191 + relUid.hashCode();

		hashCode = hashCode * 8191 + ((isSetTaskId()) ? 131071 : 524287);
		if (isSetTaskId())
			hashCode = hashCode * 8191 + taskId.hashCode();

		hashCode = hashCode * 8191 + ((isMajor) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isMajorDone) ? 131071 : 524287);

		hashCode = hashCode * 8191 + txConfirm;

		hashCode = hashCode * 8191 + ((isSetTxId()) ? 131071 : 524287);
		if (isSetTxId())
			hashCode = hashCode * 8191 + txId.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txFee);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(balance);

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(freezing);

		hashCode = hashCode * 8191 + ((isSetComment()) ? 131071 : 524287);
		if (isSetComment())
			hashCode = hashCode * 8191 + comment.hashCode();

		hashCode = hashCode * 8191 + ((isSetCommentJson()) ? 131071 : 524287);
		if (isSetCommentJson())
			hashCode = hashCode * 8191 + commentJson.hashCode();

		hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(totalInt);

		hashCode = hashCode * 8191 + ((isMeta) ? 131071 : 524287);

		hashCode = hashCode * 8191 + ((isFold) ? 131071 : 524287);

		return hashCode;
	}

	@Override
	public int compareTo(WalletFlow other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetAccession()).compareTo(other.isSetAccession());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAccession()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accession, other.accession);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCreateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetUpdateTime()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsFinish()).compareTo(other.isSetIsFinish());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsFinish()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFinish, other.isFinish);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetProject()).compareTo(other.isSetProject());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetProject()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.project, other.project);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCategory()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStatus()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAction()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFlow()).compareTo(other.isSetFlow());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFlow()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flow, other.flow);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetStage()).compareTo(other.isSetStage());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStage()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stage, other.stage);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsIncome()).compareTo(other.isSetIsIncome());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsIncome()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isIncome, other.isIncome);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsFreeze()).compareTo(other.isSetIsFreeze());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsFreeze()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFreeze, other.isFreeze);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetSerialId()).compareTo(other.isSetSerialId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSerialId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialId, other.serialId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTrigger()).compareTo(other.isSetTrigger());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTrigger()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trigger, other.trigger);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRelAcc()).compareTo(other.isSetRelAcc());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRelAcc()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relAcc, other.relAcc);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetRelUid()).compareTo(other.isSetRelUid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRelUid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relUid, other.relUid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTaskId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsMajor()).compareTo(other.isSetIsMajor());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsMajor()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMajor, other.isMajor);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsMajorDone()).compareTo(other.isSetIsMajorDone());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsMajorDone()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMajorDone, other.isMajorDone);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTxConfirm()).compareTo(other.isSetTxConfirm());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTxConfirm()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txConfirm, other.txConfirm);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTxId()).compareTo(other.isSetTxId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTxId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txId, other.txId);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAmount()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTxFee()).compareTo(other.isSetTxFee());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTxFee()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txFee, other.txFee);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBalance()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetFreezing()).compareTo(other.isSetFreezing());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFreezing()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezing, other.freezing);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetComment()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetCommentJson()).compareTo(other.isSetCommentJson());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCommentJson()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commentJson, other.commentJson);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetTotalInt()).compareTo(other.isSetTotalInt());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTotalInt()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalInt, other.totalInt);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsMeta()).compareTo(other.isSetIsMeta());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsMeta()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMeta, other.isMeta);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetIsFold()).compareTo(other.isSetIsFold());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsFold()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFold, other.isFold);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	@org.apache.thrift.annotation.Nullable
	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("WalletFlow(");
		boolean first = true;

		sb.append("accession:");
		if (this.accession == null) {
			sb.append("null");
		}
		else {
			sb.append(this.accession);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("uid:");
		if (this.uid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.uid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("createTime:");
		if (this.createTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.createTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("updateTime:");
		if (this.updateTime == null) {
			sb.append("null");
		}
		else {
			sb.append(this.updateTime);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isFinish:");
		sb.append(this.isFinish);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("project:");
		if (this.project == null) {
			sb.append("null");
		}
		else {
			sb.append(this.project);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("category:");
		if (this.category == null) {
			sb.append("null");
		}
		else {
			sb.append(this.category);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("status:");
		sb.append(this.status);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("action:");
		if (this.action == null) {
			sb.append("null");
		}
		else {
			sb.append(this.action);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("flow:");
		if (this.flow == null) {
			sb.append("null");
		}
		else {
			sb.append(this.flow);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("stage:");
		if (this.stage == null) {
			sb.append("null");
		}
		else {
			sb.append(this.stage);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isIncome:");
		sb.append(this.isIncome);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isFreeze:");
		sb.append(this.isFreeze);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("serialId:");
		if (this.serialId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.serialId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("trigger:");
		if (this.trigger == null) {
			sb.append("null");
		}
		else {
			sb.append(this.trigger);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("relAcc:");
		if (this.relAcc == null) {
			sb.append("null");
		}
		else {
			sb.append(this.relAcc);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("relUid:");
		if (this.relUid == null) {
			sb.append("null");
		}
		else {
			sb.append(this.relUid);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("taskId:");
		if (this.taskId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.taskId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isMajor:");
		sb.append(this.isMajor);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isMajorDone:");
		sb.append(this.isMajorDone);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("txConfirm:");
		sb.append(this.txConfirm);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("txId:");
		if (this.txId == null) {
			sb.append("null");
		}
		else {
			sb.append(this.txId);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("amount:");
		sb.append(this.amount);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("txFee:");
		sb.append(this.txFee);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("balance:");
		sb.append(this.balance);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("freezing:");
		sb.append(this.freezing);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("comment:");
		if (this.comment == null) {
			sb.append("null");
		}
		else {
			sb.append(this.comment);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("commentJson:");
		if (this.commentJson == null) {
			sb.append("null");
		}
		else {
			sb.append(this.commentJson);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("totalInt:");
		sb.append(this.totalInt);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isMeta:");
		sb.append(this.isMeta);
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("isFold:");
		sb.append(this.isFold);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is
			// wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		}
		catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class WalletFlowStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletFlowStandardScheme getScheme() {
			return new WalletFlowStandardScheme();
		}

	}

	private static class WalletFlowStandardScheme extends org.apache.thrift.scheme.StandardScheme<WalletFlow> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, WalletFlow struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ACCESSION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.accession = iprot.readString();
						struct.setAccessionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.uid = iprot.readString();
						struct.setUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // CREATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.createTime = iprot.readString();
						struct.setCreateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 4: // UPDATE_TIME
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.updateTime = iprot.readString();
						struct.setUpdateTimeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 5: // IS_FINISH
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isFinish = iprot.readBool();
						struct.setIsFinishIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 6: // PROJECT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.project = iprot.readString();
						struct.setProjectIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 7: // CATEGORY
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.category = iprot.readString();
						struct.setCategoryIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 8: // STATUS
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.status = iprot.readI32();
						struct.setStatusIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 9: // ACTION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.action = iprot.readString();
						struct.setActionIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 10: // FLOW
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.flow = iprot.readString();
						struct.setFlowIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 11: // STAGE
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.stage = iprot.readString();
						struct.setStageIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 12: // IS_INCOME
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isIncome = iprot.readBool();
						struct.setIsIncomeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 13: // IS_FREEZE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isFreeze = iprot.readBool();
						struct.setIsFreezeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 14: // SERIAL_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.serialId = iprot.readString();
						struct.setSerialIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 15: // TRIGGER
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.trigger = iprot.readString();
						struct.setTriggerIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 16: // REL_ACC
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.relAcc = iprot.readString();
						struct.setRelAccIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 17: // REL_UID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.relUid = iprot.readString();
						struct.setRelUidIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 18: // TASK_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.taskId = iprot.readString();
						struct.setTaskIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 19: // IS_MAJOR
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isMajor = iprot.readBool();
						struct.setIsMajorIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 20: // IS_MAJOR_DONE
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isMajorDone = iprot.readBool();
						struct.setIsMajorDoneIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 21: // TX_CONFIRM
					if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
						struct.txConfirm = iprot.readI32();
						struct.setTxConfirmIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 22: // TX_ID
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.txId = iprot.readString();
						struct.setTxIdIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 23: // AMOUNT
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.amount = iprot.readDouble();
						struct.setAmountIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 24: // TX_FEE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.txFee = iprot.readDouble();
						struct.setTxFeeIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 25: // BALANCE
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.balance = iprot.readDouble();
						struct.setBalanceIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 26: // FREEZING
					if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
						struct.freezing = iprot.readDouble();
						struct.setFreezingIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 27: // COMMENT
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.comment = iprot.readString();
						struct.setCommentIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 28: // COMMENT_JSON
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.commentJson = iprot.readString();
						struct.setCommentJsonIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 29: // TOTAL_INT
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.totalInt = iprot.readI64();
						struct.setTotalIntIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 30: // IS_META
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isMeta = iprot.readBool();
						struct.setIsMetaIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 31: // IS_FOLD
					if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
						struct.isFold = iprot.readBool();
						struct.setIsFoldIsSet(true);
					}
					else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, WalletFlow struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.accession != null) {
				oprot.writeFieldBegin(ACCESSION_FIELD_DESC);
				oprot.writeString(struct.accession);
				oprot.writeFieldEnd();
			}
			if (struct.uid != null) {
				oprot.writeFieldBegin(UID_FIELD_DESC);
				oprot.writeString(struct.uid);
				oprot.writeFieldEnd();
			}
			if (struct.createTime != null) {
				oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
				oprot.writeString(struct.createTime);
				oprot.writeFieldEnd();
			}
			if (struct.updateTime != null) {
				oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
				oprot.writeString(struct.updateTime);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_FINISH_FIELD_DESC);
			oprot.writeBool(struct.isFinish);
			oprot.writeFieldEnd();
			if (struct.project != null) {
				oprot.writeFieldBegin(PROJECT_FIELD_DESC);
				oprot.writeString(struct.project);
				oprot.writeFieldEnd();
			}
			if (struct.category != null) {
				oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
				oprot.writeString(struct.category);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(STATUS_FIELD_DESC);
			oprot.writeI32(struct.status);
			oprot.writeFieldEnd();
			if (struct.action != null) {
				oprot.writeFieldBegin(ACTION_FIELD_DESC);
				oprot.writeString(struct.action);
				oprot.writeFieldEnd();
			}
			if (struct.flow != null) {
				oprot.writeFieldBegin(FLOW_FIELD_DESC);
				oprot.writeString(struct.flow);
				oprot.writeFieldEnd();
			}
			if (struct.stage != null) {
				oprot.writeFieldBegin(STAGE_FIELD_DESC);
				oprot.writeString(struct.stage);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_INCOME_FIELD_DESC);
			oprot.writeBool(struct.isIncome);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_FREEZE_FIELD_DESC);
			oprot.writeBool(struct.isFreeze);
			oprot.writeFieldEnd();
			if (struct.serialId != null) {
				oprot.writeFieldBegin(SERIAL_ID_FIELD_DESC);
				oprot.writeString(struct.serialId);
				oprot.writeFieldEnd();
			}
			if (struct.trigger != null) {
				oprot.writeFieldBegin(TRIGGER_FIELD_DESC);
				oprot.writeString(struct.trigger);
				oprot.writeFieldEnd();
			}
			if (struct.relAcc != null) {
				oprot.writeFieldBegin(REL_ACC_FIELD_DESC);
				oprot.writeString(struct.relAcc);
				oprot.writeFieldEnd();
			}
			if (struct.relUid != null) {
				oprot.writeFieldBegin(REL_UID_FIELD_DESC);
				oprot.writeString(struct.relUid);
				oprot.writeFieldEnd();
			}
			if (struct.taskId != null) {
				oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
				oprot.writeString(struct.taskId);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(IS_MAJOR_FIELD_DESC);
			oprot.writeBool(struct.isMajor);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_MAJOR_DONE_FIELD_DESC);
			oprot.writeBool(struct.isMajorDone);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(TX_CONFIRM_FIELD_DESC);
			oprot.writeI32(struct.txConfirm);
			oprot.writeFieldEnd();
			if (struct.txId != null) {
				oprot.writeFieldBegin(TX_ID_FIELD_DESC);
				oprot.writeString(struct.txId);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
			oprot.writeDouble(struct.amount);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(TX_FEE_FIELD_DESC);
			oprot.writeDouble(struct.txFee);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(BALANCE_FIELD_DESC);
			oprot.writeDouble(struct.balance);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(FREEZING_FIELD_DESC);
			oprot.writeDouble(struct.freezing);
			oprot.writeFieldEnd();
			if (struct.comment != null) {
				oprot.writeFieldBegin(COMMENT_FIELD_DESC);
				oprot.writeString(struct.comment);
				oprot.writeFieldEnd();
			}
			if (struct.commentJson != null) {
				oprot.writeFieldBegin(COMMENT_JSON_FIELD_DESC);
				oprot.writeString(struct.commentJson);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(TOTAL_INT_FIELD_DESC);
			oprot.writeI64(struct.totalInt);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_META_FIELD_DESC);
			oprot.writeBool(struct.isMeta);
			oprot.writeFieldEnd();
			oprot.writeFieldBegin(IS_FOLD_FIELD_DESC);
			oprot.writeBool(struct.isFold);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class WalletFlowTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {

		public WalletFlowTupleScheme getScheme() {
			return new WalletFlowTupleScheme();
		}

	}

	private static class WalletFlowTupleScheme extends org.apache.thrift.scheme.TupleScheme<WalletFlow> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, WalletFlow struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet optionals = new java.util.BitSet();
			if (struct.isSetAccession()) {
				optionals.set(0);
			}
			if (struct.isSetUid()) {
				optionals.set(1);
			}
			if (struct.isSetCreateTime()) {
				optionals.set(2);
			}
			if (struct.isSetUpdateTime()) {
				optionals.set(3);
			}
			if (struct.isSetIsFinish()) {
				optionals.set(4);
			}
			if (struct.isSetProject()) {
				optionals.set(5);
			}
			if (struct.isSetCategory()) {
				optionals.set(6);
			}
			if (struct.isSetStatus()) {
				optionals.set(7);
			}
			if (struct.isSetAction()) {
				optionals.set(8);
			}
			if (struct.isSetFlow()) {
				optionals.set(9);
			}
			if (struct.isSetStage()) {
				optionals.set(10);
			}
			if (struct.isSetIsIncome()) {
				optionals.set(11);
			}
			if (struct.isSetIsFreeze()) {
				optionals.set(12);
			}
			if (struct.isSetSerialId()) {
				optionals.set(13);
			}
			if (struct.isSetTrigger()) {
				optionals.set(14);
			}
			if (struct.isSetRelAcc()) {
				optionals.set(15);
			}
			if (struct.isSetRelUid()) {
				optionals.set(16);
			}
			if (struct.isSetTaskId()) {
				optionals.set(17);
			}
			if (struct.isSetIsMajor()) {
				optionals.set(18);
			}
			if (struct.isSetIsMajorDone()) {
				optionals.set(19);
			}
			if (struct.isSetTxConfirm()) {
				optionals.set(20);
			}
			if (struct.isSetTxId()) {
				optionals.set(21);
			}
			if (struct.isSetAmount()) {
				optionals.set(22);
			}
			if (struct.isSetTxFee()) {
				optionals.set(23);
			}
			if (struct.isSetBalance()) {
				optionals.set(24);
			}
			if (struct.isSetFreezing()) {
				optionals.set(25);
			}
			if (struct.isSetComment()) {
				optionals.set(26);
			}
			if (struct.isSetCommentJson()) {
				optionals.set(27);
			}
			if (struct.isSetTotalInt()) {
				optionals.set(28);
			}
			if (struct.isSetIsMeta()) {
				optionals.set(29);
			}
			if (struct.isSetIsFold()) {
				optionals.set(30);
			}
			oprot.writeBitSet(optionals, 31);
			if (struct.isSetAccession()) {
				oprot.writeString(struct.accession);
			}
			if (struct.isSetUid()) {
				oprot.writeString(struct.uid);
			}
			if (struct.isSetCreateTime()) {
				oprot.writeString(struct.createTime);
			}
			if (struct.isSetUpdateTime()) {
				oprot.writeString(struct.updateTime);
			}
			if (struct.isSetIsFinish()) {
				oprot.writeBool(struct.isFinish);
			}
			if (struct.isSetProject()) {
				oprot.writeString(struct.project);
			}
			if (struct.isSetCategory()) {
				oprot.writeString(struct.category);
			}
			if (struct.isSetStatus()) {
				oprot.writeI32(struct.status);
			}
			if (struct.isSetAction()) {
				oprot.writeString(struct.action);
			}
			if (struct.isSetFlow()) {
				oprot.writeString(struct.flow);
			}
			if (struct.isSetStage()) {
				oprot.writeString(struct.stage);
			}
			if (struct.isSetIsIncome()) {
				oprot.writeBool(struct.isIncome);
			}
			if (struct.isSetIsFreeze()) {
				oprot.writeBool(struct.isFreeze);
			}
			if (struct.isSetSerialId()) {
				oprot.writeString(struct.serialId);
			}
			if (struct.isSetTrigger()) {
				oprot.writeString(struct.trigger);
			}
			if (struct.isSetRelAcc()) {
				oprot.writeString(struct.relAcc);
			}
			if (struct.isSetRelUid()) {
				oprot.writeString(struct.relUid);
			}
			if (struct.isSetTaskId()) {
				oprot.writeString(struct.taskId);
			}
			if (struct.isSetIsMajor()) {
				oprot.writeBool(struct.isMajor);
			}
			if (struct.isSetIsMajorDone()) {
				oprot.writeBool(struct.isMajorDone);
			}
			if (struct.isSetTxConfirm()) {
				oprot.writeI32(struct.txConfirm);
			}
			if (struct.isSetTxId()) {
				oprot.writeString(struct.txId);
			}
			if (struct.isSetAmount()) {
				oprot.writeDouble(struct.amount);
			}
			if (struct.isSetTxFee()) {
				oprot.writeDouble(struct.txFee);
			}
			if (struct.isSetBalance()) {
				oprot.writeDouble(struct.balance);
			}
			if (struct.isSetFreezing()) {
				oprot.writeDouble(struct.freezing);
			}
			if (struct.isSetComment()) {
				oprot.writeString(struct.comment);
			}
			if (struct.isSetCommentJson()) {
				oprot.writeString(struct.commentJson);
			}
			if (struct.isSetTotalInt()) {
				oprot.writeI64(struct.totalInt);
			}
			if (struct.isSetIsMeta()) {
				oprot.writeBool(struct.isMeta);
			}
			if (struct.isSetIsFold()) {
				oprot.writeBool(struct.isFold);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, WalletFlow struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			java.util.BitSet incoming = iprot.readBitSet(31);
			if (incoming.get(0)) {
				struct.accession = iprot.readString();
				struct.setAccessionIsSet(true);
			}
			if (incoming.get(1)) {
				struct.uid = iprot.readString();
				struct.setUidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.createTime = iprot.readString();
				struct.setCreateTimeIsSet(true);
			}
			if (incoming.get(3)) {
				struct.updateTime = iprot.readString();
				struct.setUpdateTimeIsSet(true);
			}
			if (incoming.get(4)) {
				struct.isFinish = iprot.readBool();
				struct.setIsFinishIsSet(true);
			}
			if (incoming.get(5)) {
				struct.project = iprot.readString();
				struct.setProjectIsSet(true);
			}
			if (incoming.get(6)) {
				struct.category = iprot.readString();
				struct.setCategoryIsSet(true);
			}
			if (incoming.get(7)) {
				struct.status = iprot.readI32();
				struct.setStatusIsSet(true);
			}
			if (incoming.get(8)) {
				struct.action = iprot.readString();
				struct.setActionIsSet(true);
			}
			if (incoming.get(9)) {
				struct.flow = iprot.readString();
				struct.setFlowIsSet(true);
			}
			if (incoming.get(10)) {
				struct.stage = iprot.readString();
				struct.setStageIsSet(true);
			}
			if (incoming.get(11)) {
				struct.isIncome = iprot.readBool();
				struct.setIsIncomeIsSet(true);
			}
			if (incoming.get(12)) {
				struct.isFreeze = iprot.readBool();
				struct.setIsFreezeIsSet(true);
			}
			if (incoming.get(13)) {
				struct.serialId = iprot.readString();
				struct.setSerialIdIsSet(true);
			}
			if (incoming.get(14)) {
				struct.trigger = iprot.readString();
				struct.setTriggerIsSet(true);
			}
			if (incoming.get(15)) {
				struct.relAcc = iprot.readString();
				struct.setRelAccIsSet(true);
			}
			if (incoming.get(16)) {
				struct.relUid = iprot.readString();
				struct.setRelUidIsSet(true);
			}
			if (incoming.get(17)) {
				struct.taskId = iprot.readString();
				struct.setTaskIdIsSet(true);
			}
			if (incoming.get(18)) {
				struct.isMajor = iprot.readBool();
				struct.setIsMajorIsSet(true);
			}
			if (incoming.get(19)) {
				struct.isMajorDone = iprot.readBool();
				struct.setIsMajorDoneIsSet(true);
			}
			if (incoming.get(20)) {
				struct.txConfirm = iprot.readI32();
				struct.setTxConfirmIsSet(true);
			}
			if (incoming.get(21)) {
				struct.txId = iprot.readString();
				struct.setTxIdIsSet(true);
			}
			if (incoming.get(22)) {
				struct.amount = iprot.readDouble();
				struct.setAmountIsSet(true);
			}
			if (incoming.get(23)) {
				struct.txFee = iprot.readDouble();
				struct.setTxFeeIsSet(true);
			}
			if (incoming.get(24)) {
				struct.balance = iprot.readDouble();
				struct.setBalanceIsSet(true);
			}
			if (incoming.get(25)) {
				struct.freezing = iprot.readDouble();
				struct.setFreezingIsSet(true);
			}
			if (incoming.get(26)) {
				struct.comment = iprot.readString();
				struct.setCommentIsSet(true);
			}
			if (incoming.get(27)) {
				struct.commentJson = iprot.readString();
				struct.setCommentJsonIsSet(true);
			}
			if (incoming.get(28)) {
				struct.totalInt = iprot.readI64();
				struct.setTotalIntIsSet(true);
			}
			if (incoming.get(29)) {
				struct.isMeta = iprot.readBool();
				struct.setIsMetaIsSet(true);
			}
			if (incoming.get(30)) {
				struct.isFold = iprot.readBool();
				struct.setIsFoldIsSet(true);
			}
		}

	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}

}
